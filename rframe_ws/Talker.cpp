// 
//  this notice is just to let you know this file was created by
//  a helper script, you may edit this file.
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:40:30 -0500
//  From Template/Script: module_templates/ModuleTemplate.cpp.rb
 
/*
  CTA RIGHTS
  
  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.
  
  GOVERNMENT PURPOSE RIGHTS
  
  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157
  
  Expiration Date - None
  
  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.
  
  
  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "Talker.h"
#include <common/ModuleVersion.h>
#include <std_msgs/std_msgs_gencpp_Library.h>
#include <nav_msgs/Odometry.h>
#include <sensor_msgs/LaserScan.h>


using namespace std;
using namespace rframe;
using namespace rctamagic;

using namespace worldmodel;
using namespace worldmodel::metric::datatypes;
using namespace worldmodel::selfinfo::datatypes;
using namespace worldmodel::semantic::datatypes;


extern "C"
{
    /** library access method */
    MessagingClient * AllocateModule(rframe::ModuleVersion & modVersion)
    {
        modVersion.name("Talker");
        int versionMajor = VERSION_MAJOR;
        int versionMinor = VERSION_MINOR;
        int versionPatch = VERSION_PATCH;

        modVersion.major(versionMajor);
        modVersion.minor(versionMinor);
        modVersion.patch(versionPatch);

        return new Talker();
    }
}


Talker::Talker() : gotoWm("Talker")
{
    // set module base parameters here
    loopPeriod(1.0);
    counter = 0;
}


Talker::~Talker()
{
}


int Talker::onConfigure(Configuration & config)
{
    int retval = Error::SUCCESS;

    if ((retval = MessagingClient::onConfigure(config)) == Error::SUCCESS)
    {
        if (state() == Module::UNINITIALIZED)
        {
	        // load startup only config options here
        }

		// load reloadable config options here
    }

    return retval;
}


int Talker::onInitialize()
{
    int retval = Error::SUCCESS;

    MOD_ENTER(INF);

    if ((retval = MessagingClient::onInitialize()) == Error::SUCCESS)
    {
        // register to server/publish data here
		/*ConnectionOptions options;
        options.server(ConnectionOptions::ME);
        MOD_DEBUG("Initiallized");
        if ((retval = registerWrite<std_msgs::String>(options,"/chatter")) != Error::SUCCESS)
        {
            MOD_CRIT("failed to open chatter");
        }
        if ((retval = registerWrite<std_msgs::Int64>(options,"/number")) != Error::SUCCESS)
        {
            MOD_CRIT("failed to open number");
        }*/



		//registering to read Hokuyo data
		rframe::ConnectionOptions hokReadOptions;
		hokReadOptions.server(ConnectionOptions::NOTME); 
		hokReadOptions.queueStyle(ConnectionOptions::LATEST); 
		if((retval = registerRead<>(hokReadOptions, rctamagic::HOKDATA_NAME, &Talker::hokdataCallback,this)) != Error::SUCCESS) { 
		
			cout << "failed to open hokdata reader " << ERRSTR(retval) << endl; 	
			MOD_CRIT("failed to open hokdata reader"); 
 
		} else { 
			MOD_INFO("Talker registered for hokdata reading"); 
		}


/*
		//register to read navdata
		rframe::ConnectionOptions navdata2ReadOptions; 
		navdata2ReadOptions.pollPeriod((double) 1.0); 
    	if((retval = registerRead<Talker,NAVDATA2>(navdata2ReadOptions, NAVDATA2_NAME, &Talker::navdata2Callback,this)) != Error::SUCCESS) 
		{ 
			cout << "failed to open navdata2 read callback " << ERRSTR(retval) << endl; 
			MOD_CRIT("failed to open navdata2 read callback"); 
			//exit(-5); 
	    } else { 
			MOD_INFO("Talker registered for navdata reading"); 
		}

*/


	    ConnectionOptions Odom_options;
        Odom_options.server(ConnectionOptions::ME);
		if ((retval = registerWrite<nav_msgs::Odometry>(Odom_options,"/rframe_odom")) != Error::SUCCESS)
        {
            MOD_CRIT("Talker failed to open rframe_odom");
        }


		ConnectionOptions Scan_options;
        Scan_options.server(ConnectionOptions::ME);
		if ((retval = registerWrite<sensor_msgs::LaserScan>(Scan_options,"/rframe_scan")) != Error::SUCCESS)
        {
            MOD_CRIT("Talker failed to open rframe_scan");
        }



    }

    MOD_EXIT(INF);

    return retval;
}


int Talker::onStart()
{
    int retval = Error::SUCCESS;

    MOD_ENTER(INF);

    // perform startup operations here, such as allocating pools

    // start threads/async processing here, stop in stop()

    // register to read/subscribe to data here

    if (retval == Error::SUCCESS)
    {
        retval = MessagingClient::onStart();
    }

    MOD_EXIT(INF);

    return retval;
}


int Talker::onStop()
{
    int retval = Error::SUCCESS;

    MOD_ENTER(INF);

    // perform module stop here

    if (retval == Error::SUCCESS)
    {
        retval = MessagingClient::onStop();
    }

    MOD_EXIT(INF);

    return retval;
}


int Talker::onShutdown()
{
    int retval = Error::SUCCESS;

    MOD_ENTER(INF);

    // perform module shutdown here


    if (retval == Error::SUCCESS)
    {
        retval = MessagingClient::onShutdown();
    }

    MOD_EXIT(INF);

    return retval;
}


int Talker::onOnce()
{
    int retval = Error::SUCCESS;

    // check to see if period elapsed
    if (periodElapsed() == true)
    {
        // perform periodic processing here
        /*std_msgs::Int64 msg;
        msg.data = counter++;

        MOD_INFO("Number: " << msg.data);

        write(msg);*/


		//Get LIDAR data
		/*std::shared_ptr<MessageBase> hokdataMsg; 
		int hokdata_retval = Error::SUCCESS; 

		if((hokdata_retval = read(hokReadOptions, hokdataMsg)) != Error::SUCCESS) 
		{ 
			if(hokdata_retval == Error::NO_DATA_READY) 
			{ 
				cout << "no hok data ready" << endl; 
			} 
			else 
			{ 
				cout << "failed to read hokdata buffer" << endl; 
			}
		} 
		else 
		{ 
			Message<rctamagic::HOKDATA> * hokData; 
			hokData = static_cast<Message<rctamagic::HOKDATA>*>(hokdataMsg.get()); 

			rctamagic::HOKDATA &hokdataRef = hokData->payload(); 

			cout<<"Printing HOKDATA"<<endl;
			cout<<hokdataRef.toStr(true)<<endl;
		}*/


		//Try a different method of getting odom
		XOdom = 0.0; 
		YOdom = 0.0; 
		ThetaOdom = 0.0; 

		{
			rframe::ScopedObject<worldmodel::SelfBase> self;
		
			if(gotoWm.updateSelfBase(self) == rframe::Error::SUCCESS) {
				XOdom = self->absPose().translation().x();
				YOdom = self->absPose().translation().y();
				ThetaOdom = self->absRpy().yaw();

				MOD_INFO("Odom updated. X: "<<XOdom<<", Y: "<<YOdom<<", A: "<<ThetaOdom);
                               nav_msgs::Odometry odom;
                                 odom.header.stamp.sec = 0;
        odom.header.stamp.nsec = 0;
    odom.header.frame_id = "odom";

    //set the position
    odom.pose.pose.position.x = XOdom;
    odom.pose.pose.position.y = YOdom;
    odom.pose.pose.position.z = 0;
    odom.pose.pose.orientation.w = 1;
        odom.pose.pose.orientation.x = 2;
        odom.pose.pose.orientation.y = 3;
        odom.pose.pose.orientation.z = 2;

    //set the velocity
    odom.child_frame_id = "base_link";
    odom.twist.twist.linear.x = 1;
    odom.twist.twist.linear.y = 1;
        odom.twist.twist.linear.z = 1;
    odom.twist.twist.angular.x = 1;
        odom.twist.twist.angular.y = 1;
        odom.twist.twist.angular.z = 1;

        write(odom);

		   	}
		}
		

		MOD_INFO("Talker once called");


    }

    return retval;
}


void Talker::navdata2Callback(const std::shared_ptr<rctamagic::NAVDATA2 const> & msg) {  
	my_navdata2 = *msg; 
	MOD_INFO("NAVDATA recieved");

	//Trasfer to ros msg and publish
	nav_msgs::Odometry odom;
    odom.header.stamp.sec = my_navdata2.gmtSec;
	odom.header.stamp.nsec = my_navdata2.gmtMSec*1000;
    odom.header.frame_id = "odom";

    //set the position
    odom.pose.pose.position.x = my_navdata2.tranAbs.x;
    odom.pose.pose.position.y = my_navdata2.tranAbs.y;
    odom.pose.pose.position.z = my_navdata2.tranAbs.z;
    odom.pose.pose.orientation.w = my_navdata2.rotAbs.s;
	odom.pose.pose.orientation.x = my_navdata2.rotAbs.x;
	odom.pose.pose.orientation.y = my_navdata2.rotAbs.y;
	odom.pose.pose.orientation.z = my_navdata2.rotAbs.z;

    //set the velocity
    odom.child_frame_id = "base_link";
    odom.twist.twist.linear.x = my_navdata2.tranVel.x;
    odom.twist.twist.linear.y = my_navdata2.tranVel.y;
	odom.twist.twist.linear.z = my_navdata2.tranVel.z;
    odom.twist.twist.angular.x = my_navdata2.rpyRates.r;
	odom.twist.twist.angular.y = my_navdata2.rpyRates.p;
	odom.twist.twist.angular.z = my_navdata2.rpyRates.y;

	write(odom);

	return; 
}



void Talker::hokdataCallback(const std::shared_ptr<rctamagic::HOKDATA const> & msg) { 
	my_hokdata = *msg; 
	MOD_INFO("HOKDATA recieved");

	unsigned int num_readings = my_hokdata.relPoints_length;

	//populate the LaserScan message
	// details from https://www.hokuyo-aut.jp/02sensor/07scanner/utm_30lx_ew.html
    sensor_msgs::LaserScan scan;
    scan.header.stamp.sec = 0; //Need to be filled in by ROS probably?
	scan.header.stamp.nsec = 0;
    scan.header.frame_id = "laser_frame";
    scan.angle_min = -(270/2) * (3.14159/360);
    scan.angle_max = (270/2) * (3.14159/360);
    scan.angle_increment = 0.25 * (3.14159/360); 
    scan.time_increment = (0.025) /1440; 
    scan.range_min = 0.1; 
    scan.range_max = 60.0;

    scan.ranges.resize(num_readings);
    scan.intensities.resize(num_readings);
    for(unsigned int i = 0; i < num_readings; ++i){
      scan.ranges[i] = my_hokdata.ranges[i];
      scan.intensities[i] = my_hokdata.intensities[i];
    }

	write(scan);

	return; 
}



// 
//  this notice is just to let you know this file was created by
//  a helper script, you may edit this file.
//
//  Generated by:         rdean on rcta-6jk0hv1, Sun Feb 24 16:36:00 -0500 2013
//  From Template/Script: module_templates/ModuleTemplate.cpp.rb
 
/*
  CTA RIGHTS
  
  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.
  
  GOVERNMENT PURPOSE RIGHTS
  
  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157
  
  Expiration Date - None
  
  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.
  
  
  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "TestAction_nowm.h"

#include <worldmodel/metric/operators/Operators.h>

using namespace std;
using namespace rframe;
using namespace action;

#define WHEEL_WIDTH 0.555 //meters

#include <common/ModuleVersion.h>

extern "C"
{
    /** library access method */
    MessagingClient * AllocateModule(rframe::ModuleVersion & modVersion)
    {
        modVersion.name("TestAction_nowm");
        modVersion.major(VERSION_MAJOR);
        modVersion.minor(VERSION_MINOR);
        modVersion.patch(VERSION_PATCH);
        
        return new TestAction_nowm();
    }
}


TestAction_nowm::TestAction_nowm() : ActionBase()
{
    // set module base parameters here
    loopPeriod(1.0);

    // set name of action type here
    baseStatus.actionName("testaction_nowm");
    // set types of output from this action
    baseStatus.outputTypesMobility(true);
}


TestAction_nowm::~TestAction_nowm()
{
}


int TestAction_nowm::onConfigure(Configuration & config)
{
    int retval = Error::SUCCESS;

    if ((retval = ActionBase::onConfigure(config)) == Error::SUCCESS)
    {
		if (state() == Module::UNINITIALIZED)
		{
        }
		// load reloadable config options here
    }

    return retval;
}



int TestAction_nowm::onInitialize()
{
    int retval = Error::SUCCESS; 

    MOD_ENTER(INF);

	if ((retval = ActionBase::onInitialize()) == Error::SUCCESS)
	{
        // load config here

        // register to server/publish data here
}
        else 
            {
              cout << "initialization failed"<<endl;
              }

    MOD_EXIT(INF);

    return retval;
}


int TestAction_nowm::onStart()
{
    int retval = Error::SUCCESS; 

    MOD_ENTER(INF);

    // perform startup operations here, such as allocating pools

    // start threads/async processing here, stop in stop()

    // register to read/subscribe to data here
    rframe::ConnectionOptions cmdvelReadOptions;
    cmdvelReadOptions.server(ConnectionOptions::ME);
    if((retval = registerRead<>(cmdvelReadOptions, "/cmd_vel", &TestAction_nowm::cmdvelCallback,this)) != Error::SUCCESS)
        {
                cout << "failed to open cmdvel read callback " << ERRSTR(retval) << endl;
                MOD_CRIT("failed to open cmdvel read callback");
        }
        else
        {
                MOD_INFO("Listener registered for cmdvel reading");
        }



    if (retval == Error::SUCCESS)
    {
        retval = ActionBase::onStart();
 //       plat::mobility::Teleop teleop;
            
                // turn to the left
 //               teleop.leftTrack(0.1);
  //              teleop.rightTrack(0.1);
   //     cout << "teleop cmd sent"<<endl;
    //    MOD_INFO("vel set")
	    }

    MOD_EXIT(INF);

    return retval;
}


int TestAction_nowm::onStop()
{
    int retval = Error::SUCCESS; 

    MOD_ENTER(INF);

    // perform module stop here

    if (retval == Error::SUCCESS)
    {
        retval = ActionBase::onStop();
    }

    MOD_EXIT(INF);

    return retval;
}


int TestAction_nowm::onShutdown()
{
    int retval = Error::SUCCESS; 

    MOD_ENTER(INF);

    // perform module shutdown here


    if (retval == Error::SUCCESS)
    {
        retval = ActionBase::onShutdown();
    }

    MOD_EXIT(INF);

    return retval;
}


int TestAction_nowm::onOnce()
{
    int retval = Error::SUCCESS;

    // check to see if period elapsed
    if (periodElapsed() == true)
    {
        // call base class, this will execute the state machine and send status
        // NOTE: there should really be no need to overload once(), as periodic processing
        // can be handled in the onXXX methods
       cout << "before" << endl; 
       
                   ActionBase::onOnce();
       cout <<"after"<< endl;
       // retval = ActionBase::onRun(true);
                  
}

    return retval;
}

//int TestAction_nowm::onRun(bool newCommandFlag)
//{
  //  cout<<"now on run"<<endl;
   // int retval = Error::SUCCESS;

   // MOD_ENTER(INF);
    
    //if ((retval = ActionBase::onRun(newCommandFlag)) == Error::SUCCESS)
    //{

         // if (baseStatus.runState() < worldmodel::selfinfo::action::Status::SUCCESS)
        //{
      
     //         if ((retval = sendCommand(teleop)) != Error::SUCCESS)
       //         {
         //           setError("failed to write teleop cmd");
           //     }
      //      }
       // }    
    
    //return retval;
//}
       


void TestAction_nowm::cmdvelCallback(const std::shared_ptr<geometry_msgs::Twist const> & msg)
{
        //grab desired velocity info
        cmd_vel = *msg;
        MOD_INFO("cmd_vel recieved");
        vx = cmd_vel.linear.x;
        va = cmd_vel.angular.z;

        //figure out how fast our wheels need to go
        vr = vx + va*WHEEL_WIDTH/2;
        vl = vx - va*WHEEL_WIDTH/2;
          plat::mobility::Teleop teleop;
            
                // turn to the left
                teleop.leftTrack(vl);
                teleop.rightTrack(vr);
              sendCommand(teleop);

        //We need to figure out what units the input to the motor command are. 
        //Do we need to give rad/s? Or some sort of other power units?
        //Are the motors speed controlled (I would assume so) or do we need a simple PID controller in here

        //Possibly do more calculations here

        //Send motor commands

}


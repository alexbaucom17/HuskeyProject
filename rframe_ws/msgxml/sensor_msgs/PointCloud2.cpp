// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:07 -0500
//  From Template/Script: data_templates/DataClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <math.h> // to allow use of common constants...
#include <common/Error.h>
#include "sensor_msgs/PointCloud2.h"

#include <common/JsonIo.h> // include here so container types are included by the class header 

using namespace std;

const unsigned int sensor_msgs::PointCloud2::ID;
const unsigned int sensor_msgs::PointCloud2::DATA_VERSION;
const std::string sensor_msgs::PointCloud2::DATA_TYPE_NAME = "PointCloud2";
const std::string sensor_msgs::PointCloud2::DATA_TYPE_FULL_NAME = "sensor_msgs::PointCloud2";
const std::string sensor_msgs::PointCloud2::VERSION_MD5 = "7926175170818d793a3bcf3665c73c8b";
/* xml source for this class */
const std::string sensor_msgs::PointCloud2::XML_SOURCE = "<class name=\"PointCloud2\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"1158d486dd51d683ce2f1be655c3c181\" rosDesc=\"# This message holds a collection of N-dimensional points, which may\\n# contain additional information such as normals, intensity, etc. The\\n# point data is stored as a binary blob, its layout described by the\\n# contents of the \\&quot;fields\\&quot; array.\\n\\n# The point cloud data may be organized 2d (image-like) or 1d\\n# (unordered). Point clouds organized as 2d images may be produced by\\n# camera depth sensors such as stereo or time-of-flight.\\n\\n# Time of sensor data acquisition, and the coordinate frame ID (for 3d\\n# points).\\nHeader header\\n\\n# 2D structure of the point cloud. If the cloud is unordered, height is\\n# 1 and width is the length of the point cloud.\\nuint32 height\\nuint32 width\\n\\n# Describes the channels and their layout in the binary data blob.\\nPointField[] fields\\n\\nbool    is_bigendian # Is this data bigendian?\\nuint32  point_step   # Length of a point in bytes\\nuint32  row_step     # Length of a row in bytes\\nuint8[] data         # Actual point data, size is (row_step*height)\\n\\nbool is_dense        # True if there are no invalid points\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: sensor_msgs/PointField\\n# This message holds the description of one point entry in the\\n# PointCloud2 message format.\\nuint8 INT8    = 1\\nuint8 UINT8   = 2\\nuint8 INT16   = 3\\nuint8 UINT16  = 4\\nuint8 INT32   = 5\\nuint8 UINT32  = 6\\nuint8 FLOAT32 = 7\\nuint8 FLOAT64 = 8\\n\\nstring name      # Name of field\\nuint32 offset    # Offset from start of point struct\\nuint8  datatype  # Datatype enumeration, see above\\nuint32 count     # How many elements in the field\\n\" comment=\"This message holds a collection of N-dimensional points, which may  contain additional information such as normals, intensity, etc. The  point data is stored as a binary blob, its layout described by the  contents of the &quot;fields&quot; array.\" id=\"237354230\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"2D structure of the point cloud. If the cloud is unordered, height is  1 and width is the length of the point cloud.\"/>\
  <field name=\"height\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"\"/>\
  <field name=\"width\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"Describes the channels and their layout in the binary data blob.\"/>\
  <field name=\"fields\" type=\"vector(PointField)\" sourceType=\"PointField\" comment=\"\"/>\
  <field name=\"is_bigendian\" type=\"bool\" sourceType=\"bool\" comment=\"Is this data bigendian?\"/>\
  <field name=\"point_step\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"Length of a point in bytes\"/>\
  <field name=\"row_step\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"Length of a row in bytes\"/>\
  <field name=\"data\" type=\"vector(unsigned char)\" sourceType=\"uint8\" comment=\"Actual point data, size is (row_step*height)\"/>\
  <field name=\"is_dense\" type=\"bool\" sourceType=\"bool\" comment=\"True if there are no invalid points\"/>\
</class>";

sensor_msgs::PointCloud2::PointCloud2() : header(), height(0), width(0), fields(), is_bigendian(0), point_step(0), row_step(0), data(), is_dense(0)
{  
};

sensor_msgs::PointCloud2::PointCloud2(const sensor_msgs::PointCloud2 & inobj) : header(inobj.header), height(inobj.height), width(inobj.width), fields(inobj.fields), is_bigendian(inobj.is_bigendian), point_step(inobj.point_step), row_step(inobj.row_step), data(inobj.data), is_dense(inobj.is_dense)
{
};

sensor_msgs::PointCloud2::~PointCloud2()
{
};

sensor_msgs::PointCloud2 * sensor_msgs::PointCloud2::New()
{ 
    return new PointCloud2();
};

bool sensor_msgs::PointCloud2::dataTypeFlat() 
{   
    return false; 
};

sensor_msgs::PointCloud2 & sensor_msgs::PointCloud2::operator=(const sensor_msgs::PointCloud2 & inobj)
{
    if (this != &inobj)
    {

        // if datatype is flat, optimize with memcpy (complier level optimiation)
              /*  if (dataTypeFlat() == true)
                  REMOVED invalid when assigning from a parent type as this is the pointer to the derived type, thus sensor_msgs::PointCloud2 is copied to the wrong location

        {
            memcpy(this,&inobj,sizeof(sensor_msgs::PointCloud2));
        }
        else */ 
        {

            header = inobj.header;
            height = inobj.height;
            width = inobj.width;
            fields = inobj.fields;
            is_bigendian = inobj.is_bigendian;
            point_step = inobj.point_step;
            row_step = inobj.row_step;
            data = inobj.data;
            is_dense = inobj.is_dense;
        }
    }

    return *this;
}

bool sensor_msgs::PointCloud2::operator==(const sensor_msgs::PointCloud2 & inobj) const
{
    bool ret = true;

    if (this != &inobj)
    { 
        ret = ret 
             && (header == inobj.header)
             && (height == inobj.height)
             && (width == inobj.width)
             && (fields == inobj.fields)
             && (is_bigendian == inobj.is_bigendian)
             && (point_step == inobj.point_step)
             && (row_step == inobj.row_step)
             && (data == inobj.data)
             && (is_dense == inobj.is_dense);
    }

    return ret;
}

bool sensor_msgs::PointCloud2::operator!=(const sensor_msgs::PointCloud2 & inobj) const
{
    bool ret = false;

    if (this != &inobj)
    {
        ret = !operator==(inobj);
    }

    return ret;
}

bool sensor_msgs::PointCloud2::operator<(const sensor_msgs::PointCloud2 & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {  
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (header < inobj.header) return true;
        if (inobj.header <  header) return false; 
        if (height < inobj.height) return true;
        if (inobj.height <  height) return false; 
        if (width < inobj.width) return true;
        if (inobj.width <  width) return false; 
        if (fields < inobj.fields) return true;
        if (inobj.fields <  fields) return false; 
        if (is_bigendian < inobj.is_bigendian) return true;
        if (inobj.is_bigendian <  is_bigendian) return false; 
        if (point_step < inobj.point_step) return true;
        if (inobj.point_step <  point_step) return false; 
        if (row_step < inobj.row_step) return true;
        if (inobj.row_step <  row_step) return false; 
        if (data < inobj.data) return true;
        if (inobj.data <  data) return false; 
        if (is_dense < inobj.is_dense) return true;
        if (inobj.is_dense <  is_dense) return false; ;
    }

    return ret;
}

bool sensor_msgs::PointCloud2::operator>(const sensor_msgs::PointCloud2 & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (header > inobj.header) return true;
        if (inobj.header >  header) return false; 
        if (height > inobj.height) return true;
        if (inobj.height >  height) return false; 
        if (width > inobj.width) return true;
        if (inobj.width >  width) return false; 
        if (fields > inobj.fields) return true;
        if (inobj.fields >  fields) return false; 
        if (is_bigendian > inobj.is_bigendian) return true;
        if (inobj.is_bigendian >  is_bigendian) return false; 
        if (point_step > inobj.point_step) return true;
        if (inobj.point_step >  point_step) return false; 
        if (row_step > inobj.row_step) return true;
        if (inobj.row_step >  row_step) return false; 
        if (data > inobj.data) return true;
        if (inobj.data >  data) return false; 
        if (is_dense > inobj.is_dense) return true;
        if (inobj.is_dense >  is_dense) return false; ;
    }

    return ret;
}

template <> void rframe::json_io::encode(std::stringstream & sstr, const char * name, const sensor_msgs::PointCloud2 & t, std::string & indent, bool lastItem)
{
    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectStart(sstr,name,indent);

    rframe::json_io::encode(sstr,"header",t.header,indent,false);
    rframe::json_io::encode(sstr,"height",t.height,indent,false);
    rframe::json_io::encode(sstr,"width",t.width,indent,false);
    rframe::json_io::encode(sstr,"fields",t.fields,indent,false);
    rframe::json_io::encode(sstr,"is_bigendian",t.is_bigendian,indent,false);
    rframe::json_io::encode(sstr,"point_step",t.point_step,indent,false);
    rframe::json_io::encode(sstr,"row_step",t.row_step,indent,false);
    rframe::json_io::encode(sstr,"data",t.data,indent,false);
    rframe::json_io::encode(sstr,"is_dense",t.is_dense,indent,true);

    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectEnd(sstr,indent,lastItem);
}

std::string sensor_msgs::PointCloud2::toStr(bool pretty) const
{

    stringstream sstr;
    string indent = (pretty == true) ? "\n" : "";

    rframe::json_io::encodeObjectStartMain(sstr,indent);
    rframe::json_io::encode(sstr,"",*this,indent,true);
    rframe::json_io::encodeObjectEnd(sstr,indent,true); // false so as to  not add , at end of string

    return sstr.str();

};

std::basic_ostream<char>& operator<<(std::basic_ostream<char> &s, const sensor_msgs::PointCloud2 & value)
{
    return s << value.toStr(false);
}


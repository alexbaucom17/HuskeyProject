// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:07 -0500
//  From Template/Script: data_templates/DataClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <math.h> // to allow use of common constants...
#include <common/Error.h>
#include "sensor_msgs/MultiEchoLaserScan.h"

#include <common/JsonIo.h> // include here so container types are included by the class header 

using namespace std;

const unsigned int sensor_msgs::MultiEchoLaserScan::ID;
const unsigned int sensor_msgs::MultiEchoLaserScan::DATA_VERSION;
const std::string sensor_msgs::MultiEchoLaserScan::DATA_TYPE_NAME = "MultiEchoLaserScan";
const std::string sensor_msgs::MultiEchoLaserScan::DATA_TYPE_FULL_NAME = "sensor_msgs::MultiEchoLaserScan";
const std::string sensor_msgs::MultiEchoLaserScan::VERSION_MD5 = "04300f0e89ac0e05dec5139512f03fe4";
/* xml source for this class */
const std::string sensor_msgs::MultiEchoLaserScan::XML_SOURCE = "<class name=\"MultiEchoLaserScan\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"6fefb0c6da89d7c8abe4b339f5c2f8fb\" rosDesc=\"# Single scan from a multi-echo planar laser range-finder\\n#\\n# If you have another ranging device with different behavior (e.g. a sonar\\n# array), please find or create a different message, since applications\\n# will make fairly laser-specific assumptions about this data\\n\\nHeader header            # timestamp in the header is the acquisition time of \\n                         # the first ray in the scan.\\n                         #\\n                         # in frame frame_id, angles are measured around \\n                         # the positive Z axis (counterclockwise, if Z is up)\\n                         # with zero angle being forward along the x axis\\n                         \\nfloat32 angle_min        # start angle of the scan [rad]\\nfloat32 angle_max        # end angle of the scan [rad]\\nfloat32 angle_increment  # angular distance between measurements [rad]\\n\\nfloat32 time_increment   # time between measurements [seconds] - if your scanner\\n                         # is moving, this will be used in interpolating position\\n                         # of 3d points\\nfloat32 scan_time        # time between scans [seconds]\\n\\nfloat32 range_min        # minimum range value [m]\\nfloat32 range_max        # maximum range value [m]\\n\\nLaserEcho[] ranges       # range data [m] (Note: NaNs, values &lt; range_min or &gt; range_max should be discarded)\\n                         # +Inf measurements are out of range\\n                         # -Inf measurements are too close to determine exact distance.\\nLaserEcho[] intensities  # intensity data [device-specific units].  If your\\n                         # device does not provide intensities, please leave\\n                         # the array empty.\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: sensor_msgs/LaserEcho\\n# This message is a submessage of MultiEchoLaserScan and is not intended\\n# to be used separately.\\n\\nfloat32[] echoes  # Multiple values of ranges or intensities.\\n\" comment=\"Single scan from a multi-echo planar laser range-finder   If you have another ranging device with different behavior (e.g. a sonar  array), please find or create a different message, since applications  will make fairly laser-specific assumptions about this data\" id=\"237354226\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"timestamp in the header is the acquisition time of   the first ray in the scan.   in frame frame_id, angles are measured around   the positive Z axis (counterclockwise, if Z is up)  with zero angle being forward along the x axis\"/>\
  <field name=\"angle_min\" type=\"float\" sourceType=\"float32\" comment=\"start angle of the scan [rad]\"/>\
  <field name=\"angle_max\" type=\"float\" sourceType=\"float32\" comment=\"end angle of the scan [rad]\"/>\
  <field name=\"angle_increment\" type=\"float\" sourceType=\"float32\" comment=\"angular distance between measurements [rad]\"/>\
  <field name=\"time_increment\" type=\"float\" sourceType=\"float32\" comment=\"time between measurements [seconds] - if your scanner  is moving, this will be used in interpolating position  of 3d points\"/>\
  <field name=\"scan_time\" type=\"float\" sourceType=\"float32\" comment=\"time between scans [seconds]\"/>\
  <field name=\"range_min\" type=\"float\" sourceType=\"float32\" comment=\"minimum range value [m]\"/>\
  <field name=\"range_max\" type=\"float\" sourceType=\"float32\" comment=\"maximum range value [m]\"/>\
  <field name=\"ranges\" type=\"vector(LaserEcho)\" sourceType=\"LaserEcho\" comment=\"range data [m] (Note: NaNs, values &lt; range_min or &gt; range_max should be discarded)  +Inf measurements are out of range  -Inf measurements are too close to determine exact distance.\"/>\
  <field name=\"intensities\" type=\"vector(LaserEcho)\" sourceType=\"LaserEcho\" comment=\"intensity data [device-specific units].  If your  device does not provide intensities, please leave  the array empty.\"/>\
</class>";

sensor_msgs::MultiEchoLaserScan::MultiEchoLaserScan() : header(), angle_min(0), angle_max(0), angle_increment(0), time_increment(0), scan_time(0), range_min(0), range_max(0), ranges(), intensities()
{  
};

sensor_msgs::MultiEchoLaserScan::MultiEchoLaserScan(const sensor_msgs::MultiEchoLaserScan & inobj) : header(inobj.header), angle_min(inobj.angle_min), angle_max(inobj.angle_max), angle_increment(inobj.angle_increment), time_increment(inobj.time_increment), scan_time(inobj.scan_time), range_min(inobj.range_min), range_max(inobj.range_max), ranges(inobj.ranges), intensities(inobj.intensities)
{
};

sensor_msgs::MultiEchoLaserScan::~MultiEchoLaserScan()
{
};

sensor_msgs::MultiEchoLaserScan * sensor_msgs::MultiEchoLaserScan::New()
{ 
    return new MultiEchoLaserScan();
};

bool sensor_msgs::MultiEchoLaserScan::dataTypeFlat() 
{   
    return false; 
};

sensor_msgs::MultiEchoLaserScan & sensor_msgs::MultiEchoLaserScan::operator=(const sensor_msgs::MultiEchoLaserScan & inobj)
{
    if (this != &inobj)
    {

        // if datatype is flat, optimize with memcpy (complier level optimiation)
              /*  if (dataTypeFlat() == true)
                  REMOVED invalid when assigning from a parent type as this is the pointer to the derived type, thus sensor_msgs::MultiEchoLaserScan is copied to the wrong location

        {
            memcpy(this,&inobj,sizeof(sensor_msgs::MultiEchoLaserScan));
        }
        else */ 
        {

            header = inobj.header;
            angle_min = inobj.angle_min;
            angle_max = inobj.angle_max;
            angle_increment = inobj.angle_increment;
            time_increment = inobj.time_increment;
            scan_time = inobj.scan_time;
            range_min = inobj.range_min;
            range_max = inobj.range_max;
            ranges = inobj.ranges;
            intensities = inobj.intensities;
        }
    }

    return *this;
}

bool sensor_msgs::MultiEchoLaserScan::operator==(const sensor_msgs::MultiEchoLaserScan & inobj) const
{
    bool ret = true;

    if (this != &inobj)
    { 
        ret = ret 
             && (header == inobj.header)
             && (angle_min == inobj.angle_min)
             && (angle_max == inobj.angle_max)
             && (angle_increment == inobj.angle_increment)
             && (time_increment == inobj.time_increment)
             && (scan_time == inobj.scan_time)
             && (range_min == inobj.range_min)
             && (range_max == inobj.range_max)
             && (ranges == inobj.ranges)
             && (intensities == inobj.intensities);
    }

    return ret;
}

bool sensor_msgs::MultiEchoLaserScan::operator!=(const sensor_msgs::MultiEchoLaserScan & inobj) const
{
    bool ret = false;

    if (this != &inobj)
    {
        ret = !operator==(inobj);
    }

    return ret;
}

bool sensor_msgs::MultiEchoLaserScan::operator<(const sensor_msgs::MultiEchoLaserScan & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {  
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (header < inobj.header) return true;
        if (inobj.header <  header) return false; 
        if (angle_min < inobj.angle_min) return true;
        if (inobj.angle_min <  angle_min) return false; 
        if (angle_max < inobj.angle_max) return true;
        if (inobj.angle_max <  angle_max) return false; 
        if (angle_increment < inobj.angle_increment) return true;
        if (inobj.angle_increment <  angle_increment) return false; 
        if (time_increment < inobj.time_increment) return true;
        if (inobj.time_increment <  time_increment) return false; 
        if (scan_time < inobj.scan_time) return true;
        if (inobj.scan_time <  scan_time) return false; 
        if (range_min < inobj.range_min) return true;
        if (inobj.range_min <  range_min) return false; 
        if (range_max < inobj.range_max) return true;
        if (inobj.range_max <  range_max) return false; 
        if (ranges < inobj.ranges) return true;
        if (inobj.ranges <  ranges) return false; 
        if (intensities < inobj.intensities) return true;
        if (inobj.intensities <  intensities) return false; ;
    }

    return ret;
}

bool sensor_msgs::MultiEchoLaserScan::operator>(const sensor_msgs::MultiEchoLaserScan & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (header > inobj.header) return true;
        if (inobj.header >  header) return false; 
        if (angle_min > inobj.angle_min) return true;
        if (inobj.angle_min >  angle_min) return false; 
        if (angle_max > inobj.angle_max) return true;
        if (inobj.angle_max >  angle_max) return false; 
        if (angle_increment > inobj.angle_increment) return true;
        if (inobj.angle_increment >  angle_increment) return false; 
        if (time_increment > inobj.time_increment) return true;
        if (inobj.time_increment >  time_increment) return false; 
        if (scan_time > inobj.scan_time) return true;
        if (inobj.scan_time >  scan_time) return false; 
        if (range_min > inobj.range_min) return true;
        if (inobj.range_min >  range_min) return false; 
        if (range_max > inobj.range_max) return true;
        if (inobj.range_max >  range_max) return false; 
        if (ranges > inobj.ranges) return true;
        if (inobj.ranges >  ranges) return false; 
        if (intensities > inobj.intensities) return true;
        if (inobj.intensities >  intensities) return false; ;
    }

    return ret;
}

template <> void rframe::json_io::encode(std::stringstream & sstr, const char * name, const sensor_msgs::MultiEchoLaserScan & t, std::string & indent, bool lastItem)
{
    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectStart(sstr,name,indent);

    rframe::json_io::encode(sstr,"header",t.header,indent,false);
    rframe::json_io::encode(sstr,"angle_min",t.angle_min,indent,false);
    rframe::json_io::encode(sstr,"angle_max",t.angle_max,indent,false);
    rframe::json_io::encode(sstr,"angle_increment",t.angle_increment,indent,false);
    rframe::json_io::encode(sstr,"time_increment",t.time_increment,indent,false);
    rframe::json_io::encode(sstr,"scan_time",t.scan_time,indent,false);
    rframe::json_io::encode(sstr,"range_min",t.range_min,indent,false);
    rframe::json_io::encode(sstr,"range_max",t.range_max,indent,false);
    rframe::json_io::encode(sstr,"ranges",t.ranges,indent,false);
    rframe::json_io::encode(sstr,"intensities",t.intensities,indent,true);

    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectEnd(sstr,indent,lastItem);
}

std::string sensor_msgs::MultiEchoLaserScan::toStr(bool pretty) const
{

    stringstream sstr;
    string indent = (pretty == true) ? "\n" : "";

    rframe::json_io::encodeObjectStartMain(sstr,indent);
    rframe::json_io::encode(sstr,"",*this,indent,true);
    rframe::json_io::encodeObjectEnd(sstr,indent,true); // false so as to  not add , at end of string

    return sstr.str();

};

std::basic_ostream<char>& operator<<(std::basic_ostream<char> &s, const sensor_msgs::MultiEchoLaserScan & value)
{
    return s << value.toStr(false);
}


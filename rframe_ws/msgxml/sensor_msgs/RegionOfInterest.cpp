// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:07 -0500
//  From Template/Script: data_templates/DataClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <math.h> // to allow use of common constants...
#include <common/Error.h>
#include "sensor_msgs/RegionOfInterest.h"

#include <common/JsonIo.h> // include here so container types are included by the class header 

using namespace std;

const unsigned int sensor_msgs::RegionOfInterest::ID;
const unsigned int sensor_msgs::RegionOfInterest::DATA_VERSION;
const std::string sensor_msgs::RegionOfInterest::DATA_TYPE_NAME = "RegionOfInterest";
const std::string sensor_msgs::RegionOfInterest::DATA_TYPE_FULL_NAME = "sensor_msgs::RegionOfInterest";
const std::string sensor_msgs::RegionOfInterest::VERSION_MD5 = "18932c0daf49f2de0618500e784e94fa";
/* xml source for this class */
const std::string sensor_msgs::RegionOfInterest::XML_SOURCE = "<class name=\"RegionOfInterest\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"bdb633039d588fcccb441a4d43ccfe09\" rosDesc=\"# This message is used to specify a region of interest within an image.\\n#\\n# When used to specify the ROI setting of the camera when the image was\\n# taken, the height and width fields should either match the height and\\n# width fields for the associated image; or height = width = 0\\n# indicates that the full resolution image was captured.\\n\\nuint32 x_offset  # Leftmost pixel of the ROI\\n                 # (0 if the ROI includes the left edge of the image)\\nuint32 y_offset  # Topmost pixel of the ROI\\n                 # (0 if the ROI includes the top edge of the image)\\nuint32 height    # Height of ROI\\nuint32 width     # Width of ROI\\n\\n# True if a distinct rectified ROI should be calculated from the \\&quot;raw\\&quot;\\n# ROI in this message. Typically this should be False if the full image\\n# is captured (ROI not used), and True if a subwindow is captured (ROI\\n# used).\\nbool do_rectify\\n\" comment=\"This message is used to specify a region of interest within an image.   When used to specify the ROI setting of the camera when the image was  taken, the height and width fields should either match the height and  width fields for the associated image; or height = width = 0  indicates that the full resolution image was captured.\" id=\"237354233\">\
  <field name=\"x_offset\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"Leftmost pixel of the ROI  (0 if the ROI includes the left edge of the image)\"/>\
  <field name=\"y_offset\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"Topmost pixel of the ROI  (0 if the ROI includes the top edge of the image)\"/>\
  <field name=\"height\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"Height of ROI\"/>\
  <field name=\"width\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"Width of ROI  True if a distinct rectified ROI should be calculated from the &quot;raw&quot;  ROI in this message. Typically this should be False if the full image  is captured (ROI not used), and True if a subwindow is captured (ROI  used).\"/>\
  <field name=\"do_rectify\" type=\"bool\" sourceType=\"bool\" comment=\"\"/>\
</class>";

sensor_msgs::RegionOfInterest::RegionOfInterest() : x_offset(0), y_offset(0), height(0), width(0), do_rectify(0)
{  
};

sensor_msgs::RegionOfInterest::RegionOfInterest(const sensor_msgs::RegionOfInterest & inobj) : x_offset(inobj.x_offset), y_offset(inobj.y_offset), height(inobj.height), width(inobj.width), do_rectify(inobj.do_rectify)
{
};

sensor_msgs::RegionOfInterest::~RegionOfInterest()
{
};

sensor_msgs::RegionOfInterest * sensor_msgs::RegionOfInterest::New()
{ 
    return new RegionOfInterest();
};

bool sensor_msgs::RegionOfInterest::dataTypeFlat() 
{  
    return true;
};

sensor_msgs::RegionOfInterest & sensor_msgs::RegionOfInterest::operator=(const sensor_msgs::RegionOfInterest & inobj)
{
    if (this != &inobj)
    {

        // if datatype is flat, optimize with memcpy (complier level optimiation)
              /*  if (dataTypeFlat() == true)
                  REMOVED invalid when assigning from a parent type as this is the pointer to the derived type, thus sensor_msgs::RegionOfInterest is copied to the wrong location

        {
            memcpy(this,&inobj,sizeof(sensor_msgs::RegionOfInterest));
        }
        else */ 
        {

            x_offset = inobj.x_offset;
            y_offset = inobj.y_offset;
            height = inobj.height;
            width = inobj.width;
            do_rectify = inobj.do_rectify;
        }
    }

    return *this;
}

bool sensor_msgs::RegionOfInterest::operator==(const sensor_msgs::RegionOfInterest & inobj) const
{
    bool ret = true;

    if (this != &inobj)
    { 
        ret = ret 
             && (x_offset == inobj.x_offset)
             && (y_offset == inobj.y_offset)
             && (height == inobj.height)
             && (width == inobj.width)
             && (do_rectify == inobj.do_rectify);
    }

    return ret;
}

bool sensor_msgs::RegionOfInterest::operator!=(const sensor_msgs::RegionOfInterest & inobj) const
{
    bool ret = false;

    if (this != &inobj)
    {
        ret = !operator==(inobj);
    }

    return ret;
}

bool sensor_msgs::RegionOfInterest::operator<(const sensor_msgs::RegionOfInterest & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {  
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (x_offset < inobj.x_offset) return true;
        if (inobj.x_offset <  x_offset) return false; 
        if (y_offset < inobj.y_offset) return true;
        if (inobj.y_offset <  y_offset) return false; 
        if (height < inobj.height) return true;
        if (inobj.height <  height) return false; 
        if (width < inobj.width) return true;
        if (inobj.width <  width) return false; 
        if (do_rectify < inobj.do_rectify) return true;
        if (inobj.do_rectify <  do_rectify) return false; ;
    }

    return ret;
}

bool sensor_msgs::RegionOfInterest::operator>(const sensor_msgs::RegionOfInterest & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (x_offset > inobj.x_offset) return true;
        if (inobj.x_offset >  x_offset) return false; 
        if (y_offset > inobj.y_offset) return true;
        if (inobj.y_offset >  y_offset) return false; 
        if (height > inobj.height) return true;
        if (inobj.height >  height) return false; 
        if (width > inobj.width) return true;
        if (inobj.width >  width) return false; 
        if (do_rectify > inobj.do_rectify) return true;
        if (inobj.do_rectify >  do_rectify) return false; ;
    }

    return ret;
}

template <> void rframe::json_io::encode(std::stringstream & sstr, const char * name, const sensor_msgs::RegionOfInterest & t, std::string & indent, bool lastItem)
{
    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectStart(sstr,name,indent);

    rframe::json_io::encode(sstr,"x_offset",t.x_offset,indent,false);
    rframe::json_io::encode(sstr,"y_offset",t.y_offset,indent,false);
    rframe::json_io::encode(sstr,"height",t.height,indent,false);
    rframe::json_io::encode(sstr,"width",t.width,indent,false);
    rframe::json_io::encode(sstr,"do_rectify",t.do_rectify,indent,true);

    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectEnd(sstr,indent,lastItem);
}

std::string sensor_msgs::RegionOfInterest::toStr(bool pretty) const
{

    stringstream sstr;
    string indent = (pretty == true) ? "\n" : "";

    rframe::json_io::encodeObjectStartMain(sstr,indent);
    rframe::json_io::encode(sstr,"",*this,indent,true);
    rframe::json_io::encodeObjectEnd(sstr,indent,true); // false so as to  not add , at end of string

    return sstr.str();

};

std::basic_ostream<char>& operator<<(std::basic_ostream<char> &s, const sensor_msgs::RegionOfInterest & value)
{
    return s << value.toStr(false);
}


// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:07 -0500
//  From Template/Script: data_templates/DataClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <math.h> // to allow use of common constants...
#include <common/Error.h>
#include "sensor_msgs/PointCloud.h"

#include <common/JsonIo.h> // include here so container types are included by the class header 

using namespace std;

const unsigned int sensor_msgs::PointCloud::ID;
const unsigned int sensor_msgs::PointCloud::DATA_VERSION;
const std::string sensor_msgs::PointCloud::DATA_TYPE_NAME = "PointCloud";
const std::string sensor_msgs::PointCloud::DATA_TYPE_FULL_NAME = "sensor_msgs::PointCloud";
const std::string sensor_msgs::PointCloud::VERSION_MD5 = "afacf9a1aa27a7aca7370c20a4e440b3";
/* xml source for this class */
const std::string sensor_msgs::PointCloud::XML_SOURCE = "<class name=\"PointCloud\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"d8e9c3f5afbdd8a130fd1d2763945fca\" rosDesc=\"# This message holds a collection of 3d points, plus optional additional\\n# information about each point.\\n\\n# Time of sensor data acquisition, coordinate frame ID.\\nHeader header\\n\\n# Array of 3d points. Each Point32 should be interpreted as a 3d point\\n# in the frame given in the header.\\ngeometry_msgs/Point32[] points\\n\\n# Each channel should have the same number of elements as points array,\\n# and the data in each channel should correspond 1:1 with each point.\\n# Channel names in common practice are listed in ChannelFloat32.msg.\\nChannelFloat32[] channels\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/Point32\\n# This contains the position of a point in free space(with 32 bits of precision).\\n# It is recommeded to use Point wherever possible instead of Point32.  \\n# \\n# This recommendation is to promote interoperability.  \\n#\\n# This message is designed to take up less space when sending\\n# lots of points at once, as in the case of a PointCloud.  \\n\\nfloat32 x\\nfloat32 y\\nfloat32 z\\n================================================================================\\nMSG: sensor_msgs/ChannelFloat32\\n# This message is used by the PointCloud message to hold optional data\\n# associated with each point in the cloud. The length of the values\\n# array should be the same as the length of the points array in the\\n# PointCloud, and each value should be associated with the corresponding\\n# point.\\n\\n# Channel names in existing practice include:\\n#   \\&quot;u\\&quot;, \\&quot;v\\&quot; - row and column (respectively) in the left stereo image.\\n#              This is opposite to usual conventions but remains for\\n#              historical reasons. The newer PointCloud2 message has no\\n#              such problem.\\n#   \\&quot;rgb\\&quot; - For point clouds produced by color stereo cameras. uint8\\n#           (R,G,B) values packed into the least significant 24 bits,\\n#           in order.\\n#   \\&quot;intensity\\&quot; - laser or pixel intensity.\\n#   \\&quot;distance\\&quot;\\n\\n# The channel name should give semantics of the channel (e.g.\\n# \\&quot;intensity\\&quot; instead of \\&quot;value\\&quot;).\\nstring name\\n\\n# The values array should be 1-1 with the elements of the associated\\n# PointCloud.\\nfloat32[] values\\n\" comment=\"This message holds a collection of 3d points, plus optional additional  information about each point.\" id=\"237354229\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"Array of 3d points. Each Point32 should be interpreted as a 3d point  in the frame given in the header.\"/>\
  <field name=\"points\" type=\"vector(geometry_msgs::Point32)\" sourceType=\"geometry_msgs::Point32\" comment=\"Each channel should have the same number of elements as points array,  and the data in each channel should correspond 1:1 with each point.  Channel names in common practice are listed in ChannelFloat32.msg.\"/>\
  <field name=\"channels\" type=\"vector(ChannelFloat32)\" sourceType=\"ChannelFloat32\" comment=\"\"/>\
</class>";

sensor_msgs::PointCloud::PointCloud() : header(), points(), channels()
{  
};

sensor_msgs::PointCloud::PointCloud(const sensor_msgs::PointCloud & inobj) : header(inobj.header), points(inobj.points), channels(inobj.channels)
{
};

sensor_msgs::PointCloud::~PointCloud()
{
};

sensor_msgs::PointCloud * sensor_msgs::PointCloud::New()
{ 
    return new PointCloud();
};

bool sensor_msgs::PointCloud::dataTypeFlat() 
{   
    return false; 
};

sensor_msgs::PointCloud & sensor_msgs::PointCloud::operator=(const sensor_msgs::PointCloud & inobj)
{
    if (this != &inobj)
    {

        // if datatype is flat, optimize with memcpy (complier level optimiation)
              /*  if (dataTypeFlat() == true)
                  REMOVED invalid when assigning from a parent type as this is the pointer to the derived type, thus sensor_msgs::PointCloud is copied to the wrong location

        {
            memcpy(this,&inobj,sizeof(sensor_msgs::PointCloud));
        }
        else */ 
        {

            header = inobj.header;
            points = inobj.points;
            channels = inobj.channels;
        }
    }

    return *this;
}

bool sensor_msgs::PointCloud::operator==(const sensor_msgs::PointCloud & inobj) const
{
    bool ret = true;

    if (this != &inobj)
    { 
        ret = ret 
             && (header == inobj.header)
             && (points == inobj.points)
             && (channels == inobj.channels);
    }

    return ret;
}

bool sensor_msgs::PointCloud::operator!=(const sensor_msgs::PointCloud & inobj) const
{
    bool ret = false;

    if (this != &inobj)
    {
        ret = !operator==(inobj);
    }

    return ret;
}

bool sensor_msgs::PointCloud::operator<(const sensor_msgs::PointCloud & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {  
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (header < inobj.header) return true;
        if (inobj.header <  header) return false; 
        if (points < inobj.points) return true;
        if (inobj.points <  points) return false; 
        if (channels < inobj.channels) return true;
        if (inobj.channels <  channels) return false; ;
    }

    return ret;
}

bool sensor_msgs::PointCloud::operator>(const sensor_msgs::PointCloud & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (header > inobj.header) return true;
        if (inobj.header >  header) return false; 
        if (points > inobj.points) return true;
        if (inobj.points >  points) return false; 
        if (channels > inobj.channels) return true;
        if (inobj.channels >  channels) return false; ;
    }

    return ret;
}

template <> void rframe::json_io::encode(std::stringstream & sstr, const char * name, const sensor_msgs::PointCloud & t, std::string & indent, bool lastItem)
{
    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectStart(sstr,name,indent);

    rframe::json_io::encode(sstr,"header",t.header,indent,false);
    rframe::json_io::encode(sstr,"points",t.points,indent,false);
    rframe::json_io::encode(sstr,"channels",t.channels,indent,true);

    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectEnd(sstr,indent,lastItem);
}

std::string sensor_msgs::PointCloud::toStr(bool pretty) const
{

    stringstream sstr;
    string indent = (pretty == true) ? "\n" : "";

    rframe::json_io::encodeObjectStartMain(sstr,indent);
    rframe::json_io::encode(sstr,"",*this,indent,true);
    rframe::json_io::encodeObjectEnd(sstr,indent,true); // false so as to  not add , at end of string

    return sstr.str();

};

std::basic_ostream<char>& operator<<(std::basic_ostream<char> &s, const sensor_msgs::PointCloud & value)
{
    return s << value.toStr(false);
}


// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:53 -0500
//  From Template/Script: data_templates/DataClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <math.h> // to allow use of common constants...
#include <common/Error.h>
#include "sensor_msgs/Image.h"

#include <common/JsonIo.h> // include here so container types are included by the class header 

using namespace std;

const unsigned int sensor_msgs::Image::ID;
const unsigned int sensor_msgs::Image::DATA_VERSION;
const std::string sensor_msgs::Image::DATA_TYPE_NAME = "Image";
const std::string sensor_msgs::Image::DATA_TYPE_FULL_NAME = "sensor_msgs::Image";
const std::string sensor_msgs::Image::VERSION_MD5 = "a43f79b193ad26f239d65afe5b8d8e44";
/* xml source for this class */
const std::string sensor_msgs::Image::XML_SOURCE = "<class name=\"Image\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"060021388200f6f0f447d0fcd9c64743\" rosDesc=\"# This message contains an uncompressed image\\n# (0, 0) is at top-left corner of image\\n#\\n\\nHeader header        # Header timestamp should be acquisition time of image\\n                     # Header frame_id should be optical frame of camera\\n                     # origin of frame should be optical center of cameara\\n                     # +x should point to the right in the image\\n                     # +y should point down in the image\\n                     # +z should point into to plane of the image\\n                     # If the frame_id here and the frame_id of the CameraInfo\\n                     # message associated with the image conflict\\n                     # the behavior is undefined\\n\\nuint32 height         # image height, that is, number of rows\\nuint32 width          # image width, that is, number of columns\\n\\n# The legal values for encoding are in file src/image_encodings.cpp\\n# If you want to standardize a new string format, join\\n# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\\n\\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\\n\\nuint8 is_bigendian    # is this data bigendian?\\nuint32 step           # Full row length in bytes\\nuint8[] data          # actual matrix data, size is (step * rows)\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\" comment=\"This message contains an uncompressed image  (0, 0) is at top-left corner of image\" id=\"237354216\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"Header timestamp should be acquisition time of image  Header frame_id should be optical frame of camera  origin of frame should be optical center of cameara  +x should point to the right in the image  +y should point down in the image  +z should point into to plane of the image  If the frame_id here and the frame_id of the CameraInfo  message associated with the image conflict  the behavior is undefined\"/>\
  <field name=\"height\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"image height, that is, number of rows\"/>\
  <field name=\"width\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"image width, that is, number of columns  The legal values for encoding are in file src/image_encodings.cpp  If you want to standardize a new string format, join  ros-users@lists.sourceforge.net and send an email proposing a new encoding.\"/>\
  <field name=\"encoding\" type=\"string\" sourceType=\"string\" comment=\"Encoding of pixels -- channel meaning, ordering, size  taken from the list of strings in include/sensor_msgs/image_encodings.h\"/>\
  <field name=\"is_bigendian\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"is this data bigendian?\"/>\
  <field name=\"step\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"Full row length in bytes\"/>\
  <field name=\"data\" type=\"vector(unsigned char)\" sourceType=\"uint8\" comment=\"actual matrix data, size is (step * rows)\"/>\
</class>";

sensor_msgs::Image::Image() : header(), height(0), width(0), encoding(), is_bigendian(0), step(0), data()
{  
};

sensor_msgs::Image::Image(const sensor_msgs::Image & inobj) : header(inobj.header), height(inobj.height), width(inobj.width), encoding(inobj.encoding), is_bigendian(inobj.is_bigendian), step(inobj.step), data(inobj.data)
{
};

sensor_msgs::Image::~Image()
{
};

sensor_msgs::Image * sensor_msgs::Image::New()
{ 
    return new Image();
};

bool sensor_msgs::Image::dataTypeFlat() 
{   
    return false; 
};

sensor_msgs::Image & sensor_msgs::Image::operator=(const sensor_msgs::Image & inobj)
{
    if (this != &inobj)
    {

        // if datatype is flat, optimize with memcpy (complier level optimiation)
              /*  if (dataTypeFlat() == true)
                  REMOVED invalid when assigning from a parent type as this is the pointer to the derived type, thus sensor_msgs::Image is copied to the wrong location

        {
            memcpy(this,&inobj,sizeof(sensor_msgs::Image));
        }
        else */ 
        {

            header = inobj.header;
            height = inobj.height;
            width = inobj.width;
            encoding = inobj.encoding;
            is_bigendian = inobj.is_bigendian;
            step = inobj.step;
            data = inobj.data;
        }
    }

    return *this;
}

bool sensor_msgs::Image::operator==(const sensor_msgs::Image & inobj) const
{
    bool ret = true;

    if (this != &inobj)
    { 
        ret = ret 
             && (header == inobj.header)
             && (height == inobj.height)
             && (width == inobj.width)
             && (encoding == inobj.encoding)
             && (is_bigendian == inobj.is_bigendian)
             && (step == inobj.step)
             && (data == inobj.data);
    }

    return ret;
}

bool sensor_msgs::Image::operator!=(const sensor_msgs::Image & inobj) const
{
    bool ret = false;

    if (this != &inobj)
    {
        ret = !operator==(inobj);
    }

    return ret;
}

bool sensor_msgs::Image::operator<(const sensor_msgs::Image & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {  
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (header < inobj.header) return true;
        if (inobj.header <  header) return false; 
        if (height < inobj.height) return true;
        if (inobj.height <  height) return false; 
        if (width < inobj.width) return true;
        if (inobj.width <  width) return false; 
        if (encoding < inobj.encoding) return true;
        if (inobj.encoding <  encoding) return false; 
        if (is_bigendian < inobj.is_bigendian) return true;
        if (inobj.is_bigendian <  is_bigendian) return false; 
        if (step < inobj.step) return true;
        if (inobj.step <  step) return false; 
        if (data < inobj.data) return true;
        if (inobj.data <  data) return false; ;
    }

    return ret;
}

bool sensor_msgs::Image::operator>(const sensor_msgs::Image & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (header > inobj.header) return true;
        if (inobj.header >  header) return false; 
        if (height > inobj.height) return true;
        if (inobj.height >  height) return false; 
        if (width > inobj.width) return true;
        if (inobj.width >  width) return false; 
        if (encoding > inobj.encoding) return true;
        if (inobj.encoding >  encoding) return false; 
        if (is_bigendian > inobj.is_bigendian) return true;
        if (inobj.is_bigendian >  is_bigendian) return false; 
        if (step > inobj.step) return true;
        if (inobj.step >  step) return false; 
        if (data > inobj.data) return true;
        if (inobj.data >  data) return false; ;
    }

    return ret;
}

template <> void rframe::json_io::encode(std::stringstream & sstr, const char * name, const sensor_msgs::Image & t, std::string & indent, bool lastItem)
{
    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectStart(sstr,name,indent);

    rframe::json_io::encode(sstr,"header",t.header,indent,false);
    rframe::json_io::encode(sstr,"height",t.height,indent,false);
    rframe::json_io::encode(sstr,"width",t.width,indent,false);
    rframe::json_io::encode(sstr,"encoding",t.encoding,indent,false);
    rframe::json_io::encode(sstr,"is_bigendian",t.is_bigendian,indent,false);
    rframe::json_io::encode(sstr,"step",t.step,indent,false);
    rframe::json_io::encode(sstr,"data",t.data,indent,true);

    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectEnd(sstr,indent,lastItem);
}

std::string sensor_msgs::Image::toStr(bool pretty) const
{

    stringstream sstr;
    string indent = (pretty == true) ? "\n" : "";

    rframe::json_io::encodeObjectStartMain(sstr,indent);
    rframe::json_io::encode(sstr,"",*this,indent,true);
    rframe::json_io::encodeObjectEnd(sstr,indent,true); // false so as to  not add , at end of string

    return sstr.str();

};

std::basic_ostream<char>& operator<<(std::basic_ostream<char> &s, const sensor_msgs::Image & value)
{
    return s << value.toStr(false);
}


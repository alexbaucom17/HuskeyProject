// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:07 -0500
//  From Template/Script: data_templates/DataClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <math.h> // to allow use of common constants...
#include <common/Error.h>
#include "sensor_msgs/ChannelFloat32.h"

#include <common/JsonIo.h> // include here so container types are included by the class header 

using namespace std;

const unsigned int sensor_msgs::ChannelFloat32::ID;
const unsigned int sensor_msgs::ChannelFloat32::DATA_VERSION;
const std::string sensor_msgs::ChannelFloat32::DATA_TYPE_NAME = "ChannelFloat32";
const std::string sensor_msgs::ChannelFloat32::DATA_TYPE_FULL_NAME = "sensor_msgs::ChannelFloat32";
const std::string sensor_msgs::ChannelFloat32::VERSION_MD5 = "6ebbd6d50c95a4ba0e37325b0f35631c";
/* xml source for this class */
const std::string sensor_msgs::ChannelFloat32::XML_SOURCE = "<class name=\"ChannelFloat32\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"3d40139cdd33dfedcb71ffeeeb42ae7f\" rosDesc=\"# This message is used by the PointCloud message to hold optional data\\n# associated with each point in the cloud. The length of the values\\n# array should be the same as the length of the points array in the\\n# PointCloud, and each value should be associated with the corresponding\\n# point.\\n\\n# Channel names in existing practice include:\\n#   \\&quot;u\\&quot;, \\&quot;v\\&quot; - row and column (respectively) in the left stereo image.\\n#              This is opposite to usual conventions but remains for\\n#              historical reasons. The newer PointCloud2 message has no\\n#              such problem.\\n#   \\&quot;rgb\\&quot; - For point clouds produced by color stereo cameras. uint8\\n#           (R,G,B) values packed into the least significant 24 bits,\\n#           in order.\\n#   \\&quot;intensity\\&quot; - laser or pixel intensity.\\n#   \\&quot;distance\\&quot;\\n\\n# The channel name should give semantics of the channel (e.g.\\n# \\&quot;intensity\\&quot; instead of \\&quot;value\\&quot;).\\nstring name\\n\\n# The values array should be 1-1 with the elements of the associated\\n# PointCloud.\\nfloat32[] values\\n\" comment=\"This message is used by the PointCloud message to hold optional data  associated with each point in the cloud. The length of the values  array should be the same as the length of the points array in the  PointCloud, and each value should be associated with the corresponding  point.\" id=\"237354212\">\
  <field name=\"name\" type=\"string\" sourceType=\"string\" comment=\"The values array should be 1-1 with the elements of the associated  PointCloud.\"/>\
  <field name=\"values\" type=\"vector(float)\" sourceType=\"float32\" comment=\"\"/>\
</class>";

sensor_msgs::ChannelFloat32::ChannelFloat32() : name(), values()
{  
};

sensor_msgs::ChannelFloat32::ChannelFloat32(const sensor_msgs::ChannelFloat32 & inobj) : name(inobj.name), values(inobj.values)
{
};

sensor_msgs::ChannelFloat32::~ChannelFloat32()
{
};

sensor_msgs::ChannelFloat32 * sensor_msgs::ChannelFloat32::New()
{ 
    return new ChannelFloat32();
};

bool sensor_msgs::ChannelFloat32::dataTypeFlat() 
{   
    return false; 
};

sensor_msgs::ChannelFloat32 & sensor_msgs::ChannelFloat32::operator=(const sensor_msgs::ChannelFloat32 & inobj)
{
    if (this != &inobj)
    {

        // if datatype is flat, optimize with memcpy (complier level optimiation)
              /*  if (dataTypeFlat() == true)
                  REMOVED invalid when assigning from a parent type as this is the pointer to the derived type, thus sensor_msgs::ChannelFloat32 is copied to the wrong location

        {
            memcpy(this,&inobj,sizeof(sensor_msgs::ChannelFloat32));
        }
        else */ 
        {

            name = inobj.name;
            values = inobj.values;
        }
    }

    return *this;
}

bool sensor_msgs::ChannelFloat32::operator==(const sensor_msgs::ChannelFloat32 & inobj) const
{
    bool ret = true;

    if (this != &inobj)
    { 
        ret = ret 
             && (name == inobj.name)
             && (values == inobj.values);
    }

    return ret;
}

bool sensor_msgs::ChannelFloat32::operator!=(const sensor_msgs::ChannelFloat32 & inobj) const
{
    bool ret = false;

    if (this != &inobj)
    {
        ret = !operator==(inobj);
    }

    return ret;
}

bool sensor_msgs::ChannelFloat32::operator<(const sensor_msgs::ChannelFloat32 & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {  
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (name < inobj.name) return true;
        if (inobj.name <  name) return false; 
        if (values < inobj.values) return true;
        if (inobj.values <  values) return false; ;
    }

    return ret;
}

bool sensor_msgs::ChannelFloat32::operator>(const sensor_msgs::ChannelFloat32 & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (name > inobj.name) return true;
        if (inobj.name >  name) return false; 
        if (values > inobj.values) return true;
        if (inobj.values >  values) return false; ;
    }

    return ret;
}

template <> void rframe::json_io::encode(std::stringstream & sstr, const char * name, const sensor_msgs::ChannelFloat32 & t, std::string & indent, bool lastItem)
{
    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectStart(sstr,name,indent);

    rframe::json_io::encode(sstr,"name",t.name,indent,false);
    rframe::json_io::encode(sstr,"values",t.values,indent,true);

    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectEnd(sstr,indent,lastItem);
}

std::string sensor_msgs::ChannelFloat32::toStr(bool pretty) const
{

    stringstream sstr;
    string indent = (pretty == true) ? "\n" : "";

    rframe::json_io::encodeObjectStartMain(sstr,indent);
    rframe::json_io::encode(sstr,"",*this,indent,true);
    rframe::json_io::encodeObjectEnd(sstr,indent,true); // false so as to  not add , at end of string

    return sstr.str();

};

std::basic_ostream<char>& operator<<(std::basic_ostream<char> &s, const sensor_msgs::ChannelFloat32 & value)
{
    return s << value.toStr(false);
}


// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:30:54 -0500
//  From Template/Script: data_templates/NMLHeaderTemplate.h
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#ifndef _CODEGEN_MOVE_BASE_MSGS_GENCPPNML_H_
#define _CODEGEN_MOVE_BASE_MSGS_GENCPPNML_H_

#include <messaging/nml/NMLMessageFactory.h>
//#include <DataTypeInfo.h>
#include <messaging/Message.h>

#include "move_base_msgs_gencpp_NMLSupport.h"

namespace rframe { class DataTypeInfo; };

#include "MoveBaseAction.h"
#include "MoveBaseActionFeedback.h"
#include "MoveBaseActionGoal.h"
#include "MoveBaseActionResult.h"
#include "MoveBaseFeedback.h"
#include "MoveBaseGoal.h"
#include "MoveBaseResult.h"

namespace move_base_msgs {

    /** definition of message factory for move_base_msgs_gencpp */
    class move_base_msgs_gencppNMLMessageFactory : public NMLMessageFactory
    {
    public:
        /** constructor */
        move_base_msgs_gencppNMLMessageFactory();
        /** destructor */
        virtual ~move_base_msgs_gencppNMLMessageFactory();

        /** see  rframe::MessageFactoryInterface */
        virtual void dataTypes(std::vector<DataTypeInfo> & ids);
        /** see  rframe::MessageFactoryInterface */
        virtual int dataType(NMLmsg & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<NMLmsg> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateTransport(NMLmsg * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateMessage(MessageBase * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int toTransport( MessageBase & src, NMLmsg & dst);
        /** see  rframe::MessageFactoryInterface */
        virtual int fromTransport( NMLmsg & src, MessageBase & dst);

        /** \return poitner to nml format function */
        virtual NML_FORMAT_PTR FormatPointer();
        /** run constructor for class of type id in the provided buffer */
        virtual int constructBuffer(rframe::ID_TYPE id, void * buffer);
        /** run destructor for class of type id in the buffer */
        virtual int destructBuffer(rframe::ID_TYPE id, void * buffer);
    };

    /** factory allocation function for use when not dynamically loading the factory library  */
    NMLMessageFactory * allocate_move_base_msgs_gencpp();

    /** NML interface for MoveBaseAction 

    */
    class MoveBaseActionNML : public NMLmsg
    {
    public:

        /** constructor */
        MoveBaseActionNML();
        /** destructor */
        ~MoveBaseActionNML();

        /** assignment operator */
        MoveBaseActionNML & operator=(const MoveBaseActionNML &inobj);
        /** assignment operator for base data class */
        MoveBaseActionNML & operator=(const MoveBaseAction &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        MoveBaseAction nmlPayload;

        /** set payload */
        void payload(const MoveBaseAction &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<MoveBaseAction> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        MoveBaseAction * payload() { return & nmlPayload; };

    //     std::shared_ptr<MoveBaseAction> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for MoveBaseActionFeedback 

    */
    class MoveBaseActionFeedbackNML : public NMLmsg
    {
    public:

        /** constructor */
        MoveBaseActionFeedbackNML();
        /** destructor */
        ~MoveBaseActionFeedbackNML();

        /** assignment operator */
        MoveBaseActionFeedbackNML & operator=(const MoveBaseActionFeedbackNML &inobj);
        /** assignment operator for base data class */
        MoveBaseActionFeedbackNML & operator=(const MoveBaseActionFeedback &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        MoveBaseActionFeedback nmlPayload;

        /** set payload */
        void payload(const MoveBaseActionFeedback &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<MoveBaseActionFeedback> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        MoveBaseActionFeedback * payload() { return & nmlPayload; };

    //     std::shared_ptr<MoveBaseActionFeedback> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for MoveBaseActionGoal 

    */
    class MoveBaseActionGoalNML : public NMLmsg
    {
    public:

        /** constructor */
        MoveBaseActionGoalNML();
        /** destructor */
        ~MoveBaseActionGoalNML();

        /** assignment operator */
        MoveBaseActionGoalNML & operator=(const MoveBaseActionGoalNML &inobj);
        /** assignment operator for base data class */
        MoveBaseActionGoalNML & operator=(const MoveBaseActionGoal &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        MoveBaseActionGoal nmlPayload;

        /** set payload */
        void payload(const MoveBaseActionGoal &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<MoveBaseActionGoal> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        MoveBaseActionGoal * payload() { return & nmlPayload; };

    //     std::shared_ptr<MoveBaseActionGoal> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for MoveBaseActionResult 

    */
    class MoveBaseActionResultNML : public NMLmsg
    {
    public:

        /** constructor */
        MoveBaseActionResultNML();
        /** destructor */
        ~MoveBaseActionResultNML();

        /** assignment operator */
        MoveBaseActionResultNML & operator=(const MoveBaseActionResultNML &inobj);
        /** assignment operator for base data class */
        MoveBaseActionResultNML & operator=(const MoveBaseActionResult &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        MoveBaseActionResult nmlPayload;

        /** set payload */
        void payload(const MoveBaseActionResult &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<MoveBaseActionResult> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        MoveBaseActionResult * payload() { return & nmlPayload; };

    //     std::shared_ptr<MoveBaseActionResult> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for MoveBaseFeedback 

    */
    class MoveBaseFeedbackNML : public NMLmsg
    {
    public:

        /** constructor */
        MoveBaseFeedbackNML();
        /** destructor */
        ~MoveBaseFeedbackNML();

        /** assignment operator */
        MoveBaseFeedbackNML & operator=(const MoveBaseFeedbackNML &inobj);
        /** assignment operator for base data class */
        MoveBaseFeedbackNML & operator=(const MoveBaseFeedback &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        MoveBaseFeedback nmlPayload;

        /** set payload */
        void payload(const MoveBaseFeedback &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<MoveBaseFeedback> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        MoveBaseFeedback * payload() { return & nmlPayload; };

    //     std::shared_ptr<MoveBaseFeedback> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for MoveBaseGoal 

    */
    class MoveBaseGoalNML : public NMLmsg
    {
    public:

        /** constructor */
        MoveBaseGoalNML();
        /** destructor */
        ~MoveBaseGoalNML();

        /** assignment operator */
        MoveBaseGoalNML & operator=(const MoveBaseGoalNML &inobj);
        /** assignment operator for base data class */
        MoveBaseGoalNML & operator=(const MoveBaseGoal &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        MoveBaseGoal nmlPayload;

        /** set payload */
        void payload(const MoveBaseGoal &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<MoveBaseGoal> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        MoveBaseGoal * payload() { return & nmlPayload; };

    //     std::shared_ptr<MoveBaseGoal> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for MoveBaseResult 

    */
    class MoveBaseResultNML : public NMLmsg
    {
    public:

        /** constructor */
        MoveBaseResultNML();
        /** destructor */
        ~MoveBaseResultNML();

        /** assignment operator */
        MoveBaseResultNML & operator=(const MoveBaseResultNML &inobj);
        /** assignment operator for base data class */
        MoveBaseResultNML & operator=(const MoveBaseResult &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        MoveBaseResult nmlPayload;

        /** set payload */
        void payload(const MoveBaseResult &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<MoveBaseResult> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        MoveBaseResult * payload() { return & nmlPayload; };

    //     std::shared_ptr<MoveBaseResult> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    // predeclaration of nmlupdate functions (necessary due to namespaces )

    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, move_base_msgs::MoveBaseAction & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, move_base_msgs::MoveBaseActionFeedback & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, move_base_msgs::MoveBaseActionGoal & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, move_base_msgs::MoveBaseActionResult & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, move_base_msgs::MoveBaseFeedback & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, move_base_msgs::MoveBaseGoal & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, move_base_msgs::MoveBaseResult & inobj);

    /** nml format function */
    int move_base_msgs_gencpp_format(NMLTYPE type, void * buffer, CMS* cms);

}; // end namespace move_base_msgs

#endif // _MOVE_BASE_MSGS_GENCPPNML_H_

// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:08 -0500
//  From Template/Script: data_templates/DataLibraryTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "std_msgs_gencpp_Library.h"
#include <common/Log.h>
#include <common/TypeRegistry.h>
#include <messaging/Message.h>

#include <std_msgs/RosTime.h>
#include <std_msgs/RosDuration.h>
#include <std_msgs/HeaderTest.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Byte.h>
#include <std_msgs/ByteMultiArray.h>
#include <std_msgs/Char.h>
#include <std_msgs/ColorRGBA.h>
#include <std_msgs/Duration.h>
#include <std_msgs/Empty.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32MultiArray.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Header.h>
#include <std_msgs/Int16.h>
#include <std_msgs/Int16MultiArray.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32MultiArray.h>
#include <std_msgs/Int64.h>
#include <std_msgs/Int64MultiArray.h>
#include <std_msgs/Int8.h>
#include <std_msgs/Int8MultiArray.h>
#include <std_msgs/MultiArrayDimension.h>
#include <std_msgs/MultiArrayLayout.h>
#include <std_msgs/String.h>
#include <std_msgs/Time.h>
#include <std_msgs/UInt16.h>
#include <std_msgs/UInt16MultiArray.h>
#include <std_msgs/UInt32.h>
#include <std_msgs/UInt32MultiArray.h>
#include <std_msgs/UInt64.h>
#include <std_msgs/UInt64MultiArray.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8MultiArray.h>

extern "C"
{
    /** library access method */
    int rframeRegisterDataLibrary()
    {
        return std_msgs::registerLibrary();
    };
}

namespace std_msgs
{

    static void deallocateMessage(MessageBase * msg)
    {
        delete msg;
    }

    static int allocateMessage(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
    {
        int retval = rframe::Error::SUCCESS;
        bool found = true;
        switch (id)
        { 
            case RosTime::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<RosTime>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case RosDuration::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<RosDuration>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case HeaderTest::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<HeaderTest>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Bool::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Bool>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Byte::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Byte>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case ByteMultiArray::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<ByteMultiArray>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Char::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Char>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case ColorRGBA::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<ColorRGBA>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Duration::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Duration>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Empty::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Empty>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Float32::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Float32>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Float32MultiArray::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Float32MultiArray>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Float64::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Float64>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Float64MultiArray::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Float64MultiArray>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Header::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Header>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Int16::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Int16>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Int16MultiArray::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Int16MultiArray>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Int32::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Int32>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Int32MultiArray::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Int32MultiArray>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Int64::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Int64>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Int64MultiArray::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Int64MultiArray>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Int8::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Int8>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Int8MultiArray::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Int8MultiArray>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case MultiArrayDimension::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<MultiArrayDimension>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case MultiArrayLayout::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<MultiArrayLayout>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case String::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<String>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Time::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Time>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case UInt16::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<UInt16>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case UInt16MultiArray::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<UInt16MultiArray>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case UInt32::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<UInt32>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case UInt32MultiArray::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<UInt32MultiArray>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case UInt64::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<UInt64>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case UInt64MultiArray::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<UInt64MultiArray>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case UInt8::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<UInt8>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case UInt8MultiArray::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<UInt8MultiArray>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            default:
            {
                found = false;
            }
        }

        if (found == false)
        {
            retval = rframe::Error::PARAM_RANGE;
        }
        else if (msg.get() == NULL)
        {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else if (msg.get() != NULL)
        {
            retval = rframe::Error::SUCCESS;
        }

        return retval;
    }

    /** registry this data set with the system */
    //int register_std_msgs_gencpp()
    int registerLibrary()
    {
        int retval = rframe::Error::SUCCESS;
        static bool registered = false;
        rframe::TypeRegistry & reg = rframe::TypeRegistry::instance();

        LOG_INFO("registering data for library: std_msgs_gencpp");

        if (registered == false)
        {
            registered = true;

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::RosTime::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::RosTime>(
                    // boost::lambda::new_ptr<std_msgs::RosTime>(),
                    [](){ return new std_msgs::RosTime(); },
                                std::bind(allocateMessage,std_msgs::RosTime::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: RosTime");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::RosTime::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::RosTime::DATA_TYPE_NAME,std_msgs::RosTime::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: RosTime");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::RosDuration::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::RosDuration>(
                    // boost::lambda::new_ptr<std_msgs::RosDuration>(),
                    [](){ return new std_msgs::RosDuration(); },
                                std::bind(allocateMessage,std_msgs::RosDuration::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: RosDuration");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::RosDuration::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::RosDuration::DATA_TYPE_NAME,std_msgs::RosDuration::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: RosDuration");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::HeaderTest::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::HeaderTest>(
                    // boost::lambda::new_ptr<std_msgs::HeaderTest>(),
                    [](){ return new std_msgs::HeaderTest(); },
                                std::bind(allocateMessage,std_msgs::HeaderTest::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: HeaderTest");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::HeaderTest::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::HeaderTest::DATA_TYPE_NAME,std_msgs::HeaderTest::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: HeaderTest");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Bool::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::Bool>(
                    // boost::lambda::new_ptr<std_msgs::Bool>(),
                    [](){ return new std_msgs::Bool(); },
                                std::bind(allocateMessage,std_msgs::Bool::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Bool");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Bool::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::Bool::DATA_TYPE_NAME,std_msgs::Bool::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Bool");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Byte::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::Byte>(
                    // boost::lambda::new_ptr<std_msgs::Byte>(),
                    [](){ return new std_msgs::Byte(); },
                                std::bind(allocateMessage,std_msgs::Byte::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Byte");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Byte::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::Byte::DATA_TYPE_NAME,std_msgs::Byte::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Byte");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::ByteMultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::ByteMultiArray>(
                    // boost::lambda::new_ptr<std_msgs::ByteMultiArray>(),
                    [](){ return new std_msgs::ByteMultiArray(); },
                                std::bind(allocateMessage,std_msgs::ByteMultiArray::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: ByteMultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::ByteMultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::ByteMultiArray::DATA_TYPE_NAME,std_msgs::ByteMultiArray::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: ByteMultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Char::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::Char>(
                    // boost::lambda::new_ptr<std_msgs::Char>(),
                    [](){ return new std_msgs::Char(); },
                                std::bind(allocateMessage,std_msgs::Char::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Char");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Char::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::Char::DATA_TYPE_NAME,std_msgs::Char::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Char");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::ColorRGBA::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::ColorRGBA>(
                    // boost::lambda::new_ptr<std_msgs::ColorRGBA>(),
                    [](){ return new std_msgs::ColorRGBA(); },
                                std::bind(allocateMessage,std_msgs::ColorRGBA::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: ColorRGBA");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::ColorRGBA::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::ColorRGBA::DATA_TYPE_NAME,std_msgs::ColorRGBA::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: ColorRGBA");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Duration::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::Duration>(
                    // boost::lambda::new_ptr<std_msgs::Duration>(),
                    [](){ return new std_msgs::Duration(); },
                                std::bind(allocateMessage,std_msgs::Duration::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Duration");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Duration::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::Duration::DATA_TYPE_NAME,std_msgs::Duration::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Duration");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Empty::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::Empty>(
                    // boost::lambda::new_ptr<std_msgs::Empty>(),
                    [](){ return new std_msgs::Empty(); },
                                std::bind(allocateMessage,std_msgs::Empty::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Empty");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Empty::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::Empty::DATA_TYPE_NAME,std_msgs::Empty::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Empty");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Float32::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::Float32>(
                    // boost::lambda::new_ptr<std_msgs::Float32>(),
                    [](){ return new std_msgs::Float32(); },
                                std::bind(allocateMessage,std_msgs::Float32::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Float32");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Float32::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::Float32::DATA_TYPE_NAME,std_msgs::Float32::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Float32");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Float32MultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::Float32MultiArray>(
                    // boost::lambda::new_ptr<std_msgs::Float32MultiArray>(),
                    [](){ return new std_msgs::Float32MultiArray(); },
                                std::bind(allocateMessage,std_msgs::Float32MultiArray::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Float32MultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Float32MultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::Float32MultiArray::DATA_TYPE_NAME,std_msgs::Float32MultiArray::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Float32MultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Float64::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::Float64>(
                    // boost::lambda::new_ptr<std_msgs::Float64>(),
                    [](){ return new std_msgs::Float64(); },
                                std::bind(allocateMessage,std_msgs::Float64::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Float64");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Float64::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::Float64::DATA_TYPE_NAME,std_msgs::Float64::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Float64");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Float64MultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::Float64MultiArray>(
                    // boost::lambda::new_ptr<std_msgs::Float64MultiArray>(),
                    [](){ return new std_msgs::Float64MultiArray(); },
                                std::bind(allocateMessage,std_msgs::Float64MultiArray::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Float64MultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Float64MultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::Float64MultiArray::DATA_TYPE_NAME,std_msgs::Float64MultiArray::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Float64MultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Header::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::Header>(
                    // boost::lambda::new_ptr<std_msgs::Header>(),
                    [](){ return new std_msgs::Header(); },
                                std::bind(allocateMessage,std_msgs::Header::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Header");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Header::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::Header::DATA_TYPE_NAME,std_msgs::Header::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Header");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Int16::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::Int16>(
                    // boost::lambda::new_ptr<std_msgs::Int16>(),
                    [](){ return new std_msgs::Int16(); },
                                std::bind(allocateMessage,std_msgs::Int16::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Int16");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Int16::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::Int16::DATA_TYPE_NAME,std_msgs::Int16::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Int16");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Int16MultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::Int16MultiArray>(
                    // boost::lambda::new_ptr<std_msgs::Int16MultiArray>(),
                    [](){ return new std_msgs::Int16MultiArray(); },
                                std::bind(allocateMessage,std_msgs::Int16MultiArray::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Int16MultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Int16MultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::Int16MultiArray::DATA_TYPE_NAME,std_msgs::Int16MultiArray::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Int16MultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Int32::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::Int32>(
                    // boost::lambda::new_ptr<std_msgs::Int32>(),
                    [](){ return new std_msgs::Int32(); },
                                std::bind(allocateMessage,std_msgs::Int32::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Int32");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Int32::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::Int32::DATA_TYPE_NAME,std_msgs::Int32::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Int32");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Int32MultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::Int32MultiArray>(
                    // boost::lambda::new_ptr<std_msgs::Int32MultiArray>(),
                    [](){ return new std_msgs::Int32MultiArray(); },
                                std::bind(allocateMessage,std_msgs::Int32MultiArray::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Int32MultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Int32MultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::Int32MultiArray::DATA_TYPE_NAME,std_msgs::Int32MultiArray::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Int32MultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Int64::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::Int64>(
                    // boost::lambda::new_ptr<std_msgs::Int64>(),
                    [](){ return new std_msgs::Int64(); },
                                std::bind(allocateMessage,std_msgs::Int64::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Int64");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Int64::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::Int64::DATA_TYPE_NAME,std_msgs::Int64::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Int64");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Int64MultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::Int64MultiArray>(
                    // boost::lambda::new_ptr<std_msgs::Int64MultiArray>(),
                    [](){ return new std_msgs::Int64MultiArray(); },
                                std::bind(allocateMessage,std_msgs::Int64MultiArray::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Int64MultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Int64MultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::Int64MultiArray::DATA_TYPE_NAME,std_msgs::Int64MultiArray::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Int64MultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Int8::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::Int8>(
                    // boost::lambda::new_ptr<std_msgs::Int8>(),
                    [](){ return new std_msgs::Int8(); },
                                std::bind(allocateMessage,std_msgs::Int8::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Int8");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Int8::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::Int8::DATA_TYPE_NAME,std_msgs::Int8::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Int8");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Int8MultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::Int8MultiArray>(
                    // boost::lambda::new_ptr<std_msgs::Int8MultiArray>(),
                    [](){ return new std_msgs::Int8MultiArray(); },
                                std::bind(allocateMessage,std_msgs::Int8MultiArray::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Int8MultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Int8MultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::Int8MultiArray::DATA_TYPE_NAME,std_msgs::Int8MultiArray::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Int8MultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::MultiArrayDimension::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::MultiArrayDimension>(
                    // boost::lambda::new_ptr<std_msgs::MultiArrayDimension>(),
                    [](){ return new std_msgs::MultiArrayDimension(); },
                                std::bind(allocateMessage,std_msgs::MultiArrayDimension::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: MultiArrayDimension");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::MultiArrayDimension::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::MultiArrayDimension::DATA_TYPE_NAME,std_msgs::MultiArrayDimension::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: MultiArrayDimension");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::MultiArrayLayout::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::MultiArrayLayout>(
                    // boost::lambda::new_ptr<std_msgs::MultiArrayLayout>(),
                    [](){ return new std_msgs::MultiArrayLayout(); },
                                std::bind(allocateMessage,std_msgs::MultiArrayLayout::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: MultiArrayLayout");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::MultiArrayLayout::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::MultiArrayLayout::DATA_TYPE_NAME,std_msgs::MultiArrayLayout::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: MultiArrayLayout");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::String::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::String>(
                    // boost::lambda::new_ptr<std_msgs::String>(),
                    [](){ return new std_msgs::String(); },
                                std::bind(allocateMessage,std_msgs::String::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: String");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::String::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::String::DATA_TYPE_NAME,std_msgs::String::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: String");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Time::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::Time>(
                    // boost::lambda::new_ptr<std_msgs::Time>(),
                    [](){ return new std_msgs::Time(); },
                                std::bind(allocateMessage,std_msgs::Time::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Time");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::Time::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::Time::DATA_TYPE_NAME,std_msgs::Time::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Time");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::UInt16::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::UInt16>(
                    // boost::lambda::new_ptr<std_msgs::UInt16>(),
                    [](){ return new std_msgs::UInt16(); },
                                std::bind(allocateMessage,std_msgs::UInt16::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: UInt16");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::UInt16::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::UInt16::DATA_TYPE_NAME,std_msgs::UInt16::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: UInt16");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::UInt16MultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::UInt16MultiArray>(
                    // boost::lambda::new_ptr<std_msgs::UInt16MultiArray>(),
                    [](){ return new std_msgs::UInt16MultiArray(); },
                                std::bind(allocateMessage,std_msgs::UInt16MultiArray::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: UInt16MultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::UInt16MultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::UInt16MultiArray::DATA_TYPE_NAME,std_msgs::UInt16MultiArray::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: UInt16MultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::UInt32::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::UInt32>(
                    // boost::lambda::new_ptr<std_msgs::UInt32>(),
                    [](){ return new std_msgs::UInt32(); },
                                std::bind(allocateMessage,std_msgs::UInt32::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: UInt32");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::UInt32::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::UInt32::DATA_TYPE_NAME,std_msgs::UInt32::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: UInt32");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::UInt32MultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::UInt32MultiArray>(
                    // boost::lambda::new_ptr<std_msgs::UInt32MultiArray>(),
                    [](){ return new std_msgs::UInt32MultiArray(); },
                                std::bind(allocateMessage,std_msgs::UInt32MultiArray::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: UInt32MultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::UInt32MultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::UInt32MultiArray::DATA_TYPE_NAME,std_msgs::UInt32MultiArray::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: UInt32MultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::UInt64::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::UInt64>(
                    // boost::lambda::new_ptr<std_msgs::UInt64>(),
                    [](){ return new std_msgs::UInt64(); },
                                std::bind(allocateMessage,std_msgs::UInt64::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: UInt64");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::UInt64::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::UInt64::DATA_TYPE_NAME,std_msgs::UInt64::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: UInt64");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::UInt64MultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::UInt64MultiArray>(
                    // boost::lambda::new_ptr<std_msgs::UInt64MultiArray>(),
                    [](){ return new std_msgs::UInt64MultiArray(); },
                                std::bind(allocateMessage,std_msgs::UInt64MultiArray::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: UInt64MultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::UInt64MultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::UInt64MultiArray::DATA_TYPE_NAME,std_msgs::UInt64MultiArray::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: UInt64MultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::UInt8::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::UInt8>(
                    // boost::lambda::new_ptr<std_msgs::UInt8>(),
                    [](){ return new std_msgs::UInt8(); },
                                std::bind(allocateMessage,std_msgs::UInt8::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: UInt8");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::UInt8::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::UInt8::DATA_TYPE_NAME,std_msgs::UInt8::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: UInt8");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::UInt8MultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<std_msgs::UInt8MultiArray>(
                    // boost::lambda::new_ptr<std_msgs::UInt8MultiArray>(),
                    [](){ return new std_msgs::UInt8MultiArray(); },
                                std::bind(allocateMessage,std_msgs::UInt8MultiArray::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: UInt8MultiArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = std_msgs::UInt8MultiArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(std_msgs::UInt8MultiArray::DATA_TYPE_NAME,std_msgs::UInt8MultiArray::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: UInt8MultiArray");
            }

        }

        return retval;
    };

    std::string xmlSource()
    {
        return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\
<!--\
 \
  AUTOGENERATED FILE:   do not edit\
\
  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:00 -0500\
  From Template/Script: rosToXML.rb\
 \
\
-->\
<classes library_name=\"std_msgs_gencpp\" namespace=\"std_msgs\">\
<!-- note: injecting the following classes for serialization support & test -->\
<class name=\"RosTime\" comment=\"core of ros time representation\" publicDataMembers=\"true\" generateNML=\"true\" ros=\"true\" rosDesc=\"rframe version of ros::Time\" sourceIDL=\"ROS\">\
  <field name=\"sec\" type=\"unsigned int\" comment=\"seconds \"/>\
  <field name=\"nsec\" type=\"unsigned int\" comment=\"nano seconds\"/>\
</class>\
\
<class name=\"RosDuration\" comment=\"core of ros time representation\" publicDataMembers=\"true\" generateNML=\"true\" ros=\"true\" rosDesc=\"rframe version of ros::Duration\" sourceIDL=\"ROS\">\
  <field name=\"sec\" type=\"unsigned int\" comment=\"seconds \"/>\
  <field name=\"nsec\" type=\"unsigned int\" comment=\"nano seconds\"/>\
</class>\
\
<class name=\"HeaderTest\" comment=\"testing of header serialization\" publicDataMembers=\"true\" ros=\"true\" generateNML=\"new\" rosDesc=\"header serialization test\" sourceIDL=\"ROS\">\
  <field name=\"header\" type=\"std_msgs::Header\" comment=\"ros header\"/>\
  <field name=\"header2\" type=\"std_msgs::Header\" comment=\"ros header\"/>\
</class>\
<!-- note: injection done -->\
\
<class name=\"Bool\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"8b94c1b53db61fb6aed406028ad6332a\" rosDesc=\"\" comment=\"\">\
  <field name=\"data\" type=\"bool\" sourceType=\"bool\" comment=\"\"/>\
</class>\
\
<class name=\"Byte\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"ad736a2e8818154c487bb80fe42ce43b\" rosDesc=\"byte data\\n\" comment=\"\">\
  <field name=\"data\" type=\"char\" sourceType=\"byte\" comment=\"\"/>\
</class>\
\
<class name=\"ByteMultiArray\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"70ea476cbcfd65ac2f68f3cda1e891fe\" rosDesc=\"# Please look at the MultiArrayLayout message definition for\\n# documentation on all multiarrays.\\n\\nMultiArrayLayout  layout        # specification of data layout\\nbyte[]            data          # array of data\\n\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayLayout\\n# The multiarray declares a generic multi-dimensional array of a\\n# particular data type.  Dimensions are ordered from outer most\\n# to inner most.\\n\\nMultiArrayDimension[] dim # Array of dimension properties\\nuint32 data_offset        # padding elements at front of data\\n\\n# Accessors should ALWAYS be written in terms of dimension stride\\n# and specified outer-most dimension first.\\n# \\n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\\n#\\n# A standard, 3-channel 640x480 image with interleaved color channels\\n# would be specified as:\\n#\\n# dim[0].label  = \\&quot;height\\&quot;\\n# dim[0].size   = 480\\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\\n# dim[1].label  = \\&quot;width\\&quot;\\n# dim[1].size   = 640\\n# dim[1].stride = 3*640 = 1920\\n# dim[2].label  = \\&quot;channel\\&quot;\\n# dim[2].size   = 3\\n# dim[2].stride = 3\\n#\\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayDimension\\nstring label   # label of given dimension\\nuint32 size    # size of given dimension (in type units)\\n\" comment=\"Please look at the MultiArrayLayout message definition for  documentation on all multiarrays.\">\
  <field name=\"layout\" type=\"std_msgs::MultiArrayLayout\" sourceType=\"MultiArrayLayout\" comment=\"specification of data layout\"/>\
  <field name=\"data\" type=\"vector(char)\" sourceType=\"byte\" comment=\"array of data\"/>\
</class>\
\
<class name=\"Char\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"1bf77f25acecdedba0e224b162199717\" rosDesc=\"\" comment=\"\">\
  <field name=\"data\" type=\"unsigned char\" sourceType=\"char\" comment=\"\"/>\
</class>\
\
<class name=\"ColorRGBA\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"a29a96539573343b1310c73607334b00\" rosDesc=\"float32 r\\nfloat32 g\\nfloat32 b\\nfloat32 a\\n\" comment=\"\">\
  <field name=\"r\" type=\"float\" sourceType=\"float32\" comment=\"\"/>\
  <field name=\"g\" type=\"float\" sourceType=\"float32\" comment=\"\"/>\
  <field name=\"b\" type=\"float\" sourceType=\"float32\" comment=\"\"/>\
  <field name=\"a\" type=\"float\" sourceType=\"float32\" comment=\"\"/>\
</class>\
\
<class name=\"Duration\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"3e286caf4241d664e55f3ad380e2ae46\" rosDesc=\"duration data\\n\" comment=\"\">\
  <field name=\"data\" type=\"std_msgs::RosDuration\" sourceType=\"duration\" comment=\"\"/>\
</class>\
\
<class name=\"Empty\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"d41d8cd98f00b204e9800998ecf8427e\" rosDesc=\"\" comment=\"\">\
</class>\
\
<class name=\"Float32\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"73fcbf46b49191e672908e50842a83d4\" rosDesc=\"\" comment=\"\">\
  <field name=\"data\" type=\"float\" sourceType=\"float32\" comment=\"\"/>\
</class>\
\
<class name=\"Float32MultiArray\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"6a40e0ffa6a17a503ac3f8616991b1f6\" rosDesc=\"# Please look at the MultiArrayLayout message definition for\\n# documentation on all multiarrays.\\n\\nMultiArrayLayout  layout        # specification of data layout\\nfloat32[]         data          # array of data\\n\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayLayout\\n# The multiarray declares a generic multi-dimensional array of a\\n# particular data type.  Dimensions are ordered from outer most\\n# to inner most.\\n\\nMultiArrayDimension[] dim # Array of dimension properties\\nuint32 data_offset        # padding elements at front of data\\n\\n# Accessors should ALWAYS be written in terms of dimension stride\\n# and specified outer-most dimension first.\\n# \\n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\\n#\\n# A standard, 3-channel 640x480 image with interleaved color channels\\n# would be specified as:\\n#\\n# dim[0].label  = \\&quot;height\\&quot;\\n# dim[0].size   = 480\\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\\n# dim[1].label  = \\&quot;width\\&quot;\\n# dim[1].size   = 640\\n# dim[1].stride = 3*640 = 1920\\n# dim[2].label  = \\&quot;channel\\&quot;\\n# dim[2].size   = 3\\n# dim[2].stride = 3\\n#\\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayDimension\\nstring label   # label of given dimension\\nuint32 size    # size of given dimension (in type units)\\n\" comment=\"Please look at the MultiArrayLayout message definition for  documentation on all multiarrays.\">\
  <field name=\"layout\" type=\"std_msgs::MultiArrayLayout\" sourceType=\"MultiArrayLayout\" comment=\"specification of data layout\"/>\
  <field name=\"data\" type=\"vector(float)\" sourceType=\"float32\" comment=\"array of data\"/>\
</class>\
\
<class name=\"Float64\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"fdb28210bfa9d7c91146260178d9a584\" rosDesc=\"\" comment=\"\">\
  <field name=\"data\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
</class>\
\
<class name=\"Float64MultiArray\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"4b7d974086d4060e7db4613a7e6c3ba4\" rosDesc=\"# Please look at the MultiArrayLayout message definition for\\n# documentation on all multiarrays.\\n\\nMultiArrayLayout  layout        # specification of data layout\\nfloat64[]         data          # array of data\\n\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayLayout\\n# The multiarray declares a generic multi-dimensional array of a\\n# particular data type.  Dimensions are ordered from outer most\\n# to inner most.\\n\\nMultiArrayDimension[] dim # Array of dimension properties\\nuint32 data_offset        # padding elements at front of data\\n\\n# Accessors should ALWAYS be written in terms of dimension stride\\n# and specified outer-most dimension first.\\n# \\n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\\n#\\n# A standard, 3-channel 640x480 image with interleaved color channels\\n# would be specified as:\\n#\\n# dim[0].label  = \\&quot;height\\&quot;\\n# dim[0].size   = 480\\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\\n# dim[1].label  = \\&quot;width\\&quot;\\n# dim[1].size   = 640\\n# dim[1].stride = 3*640 = 1920\\n# dim[2].label  = \\&quot;channel\\&quot;\\n# dim[2].size   = 3\\n# dim[2].stride = 3\\n#\\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayDimension\\nstring label   # label of given dimension\\nuint32 size    # size of given dimension (in type units)\\n\" comment=\"Please look at the MultiArrayLayout message definition for  documentation on all multiarrays.\">\
  <field name=\"layout\" type=\"std_msgs::MultiArrayLayout\" sourceType=\"MultiArrayLayout\" comment=\"specification of data layout\"/>\
  <field name=\"data\" type=\"vector(double)\" sourceType=\"float64\" comment=\"array of data\"/>\
</class>\
\
<class name=\"Header\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"2176decaecbce78abc3b96ef049fabed\" rosDesc=\"# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\" comment=\"Standard metadata for higher-level stamped data types.  This is generally used to communicate timestamped data   in a particular coordinate frame.    sequence ID: consecutively increasing ID\">\
  <field name=\"seq\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"Two-integer timestamp that is expressed as:  * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')  * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')  time-handling sugar is provided by the client library\"/>\
  <field name=\"stamp\" type=\"std_msgs::RosTime\" sourceType=\"time\" comment=\"Frame this data is associated with  0: no frame  1: global frame\"/>\
  <field name=\"frame_id\" type=\"string\" sourceType=\"string\" comment=\"\"/>\
</class>\
\
<class name=\"Int16\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"8524586e34fbd7cb1c08c5f5f1ca0e57\" rosDesc=\"int16 data\\n\" comment=\"\">\
  <field name=\"data\" type=\"short int\" sourceType=\"int16\" comment=\"\"/>\
</class>\
\
<class name=\"Int16MultiArray\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"d9338d7f523fcb692fae9d0a0e9f067c\" rosDesc=\"# Please look at the MultiArrayLayout message definition for\\n# documentation on all multiarrays.\\n\\nMultiArrayLayout  layout        # specification of data layout\\nint16[]           data          # array of data\\n\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayLayout\\n# The multiarray declares a generic multi-dimensional array of a\\n# particular data type.  Dimensions are ordered from outer most\\n# to inner most.\\n\\nMultiArrayDimension[] dim # Array of dimension properties\\nuint32 data_offset        # padding elements at front of data\\n\\n# Accessors should ALWAYS be written in terms of dimension stride\\n# and specified outer-most dimension first.\\n# \\n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\\n#\\n# A standard, 3-channel 640x480 image with interleaved color channels\\n# would be specified as:\\n#\\n# dim[0].label  = \\&quot;height\\&quot;\\n# dim[0].size   = 480\\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\\n# dim[1].label  = \\&quot;width\\&quot;\\n# dim[1].size   = 640\\n# dim[1].stride = 3*640 = 1920\\n# dim[2].label  = \\&quot;channel\\&quot;\\n# dim[2].size   = 3\\n# dim[2].stride = 3\\n#\\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayDimension\\nstring label   # label of given dimension\\nuint32 size    # size of given dimension (in type units)\\n\" comment=\"Please look at the MultiArrayLayout message definition for  documentation on all multiarrays.\">\
  <field name=\"layout\" type=\"std_msgs::MultiArrayLayout\" sourceType=\"MultiArrayLayout\" comment=\"specification of data layout\"/>\
  <field name=\"data\" type=\"vector(short int)\" sourceType=\"int16\" comment=\"array of data\"/>\
</class>\
\
<class name=\"Int32\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"da5909fbe378aeaf85e547e830cc1bb7\" rosDesc=\"\" comment=\"\">\
  <field name=\"data\" type=\"int\" sourceType=\"int32\" comment=\"\"/>\
</class>\
\
<class name=\"Int32MultiArray\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"1d99f79f8b325b44fee908053e9c945b\" rosDesc=\"# Please look at the MultiArrayLayout message definition for\\n# documentation on all multiarrays.\\n\\nMultiArrayLayout  layout        # specification of data layout\\nint32[]           data          # array of data\\n\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayLayout\\n# The multiarray declares a generic multi-dimensional array of a\\n# particular data type.  Dimensions are ordered from outer most\\n# to inner most.\\n\\nMultiArrayDimension[] dim # Array of dimension properties\\nuint32 data_offset        # padding elements at front of data\\n\\n# Accessors should ALWAYS be written in terms of dimension stride\\n# and specified outer-most dimension first.\\n# \\n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\\n#\\n# A standard, 3-channel 640x480 image with interleaved color channels\\n# would be specified as:\\n#\\n# dim[0].label  = \\&quot;height\\&quot;\\n# dim[0].size   = 480\\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\\n# dim[1].label  = \\&quot;width\\&quot;\\n# dim[1].size   = 640\\n# dim[1].stride = 3*640 = 1920\\n# dim[2].label  = \\&quot;channel\\&quot;\\n# dim[2].size   = 3\\n# dim[2].stride = 3\\n#\\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayDimension\\nstring label   # label of given dimension\\nuint32 size    # size of given dimension (in type units)\\n\" comment=\"Please look at the MultiArrayLayout message definition for  documentation on all multiarrays.\">\
  <field name=\"layout\" type=\"std_msgs::MultiArrayLayout\" sourceType=\"MultiArrayLayout\" comment=\"specification of data layout\"/>\
  <field name=\"data\" type=\"vector(int)\" sourceType=\"int32\" comment=\"array of data\"/>\
</class>\
\
<class name=\"Int64\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"34add168574510e6e17f5d23ecc077ef\" rosDesc=\"\" comment=\"\">\
  <field name=\"data\" type=\"long long int\" sourceType=\"int64\" comment=\"\"/>\
</class>\
\
<class name=\"Int64MultiArray\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"54865aa6c65be0448113a2afc6a49270\" rosDesc=\"# Please look at the MultiArrayLayout message definition for\\n# documentation on all multiarrays.\\n\\nMultiArrayLayout  layout        # specification of data layout\\nint64[]           data          # array of data\\n\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayLayout\\n# The multiarray declares a generic multi-dimensional array of a\\n# particular data type.  Dimensions are ordered from outer most\\n# to inner most.\\n\\nMultiArrayDimension[] dim # Array of dimension properties\\nuint32 data_offset        # padding elements at front of data\\n\\n# Accessors should ALWAYS be written in terms of dimension stride\\n# and specified outer-most dimension first.\\n# \\n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\\n#\\n# A standard, 3-channel 640x480 image with interleaved color channels\\n# would be specified as:\\n#\\n# dim[0].label  = \\&quot;height\\&quot;\\n# dim[0].size   = 480\\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\\n# dim[1].label  = \\&quot;width\\&quot;\\n# dim[1].size   = 640\\n# dim[1].stride = 3*640 = 1920\\n# dim[2].label  = \\&quot;channel\\&quot;\\n# dim[2].size   = 3\\n# dim[2].stride = 3\\n#\\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayDimension\\nstring label   # label of given dimension\\nuint32 size    # size of given dimension (in type units)\\n\" comment=\"Please look at the MultiArrayLayout message definition for  documentation on all multiarrays.\">\
  <field name=\"layout\" type=\"std_msgs::MultiArrayLayout\" sourceType=\"MultiArrayLayout\" comment=\"specification of data layout\"/>\
  <field name=\"data\" type=\"vector(long long int)\" sourceType=\"int64\" comment=\"array of data\"/>\
</class>\
\
<class name=\"Int8\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"27ffa0c9c4b8fb8492252bcad9e5c57b\" rosDesc=\"int8 data\\n\" comment=\"\">\
  <field name=\"data\" type=\"char\" sourceType=\"int8\" comment=\"\"/>\
</class>\
\
<class name=\"Int8MultiArray\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"d7c1af35a1b4781bbe79e03dd94b7c13\" rosDesc=\"# Please look at the MultiArrayLayout message definition for\\n# documentation on all multiarrays.\\n\\nMultiArrayLayout  layout        # specification of data layout\\nint8[]            data          # array of data\\n\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayLayout\\n# The multiarray declares a generic multi-dimensional array of a\\n# particular data type.  Dimensions are ordered from outer most\\n# to inner most.\\n\\nMultiArrayDimension[] dim # Array of dimension properties\\nuint32 data_offset        # padding elements at front of data\\n\\n# Accessors should ALWAYS be written in terms of dimension stride\\n# and specified outer-most dimension first.\\n# \\n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\\n#\\n# A standard, 3-channel 640x480 image with interleaved color channels\\n# would be specified as:\\n#\\n# dim[0].label  = \\&quot;height\\&quot;\\n# dim[0].size   = 480\\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\\n# dim[1].label  = \\&quot;width\\&quot;\\n# dim[1].size   = 640\\n# dim[1].stride = 3*640 = 1920\\n# dim[2].label  = \\&quot;channel\\&quot;\\n# dim[2].size   = 3\\n# dim[2].stride = 3\\n#\\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayDimension\\nstring label   # label of given dimension\\nuint32 size    # size of given dimension (in type units)\\n\" comment=\"Please look at the MultiArrayLayout message definition for  documentation on all multiarrays.\">\
  <field name=\"layout\" type=\"std_msgs::MultiArrayLayout\" sourceType=\"MultiArrayLayout\" comment=\"specification of data layout\"/>\
  <field name=\"data\" type=\"vector(char)\" sourceType=\"int8\" comment=\"array of data\"/>\
</class>\
\
<class name=\"MultiArrayDimension\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"4cd0c83a8683deae40ecdac60e53bfa8\" rosDesc=\"string label   # label of given dimension\\nuint32 size    # size of given dimension (in type units)\\n\" comment=\"\">\
  <field name=\"label\" type=\"string\" sourceType=\"string\" comment=\"label of given dimension\"/>\
  <field name=\"size\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"size of given dimension (in type units)\"/>\
  <field name=\"stride\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"stride of given dimension\"/>\
</class>\
\
<class name=\"MultiArrayLayout\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"0fed2a11c13e11c5571b4e2a995a91a3\" rosDesc=\"# The multiarray declares a generic multi-dimensional array of a\\n# particular data type.  Dimensions are ordered from outer most\\n# to inner most.\\n\\nMultiArrayDimension[] dim # Array of dimension properties\\nuint32 data_offset        # padding elements at front of data\\n\\n# Accessors should ALWAYS be written in terms of dimension stride\\n# and specified outer-most dimension first.\\n# \\n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\\n#\\n# A standard, 3-channel 640x480 image with interleaved color channels\\n# would be specified as:\\n#\\n# dim[0].label  = \\&quot;height\\&quot;\\n# dim[0].size   = 480\\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\\n# dim[1].label  = \\&quot;width\\&quot;\\n# dim[1].size   = 640\\n# dim[1].stride = 3*640 = 1920\\n# dim[2].label  = \\&quot;channel\\&quot;\\n# dim[2].size   = 3\\n# dim[2].stride = 3\\n#\\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayDimension\\nstring label   # label of given dimension\\nuint32 size    # size of given dimension (in type units)\\n\" comment=\"The multiarray declares a generic multi-dimensional array of a  particular data type.  Dimensions are ordered from outer most  to inner most.\">\
  <field name=\"dim\" type=\"vector(std_msgs::MultiArrayDimension)\" sourceType=\"MultiArrayDimension\" comment=\"Array of dimension properties\"/>\
  <field name=\"data_offset\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"padding elements at front of data  Accessors should ALWAYS be written in terms of dimension stride  and specified outer-most dimension first.    multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]   A standard, 3-channel 640x480 image with interleaved color channels  would be specified as:   dim[0].label  = &quot;height&quot;  dim[0].size   = 480  dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)  dim[1].label  = &quot;width&quot;  dim[1].size   = 640  dim[1].stride = 3*640 = 1920  dim[2].label  = &quot;channel&quot;  dim[2].size   = 3  dim[2].stride = 3   multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\"/>\
</class>\
\
<class name=\"String\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"992ce8a1687cec8c8bd883ec73ca41d1\" rosDesc=\"string data\\n\" comment=\"\">\
  <field name=\"data\" type=\"string\" sourceType=\"string\" comment=\"\"/>\
</class>\
\
<class name=\"Time\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"cd7166c74c552c311fbcc2fe5a7bc289\" rosDesc=\"time data\\n\" comment=\"\">\
  <field name=\"data\" type=\"std_msgs::RosTime\" sourceType=\"time\" comment=\"\"/>\
</class>\
\
<class name=\"UInt16\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"1df79edf208b629fe6b81923a544552d\" rosDesc=\"uint16 data\\n\" comment=\"\">\
  <field name=\"data\" type=\"unsigned short int\" sourceType=\"uint16\" comment=\"\"/>\
</class>\
\
<class name=\"UInt16MultiArray\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"52f264f1c973c4b73790d384c6cb4484\" rosDesc=\"# Please look at the MultiArrayLayout message definition for\\n# documentation on all multiarrays.\\n\\nMultiArrayLayout  layout        # specification of data layout\\nuint16[]            data        # array of data\\n\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayLayout\\n# The multiarray declares a generic multi-dimensional array of a\\n# particular data type.  Dimensions are ordered from outer most\\n# to inner most.\\n\\nMultiArrayDimension[] dim # Array of dimension properties\\nuint32 data_offset        # padding elements at front of data\\n\\n# Accessors should ALWAYS be written in terms of dimension stride\\n# and specified outer-most dimension first.\\n# \\n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\\n#\\n# A standard, 3-channel 640x480 image with interleaved color channels\\n# would be specified as:\\n#\\n# dim[0].label  = \\&quot;height\\&quot;\\n# dim[0].size   = 480\\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\\n# dim[1].label  = \\&quot;width\\&quot;\\n# dim[1].size   = 640\\n# dim[1].stride = 3*640 = 1920\\n# dim[2].label  = \\&quot;channel\\&quot;\\n# dim[2].size   = 3\\n# dim[2].stride = 3\\n#\\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayDimension\\nstring label   # label of given dimension\\nuint32 size    # size of given dimension (in type units)\\n\" comment=\"Please look at the MultiArrayLayout message definition for  documentation on all multiarrays.\">\
  <field name=\"layout\" type=\"std_msgs::MultiArrayLayout\" sourceType=\"MultiArrayLayout\" comment=\"specification of data layout\"/>\
  <field name=\"data\" type=\"vector(unsigned short int)\" sourceType=\"uint16\" comment=\"array of data\"/>\
</class>\
\
<class name=\"UInt32\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"304a39449588c7f8ce2df6e8001c5fce\" rosDesc=\"\" comment=\"\">\
  <field name=\"data\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"\"/>\
</class>\
\
<class name=\"UInt32MultiArray\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"4d6a180abc9be191b96a7eda6c8a233d\" rosDesc=\"# Please look at the MultiArrayLayout message definition for\\n# documentation on all multiarrays.\\n\\nMultiArrayLayout  layout        # specification of data layout\\nuint32[]          data          # array of data\\n\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayLayout\\n# The multiarray declares a generic multi-dimensional array of a\\n# particular data type.  Dimensions are ordered from outer most\\n# to inner most.\\n\\nMultiArrayDimension[] dim # Array of dimension properties\\nuint32 data_offset        # padding elements at front of data\\n\\n# Accessors should ALWAYS be written in terms of dimension stride\\n# and specified outer-most dimension first.\\n# \\n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\\n#\\n# A standard, 3-channel 640x480 image with interleaved color channels\\n# would be specified as:\\n#\\n# dim[0].label  = \\&quot;height\\&quot;\\n# dim[0].size   = 480\\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\\n# dim[1].label  = \\&quot;width\\&quot;\\n# dim[1].size   = 640\\n# dim[1].stride = 3*640 = 1920\\n# dim[2].label  = \\&quot;channel\\&quot;\\n# dim[2].size   = 3\\n# dim[2].stride = 3\\n#\\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayDimension\\nstring label   # label of given dimension\\nuint32 size    # size of given dimension (in type units)\\n\" comment=\"Please look at the MultiArrayLayout message definition for  documentation on all multiarrays.\">\
  <field name=\"layout\" type=\"std_msgs::MultiArrayLayout\" sourceType=\"MultiArrayLayout\" comment=\"specification of data layout\"/>\
  <field name=\"data\" type=\"vector(unsigned int)\" sourceType=\"uint32\" comment=\"array of data\"/>\
</class>\
\
<class name=\"UInt64\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"1b2a79973e8bf53d7b53acb71299cb57\" rosDesc=\"\" comment=\"\">\
  <field name=\"data\" type=\"unsigned long long int\" sourceType=\"uint64\" comment=\"\"/>\
</class>\
\
<class name=\"UInt64MultiArray\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"6088f127afb1d6c72927aa1247e945af\" rosDesc=\"# Please look at the MultiArrayLayout message definition for\\n# documentation on all multiarrays.\\n\\nMultiArrayLayout  layout        # specification of data layout\\nuint64[]          data          # array of data\\n\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayLayout\\n# The multiarray declares a generic multi-dimensional array of a\\n# particular data type.  Dimensions are ordered from outer most\\n# to inner most.\\n\\nMultiArrayDimension[] dim # Array of dimension properties\\nuint32 data_offset        # padding elements at front of data\\n\\n# Accessors should ALWAYS be written in terms of dimension stride\\n# and specified outer-most dimension first.\\n# \\n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\\n#\\n# A standard, 3-channel 640x480 image with interleaved color channels\\n# would be specified as:\\n#\\n# dim[0].label  = \\&quot;height\\&quot;\\n# dim[0].size   = 480\\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\\n# dim[1].label  = \\&quot;width\\&quot;\\n# dim[1].size   = 640\\n# dim[1].stride = 3*640 = 1920\\n# dim[2].label  = \\&quot;channel\\&quot;\\n# dim[2].size   = 3\\n# dim[2].stride = 3\\n#\\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayDimension\\nstring label   # label of given dimension\\nuint32 size    # size of given dimension (in type units)\\n\" comment=\"Please look at the MultiArrayLayout message definition for  documentation on all multiarrays.\">\
  <field name=\"layout\" type=\"std_msgs::MultiArrayLayout\" sourceType=\"MultiArrayLayout\" comment=\"specification of data layout\"/>\
  <field name=\"data\" type=\"vector(unsigned long long int)\" sourceType=\"uint64\" comment=\"array of data\"/>\
</class>\
\
<class name=\"UInt8\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"7c8164229e7d2c17eb95e9231617fdee\" rosDesc=\"uint8 data\\n\" comment=\"\">\
  <field name=\"data\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
</class>\
\
<class name=\"UInt8MultiArray\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"82373f1612381bb6ee473b5cd6f5d89c\" rosDesc=\"# Please look at the MultiArrayLayout message definition for\\n# documentation on all multiarrays.\\n\\nMultiArrayLayout  layout        # specification of data layout\\nuint8[]           data          # array of data\\n\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayLayout\\n# The multiarray declares a generic multi-dimensional array of a\\n# particular data type.  Dimensions are ordered from outer most\\n# to inner most.\\n\\nMultiArrayDimension[] dim # Array of dimension properties\\nuint32 data_offset        # padding elements at front of data\\n\\n# Accessors should ALWAYS be written in terms of dimension stride\\n# and specified outer-most dimension first.\\n# \\n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\\n#\\n# A standard, 3-channel 640x480 image with interleaved color channels\\n# would be specified as:\\n#\\n# dim[0].label  = \\&quot;height\\&quot;\\n# dim[0].size   = 480\\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\\n# dim[1].label  = \\&quot;width\\&quot;\\n# dim[1].size   = 640\\n# dim[1].stride = 3*640 = 1920\\n# dim[2].label  = \\&quot;channel\\&quot;\\n# dim[2].size   = 3\\n# dim[2].stride = 3\\n#\\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\\n\\n================================================================================\\nMSG: std_msgs/MultiArrayDimension\\nstring label   # label of given dimension\\nuint32 size    # size of given dimension (in type units)\\n\" comment=\"Please look at the MultiArrayLayout message definition for  documentation on all multiarrays.\">\
  <field name=\"layout\" type=\"std_msgs::MultiArrayLayout\" sourceType=\"MultiArrayLayout\" comment=\"specification of data layout\"/>\
  <field name=\"data\" type=\"vector(unsigned char)\" sourceType=\"uint8\" comment=\"array of data\"/>\
</class>\
\
\
</classes>\
";
    }

}; // end namespace std_msgs


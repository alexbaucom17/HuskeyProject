// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:09 -0500
//  From Template/Script: data_templates/DataClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <math.h> // to allow use of common constants...
#include <common/Error.h>
#include "trajectory_msgs/MultiDOFJointTrajectory.h"

#include <common/JsonIo.h> // include here so container types are included by the class header 

using namespace std;

const unsigned int trajectory_msgs::MultiDOFJointTrajectory::ID;
const unsigned int trajectory_msgs::MultiDOFJointTrajectory::DATA_VERSION;
const std::string trajectory_msgs::MultiDOFJointTrajectory::DATA_TYPE_NAME = "MultiDOFJointTrajectory";
const std::string trajectory_msgs::MultiDOFJointTrajectory::DATA_TYPE_FULL_NAME = "trajectory_msgs::MultiDOFJointTrajectory";
const std::string trajectory_msgs::MultiDOFJointTrajectory::VERSION_MD5 = "df7767b410cc52d8e2ed79f12f12b83e";
/* xml source for this class */
const std::string trajectory_msgs::MultiDOFJointTrajectory::XML_SOURCE = "<class name=\"MultiDOFJointTrajectory\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"ef145a45a5f47b77b7f5cdde4b16c942\" rosDesc=\"# The header is used to specify the coordinate frame and the reference time for the trajectory durations\\nHeader header\\n\\n# A representation of a multi-dof joint trajectory (each point is a transformation)\\n# Each point along the trajectory will include an array of positions/velocities/accelerations\\n# that has the same length as the array of joint names, and has the same order of joints as \\n# the joint names array.\\n\\nstring[] joint_names\\nMultiDOFJointTrajectoryPoint[] points\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: trajectory_msgs/MultiDOFJointTrajectoryPoint\\n# Each multi-dof joint can specify a transform (up to 6 DOF)\\ngeometry_msgs/Transform[] transforms\\n\\n# There can be a velocity specified for the origin of the joint \\ngeometry_msgs/Twist[] velocities\\n\\n# There can be an acceleration specified for the origin of the joint \\ngeometry_msgs/Twist[] accelerations\\n\\nduration time_from_start\\n\\n================================================================================\\nMSG: geometry_msgs/Transform\\n# This represents the transform between two coordinate frames in free space.\\n\\nVector3 translation\\nQuaternion rotation\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\\n================================================================================\\nMSG: geometry_msgs/Twist\\n# This expresses velocity in free space broken into its linear and angular parts.\\nVector3  linear\\nVector3  angular\\n\" comment=\"The header is used to specify the coordinate frame and the reference time for the trajectory durations\" id=\"109236942\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"A representation of a multi-dof joint trajectory (each point is a transformation)  Each point along the trajectory will include an array of positions/velocities/accelerations  that has the same length as the array of joint names, and has the same order of joints as   the joint names array.\"/>\
  <field name=\"joint_names\" type=\"vector(string)\" sourceType=\"string\" comment=\"\"/>\
  <field name=\"points\" type=\"vector(MultiDOFJointTrajectoryPoint)\" sourceType=\"MultiDOFJointTrajectoryPoint\" comment=\"\"/>\
</class>";

trajectory_msgs::MultiDOFJointTrajectory::MultiDOFJointTrajectory() : header(), joint_names(), points()
{  
};

trajectory_msgs::MultiDOFJointTrajectory::MultiDOFJointTrajectory(const trajectory_msgs::MultiDOFJointTrajectory & inobj) : header(inobj.header), joint_names(inobj.joint_names), points(inobj.points)
{
};

trajectory_msgs::MultiDOFJointTrajectory::~MultiDOFJointTrajectory()
{
};

trajectory_msgs::MultiDOFJointTrajectory * trajectory_msgs::MultiDOFJointTrajectory::New()
{ 
    return new MultiDOFJointTrajectory();
};

bool trajectory_msgs::MultiDOFJointTrajectory::dataTypeFlat() 
{   
    return false; 
};

trajectory_msgs::MultiDOFJointTrajectory & trajectory_msgs::MultiDOFJointTrajectory::operator=(const trajectory_msgs::MultiDOFJointTrajectory & inobj)
{
    if (this != &inobj)
    {

        // if datatype is flat, optimize with memcpy (complier level optimiation)
              /*  if (dataTypeFlat() == true)
                  REMOVED invalid when assigning from a parent type as this is the pointer to the derived type, thus trajectory_msgs::MultiDOFJointTrajectory is copied to the wrong location

        {
            memcpy(this,&inobj,sizeof(trajectory_msgs::MultiDOFJointTrajectory));
        }
        else */ 
        {

            header = inobj.header;
            joint_names = inobj.joint_names;
            points = inobj.points;
        }
    }

    return *this;
}

bool trajectory_msgs::MultiDOFJointTrajectory::operator==(const trajectory_msgs::MultiDOFJointTrajectory & inobj) const
{
    bool ret = true;

    if (this != &inobj)
    { 
        ret = ret 
             && (header == inobj.header)
             && (joint_names == inobj.joint_names)
             && (points == inobj.points);
    }

    return ret;
}

bool trajectory_msgs::MultiDOFJointTrajectory::operator!=(const trajectory_msgs::MultiDOFJointTrajectory & inobj) const
{
    bool ret = false;

    if (this != &inobj)
    {
        ret = !operator==(inobj);
    }

    return ret;
}

bool trajectory_msgs::MultiDOFJointTrajectory::operator<(const trajectory_msgs::MultiDOFJointTrajectory & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {  
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (header < inobj.header) return true;
        if (inobj.header <  header) return false; 
        if (joint_names < inobj.joint_names) return true;
        if (inobj.joint_names <  joint_names) return false; 
        if (points < inobj.points) return true;
        if (inobj.points <  points) return false; ;
    }

    return ret;
}

bool trajectory_msgs::MultiDOFJointTrajectory::operator>(const trajectory_msgs::MultiDOFJointTrajectory & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (header > inobj.header) return true;
        if (inobj.header >  header) return false; 
        if (joint_names > inobj.joint_names) return true;
        if (inobj.joint_names >  joint_names) return false; 
        if (points > inobj.points) return true;
        if (inobj.points >  points) return false; ;
    }

    return ret;
}

template <> void rframe::json_io::encode(std::stringstream & sstr, const char * name, const trajectory_msgs::MultiDOFJointTrajectory & t, std::string & indent, bool lastItem)
{
    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectStart(sstr,name,indent);

    rframe::json_io::encode(sstr,"header",t.header,indent,false);
    rframe::json_io::encode(sstr,"joint_names",t.joint_names,indent,false);
    rframe::json_io::encode(sstr,"points",t.points,indent,true);

    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectEnd(sstr,indent,lastItem);
}

std::string trajectory_msgs::MultiDOFJointTrajectory::toStr(bool pretty) const
{

    stringstream sstr;
    string indent = (pretty == true) ? "\n" : "";

    rframe::json_io::encodeObjectStartMain(sstr,indent);
    rframe::json_io::encode(sstr,"",*this,indent,true);
    rframe::json_io::encodeObjectEnd(sstr,indent,true); // false so as to  not add , at end of string

    return sstr.str();

};

std::basic_ostream<char>& operator<<(std::basic_ostream<char> &s, const trajectory_msgs::MultiDOFJointTrajectory & value)
{
    return s << value.toStr(false);
}


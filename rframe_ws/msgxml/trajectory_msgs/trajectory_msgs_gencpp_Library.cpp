// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:09 -0500
//  From Template/Script: data_templates/DataLibraryTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "trajectory_msgs_gencpp_Library.h"
#include <common/Log.h>
#include <common/TypeRegistry.h>
#include <messaging/Message.h>

#include <trajectory_msgs/JointTrajectory.h>
#include <trajectory_msgs/JointTrajectoryPoint.h>
#include <trajectory_msgs/MultiDOFJointTrajectory.h>
#include <trajectory_msgs/MultiDOFJointTrajectoryPoint.h>

extern "C"
{
    /** library access method */
    int rframeRegisterDataLibrary()
    {
        return trajectory_msgs::registerLibrary();
    };
}

namespace trajectory_msgs
{

    static void deallocateMessage(MessageBase * msg)
    {
        delete msg;
    }

    static int allocateMessage(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
    {
        int retval = rframe::Error::SUCCESS;
        bool found = true;
        switch (id)
        { 
            case JointTrajectory::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<JointTrajectory>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case JointTrajectoryPoint::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<JointTrajectoryPoint>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case MultiDOFJointTrajectory::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<MultiDOFJointTrajectory>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case MultiDOFJointTrajectoryPoint::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<MultiDOFJointTrajectoryPoint>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            default:
            {
                found = false;
            }
        }

        if (found == false)
        {
            retval = rframe::Error::PARAM_RANGE;
        }
        else if (msg.get() == NULL)
        {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else if (msg.get() != NULL)
        {
            retval = rframe::Error::SUCCESS;
        }

        return retval;
    }

    /** registry this data set with the system */
    //int register_trajectory_msgs_gencpp()
    int registerLibrary()
    {
        int retval = rframe::Error::SUCCESS;
        static bool registered = false;
        rframe::TypeRegistry & reg = rframe::TypeRegistry::instance();

        LOG_INFO("registering data for library: trajectory_msgs_gencpp");

        if (registered == false)
        {
            registered = true;

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = trajectory_msgs::JointTrajectory::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<trajectory_msgs::JointTrajectory>(
                    // boost::lambda::new_ptr<trajectory_msgs::JointTrajectory>(),
                    [](){ return new trajectory_msgs::JointTrajectory(); },
                                std::bind(allocateMessage,trajectory_msgs::JointTrajectory::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: JointTrajectory");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = trajectory_msgs::JointTrajectory::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(trajectory_msgs::JointTrajectory::DATA_TYPE_NAME,trajectory_msgs::JointTrajectory::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: JointTrajectory");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = trajectory_msgs::JointTrajectoryPoint::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<trajectory_msgs::JointTrajectoryPoint>(
                    // boost::lambda::new_ptr<trajectory_msgs::JointTrajectoryPoint>(),
                    [](){ return new trajectory_msgs::JointTrajectoryPoint(); },
                                std::bind(allocateMessage,trajectory_msgs::JointTrajectoryPoint::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: JointTrajectoryPoint");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = trajectory_msgs::JointTrajectoryPoint::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(trajectory_msgs::JointTrajectoryPoint::DATA_TYPE_NAME,trajectory_msgs::JointTrajectoryPoint::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: JointTrajectoryPoint");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = trajectory_msgs::MultiDOFJointTrajectory::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<trajectory_msgs::MultiDOFJointTrajectory>(
                    // boost::lambda::new_ptr<trajectory_msgs::MultiDOFJointTrajectory>(),
                    [](){ return new trajectory_msgs::MultiDOFJointTrajectory(); },
                                std::bind(allocateMessage,trajectory_msgs::MultiDOFJointTrajectory::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: MultiDOFJointTrajectory");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = trajectory_msgs::MultiDOFJointTrajectory::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(trajectory_msgs::MultiDOFJointTrajectory::DATA_TYPE_NAME,trajectory_msgs::MultiDOFJointTrajectory::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: MultiDOFJointTrajectory");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = trajectory_msgs::MultiDOFJointTrajectoryPoint::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<trajectory_msgs::MultiDOFJointTrajectoryPoint>(
                    // boost::lambda::new_ptr<trajectory_msgs::MultiDOFJointTrajectoryPoint>(),
                    [](){ return new trajectory_msgs::MultiDOFJointTrajectoryPoint(); },
                                std::bind(allocateMessage,trajectory_msgs::MultiDOFJointTrajectoryPoint::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: MultiDOFJointTrajectoryPoint");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = trajectory_msgs::MultiDOFJointTrajectoryPoint::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(trajectory_msgs::MultiDOFJointTrajectoryPoint::DATA_TYPE_NAME,trajectory_msgs::MultiDOFJointTrajectoryPoint::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: MultiDOFJointTrajectoryPoint");
            }

        }

        return retval;
    };

    std::string xmlSource()
    {
        return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\
<!--\
 \
  AUTOGENERATED FILE:   do not edit\
\
  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:01 -0500\
  From Template/Script: rosToXML.rb\
 \
\
-->\
<classes library_name=\"trajectory_msgs_gencpp\" namespace=\"trajectory_msgs\">\
\
<class name=\"JointTrajectory\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"65b4f94a94d1ed67169da35a02f33d3f\" rosDesc=\"Header header\\nstring[] joint_names\\nJointTrajectoryPoint[] points\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: trajectory_msgs/JointTrajectoryPoint\\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\\n# or positions[, effort] for the trajectory to be executed.\\n# All specified values are in the same order as the joint names in JointTrajectory.msg\\n\\nfloat64[] positions\\nfloat64[] velocities\\nfloat64[] accelerations\\nfloat64[] effort\\nduration time_from_start\\n\" comment=\"\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"joint_names\" type=\"vector(string)\" sourceType=\"string\" comment=\"\"/>\
  <field name=\"points\" type=\"vector(JointTrajectoryPoint)\" sourceType=\"JointTrajectoryPoint\" comment=\"\"/>\
</class>\
\
<class name=\"JointTrajectoryPoint\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"f3cd1e1c4d320c79d6985c904ae5dcd3\" rosDesc=\"# Each trajectory point specifies either positions[, velocities[, accelerations]]\\n# or positions[, effort] for the trajectory to be executed.\\n# All specified values are in the same order as the joint names in JointTrajectory.msg\\n\\nfloat64[] positions\\nfloat64[] velocities\\nfloat64[] accelerations\\nfloat64[] effort\\nduration time_from_start\\n\" comment=\"Each trajectory point specifies either positions[, velocities[, accelerations]]  or positions[, effort] for the trajectory to be executed.  All specified values are in the same order as the joint names in JointTrajectory.msg\">\
  <field name=\"positions\" type=\"vector(double)\" sourceType=\"float64\" comment=\"\"/>\
  <field name=\"velocities\" type=\"vector(double)\" sourceType=\"float64\" comment=\"\"/>\
  <field name=\"accelerations\" type=\"vector(double)\" sourceType=\"float64\" comment=\"\"/>\
  <field name=\"effort\" type=\"vector(double)\" sourceType=\"float64\" comment=\"\"/>\
  <field name=\"time_from_start\" type=\"std_msgs::RosDuration\" sourceType=\"duration\" comment=\"\"/>\
</class>\
\
<class name=\"MultiDOFJointTrajectory\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"ef145a45a5f47b77b7f5cdde4b16c942\" rosDesc=\"# The header is used to specify the coordinate frame and the reference time for the trajectory durations\\nHeader header\\n\\n# A representation of a multi-dof joint trajectory (each point is a transformation)\\n# Each point along the trajectory will include an array of positions/velocities/accelerations\\n# that has the same length as the array of joint names, and has the same order of joints as \\n# the joint names array.\\n\\nstring[] joint_names\\nMultiDOFJointTrajectoryPoint[] points\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: trajectory_msgs/MultiDOFJointTrajectoryPoint\\n# Each multi-dof joint can specify a transform (up to 6 DOF)\\ngeometry_msgs/Transform[] transforms\\n\\n# There can be a velocity specified for the origin of the joint \\ngeometry_msgs/Twist[] velocities\\n\\n# There can be an acceleration specified for the origin of the joint \\ngeometry_msgs/Twist[] accelerations\\n\\nduration time_from_start\\n\\n================================================================================\\nMSG: geometry_msgs/Transform\\n# This represents the transform between two coordinate frames in free space.\\n\\nVector3 translation\\nQuaternion rotation\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\\n================================================================================\\nMSG: geometry_msgs/Twist\\n# This expresses velocity in free space broken into its linear and angular parts.\\nVector3  linear\\nVector3  angular\\n\" comment=\"The header is used to specify the coordinate frame and the reference time for the trajectory durations\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"A representation of a multi-dof joint trajectory (each point is a transformation)  Each point along the trajectory will include an array of positions/velocities/accelerations  that has the same length as the array of joint names, and has the same order of joints as   the joint names array.\"/>\
  <field name=\"joint_names\" type=\"vector(string)\" sourceType=\"string\" comment=\"\"/>\
  <field name=\"points\" type=\"vector(MultiDOFJointTrajectoryPoint)\" sourceType=\"MultiDOFJointTrajectoryPoint\" comment=\"\"/>\
</class>\
\
<class name=\"MultiDOFJointTrajectoryPoint\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"3ebe08d1abd5b65862d50e09430db776\" rosDesc=\"# Each multi-dof joint can specify a transform (up to 6 DOF)\\ngeometry_msgs/Transform[] transforms\\n\\n# There can be a velocity specified for the origin of the joint \\ngeometry_msgs/Twist[] velocities\\n\\n# There can be an acceleration specified for the origin of the joint \\ngeometry_msgs/Twist[] accelerations\\n\\nduration time_from_start\\n\\n================================================================================\\nMSG: geometry_msgs/Transform\\n# This represents the transform between two coordinate frames in free space.\\n\\nVector3 translation\\nQuaternion rotation\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\\n================================================================================\\nMSG: geometry_msgs/Twist\\n# This expresses velocity in free space broken into its linear and angular parts.\\nVector3  linear\\nVector3  angular\\n\" comment=\"Each multi-dof joint can specify a transform (up to 6 DOF)\">\
  <field name=\"transforms\" type=\"vector(geometry_msgs::Transform)\" sourceType=\"geometry_msgs::Transform\" comment=\"There can be a velocity specified for the origin of the joint\"/>\
  <field name=\"velocities\" type=\"vector(geometry_msgs::Twist)\" sourceType=\"geometry_msgs::Twist\" comment=\"There can be an acceleration specified for the origin of the joint\"/>\
  <field name=\"accelerations\" type=\"vector(geometry_msgs::Twist)\" sourceType=\"geometry_msgs::Twist\" comment=\"\"/>\
  <field name=\"time_from_start\" type=\"std_msgs::RosDuration\" sourceType=\"duration\" comment=\"\"/>\
</class>\
\
<dependency name=\"geometry_msgs_gencpp\"/>\
<dependency name=\"std_msgs_gencpp\"/>\
<dependency name=\"std_srvs_gencpp\"/>\
\
</classes>\
";
    }

}; // end namespace trajectory_msgs


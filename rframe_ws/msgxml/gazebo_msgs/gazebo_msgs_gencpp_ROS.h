// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 12:55:18 -0500
//  From Template/Script: data_templates/ROSTemplate.h.rb
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#ifndef _CODEGEN_GAZEBO_MSGS_GENCPP_ROS_H_
#define _CODEGEN_GAZEBO_MSGS_GENCPP_ROS_H_

#include <opensource/ros/serialization.h>
#include <opensource/ros/message_traits.h>
#include <opensource/ros/message_operations.h>

#include <messaging/ros/ROSMessageFactory.h>
#include <messaging/Message.h>

namespace rframe { class DataTypeInfo; };

#include "gazebo_msgs_gencpp_Library.h"

#include "geometry_msgs/geometry_msgs_gencpp_ROS.h"
#include "std_msgs/std_msgs_gencpp_ROS.h"
#include "std_srvs/std_srvs_gencpp_ROS.h"
#include "trajectory_msgs/trajectory_msgs_gencpp_ROS.h"

namespace gazebo_msgs { 

    /** definition of message factory for gazebo_msgs_gencpp */
    class gazebo_msgs_gencppROSMessageFactory : public ROSMessageFactory
    {
    public:
        /** constructor */
        gazebo_msgs_gencppROSMessageFactory();
        /** destructor */
        virtual ~gazebo_msgs_gencppROSMessageFactory();

        /** see  rframe::MessageFactoryInterface */
        virtual void dataTypes(std::vector<DataTypeInfo> & ids);
        /** see  rframe::MessageFactoryInterface */
        virtual int dataType(ros::SerializedMessage & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<ros::SerializedMessage> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateTransport(ros::SerializedMessage * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateMessage(MessageBase * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int toTransport( MessageBase & src, ros::SerializedMessage & dst);
        /** see  rframe::MessageFactoryInterface */
        virtual int fromTransport( ros::SerializedMessage & src, MessageBase & dst);

		/** see rframe::ROSMessageFactory */
        virtual int typeName(std::string & str, rframe::ID_TYPE id);
		/** see rframe::ROSMessageFactory */
        virtual int desc(std::string & str, rframe::ID_TYPE id);
		/** see rframe::ROSMessageFactory */
        virtual int md5String(std::string & str, rframe::ID_TYPE id);
        /** see rframe::ROSMessageFactory */
        virtual int md5(unsigned long long & highOrder, unsigned long long & lowOrder, rframe::ID_TYPE id);
        /** see rframe::ROSMessageFactory */
		int updateHeader(rframe::MessageBase &msg, unsigned int seqNo);
    };

    /** factory allocation function for use when not dynamically loading the factory library  */
    ROSMessageFactory * allocate_gazebo_msgs_gencpp();

}; // end namespace gazebo_msgs

// declare ros serialization templates
namespace ros
{
  namespace serialization
  {  

      template <> struct Serializer<gazebo_msgs::ContactState>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::ContactState & t)
          { 
              stream.next(t.info); 
              stream.next(t.collision1_name); 
              stream.next(t.collision2_name); 
              stream.next(t.wrenches); 
              stream.next(t.total_wrench); 
              stream.next(t.contact_positions); 
              stream.next(t.contact_normals); 
              stream.next(t.depths); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::ContactState & t)
          { 
              stream.next(t.info); 
              stream.next(t.collision1_name); 
              stream.next(t.collision2_name); 
              stream.next(t.wrenches); 
              stream.next(t.total_wrench); 
              stream.next(t.contact_positions); 
              stream.next(t.contact_normals); 
              stream.next(t.depths); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::ContactState & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.info); 
              size += serializationLength(t.collision1_name); 
              size += serializationLength(t.collision2_name); 
              size += serializationLength(t.wrenches); 
              size += serializationLength(t.total_wrench); 
              size += serializationLength(t.contact_positions); 
              size += serializationLength(t.contact_normals); 
              size += serializationLength(t.depths); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::ContactState>

      template <> struct Serializer<gazebo_msgs::ContactsState>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::ContactsState & t)
          { 
              stream.next(t.header); 
              stream.next(t.states); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::ContactsState & t)
          { 
              stream.next(t.header); 
              stream.next(t.states); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::ContactsState & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.states); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::ContactsState>

      template <> struct Serializer<gazebo_msgs::LinkState>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::LinkState & t)
          { 
              stream.next(t.link_name); 
              stream.next(t.pose); 
              stream.next(t.twist); 
              stream.next(t.reference_frame); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::LinkState & t)
          { 
              stream.next(t.link_name); 
              stream.next(t.pose); 
              stream.next(t.twist); 
              stream.next(t.reference_frame); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::LinkState & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.link_name); 
              size += serializationLength(t.pose); 
              size += serializationLength(t.twist); 
              size += serializationLength(t.reference_frame); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::LinkState>

      template <> struct Serializer<gazebo_msgs::LinkStates>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::LinkStates & t)
          { 
              stream.next(t.name); 
              stream.next(t.pose); 
              stream.next(t.twist); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::LinkStates & t)
          { 
              stream.next(t.name); 
              stream.next(t.pose); 
              stream.next(t.twist); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::LinkStates & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.name); 
              size += serializationLength(t.pose); 
              size += serializationLength(t.twist); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::LinkStates>

      template <> struct Serializer<gazebo_msgs::ModelState>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::ModelState & t)
          { 
              stream.next(t.model_name); 
              stream.next(t.pose); 
              stream.next(t.twist); 
              stream.next(t.reference_frame); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::ModelState & t)
          { 
              stream.next(t.model_name); 
              stream.next(t.pose); 
              stream.next(t.twist); 
              stream.next(t.reference_frame); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::ModelState & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.model_name); 
              size += serializationLength(t.pose); 
              size += serializationLength(t.twist); 
              size += serializationLength(t.reference_frame); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::ModelState>

      template <> struct Serializer<gazebo_msgs::ModelStates>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::ModelStates & t)
          { 
              stream.next(t.name); 
              stream.next(t.pose); 
              stream.next(t.twist); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::ModelStates & t)
          { 
              stream.next(t.name); 
              stream.next(t.pose); 
              stream.next(t.twist); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::ModelStates & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.name); 
              size += serializationLength(t.pose); 
              size += serializationLength(t.twist); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::ModelStates>

      template <> struct Serializer<gazebo_msgs::ODEJointProperties>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::ODEJointProperties & t)
          { 
              stream.next(t.damping); 
              stream.next(t.hiStop); 
              stream.next(t.loStop); 
              stream.next(t.erp); 
              stream.next(t.cfm); 
              stream.next(t.stop_erp); 
              stream.next(t.stop_cfm); 
              stream.next(t.fudge_factor); 
              stream.next(t.fmax); 
              stream.next(t.vel); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::ODEJointProperties & t)
          { 
              stream.next(t.damping); 
              stream.next(t.hiStop); 
              stream.next(t.loStop); 
              stream.next(t.erp); 
              stream.next(t.cfm); 
              stream.next(t.stop_erp); 
              stream.next(t.stop_cfm); 
              stream.next(t.fudge_factor); 
              stream.next(t.fmax); 
              stream.next(t.vel); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::ODEJointProperties & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.damping); 
              size += serializationLength(t.hiStop); 
              size += serializationLength(t.loStop); 
              size += serializationLength(t.erp); 
              size += serializationLength(t.cfm); 
              size += serializationLength(t.stop_erp); 
              size += serializationLength(t.stop_cfm); 
              size += serializationLength(t.fudge_factor); 
              size += serializationLength(t.fmax); 
              size += serializationLength(t.vel); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::ODEJointProperties>

      template <> struct Serializer<gazebo_msgs::ODEPhysics>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::ODEPhysics & t)
          { 
              stream.next(t.auto_disable_bodies); 
              stream.next(t.sor_pgs_precon_iters); 
              stream.next(t.sor_pgs_iters); 
              stream.next(t.sor_pgs_w); 
              stream.next(t.sor_pgs_rms_error_tol); 
              stream.next(t.contact_surface_layer); 
              stream.next(t.contact_max_correcting_vel); 
              stream.next(t.cfm); 
              stream.next(t.erp); 
              stream.next(t.max_contacts); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::ODEPhysics & t)
          { 
              stream.next(t.auto_disable_bodies); 
              stream.next(t.sor_pgs_precon_iters); 
              stream.next(t.sor_pgs_iters); 
              stream.next(t.sor_pgs_w); 
              stream.next(t.sor_pgs_rms_error_tol); 
              stream.next(t.contact_surface_layer); 
              stream.next(t.contact_max_correcting_vel); 
              stream.next(t.cfm); 
              stream.next(t.erp); 
              stream.next(t.max_contacts); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::ODEPhysics & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.auto_disable_bodies); 
              size += serializationLength(t.sor_pgs_precon_iters); 
              size += serializationLength(t.sor_pgs_iters); 
              size += serializationLength(t.sor_pgs_w); 
              size += serializationLength(t.sor_pgs_rms_error_tol); 
              size += serializationLength(t.contact_surface_layer); 
              size += serializationLength(t.contact_max_correcting_vel); 
              size += serializationLength(t.cfm); 
              size += serializationLength(t.erp); 
              size += serializationLength(t.max_contacts); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::ODEPhysics>

      template <> struct Serializer<gazebo_msgs::WorldState>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::WorldState & t)
          { 
              stream.next(t.header); 
              stream.next(t.name); 
              stream.next(t.pose); 
              stream.next(t.twist); 
              stream.next(t.wrench); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::WorldState & t)
          { 
              stream.next(t.header); 
              stream.next(t.name); 
              stream.next(t.pose); 
              stream.next(t.twist); 
              stream.next(t.wrench); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::WorldState & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.name); 
              size += serializationLength(t.pose); 
              size += serializationLength(t.twist); 
              size += serializationLength(t.wrench); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::WorldState>

      template <> struct Serializer<gazebo_msgs::ApplyBodyWrenchRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::ApplyBodyWrenchRequest & t)
          { 
              stream.next(t.body_name); 
              stream.next(t.reference_frame); 
              stream.next(t.reference_point); 
              stream.next(t.wrench); 
              stream.next(t.start_time); 
              stream.next(t.duration); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::ApplyBodyWrenchRequest & t)
          { 
              stream.next(t.body_name); 
              stream.next(t.reference_frame); 
              stream.next(t.reference_point); 
              stream.next(t.wrench); 
              stream.next(t.start_time); 
              stream.next(t.duration); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::ApplyBodyWrenchRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.body_name); 
              size += serializationLength(t.reference_frame); 
              size += serializationLength(t.reference_point); 
              size += serializationLength(t.wrench); 
              size += serializationLength(t.start_time); 
              size += serializationLength(t.duration); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::ApplyBodyWrenchRequest>

      template <> struct Serializer<gazebo_msgs::ApplyBodyWrenchResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::ApplyBodyWrenchResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::ApplyBodyWrenchResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::ApplyBodyWrenchResponse & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.success); 
              size += serializationLength(t.status_message); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::ApplyBodyWrenchResponse>

      template <> struct Serializer<gazebo_msgs::ApplyBodyWrench>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::ApplyBodyWrench & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::ApplyBodyWrench & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::ApplyBodyWrench & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::ApplyBodyWrench>

      template <> struct Serializer<gazebo_msgs::ApplyJointEffortRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::ApplyJointEffortRequest & t)
          { 
              stream.next(t.joint_name); 
              stream.next(t.effort); 
              stream.next(t.start_time); 
              stream.next(t.duration); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::ApplyJointEffortRequest & t)
          { 
              stream.next(t.joint_name); 
              stream.next(t.effort); 
              stream.next(t.start_time); 
              stream.next(t.duration); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::ApplyJointEffortRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.joint_name); 
              size += serializationLength(t.effort); 
              size += serializationLength(t.start_time); 
              size += serializationLength(t.duration); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::ApplyJointEffortRequest>

      template <> struct Serializer<gazebo_msgs::ApplyJointEffortResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::ApplyJointEffortResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::ApplyJointEffortResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::ApplyJointEffortResponse & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.success); 
              size += serializationLength(t.status_message); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::ApplyJointEffortResponse>

      template <> struct Serializer<gazebo_msgs::ApplyJointEffort>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::ApplyJointEffort & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::ApplyJointEffort & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::ApplyJointEffort & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::ApplyJointEffort>

      template <> struct Serializer<gazebo_msgs::BodyRequestRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::BodyRequestRequest & t)
          { 
              stream.next(t.body_name); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::BodyRequestRequest & t)
          { 
              stream.next(t.body_name); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::BodyRequestRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.body_name); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::BodyRequestRequest>

      template <> struct Serializer<gazebo_msgs::BodyRequestResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::BodyRequestResponse & t)
          { 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::BodyRequestResponse & t)
          { 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::BodyRequestResponse & t)
          { 
              uint32_t size = 0;

              return size;
          };
      }; // end struct Serializer<gazebo_msgs::BodyRequestResponse>

      template <> struct Serializer<gazebo_msgs::BodyRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::BodyRequest & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::BodyRequest & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::BodyRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::BodyRequest>

      template <> struct Serializer<gazebo_msgs::DeleteModelRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::DeleteModelRequest & t)
          { 
              stream.next(t.model_name); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::DeleteModelRequest & t)
          { 
              stream.next(t.model_name); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::DeleteModelRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.model_name); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::DeleteModelRequest>

      template <> struct Serializer<gazebo_msgs::DeleteModelResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::DeleteModelResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::DeleteModelResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::DeleteModelResponse & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.success); 
              size += serializationLength(t.status_message); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::DeleteModelResponse>

      template <> struct Serializer<gazebo_msgs::DeleteModel>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::DeleteModel & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::DeleteModel & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::DeleteModel & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::DeleteModel>

      template <> struct Serializer<gazebo_msgs::GetJointPropertiesRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetJointPropertiesRequest & t)
          { 
              stream.next(t.joint_name); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetJointPropertiesRequest & t)
          { 
              stream.next(t.joint_name); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetJointPropertiesRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.joint_name); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetJointPropertiesRequest>

      template <> struct Serializer<gazebo_msgs::GetJointPropertiesResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetJointPropertiesResponse & t)
          { 
              stream.next(t.type); 
              stream.next(t.damping); 
              stream.next(t.position); 
              stream.next(t.rate); 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetJointPropertiesResponse & t)
          { 
              stream.next(t.type); 
              stream.next(t.damping); 
              stream.next(t.position); 
              stream.next(t.rate); 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetJointPropertiesResponse & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.type); 
              size += serializationLength(t.damping); 
              size += serializationLength(t.position); 
              size += serializationLength(t.rate); 
              size += serializationLength(t.success); 
              size += serializationLength(t.status_message); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetJointPropertiesResponse>

      template <> struct Serializer<gazebo_msgs::GetJointProperties>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetJointProperties & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetJointProperties & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetJointProperties & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetJointProperties>

      template <> struct Serializer<gazebo_msgs::GetLinkPropertiesRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetLinkPropertiesRequest & t)
          { 
              stream.next(t.link_name); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetLinkPropertiesRequest & t)
          { 
              stream.next(t.link_name); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetLinkPropertiesRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.link_name); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetLinkPropertiesRequest>

      template <> struct Serializer<gazebo_msgs::GetLinkPropertiesResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetLinkPropertiesResponse & t)
          { 
              stream.next(t.com); 
              stream.next(t.gravity_mode); 
              stream.next(t.mass); 
              stream.next(t.ixx); 
              stream.next(t.ixy); 
              stream.next(t.ixz); 
              stream.next(t.iyy); 
              stream.next(t.iyz); 
              stream.next(t.izz); 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetLinkPropertiesResponse & t)
          { 
              stream.next(t.com); 
              stream.next(t.gravity_mode); 
              stream.next(t.mass); 
              stream.next(t.ixx); 
              stream.next(t.ixy); 
              stream.next(t.ixz); 
              stream.next(t.iyy); 
              stream.next(t.iyz); 
              stream.next(t.izz); 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetLinkPropertiesResponse & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.com); 
              size += serializationLength(t.gravity_mode); 
              size += serializationLength(t.mass); 
              size += serializationLength(t.ixx); 
              size += serializationLength(t.ixy); 
              size += serializationLength(t.ixz); 
              size += serializationLength(t.iyy); 
              size += serializationLength(t.iyz); 
              size += serializationLength(t.izz); 
              size += serializationLength(t.success); 
              size += serializationLength(t.status_message); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetLinkPropertiesResponse>

      template <> struct Serializer<gazebo_msgs::GetLinkProperties>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetLinkProperties & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetLinkProperties & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetLinkProperties & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetLinkProperties>

      template <> struct Serializer<gazebo_msgs::GetLinkStateRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetLinkStateRequest & t)
          { 
              stream.next(t.link_name); 
              stream.next(t.reference_frame); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetLinkStateRequest & t)
          { 
              stream.next(t.link_name); 
              stream.next(t.reference_frame); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetLinkStateRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.link_name); 
              size += serializationLength(t.reference_frame); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetLinkStateRequest>

      template <> struct Serializer<gazebo_msgs::GetLinkStateResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetLinkStateResponse & t)
          { 
              stream.next(t.link_state); 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetLinkStateResponse & t)
          { 
              stream.next(t.link_state); 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetLinkStateResponse & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.link_state); 
              size += serializationLength(t.success); 
              size += serializationLength(t.status_message); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetLinkStateResponse>

      template <> struct Serializer<gazebo_msgs::GetLinkState>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetLinkState & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetLinkState & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetLinkState & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetLinkState>

      template <> struct Serializer<gazebo_msgs::GetModelPropertiesRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetModelPropertiesRequest & t)
          { 
              stream.next(t.model_name); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetModelPropertiesRequest & t)
          { 
              stream.next(t.model_name); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetModelPropertiesRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.model_name); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetModelPropertiesRequest>

      template <> struct Serializer<gazebo_msgs::GetModelPropertiesResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetModelPropertiesResponse & t)
          { 
              stream.next(t.parent_model_name); 
              stream.next(t.canonical_body_name); 
              stream.next(t.body_names); 
              stream.next(t.geom_names); 
              stream.next(t.joint_names); 
              stream.next(t.child_model_names); 
              stream.next(t.is_static); 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetModelPropertiesResponse & t)
          { 
              stream.next(t.parent_model_name); 
              stream.next(t.canonical_body_name); 
              stream.next(t.body_names); 
              stream.next(t.geom_names); 
              stream.next(t.joint_names); 
              stream.next(t.child_model_names); 
              stream.next(t.is_static); 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetModelPropertiesResponse & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.parent_model_name); 
              size += serializationLength(t.canonical_body_name); 
              size += serializationLength(t.body_names); 
              size += serializationLength(t.geom_names); 
              size += serializationLength(t.joint_names); 
              size += serializationLength(t.child_model_names); 
              size += serializationLength(t.is_static); 
              size += serializationLength(t.success); 
              size += serializationLength(t.status_message); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetModelPropertiesResponse>

      template <> struct Serializer<gazebo_msgs::GetModelProperties>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetModelProperties & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetModelProperties & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetModelProperties & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetModelProperties>

      template <> struct Serializer<gazebo_msgs::GetModelStateRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetModelStateRequest & t)
          { 
              stream.next(t.model_name); 
              stream.next(t.relative_entity_name); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetModelStateRequest & t)
          { 
              stream.next(t.model_name); 
              stream.next(t.relative_entity_name); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetModelStateRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.model_name); 
              size += serializationLength(t.relative_entity_name); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetModelStateRequest>

      template <> struct Serializer<gazebo_msgs::GetModelStateResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetModelStateResponse & t)
          { 
              stream.next(t.header); 
              stream.next(t.pose); 
              stream.next(t.twist); 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetModelStateResponse & t)
          { 
              stream.next(t.header); 
              stream.next(t.pose); 
              stream.next(t.twist); 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetModelStateResponse & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.pose); 
              size += serializationLength(t.twist); 
              size += serializationLength(t.success); 
              size += serializationLength(t.status_message); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetModelStateResponse>

      template <> struct Serializer<gazebo_msgs::GetModelState>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetModelState & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetModelState & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetModelState & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetModelState>

      template <> struct Serializer<gazebo_msgs::GetPhysicsPropertiesRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetPhysicsPropertiesRequest & t)
          { 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetPhysicsPropertiesRequest & t)
          { 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetPhysicsPropertiesRequest & t)
          { 
              uint32_t size = 0;

              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetPhysicsPropertiesRequest>

      template <> struct Serializer<gazebo_msgs::GetPhysicsPropertiesResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetPhysicsPropertiesResponse & t)
          { 
              stream.next(t.time_step); 
              stream.next(t.pause); 
              stream.next(t.max_update_rate); 
              stream.next(t.gravity); 
              stream.next(t.ode_config); 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetPhysicsPropertiesResponse & t)
          { 
              stream.next(t.time_step); 
              stream.next(t.pause); 
              stream.next(t.max_update_rate); 
              stream.next(t.gravity); 
              stream.next(t.ode_config); 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetPhysicsPropertiesResponse & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.time_step); 
              size += serializationLength(t.pause); 
              size += serializationLength(t.max_update_rate); 
              size += serializationLength(t.gravity); 
              size += serializationLength(t.ode_config); 
              size += serializationLength(t.success); 
              size += serializationLength(t.status_message); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetPhysicsPropertiesResponse>

      template <> struct Serializer<gazebo_msgs::GetPhysicsProperties>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetPhysicsProperties & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetPhysicsProperties & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetPhysicsProperties & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetPhysicsProperties>

      template <> struct Serializer<gazebo_msgs::GetWorldPropertiesRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetWorldPropertiesRequest & t)
          { 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetWorldPropertiesRequest & t)
          { 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetWorldPropertiesRequest & t)
          { 
              uint32_t size = 0;

              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetWorldPropertiesRequest>

      template <> struct Serializer<gazebo_msgs::GetWorldPropertiesResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetWorldPropertiesResponse & t)
          { 
              stream.next(t.sim_time); 
              stream.next(t.model_names); 
              stream.next(t.rendering_enabled); 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetWorldPropertiesResponse & t)
          { 
              stream.next(t.sim_time); 
              stream.next(t.model_names); 
              stream.next(t.rendering_enabled); 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetWorldPropertiesResponse & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.sim_time); 
              size += serializationLength(t.model_names); 
              size += serializationLength(t.rendering_enabled); 
              size += serializationLength(t.success); 
              size += serializationLength(t.status_message); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetWorldPropertiesResponse>

      template <> struct Serializer<gazebo_msgs::GetWorldProperties>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::GetWorldProperties & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::GetWorldProperties & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::GetWorldProperties & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::GetWorldProperties>

      template <> struct Serializer<gazebo_msgs::JointRequestRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::JointRequestRequest & t)
          { 
              stream.next(t.joint_name); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::JointRequestRequest & t)
          { 
              stream.next(t.joint_name); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::JointRequestRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.joint_name); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::JointRequestRequest>

      template <> struct Serializer<gazebo_msgs::JointRequestResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::JointRequestResponse & t)
          { 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::JointRequestResponse & t)
          { 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::JointRequestResponse & t)
          { 
              uint32_t size = 0;

              return size;
          };
      }; // end struct Serializer<gazebo_msgs::JointRequestResponse>

      template <> struct Serializer<gazebo_msgs::JointRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::JointRequest & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::JointRequest & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::JointRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::JointRequest>

      template <> struct Serializer<gazebo_msgs::SetJointPropertiesRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetJointPropertiesRequest & t)
          { 
              stream.next(t.joint_name); 
              stream.next(t.ode_joint_config); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetJointPropertiesRequest & t)
          { 
              stream.next(t.joint_name); 
              stream.next(t.ode_joint_config); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetJointPropertiesRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.joint_name); 
              size += serializationLength(t.ode_joint_config); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetJointPropertiesRequest>

      template <> struct Serializer<gazebo_msgs::SetJointPropertiesResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetJointPropertiesResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetJointPropertiesResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetJointPropertiesResponse & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.success); 
              size += serializationLength(t.status_message); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetJointPropertiesResponse>

      template <> struct Serializer<gazebo_msgs::SetJointProperties>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetJointProperties & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetJointProperties & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetJointProperties & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetJointProperties>

      template <> struct Serializer<gazebo_msgs::SetJointTrajectoryRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetJointTrajectoryRequest & t)
          { 
              stream.next(t.model_name); 
              stream.next(t.joint_trajectory); 
              stream.next(t.model_pose); 
              stream.next(t.set_model_pose); 
              stream.next(t.disable_physics_updates); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetJointTrajectoryRequest & t)
          { 
              stream.next(t.model_name); 
              stream.next(t.joint_trajectory); 
              stream.next(t.model_pose); 
              stream.next(t.set_model_pose); 
              stream.next(t.disable_physics_updates); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetJointTrajectoryRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.model_name); 
              size += serializationLength(t.joint_trajectory); 
              size += serializationLength(t.model_pose); 
              size += serializationLength(t.set_model_pose); 
              size += serializationLength(t.disable_physics_updates); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetJointTrajectoryRequest>

      template <> struct Serializer<gazebo_msgs::SetJointTrajectoryResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetJointTrajectoryResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetJointTrajectoryResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetJointTrajectoryResponse & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.success); 
              size += serializationLength(t.status_message); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetJointTrajectoryResponse>

      template <> struct Serializer<gazebo_msgs::SetJointTrajectory>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetJointTrajectory & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetJointTrajectory & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetJointTrajectory & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetJointTrajectory>

      template <> struct Serializer<gazebo_msgs::SetLinkPropertiesRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetLinkPropertiesRequest & t)
          { 
              stream.next(t.link_name); 
              stream.next(t.com); 
              stream.next(t.gravity_mode); 
              stream.next(t.mass); 
              stream.next(t.ixx); 
              stream.next(t.ixy); 
              stream.next(t.ixz); 
              stream.next(t.iyy); 
              stream.next(t.iyz); 
              stream.next(t.izz); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetLinkPropertiesRequest & t)
          { 
              stream.next(t.link_name); 
              stream.next(t.com); 
              stream.next(t.gravity_mode); 
              stream.next(t.mass); 
              stream.next(t.ixx); 
              stream.next(t.ixy); 
              stream.next(t.ixz); 
              stream.next(t.iyy); 
              stream.next(t.iyz); 
              stream.next(t.izz); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetLinkPropertiesRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.link_name); 
              size += serializationLength(t.com); 
              size += serializationLength(t.gravity_mode); 
              size += serializationLength(t.mass); 
              size += serializationLength(t.ixx); 
              size += serializationLength(t.ixy); 
              size += serializationLength(t.ixz); 
              size += serializationLength(t.iyy); 
              size += serializationLength(t.iyz); 
              size += serializationLength(t.izz); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetLinkPropertiesRequest>

      template <> struct Serializer<gazebo_msgs::SetLinkPropertiesResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetLinkPropertiesResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetLinkPropertiesResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetLinkPropertiesResponse & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.success); 
              size += serializationLength(t.status_message); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetLinkPropertiesResponse>

      template <> struct Serializer<gazebo_msgs::SetLinkProperties>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetLinkProperties & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetLinkProperties & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetLinkProperties & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetLinkProperties>

      template <> struct Serializer<gazebo_msgs::SetLinkStateRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetLinkStateRequest & t)
          { 
              stream.next(t.link_state); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetLinkStateRequest & t)
          { 
              stream.next(t.link_state); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetLinkStateRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.link_state); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetLinkStateRequest>

      template <> struct Serializer<gazebo_msgs::SetLinkStateResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetLinkStateResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetLinkStateResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetLinkStateResponse & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.success); 
              size += serializationLength(t.status_message); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetLinkStateResponse>

      template <> struct Serializer<gazebo_msgs::SetLinkState>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetLinkState & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetLinkState & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetLinkState & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetLinkState>

      template <> struct Serializer<gazebo_msgs::SetModelConfigurationRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetModelConfigurationRequest & t)
          { 
              stream.next(t.model_name); 
              stream.next(t.urdf_param_name); 
              stream.next(t.joint_names); 
              stream.next(t.joint_positions); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetModelConfigurationRequest & t)
          { 
              stream.next(t.model_name); 
              stream.next(t.urdf_param_name); 
              stream.next(t.joint_names); 
              stream.next(t.joint_positions); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetModelConfigurationRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.model_name); 
              size += serializationLength(t.urdf_param_name); 
              size += serializationLength(t.joint_names); 
              size += serializationLength(t.joint_positions); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetModelConfigurationRequest>

      template <> struct Serializer<gazebo_msgs::SetModelConfigurationResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetModelConfigurationResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetModelConfigurationResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetModelConfigurationResponse & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.success); 
              size += serializationLength(t.status_message); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetModelConfigurationResponse>

      template <> struct Serializer<gazebo_msgs::SetModelConfiguration>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetModelConfiguration & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetModelConfiguration & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetModelConfiguration & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetModelConfiguration>

      template <> struct Serializer<gazebo_msgs::SetModelStateRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetModelStateRequest & t)
          { 
              stream.next(t.model_state); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetModelStateRequest & t)
          { 
              stream.next(t.model_state); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetModelStateRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.model_state); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetModelStateRequest>

      template <> struct Serializer<gazebo_msgs::SetModelStateResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetModelStateResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetModelStateResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetModelStateResponse & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.success); 
              size += serializationLength(t.status_message); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetModelStateResponse>

      template <> struct Serializer<gazebo_msgs::SetModelState>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetModelState & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetModelState & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetModelState & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetModelState>

      template <> struct Serializer<gazebo_msgs::SetPhysicsPropertiesRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetPhysicsPropertiesRequest & t)
          { 
              stream.next(t.time_step); 
              stream.next(t.max_update_rate); 
              stream.next(t.gravity); 
              stream.next(t.ode_config); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetPhysicsPropertiesRequest & t)
          { 
              stream.next(t.time_step); 
              stream.next(t.max_update_rate); 
              stream.next(t.gravity); 
              stream.next(t.ode_config); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetPhysicsPropertiesRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.time_step); 
              size += serializationLength(t.max_update_rate); 
              size += serializationLength(t.gravity); 
              size += serializationLength(t.ode_config); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetPhysicsPropertiesRequest>

      template <> struct Serializer<gazebo_msgs::SetPhysicsPropertiesResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetPhysicsPropertiesResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetPhysicsPropertiesResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetPhysicsPropertiesResponse & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.success); 
              size += serializationLength(t.status_message); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetPhysicsPropertiesResponse>

      template <> struct Serializer<gazebo_msgs::SetPhysicsProperties>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SetPhysicsProperties & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SetPhysicsProperties & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SetPhysicsProperties & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SetPhysicsProperties>

      template <> struct Serializer<gazebo_msgs::SpawnModelRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SpawnModelRequest & t)
          { 
              stream.next(t.model_name); 
              stream.next(t.model_xml); 
              stream.next(t.robot_namespace); 
              stream.next(t.initial_pose); 
              stream.next(t.reference_frame); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SpawnModelRequest & t)
          { 
              stream.next(t.model_name); 
              stream.next(t.model_xml); 
              stream.next(t.robot_namespace); 
              stream.next(t.initial_pose); 
              stream.next(t.reference_frame); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SpawnModelRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.model_name); 
              size += serializationLength(t.model_xml); 
              size += serializationLength(t.robot_namespace); 
              size += serializationLength(t.initial_pose); 
              size += serializationLength(t.reference_frame); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SpawnModelRequest>

      template <> struct Serializer<gazebo_msgs::SpawnModelResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SpawnModelResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SpawnModelResponse & t)
          { 
              stream.next(t.success); 
              stream.next(t.status_message); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SpawnModelResponse & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.success); 
              size += serializationLength(t.status_message); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SpawnModelResponse>

      template <> struct Serializer<gazebo_msgs::SpawnModel>
      {
          template <typename Stream> inline static void write(Stream & stream, const gazebo_msgs::SpawnModel & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, gazebo_msgs::SpawnModel & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const gazebo_msgs::SpawnModel & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<gazebo_msgs::SpawnModel>

  }; // namespace serialization

  namespace message_traits
  {

      template <> struct MD5Sum<gazebo_msgs::ContactState>
      {

          static const char * value() 
          { 
              return "48c0ffb054b8c444f870cecea1ee50d9"; 
          };

          static const uint64_t static_value1 = 0x48c0ffb054b8c444ULL;
          static const uint64_t static_value2 = 0xf870cecea1ee50d9ULL;
      }; // end struct MD5Sum<gazebo_msgs::ContactState>

      template <> struct DataType<gazebo_msgs::ContactState>
      {
          static const char * value() { return "gazebo_msgs/ContactState";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::ContactState>
      {
          static const char * value()
          { 
              return "string info                                   # text info on this contact\nstring collision1_name                        # name of contact collision1\nstring collision2_name                        # name of contact collision2\ngeometry_msgs/Wrench[] wrenches               # list of forces/torques\ngeometry_msgs/Wrench total_wrench             # sum of forces/torques in every DOF\ngeometry_msgs/Vector3[] contact_positions     # list of contact position\ngeometry_msgs/Vector3[] contact_normals       # list of contact normals\nfloat64[] depths                              # list of penetration depths\n\n================================================================================\nMSG: geometry_msgs/Wrench\n# This represents force in free space, separated into\n# its linear and angular parts.\nVector3  force\nVector3  torque\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\n";
          };
      };

      template <> struct MD5Sum<gazebo_msgs::ContactsState>
      {

          static const char * value() 
          { 
              return "acbcb1601a8e525bf72509f18e6f668d"; 
          };

          static const uint64_t static_value1 = 0xacbcb1601a8e525bULL;
          static const uint64_t static_value2 = 0xf72509f18e6f668dULL;
      }; // end struct MD5Sum<gazebo_msgs::ContactsState>

      template <> struct DataType<gazebo_msgs::ContactsState>
      {
          static const char * value() { return "gazebo_msgs/ContactsState";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::ContactsState>
      {
          static const char * value()
          { 
              return "Header header                                   # stamp\ngazebo_msgs/ContactState[] states            # array of geom pairs in contact\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: gazebo_msgs/ContactState\nstring info                                   # text info on this contact\nstring collision1_name                        # name of contact collision1\nstring collision2_name                        # name of contact collision2\ngeometry_msgs/Wrench[] wrenches               # list of forces/torques\ngeometry_msgs/Wrench total_wrench             # sum of forces/torques in every DOF\ngeometry_msgs/Vector3[] contact_positions     # list of contact position\ngeometry_msgs/Vector3[] contact_normals       # list of contact normals\nfloat64[] depths                              # list of penetration depths\n\n================================================================================\nMSG: geometry_msgs/Wrench\n# This represents force in free space, separated into\n# its linear and angular parts.\nVector3  force\nVector3  torque\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\n";
          };
      };

      template <> struct MD5Sum<gazebo_msgs::LinkState>
      {

          static const char * value() 
          { 
              return "0818ebbf28ce3a08d48ab1eaa7309ebe"; 
          };

          static const uint64_t static_value1 = 0x0818ebbf28ce3a08ULL;
          static const uint64_t static_value2 = 0xd48ab1eaa7309ebeULL;
      }; // end struct MD5Sum<gazebo_msgs::LinkState>

      template <> struct DataType<gazebo_msgs::LinkState>
      {
          static const char * value() { return "gazebo_msgs/LinkState";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::LinkState>
      {
          static const char * value()
          { 
              return "# @todo: FIXME: sets pose and twist of a link.  All children link poses/twists of the URDF tree are not updated accordingly, but should be.\nstring link_name            # link name, link_names are in gazebo scoped name notation, [model_name::body_name]\ngeometry_msgs/Pose pose     # desired pose in reference frame\ngeometry_msgs/Twist twist   # desired twist in reference frame\nstring reference_frame      # set pose/twist relative to the frame of this link/body\n                            # leave empty or \"world\" or \"map\" defaults to world-frame\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of postion and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\n";
          };
      };

      template <> struct MD5Sum<gazebo_msgs::LinkStates>
      {

          static const char * value() 
          { 
              return "48c080191eb15c41858319b4d8a609c2"; 
          };

          static const uint64_t static_value1 = 0x48c080191eb15c41ULL;
          static const uint64_t static_value2 = 0x858319b4d8a609c2ULL;
      }; // end struct MD5Sum<gazebo_msgs::LinkStates>

      template <> struct DataType<gazebo_msgs::LinkStates>
      {
          static const char * value() { return "gazebo_msgs/LinkStates";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::LinkStates>
      {
          static const char * value()
          { 
              return "# broadcast all link states in world frame\nstring[] name                 # link names\ngeometry_msgs/Pose[] pose     # desired pose in world frame\ngeometry_msgs/Twist[] twist   # desired twist in world frame\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of postion and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\n";
          };
      };

      template <> struct MD5Sum<gazebo_msgs::ModelState>
      {

          static const char * value() 
          { 
              return "9330fd35f2fcd82d457e54bd54e10593"; 
          };

          static const uint64_t static_value1 = 0x9330fd35f2fcd82dULL;
          static const uint64_t static_value2 = 0x457e54bd54e10593ULL;
      }; // end struct MD5Sum<gazebo_msgs::ModelState>

      template <> struct DataType<gazebo_msgs::ModelState>
      {
          static const char * value() { return "gazebo_msgs/ModelState";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::ModelState>
      {
          static const char * value()
          { 
              return "# Set Gazebo Model pose and twist\nstring model_name           # model to set state (pose and twist)\ngeometry_msgs/Pose pose     # desired pose in reference frame\ngeometry_msgs/Twist twist   # desired twist in reference frame\nstring reference_frame      # set pose/twist relative to the frame of this entity (Body/Model)\n                            # leave empty or \"world\" or \"map\" defaults to world-frame\n\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of postion and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\n";
          };
      };

      template <> struct MD5Sum<gazebo_msgs::ModelStates>
      {

          static const char * value() 
          { 
              return "48c080191eb15c41858319b4d8a609c2"; 
          };

          static const uint64_t static_value1 = 0x48c080191eb15c41ULL;
          static const uint64_t static_value2 = 0x858319b4d8a609c2ULL;
      }; // end struct MD5Sum<gazebo_msgs::ModelStates>

      template <> struct DataType<gazebo_msgs::ModelStates>
      {
          static const char * value() { return "gazebo_msgs/ModelStates";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::ModelStates>
      {
          static const char * value()
          { 
              return "# broadcast all model states in world frame\nstring[] name                 # model names\ngeometry_msgs/Pose[] pose     # desired pose in world frame\ngeometry_msgs/Twist[] twist   # desired twist in world frame\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of postion and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\n";
          };
      };

      template <> struct MD5Sum<gazebo_msgs::ODEJointProperties>
      {

          static const char * value() 
          { 
              return "1b744c32a920af979f53afe2f9c3511f"; 
          };

          static const uint64_t static_value1 = 0x1b744c32a920af97ULL;
          static const uint64_t static_value2 = 0x9f53afe2f9c3511fULL;
      }; // end struct MD5Sum<gazebo_msgs::ODEJointProperties>

      template <> struct DataType<gazebo_msgs::ODEJointProperties>
      {
          static const char * value() { return "gazebo_msgs/ODEJointProperties";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::ODEJointProperties>
      {
          static const char * value()
          { 
              return "# access to low level joint properties, change these at your own risk\nfloat64[] damping             # joint damping\nfloat64[] hiStop              # joint limit\nfloat64[] loStop              # joint limit\nfloat64[] erp                 # set joint erp\nfloat64[] cfm                 # set joint cfm\nfloat64[] stop_erp            # set joint erp for joint limit \"contact\" joint\nfloat64[] stop_cfm            # set joint cfm for joint limit \"contact\" joint\nfloat64[] fudge_factor        # joint fudge_factor applied at limits, see ODE manual for info.\nfloat64[] fmax                # ode joint param fmax\nfloat64[] vel                 # ode joint param vel\n";
          };
      };

      template <> struct MD5Sum<gazebo_msgs::ODEPhysics>
      {

          static const char * value() 
          { 
              return "667d56ddbd547918c32d1934503dc335"; 
          };

          static const uint64_t static_value1 = 0x667d56ddbd547918ULL;
          static const uint64_t static_value2 = 0xc32d1934503dc335ULL;
      }; // end struct MD5Sum<gazebo_msgs::ODEPhysics>

      template <> struct DataType<gazebo_msgs::ODEPhysics>
      {
          static const char * value() { return "gazebo_msgs/ODEPhysics";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::ODEPhysics>
      {
          static const char * value()
          { 
              return "bool auto_disable_bodies           # enable auto disabling of bodies, default false\nuint32 sor_pgs_precon_iters        # preconditioning inner iterations when uisng projected Gauss Seidel\nuint32 sor_pgs_iters               # inner iterations when uisng projected Gauss Seidel\nfloat64 sor_pgs_w                  # relaxation parameter when using projected Gauss Seidel, 1 = no relaxation\nfloat64 sor_pgs_rms_error_tol      # rms error tolerance before stopping inner iterations\nfloat64 contact_surface_layer      # contact \"dead-band\" width\nfloat64 contact_max_correcting_vel # contact maximum correction velocity\nfloat64 cfm                        # global constraint force mixing\nfloat64 erp                        # global error reduction parameter\nuint32 max_contacts                # maximum contact joints between two geoms\n";
          };
      };

      template <> struct MD5Sum<gazebo_msgs::WorldState>
      {

          static const char * value() 
          { 
              return "de1a9de3ab7ba97ac0e9ec01a4eb481e"; 
          };

          static const uint64_t static_value1 = 0xde1a9de3ab7ba97aULL;
          static const uint64_t static_value2 = 0xc0e9ec01a4eb481eULL;
      }; // end struct MD5Sum<gazebo_msgs::WorldState>

      template <> struct DataType<gazebo_msgs::WorldState>
      {
          static const char * value() { return "gazebo_msgs/WorldState";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::WorldState>
      {
          static const char * value()
          { 
              return "# This is a message that holds data necessary to reconstruct a snapshot of the world\n#\n# = Approach to Message Passing =\n# The state of the world is defined by either\n#   1. Inertial Model pose, twist\n#      * kinematic data - connectivity graph from Model to each Link\n#      * joint angles\n#      * joint velocities\n#      * Applied forces - Body wrench\n#        * relative transform from Body to each collision Geom\n# Or\n#   2. Inertial (absolute) Body pose, twist, wrench\n#      * relative transform from Body to each collision Geom - constant, so not sent over wire\n#      * back compute from canonical body info to get Model pose and twist.\n#\n# Chooing (2.) because it matches most physics engines out there\n#   and is simpler.\n#\n# = Future =\n# Consider impacts on using reduced coordinates / graph (parent/child links) approach\n#   constraint and physics solvers.\n#\n# = Application =\n# This message is used to do the following:\n#   * reconstruct the world and objects for sensor generation\n#   * stop / start simulation - need pose, twist, wrench of each body\n#   * collision detection - need pose of each collision geometry.  velocity/acceleration if \n#\n# = Assumptions =\n# Assuming that each (physics) processor node locally already has\n#   * collision information - Trimesh for Geoms, etc\n#   * relative transforms from Body to Geom - this is assumed to be fixed, do not send oved wire\n#   * inertial information - does not vary in time\n#   * visual information - does not vary in time\n#\n\nHeader header\n\nstring[] name\ngeometry_msgs/Pose[] pose\ngeometry_msgs/Twist[] twist\ngeometry_msgs/Wrench[] wrench\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of postion and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: geometry_msgs/Wrench\n# This represents force in free space, separated into\n# its linear and angular parts.\nVector3  force\nVector3  torque\n";
          };
      };

      template <> struct MD5Sum<gazebo_msgs::ApplyBodyWrenchRequest>
      {

          static const char * value() 
          { 
              return "e37e6adf97eba5095baa77dffb71e5bd"; 
          };

          static const uint64_t static_value1 = 0xe37e6adf97eba509ULL;
          static const uint64_t static_value2 = 0x5baa77dffb71e5bdULL;
      }; // end struct MD5Sum<gazebo_msgs::ApplyBodyWrenchRequest>

      template <> struct DataType<gazebo_msgs::ApplyBodyWrenchRequest>
      {
          static const char * value() { return "gazebo_msgs/ApplyBodyWrenchRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::ApplyBodyWrenchRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::ApplyBodyWrenchRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::ApplyBodyWrenchResponse>
      {

          static const char * value() 
          { 
              return "2ec6f3eff0161f4257b808b12bc830c2"; 
          };

          static const uint64_t static_value1 = 0x2ec6f3eff0161f42ULL;
          static const uint64_t static_value2 = 0x57b808b12bc830c2ULL;
      }; // end struct MD5Sum<gazebo_msgs::ApplyBodyWrenchResponse>

      template <> struct DataType<gazebo_msgs::ApplyBodyWrenchResponse>
      {
          static const char * value() { return "gazebo_msgs/ApplyBodyWrenchResponse";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::ApplyBodyWrenchResponse>
      {
          static const char * value()
          { 
              return gazebo_msgs::ApplyBodyWrenchResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::ApplyBodyWrench>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::ApplyBodyWrench>

      template <> struct DataType<gazebo_msgs::ApplyBodyWrench>
      {
          static const char * value() { return "gazebo_msgs/ApplyBodyWrench";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::ApplyBodyWrench>
      {
          static const char * value()
          { 
              return gazebo_msgs::ApplyBodyWrench::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::ApplyJointEffortRequest>
      {

          static const char * value() 
          { 
              return "2c3396ab9af67a509ecd2167a8fe41a2"; 
          };

          static const uint64_t static_value1 = 0x2c3396ab9af67a50ULL;
          static const uint64_t static_value2 = 0x9ecd2167a8fe41a2ULL;
      }; // end struct MD5Sum<gazebo_msgs::ApplyJointEffortRequest>

      template <> struct DataType<gazebo_msgs::ApplyJointEffortRequest>
      {
          static const char * value() { return "gazebo_msgs/ApplyJointEffortRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::ApplyJointEffortRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::ApplyJointEffortRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::ApplyJointEffortResponse>
      {

          static const char * value() 
          { 
              return "2ec6f3eff0161f4257b808b12bc830c2"; 
          };

          static const uint64_t static_value1 = 0x2ec6f3eff0161f42ULL;
          static const uint64_t static_value2 = 0x57b808b12bc830c2ULL;
      }; // end struct MD5Sum<gazebo_msgs::ApplyJointEffortResponse>

      template <> struct DataType<gazebo_msgs::ApplyJointEffortResponse>
      {
          static const char * value() { return "gazebo_msgs/ApplyJointEffortResponse";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::ApplyJointEffortResponse>
      {
          static const char * value()
          { 
              return gazebo_msgs::ApplyJointEffortResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::ApplyJointEffort>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::ApplyJointEffort>

      template <> struct DataType<gazebo_msgs::ApplyJointEffort>
      {
          static const char * value() { return "gazebo_msgs/ApplyJointEffort";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::ApplyJointEffort>
      {
          static const char * value()
          { 
              return gazebo_msgs::ApplyJointEffort::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::BodyRequestRequest>
      {

          static const char * value() 
          { 
              return "5eade9afe7f232d78005bd0cafeab755"; 
          };

          static const uint64_t static_value1 = 0x5eade9afe7f232d7ULL;
          static const uint64_t static_value2 = 0x8005bd0cafeab755ULL;
      }; // end struct MD5Sum<gazebo_msgs::BodyRequestRequest>

      template <> struct DataType<gazebo_msgs::BodyRequestRequest>
      {
          static const char * value() { return "gazebo_msgs/BodyRequestRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::BodyRequestRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::BodyRequestRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::BodyRequestResponse>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::BodyRequestResponse>

      template <> struct DataType<gazebo_msgs::BodyRequestResponse>
      {
          static const char * value() { return "gazebo_msgs/BodyRequestResponse";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::BodyRequestResponse>
      {
          static const char * value()
          { 
              return gazebo_msgs::BodyRequestResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::BodyRequest>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::BodyRequest>

      template <> struct DataType<gazebo_msgs::BodyRequest>
      {
          static const char * value() { return "gazebo_msgs/BodyRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::BodyRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::BodyRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::DeleteModelRequest>
      {

          static const char * value() 
          { 
              return "ea31c8eab6fc401383cf528a7c0984ba"; 
          };

          static const uint64_t static_value1 = 0xea31c8eab6fc4013ULL;
          static const uint64_t static_value2 = 0x83cf528a7c0984baULL;
      }; // end struct MD5Sum<gazebo_msgs::DeleteModelRequest>

      template <> struct DataType<gazebo_msgs::DeleteModelRequest>
      {
          static const char * value() { return "gazebo_msgs/DeleteModelRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::DeleteModelRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::DeleteModelRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::DeleteModelResponse>
      {

          static const char * value() 
          { 
              return "2ec6f3eff0161f4257b808b12bc830c2"; 
          };

          static const uint64_t static_value1 = 0x2ec6f3eff0161f42ULL;
          static const uint64_t static_value2 = 0x57b808b12bc830c2ULL;
      }; // end struct MD5Sum<gazebo_msgs::DeleteModelResponse>

      template <> struct DataType<gazebo_msgs::DeleteModelResponse>
      {
          static const char * value() { return "gazebo_msgs/DeleteModelResponse";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::DeleteModelResponse>
      {
          static const char * value()
          { 
              return gazebo_msgs::DeleteModelResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::DeleteModel>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::DeleteModel>

      template <> struct DataType<gazebo_msgs::DeleteModel>
      {
          static const char * value() { return "gazebo_msgs/DeleteModel";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::DeleteModel>
      {
          static const char * value()
          { 
              return gazebo_msgs::DeleteModel::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetJointPropertiesRequest>
      {

          static const char * value() 
          { 
              return "0be1351618e1dc030eb7959d9a4902de"; 
          };

          static const uint64_t static_value1 = 0x0be1351618e1dc03ULL;
          static const uint64_t static_value2 = 0x0eb7959d9a4902deULL;
      }; // end struct MD5Sum<gazebo_msgs::GetJointPropertiesRequest>

      template <> struct DataType<gazebo_msgs::GetJointPropertiesRequest>
      {
          static const char * value() { return "gazebo_msgs/GetJointPropertiesRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetJointPropertiesRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetJointPropertiesRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetJointPropertiesResponse>
      {

          static const char * value() 
          { 
              return "cd7b30a39faa372283dc94c5f6457f82"; 
          };

          static const uint64_t static_value1 = 0xcd7b30a39faa3722ULL;
          static const uint64_t static_value2 = 0x83dc94c5f6457f82ULL;
      }; // end struct MD5Sum<gazebo_msgs::GetJointPropertiesResponse>

      template <> struct DataType<gazebo_msgs::GetJointPropertiesResponse>
      {
          static const char * value() { return "gazebo_msgs/GetJointPropertiesResponse";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetJointPropertiesResponse>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetJointPropertiesResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetJointProperties>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::GetJointProperties>

      template <> struct DataType<gazebo_msgs::GetJointProperties>
      {
          static const char * value() { return "gazebo_msgs/GetJointProperties";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetJointProperties>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetJointProperties::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetLinkPropertiesRequest>
      {

          static const char * value() 
          { 
              return "7d82d60381f1b66a30f2157f60884345"; 
          };

          static const uint64_t static_value1 = 0x7d82d60381f1b66aULL;
          static const uint64_t static_value2 = 0x30f2157f60884345ULL;
      }; // end struct MD5Sum<gazebo_msgs::GetLinkPropertiesRequest>

      template <> struct DataType<gazebo_msgs::GetLinkPropertiesRequest>
      {
          static const char * value() { return "gazebo_msgs/GetLinkPropertiesRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetLinkPropertiesRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetLinkPropertiesRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetLinkPropertiesResponse>
      {

          static const char * value() 
          { 
              return "a8619f92d17cfcc3958c0fd13299443d"; 
          };

          static const uint64_t static_value1 = 0xa8619f92d17cfcc3ULL;
          static const uint64_t static_value2 = 0x958c0fd13299443dULL;
      }; // end struct MD5Sum<gazebo_msgs::GetLinkPropertiesResponse>

      template <> struct DataType<gazebo_msgs::GetLinkPropertiesResponse>
      {
          static const char * value() { return "gazebo_msgs/GetLinkPropertiesResponse";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetLinkPropertiesResponse>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetLinkPropertiesResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetLinkProperties>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::GetLinkProperties>

      template <> struct DataType<gazebo_msgs::GetLinkProperties>
      {
          static const char * value() { return "gazebo_msgs/GetLinkProperties";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetLinkProperties>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetLinkProperties::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetLinkStateRequest>
      {

          static const char * value() 
          { 
              return "7551675c30aaa71f7c288d4864552001"; 
          };

          static const uint64_t static_value1 = 0x7551675c30aaa71fULL;
          static const uint64_t static_value2 = 0x7c288d4864552001ULL;
      }; // end struct MD5Sum<gazebo_msgs::GetLinkStateRequest>

      template <> struct DataType<gazebo_msgs::GetLinkStateRequest>
      {
          static const char * value() { return "gazebo_msgs/GetLinkStateRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetLinkStateRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetLinkStateRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetLinkStateResponse>
      {

          static const char * value() 
          { 
              return "8ba55ad34f9c072e75c0de57b089753b"; 
          };

          static const uint64_t static_value1 = 0x8ba55ad34f9c072eULL;
          static const uint64_t static_value2 = 0x75c0de57b089753bULL;
      }; // end struct MD5Sum<gazebo_msgs::GetLinkStateResponse>

      template <> struct DataType<gazebo_msgs::GetLinkStateResponse>
      {
          static const char * value() { return "gazebo_msgs/GetLinkStateResponse";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetLinkStateResponse>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetLinkStateResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetLinkState>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::GetLinkState>

      template <> struct DataType<gazebo_msgs::GetLinkState>
      {
          static const char * value() { return "gazebo_msgs/GetLinkState";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetLinkState>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetLinkState::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetModelPropertiesRequest>
      {

          static const char * value() 
          { 
              return "ea31c8eab6fc401383cf528a7c0984ba"; 
          };

          static const uint64_t static_value1 = 0xea31c8eab6fc4013ULL;
          static const uint64_t static_value2 = 0x83cf528a7c0984baULL;
      }; // end struct MD5Sum<gazebo_msgs::GetModelPropertiesRequest>

      template <> struct DataType<gazebo_msgs::GetModelPropertiesRequest>
      {
          static const char * value() { return "gazebo_msgs/GetModelPropertiesRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetModelPropertiesRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetModelPropertiesRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetModelPropertiesResponse>
      {

          static const char * value() 
          { 
              return "b7f370938ef77b464b95f1bab3ec5028"; 
          };

          static const uint64_t static_value1 = 0xb7f370938ef77b46ULL;
          static const uint64_t static_value2 = 0x4b95f1bab3ec5028ULL;
      }; // end struct MD5Sum<gazebo_msgs::GetModelPropertiesResponse>

      template <> struct DataType<gazebo_msgs::GetModelPropertiesResponse>
      {
          static const char * value() { return "gazebo_msgs/GetModelPropertiesResponse";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetModelPropertiesResponse>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetModelPropertiesResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetModelProperties>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::GetModelProperties>

      template <> struct DataType<gazebo_msgs::GetModelProperties>
      {
          static const char * value() { return "gazebo_msgs/GetModelProperties";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetModelProperties>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetModelProperties::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetModelStateRequest>
      {

          static const char * value() 
          { 
              return "19d412713cefe4a67437e17a951e759e"; 
          };

          static const uint64_t static_value1 = 0x19d412713cefe4a6ULL;
          static const uint64_t static_value2 = 0x7437e17a951e759eULL;
      }; // end struct MD5Sum<gazebo_msgs::GetModelStateRequest>

      template <> struct DataType<gazebo_msgs::GetModelStateRequest>
      {
          static const char * value() { return "gazebo_msgs/GetModelStateRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetModelStateRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetModelStateRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetModelStateResponse>
      {

          static const char * value() 
          { 
              return "ccd51739bb00f0141629e87b792e92b9"; 
          };

          static const uint64_t static_value1 = 0xccd51739bb00f014ULL;
          static const uint64_t static_value2 = 0x1629e87b792e92b9ULL;
      }; // end struct MD5Sum<gazebo_msgs::GetModelStateResponse>

      template <> struct DataType<gazebo_msgs::GetModelStateResponse>
      {
          static const char * value() { return "gazebo_msgs/GetModelStateResponse";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetModelStateResponse>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetModelStateResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetModelState>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::GetModelState>

      template <> struct DataType<gazebo_msgs::GetModelState>
      {
          static const char * value() { return "gazebo_msgs/GetModelState";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetModelState>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetModelState::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetPhysicsPropertiesRequest>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::GetPhysicsPropertiesRequest>

      template <> struct DataType<gazebo_msgs::GetPhysicsPropertiesRequest>
      {
          static const char * value() { return "gazebo_msgs/GetPhysicsPropertiesRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetPhysicsPropertiesRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetPhysicsPropertiesRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetPhysicsPropertiesResponse>
      {

          static const char * value() 
          { 
              return "575a5e74786981b7df2e3afc567693a6"; 
          };

          static const uint64_t static_value1 = 0x575a5e74786981b7ULL;
          static const uint64_t static_value2 = 0xdf2e3afc567693a6ULL;
      }; // end struct MD5Sum<gazebo_msgs::GetPhysicsPropertiesResponse>

      template <> struct DataType<gazebo_msgs::GetPhysicsPropertiesResponse>
      {
          static const char * value() { return "gazebo_msgs/GetPhysicsPropertiesResponse";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetPhysicsPropertiesResponse>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetPhysicsPropertiesResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetPhysicsProperties>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::GetPhysicsProperties>

      template <> struct DataType<gazebo_msgs::GetPhysicsProperties>
      {
          static const char * value() { return "gazebo_msgs/GetPhysicsProperties";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetPhysicsProperties>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetPhysicsProperties::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetWorldPropertiesRequest>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::GetWorldPropertiesRequest>

      template <> struct DataType<gazebo_msgs::GetWorldPropertiesRequest>
      {
          static const char * value() { return "gazebo_msgs/GetWorldPropertiesRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetWorldPropertiesRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetWorldPropertiesRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetWorldPropertiesResponse>
      {

          static const char * value() 
          { 
              return "36bb0f2eccf4d8be971410c22818ba3f"; 
          };

          static const uint64_t static_value1 = 0x36bb0f2eccf4d8beULL;
          static const uint64_t static_value2 = 0x971410c22818ba3fULL;
      }; // end struct MD5Sum<gazebo_msgs::GetWorldPropertiesResponse>

      template <> struct DataType<gazebo_msgs::GetWorldPropertiesResponse>
      {
          static const char * value() { return "gazebo_msgs/GetWorldPropertiesResponse";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetWorldPropertiesResponse>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetWorldPropertiesResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::GetWorldProperties>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::GetWorldProperties>

      template <> struct DataType<gazebo_msgs::GetWorldProperties>
      {
          static const char * value() { return "gazebo_msgs/GetWorldProperties";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::GetWorldProperties>
      {
          static const char * value()
          { 
              return gazebo_msgs::GetWorldProperties::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::JointRequestRequest>
      {

          static const char * value() 
          { 
              return "0be1351618e1dc030eb7959d9a4902de"; 
          };

          static const uint64_t static_value1 = 0x0be1351618e1dc03ULL;
          static const uint64_t static_value2 = 0x0eb7959d9a4902deULL;
      }; // end struct MD5Sum<gazebo_msgs::JointRequestRequest>

      template <> struct DataType<gazebo_msgs::JointRequestRequest>
      {
          static const char * value() { return "gazebo_msgs/JointRequestRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::JointRequestRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::JointRequestRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::JointRequestResponse>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::JointRequestResponse>

      template <> struct DataType<gazebo_msgs::JointRequestResponse>
      {
          static const char * value() { return "gazebo_msgs/JointRequestResponse";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::JointRequestResponse>
      {
          static const char * value()
          { 
              return gazebo_msgs::JointRequestResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::JointRequest>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::JointRequest>

      template <> struct DataType<gazebo_msgs::JointRequest>
      {
          static const char * value() { return "gazebo_msgs/JointRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::JointRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::JointRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetJointPropertiesRequest>
      {

          static const char * value() 
          { 
              return "331fd8f35fd27e3c1421175590258e26"; 
          };

          static const uint64_t static_value1 = 0x331fd8f35fd27e3cULL;
          static const uint64_t static_value2 = 0x1421175590258e26ULL;
      }; // end struct MD5Sum<gazebo_msgs::SetJointPropertiesRequest>

      template <> struct DataType<gazebo_msgs::SetJointPropertiesRequest>
      {
          static const char * value() { return "gazebo_msgs/SetJointPropertiesRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetJointPropertiesRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetJointPropertiesRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetJointPropertiesResponse>
      {

          static const char * value() 
          { 
              return "2ec6f3eff0161f4257b808b12bc830c2"; 
          };

          static const uint64_t static_value1 = 0x2ec6f3eff0161f42ULL;
          static const uint64_t static_value2 = 0x57b808b12bc830c2ULL;
      }; // end struct MD5Sum<gazebo_msgs::SetJointPropertiesResponse>

      template <> struct DataType<gazebo_msgs::SetJointPropertiesResponse>
      {
          static const char * value() { return "gazebo_msgs/SetJointPropertiesResponse";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetJointPropertiesResponse>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetJointPropertiesResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetJointProperties>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::SetJointProperties>

      template <> struct DataType<gazebo_msgs::SetJointProperties>
      {
          static const char * value() { return "gazebo_msgs/SetJointProperties";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetJointProperties>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetJointProperties::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetJointTrajectoryRequest>
      {

          static const char * value() 
          { 
              return "649dd2eba5ffd358069238825f9f85ab"; 
          };

          static const uint64_t static_value1 = 0x649dd2eba5ffd358ULL;
          static const uint64_t static_value2 = 0x069238825f9f85abULL;
      }; // end struct MD5Sum<gazebo_msgs::SetJointTrajectoryRequest>

      template <> struct DataType<gazebo_msgs::SetJointTrajectoryRequest>
      {
          static const char * value() { return "gazebo_msgs/SetJointTrajectoryRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetJointTrajectoryRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetJointTrajectoryRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetJointTrajectoryResponse>
      {

          static const char * value() 
          { 
              return "2ec6f3eff0161f4257b808b12bc830c2"; 
          };

          static const uint64_t static_value1 = 0x2ec6f3eff0161f42ULL;
          static const uint64_t static_value2 = 0x57b808b12bc830c2ULL;
      }; // end struct MD5Sum<gazebo_msgs::SetJointTrajectoryResponse>

      template <> struct DataType<gazebo_msgs::SetJointTrajectoryResponse>
      {
          static const char * value() { return "gazebo_msgs/SetJointTrajectoryResponse";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetJointTrajectoryResponse>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetJointTrajectoryResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetJointTrajectory>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::SetJointTrajectory>

      template <> struct DataType<gazebo_msgs::SetJointTrajectory>
      {
          static const char * value() { return "gazebo_msgs/SetJointTrajectory";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetJointTrajectory>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetJointTrajectory::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetLinkPropertiesRequest>
      {

          static const char * value() 
          { 
              return "68ac74a4be01b165bc305b5ccdc45e91"; 
          };

          static const uint64_t static_value1 = 0x68ac74a4be01b165ULL;
          static const uint64_t static_value2 = 0xbc305b5ccdc45e91ULL;
      }; // end struct MD5Sum<gazebo_msgs::SetLinkPropertiesRequest>

      template <> struct DataType<gazebo_msgs::SetLinkPropertiesRequest>
      {
          static const char * value() { return "gazebo_msgs/SetLinkPropertiesRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetLinkPropertiesRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetLinkPropertiesRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetLinkPropertiesResponse>
      {

          static const char * value() 
          { 
              return "2ec6f3eff0161f4257b808b12bc830c2"; 
          };

          static const uint64_t static_value1 = 0x2ec6f3eff0161f42ULL;
          static const uint64_t static_value2 = 0x57b808b12bc830c2ULL;
      }; // end struct MD5Sum<gazebo_msgs::SetLinkPropertiesResponse>

      template <> struct DataType<gazebo_msgs::SetLinkPropertiesResponse>
      {
          static const char * value() { return "gazebo_msgs/SetLinkPropertiesResponse";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetLinkPropertiesResponse>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetLinkPropertiesResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetLinkProperties>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::SetLinkProperties>

      template <> struct DataType<gazebo_msgs::SetLinkProperties>
      {
          static const char * value() { return "gazebo_msgs/SetLinkProperties";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetLinkProperties>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetLinkProperties::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetLinkStateRequest>
      {

          static const char * value() 
          { 
              return "22a2c757d56911b6f27868159e9a872d"; 
          };

          static const uint64_t static_value1 = 0x22a2c757d56911b6ULL;
          static const uint64_t static_value2 = 0xf27868159e9a872dULL;
      }; // end struct MD5Sum<gazebo_msgs::SetLinkStateRequest>

      template <> struct DataType<gazebo_msgs::SetLinkStateRequest>
      {
          static const char * value() { return "gazebo_msgs/SetLinkStateRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetLinkStateRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetLinkStateRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetLinkStateResponse>
      {

          static const char * value() 
          { 
              return "2ec6f3eff0161f4257b808b12bc830c2"; 
          };

          static const uint64_t static_value1 = 0x2ec6f3eff0161f42ULL;
          static const uint64_t static_value2 = 0x57b808b12bc830c2ULL;
      }; // end struct MD5Sum<gazebo_msgs::SetLinkStateResponse>

      template <> struct DataType<gazebo_msgs::SetLinkStateResponse>
      {
          static const char * value() { return "gazebo_msgs/SetLinkStateResponse";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetLinkStateResponse>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetLinkStateResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetLinkState>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::SetLinkState>

      template <> struct DataType<gazebo_msgs::SetLinkState>
      {
          static const char * value() { return "gazebo_msgs/SetLinkState";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetLinkState>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetLinkState::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetModelConfigurationRequest>
      {

          static const char * value() 
          { 
              return "160eae60f51fabff255480c70afa289f"; 
          };

          static const uint64_t static_value1 = 0x160eae60f51fabffULL;
          static const uint64_t static_value2 = 0x255480c70afa289fULL;
      }; // end struct MD5Sum<gazebo_msgs::SetModelConfigurationRequest>

      template <> struct DataType<gazebo_msgs::SetModelConfigurationRequest>
      {
          static const char * value() { return "gazebo_msgs/SetModelConfigurationRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetModelConfigurationRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetModelConfigurationRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetModelConfigurationResponse>
      {

          static const char * value() 
          { 
              return "2ec6f3eff0161f4257b808b12bc830c2"; 
          };

          static const uint64_t static_value1 = 0x2ec6f3eff0161f42ULL;
          static const uint64_t static_value2 = 0x57b808b12bc830c2ULL;
      }; // end struct MD5Sum<gazebo_msgs::SetModelConfigurationResponse>

      template <> struct DataType<gazebo_msgs::SetModelConfigurationResponse>
      {
          static const char * value() { return "gazebo_msgs/SetModelConfigurationResponse";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetModelConfigurationResponse>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetModelConfigurationResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetModelConfiguration>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::SetModelConfiguration>

      template <> struct DataType<gazebo_msgs::SetModelConfiguration>
      {
          static const char * value() { return "gazebo_msgs/SetModelConfiguration";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetModelConfiguration>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetModelConfiguration::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetModelStateRequest>
      {

          static const char * value() 
          { 
              return "cb042b0e91880f4661b29ea5b6234350"; 
          };

          static const uint64_t static_value1 = 0xcb042b0e91880f46ULL;
          static const uint64_t static_value2 = 0x61b29ea5b6234350ULL;
      }; // end struct MD5Sum<gazebo_msgs::SetModelStateRequest>

      template <> struct DataType<gazebo_msgs::SetModelStateRequest>
      {
          static const char * value() { return "gazebo_msgs/SetModelStateRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetModelStateRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetModelStateRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetModelStateResponse>
      {

          static const char * value() 
          { 
              return "2ec6f3eff0161f4257b808b12bc830c2"; 
          };

          static const uint64_t static_value1 = 0x2ec6f3eff0161f42ULL;
          static const uint64_t static_value2 = 0x57b808b12bc830c2ULL;
      }; // end struct MD5Sum<gazebo_msgs::SetModelStateResponse>

      template <> struct DataType<gazebo_msgs::SetModelStateResponse>
      {
          static const char * value() { return "gazebo_msgs/SetModelStateResponse";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetModelStateResponse>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetModelStateResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetModelState>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::SetModelState>

      template <> struct DataType<gazebo_msgs::SetModelState>
      {
          static const char * value() { return "gazebo_msgs/SetModelState";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetModelState>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetModelState::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetPhysicsPropertiesRequest>
      {

          static const char * value() 
          { 
              return "abd9f82732b52b92e9d6bb36e6a82452"; 
          };

          static const uint64_t static_value1 = 0xabd9f82732b52b92ULL;
          static const uint64_t static_value2 = 0xe9d6bb36e6a82452ULL;
      }; // end struct MD5Sum<gazebo_msgs::SetPhysicsPropertiesRequest>

      template <> struct DataType<gazebo_msgs::SetPhysicsPropertiesRequest>
      {
          static const char * value() { return "gazebo_msgs/SetPhysicsPropertiesRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetPhysicsPropertiesRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetPhysicsPropertiesRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetPhysicsPropertiesResponse>
      {

          static const char * value() 
          { 
              return "2ec6f3eff0161f4257b808b12bc830c2"; 
          };

          static const uint64_t static_value1 = 0x2ec6f3eff0161f42ULL;
          static const uint64_t static_value2 = 0x57b808b12bc830c2ULL;
      }; // end struct MD5Sum<gazebo_msgs::SetPhysicsPropertiesResponse>

      template <> struct DataType<gazebo_msgs::SetPhysicsPropertiesResponse>
      {
          static const char * value() { return "gazebo_msgs/SetPhysicsPropertiesResponse";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetPhysicsPropertiesResponse>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetPhysicsPropertiesResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SetPhysicsProperties>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::SetPhysicsProperties>

      template <> struct DataType<gazebo_msgs::SetPhysicsProperties>
      {
          static const char * value() { return "gazebo_msgs/SetPhysicsProperties";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SetPhysicsProperties>
      {
          static const char * value()
          { 
              return gazebo_msgs::SetPhysicsProperties::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SpawnModelRequest>
      {

          static const char * value() 
          { 
              return "6d0eba5753761cd57e6263a056b79930"; 
          };

          static const uint64_t static_value1 = 0x6d0eba5753761cd5ULL;
          static const uint64_t static_value2 = 0x7e6263a056b79930ULL;
      }; // end struct MD5Sum<gazebo_msgs::SpawnModelRequest>

      template <> struct DataType<gazebo_msgs::SpawnModelRequest>
      {
          static const char * value() { return "gazebo_msgs/SpawnModelRequest";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SpawnModelRequest>
      {
          static const char * value()
          { 
              return gazebo_msgs::SpawnModelRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SpawnModelResponse>
      {

          static const char * value() 
          { 
              return "2ec6f3eff0161f4257b808b12bc830c2"; 
          };

          static const uint64_t static_value1 = 0x2ec6f3eff0161f42ULL;
          static const uint64_t static_value2 = 0x57b808b12bc830c2ULL;
      }; // end struct MD5Sum<gazebo_msgs::SpawnModelResponse>

      template <> struct DataType<gazebo_msgs::SpawnModelResponse>
      {
          static const char * value() { return "gazebo_msgs/SpawnModelResponse";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SpawnModelResponse>
      {
          static const char * value()
          { 
              return gazebo_msgs::SpawnModelResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<gazebo_msgs::SpawnModel>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<gazebo_msgs::SpawnModel>

      template <> struct DataType<gazebo_msgs::SpawnModel>
      {
          static const char * value() { return "gazebo_msgs/SpawnModel";};
      }; // end DataType

      template <> struct Definition<gazebo_msgs::SpawnModel>
      {
          static const char * value()
          { 
              return gazebo_msgs::SpawnModel::XML_SOURCE.c_str();
          };
      };

  }; // end namespace message_traits

}; // namespace ros

#endif // _CODEGEN_GAZEBO_MSGS_GENCPP_ROS_H_


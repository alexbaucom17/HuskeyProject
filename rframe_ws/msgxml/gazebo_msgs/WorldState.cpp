// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 12:55:18 -0500
//  From Template/Script: data_templates/DataClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <math.h> // to allow use of common constants...
#include <common/Error.h>
#include "gazebo_msgs/WorldState.h"

#include <common/JsonIo.h> // include here so container types are included by the class header 

using namespace std;

const unsigned int gazebo_msgs::WorldState::ID;
const unsigned int gazebo_msgs::WorldState::DATA_VERSION;
const std::string gazebo_msgs::WorldState::DATA_TYPE_NAME = "WorldState";
const std::string gazebo_msgs::WorldState::DATA_TYPE_FULL_NAME = "gazebo_msgs::WorldState";
const std::string gazebo_msgs::WorldState::VERSION_MD5 = "ada8960a3183158ca6eda4ba82ce589a";
/* xml source for this class */
const std::string gazebo_msgs::WorldState::XML_SOURCE = "<class name=\"WorldState\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"de1a9de3ab7ba97ac0e9ec01a4eb481e\" rosDesc=\"# This is a message that holds data necessary to reconstruct a snapshot of the world\\n#\\n# = Approach to Message Passing =\\n# The state of the world is defined by either\\n#   1. Inertial Model pose, twist\\n#      * kinematic data - connectivity graph from Model to each Link\\n#      * joint angles\\n#      * joint velocities\\n#      * Applied forces - Body wrench\\n#        * relative transform from Body to each collision Geom\\n# Or\\n#   2. Inertial (absolute) Body pose, twist, wrench\\n#      * relative transform from Body to each collision Geom - constant, so not sent over wire\\n#      * back compute from canonical body info to get Model pose and twist.\\n#\\n# Chooing (2.) because it matches most physics engines out there\\n#   and is simpler.\\n#\\n# = Future =\\n# Consider impacts on using reduced coordinates / graph (parent/child links) approach\\n#   constraint and physics solvers.\\n#\\n# = Application =\\n# This message is used to do the following:\\n#   * reconstruct the world and objects for sensor generation\\n#   * stop / start simulation - need pose, twist, wrench of each body\\n#   * collision detection - need pose of each collision geometry.  velocity/acceleration if \\n#\\n# = Assumptions =\\n# Assuming that each (physics) processor node locally already has\\n#   * collision information - Trimesh for Geoms, etc\\n#   * relative transforms from Body to Geom - this is assumed to be fixed, do not send oved wire\\n#   * inertial information - does not vary in time\\n#   * visual information - does not vary in time\\n#\\n\\nHeader header\\n\\nstring[] name\\ngeometry_msgs/Pose[] pose\\ngeometry_msgs/Twist[] twist\\ngeometry_msgs/Wrench[] wrench\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/Pose\\n# A representation of pose in free space, composed of postion and orientation. \\nPoint position\\nQuaternion orientation\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\\n================================================================================\\nMSG: geometry_msgs/Twist\\n# This expresses velocity in free space broken into its linear and angular parts.\\nVector3  linear\\nVector3  angular\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n================================================================================\\nMSG: geometry_msgs/Wrench\\n# This represents force in free space, separated into\\n# its linear and angular parts.\\nVector3  force\\nVector3  torque\\n\" comment=\"This is a message that holds data necessary to reconstruct a snapshot of the world   = Approach to Message Passing =  The state of the world is defined by either    1. Inertial Model pose, twist       * kinematic data - connectivity graph from Model to each Link       * joint angles       * joint velocities       * Applied forces - Body wrench         * relative transform from Body to each collision Geom  Or    2. Inertial (absolute) Body pose, twist, wrench       * relative transform from Body to each collision Geom - constant, so not sent over wire       * back compute from canonical body info to get Model pose and twist.   Chooing (2.) because it matches most physics engines out there    and is simpler.   = Future =  Consider impacts on using reduced coordinates / graph (parent/child links) approach    constraint and physics solvers.   = Application =  This message is used to do the following:    * reconstruct the world and objects for sensor generation    * stop / start simulation - need pose, twist, wrench of each body    * collision detection - need pose of each collision geometry.  velocity/acceleration if    = Assumptions =  Assuming that each (physics) processor node locally already has    * collision information - Trimesh for Geoms, etc    * relative transforms from Body to Geom - this is assumed to be fixed, do not send oved wire    * inertial information - does not vary in time    * visual information - does not vary in time\" id=\"1781288121\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"name\" type=\"vector(string)\" sourceType=\"string\" comment=\"\"/>\
  <field name=\"pose\" type=\"vector(geometry_msgs::Pose)\" sourceType=\"geometry_msgs::Pose\" comment=\"\"/>\
  <field name=\"twist\" type=\"vector(geometry_msgs::Twist)\" sourceType=\"geometry_msgs::Twist\" comment=\"\"/>\
  <field name=\"wrench\" type=\"vector(geometry_msgs::Wrench)\" sourceType=\"geometry_msgs::Wrench\" comment=\"\"/>\
</class>";

gazebo_msgs::WorldState::WorldState() : header(), name(), pose(), twist(), wrench()
{  
};

gazebo_msgs::WorldState::WorldState(const gazebo_msgs::WorldState & inobj) : header(inobj.header), name(inobj.name), pose(inobj.pose), twist(inobj.twist), wrench(inobj.wrench)
{
};

gazebo_msgs::WorldState::~WorldState()
{
};

gazebo_msgs::WorldState * gazebo_msgs::WorldState::New()
{ 
    return new WorldState();
};

bool gazebo_msgs::WorldState::dataTypeFlat() 
{   
    return false; 
};

gazebo_msgs::WorldState & gazebo_msgs::WorldState::operator=(const gazebo_msgs::WorldState & inobj)
{
    if (this != &inobj)
    {

        // if datatype is flat, optimize with memcpy (complier level optimiation)
              /*  if (dataTypeFlat() == true)
                  REMOVED invalid when assigning from a parent type as this is the pointer to the derived type, thus gazebo_msgs::WorldState is copied to the wrong location

        {
            memcpy(this,&inobj,sizeof(gazebo_msgs::WorldState));
        }
        else */ 
        {

            header = inobj.header;
            name = inobj.name;
            pose = inobj.pose;
            twist = inobj.twist;
            wrench = inobj.wrench;
        }
    }

    return *this;
}

bool gazebo_msgs::WorldState::operator==(const gazebo_msgs::WorldState & inobj) const
{
    bool ret = true;

    if (this != &inobj)
    { 
        ret = ret 
             && (header == inobj.header)
             && (name == inobj.name)
             && (pose == inobj.pose)
             && (twist == inobj.twist)
             && (wrench == inobj.wrench);
    }

    return ret;
}

bool gazebo_msgs::WorldState::operator!=(const gazebo_msgs::WorldState & inobj) const
{
    bool ret = false;

    if (this != &inobj)
    {
        ret = !operator==(inobj);
    }

    return ret;
}

bool gazebo_msgs::WorldState::operator<(const gazebo_msgs::WorldState & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {  
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (header < inobj.header) return true;
        if (inobj.header <  header) return false; 
        if (name < inobj.name) return true;
        if (inobj.name <  name) return false; 
        if (pose < inobj.pose) return true;
        if (inobj.pose <  pose) return false; 
        if (twist < inobj.twist) return true;
        if (inobj.twist <  twist) return false; 
        if (wrench < inobj.wrench) return true;
        if (inobj.wrench <  wrench) return false; ;
    }

    return ret;
}

bool gazebo_msgs::WorldState::operator>(const gazebo_msgs::WorldState & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (header > inobj.header) return true;
        if (inobj.header >  header) return false; 
        if (name > inobj.name) return true;
        if (inobj.name >  name) return false; 
        if (pose > inobj.pose) return true;
        if (inobj.pose >  pose) return false; 
        if (twist > inobj.twist) return true;
        if (inobj.twist >  twist) return false; 
        if (wrench > inobj.wrench) return true;
        if (inobj.wrench >  wrench) return false; ;
    }

    return ret;
}

template <> void rframe::json_io::encode(std::stringstream & sstr, const char * name, const gazebo_msgs::WorldState & t, std::string & indent, bool lastItem)
{
    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectStart(sstr,name,indent);

    rframe::json_io::encode(sstr,"header",t.header,indent,false);
    rframe::json_io::encode(sstr,"name",t.name,indent,false);
    rframe::json_io::encode(sstr,"pose",t.pose,indent,false);
    rframe::json_io::encode(sstr,"twist",t.twist,indent,false);
    rframe::json_io::encode(sstr,"wrench",t.wrench,indent,true);

    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectEnd(sstr,indent,lastItem);
}

std::string gazebo_msgs::WorldState::toStr(bool pretty) const
{

    stringstream sstr;
    string indent = (pretty == true) ? "\n" : "";

    rframe::json_io::encodeObjectStartMain(sstr,indent);
    rframe::json_io::encode(sstr,"",*this,indent,true);
    rframe::json_io::encodeObjectEnd(sstr,indent,true); // false so as to  not add , at end of string

    return sstr.str();

};

std::basic_ostream<char>& operator<<(std::basic_ostream<char> &s, const gazebo_msgs::WorldState & value)
{
    return s << value.toStr(false);
}


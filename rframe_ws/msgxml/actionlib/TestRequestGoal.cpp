// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:44 -0500
//  From Template/Script: data_templates/DataClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <math.h> // to allow use of common constants...
#include <common/Error.h>
#include "actionlib/TestRequestGoal.h"

#include <common/JsonIo.h> // include here so container types are included by the class header 

using namespace std;

const int actionlib::TestRequestGoal::TERMINATE_SUCCESS = 0;
const int actionlib::TestRequestGoal::TERMINATE_ABORTED = 1;
const int actionlib::TestRequestGoal::TERMINATE_REJECTED = 2;
const int actionlib::TestRequestGoal::TERMINATE_LOSE = 3;
const int actionlib::TestRequestGoal::TERMINATE_DROP = 4;
const int actionlib::TestRequestGoal::TERMINATE_EXCEPTION = 5;

const unsigned int actionlib::TestRequestGoal::ID;
const unsigned int actionlib::TestRequestGoal::DATA_VERSION;
const std::string actionlib::TestRequestGoal::DATA_TYPE_NAME = "TestRequestGoal";
const std::string actionlib::TestRequestGoal::DATA_TYPE_FULL_NAME = "actionlib::TestRequestGoal";
const std::string actionlib::TestRequestGoal::VERSION_MD5 = "b516683e473c80def34165ce77f94821";
/* xml source for this class */
const std::string actionlib::TestRequestGoal::XML_SOURCE = "<class name=\"TestRequestGoal\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"db5d00ba98302d6c6dd3737e9a03ceea\" rosDesc=\"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\nint32 TERMINATE_SUCCESS = 0\\nint32 TERMINATE_ABORTED = 1\\nint32 TERMINATE_REJECTED = 2\\nint32 TERMINATE_LOSE = 3\\nint32 TERMINATE_DROP = 4\\nint32 TERMINATE_EXCEPTION = 5\\nint32 terminate_status\\nbool ignore_cancel  # If true, ignores requests to cancel\\nstring result_text\\nint32 the_result    # Desired value for the_result in the Result\\nbool is_simple_client\\nduration delay_accept  # Delays accepting the goal by this amount of time\\nduration delay_terminate  # Delays terminating for this amount of time\\nduration pause_status  # Pauses the status messages for this amount of time\\n\" comment=\"====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\" id=\"1134863288\">\
  <constant init=\"0\" name=\"TERMINATE_SUCCESS\" type=\"int\" sourceType=\"int32\" comment=\"\"/>\
  <constant init=\"1\" name=\"TERMINATE_ABORTED\" type=\"int\" sourceType=\"int32\" comment=\"\"/>\
  <constant init=\"2\" name=\"TERMINATE_REJECTED\" type=\"int\" sourceType=\"int32\" comment=\"\"/>\
  <constant init=\"3\" name=\"TERMINATE_LOSE\" type=\"int\" sourceType=\"int32\" comment=\"\"/>\
  <constant init=\"4\" name=\"TERMINATE_DROP\" type=\"int\" sourceType=\"int32\" comment=\"\"/>\
  <constant init=\"5\" name=\"TERMINATE_EXCEPTION\" type=\"int\" sourceType=\"int32\" comment=\"\"/>\
  <field name=\"terminate_status\" type=\"int\" sourceType=\"int32\" comment=\"\"/>\
  <field name=\"ignore_cancel\" type=\"bool\" sourceType=\"bool\" comment=\"If true, ignores requests to cancel\"/>\
  <field name=\"result_text\" type=\"string\" sourceType=\"string\" comment=\"\"/>\
  <field name=\"the_result\" type=\"int\" sourceType=\"int32\" comment=\"Desired value for the_result in the Result\"/>\
  <field name=\"is_simple_client\" type=\"bool\" sourceType=\"bool\" comment=\"\"/>\
  <field name=\"delay_accept\" type=\"std_msgs::RosDuration\" sourceType=\"duration\" comment=\"Delays accepting the goal by this amount of time\"/>\
  <field name=\"delay_terminate\" type=\"std_msgs::RosDuration\" sourceType=\"duration\" comment=\"Delays terminating for this amount of time\"/>\
  <field name=\"pause_status\" type=\"std_msgs::RosDuration\" sourceType=\"duration\" comment=\"Pauses the status messages for this amount of time\"/>\
</class>";

actionlib::TestRequestGoal::TestRequestGoal() : terminate_status(0), ignore_cancel(0), result_text(), the_result(0), is_simple_client(0), delay_accept(), delay_terminate(), pause_status()
{  
};

actionlib::TestRequestGoal::TestRequestGoal(const actionlib::TestRequestGoal & inobj) : terminate_status(inobj.terminate_status), ignore_cancel(inobj.ignore_cancel), result_text(inobj.result_text), the_result(inobj.the_result), is_simple_client(inobj.is_simple_client), delay_accept(inobj.delay_accept), delay_terminate(inobj.delay_terminate), pause_status(inobj.pause_status)
{
};

actionlib::TestRequestGoal::~TestRequestGoal()
{
};

actionlib::TestRequestGoal * actionlib::TestRequestGoal::New()
{ 
    return new TestRequestGoal();
};

bool actionlib::TestRequestGoal::dataTypeFlat() 
{  
    return std_msgs::RosDuration::dataTypeFlat() && rframe::CodeGenTraits<std::string>::flat();

};

actionlib::TestRequestGoal & actionlib::TestRequestGoal::operator=(const actionlib::TestRequestGoal & inobj)
{
    if (this != &inobj)
    {

        // if datatype is flat, optimize with memcpy (complier level optimiation)
              /*  if (dataTypeFlat() == true)
                  REMOVED invalid when assigning from a parent type as this is the pointer to the derived type, thus actionlib::TestRequestGoal is copied to the wrong location

        {
            memcpy(this,&inobj,sizeof(actionlib::TestRequestGoal));
        }
        else */ 
        {

            terminate_status = inobj.terminate_status;
            ignore_cancel = inobj.ignore_cancel;
            result_text = inobj.result_text;
            the_result = inobj.the_result;
            is_simple_client = inobj.is_simple_client;
            delay_accept = inobj.delay_accept;
            delay_terminate = inobj.delay_terminate;
            pause_status = inobj.pause_status;
        }
    }

    return *this;
}

bool actionlib::TestRequestGoal::operator==(const actionlib::TestRequestGoal & inobj) const
{
    bool ret = true;

    if (this != &inobj)
    { 
        ret = ret 
             && (terminate_status == inobj.terminate_status)
             && (ignore_cancel == inobj.ignore_cancel)
             && (result_text == inobj.result_text)
             && (the_result == inobj.the_result)
             && (is_simple_client == inobj.is_simple_client)
             && (delay_accept == inobj.delay_accept)
             && (delay_terminate == inobj.delay_terminate)
             && (pause_status == inobj.pause_status);
    }

    return ret;
}

bool actionlib::TestRequestGoal::operator!=(const actionlib::TestRequestGoal & inobj) const
{
    bool ret = false;

    if (this != &inobj)
    {
        ret = !operator==(inobj);
    }

    return ret;
}

bool actionlib::TestRequestGoal::operator<(const actionlib::TestRequestGoal & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {  
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (terminate_status < inobj.terminate_status) return true;
        if (inobj.terminate_status <  terminate_status) return false; 
        if (ignore_cancel < inobj.ignore_cancel) return true;
        if (inobj.ignore_cancel <  ignore_cancel) return false; 
        if (result_text < inobj.result_text) return true;
        if (inobj.result_text <  result_text) return false; 
        if (the_result < inobj.the_result) return true;
        if (inobj.the_result <  the_result) return false; 
        if (is_simple_client < inobj.is_simple_client) return true;
        if (inobj.is_simple_client <  is_simple_client) return false; 
        if (delay_accept < inobj.delay_accept) return true;
        if (inobj.delay_accept <  delay_accept) return false; 
        if (delay_terminate < inobj.delay_terminate) return true;
        if (inobj.delay_terminate <  delay_terminate) return false; 
        if (pause_status < inobj.pause_status) return true;
        if (inobj.pause_status <  pause_status) return false; ;
    }

    return ret;
}

bool actionlib::TestRequestGoal::operator>(const actionlib::TestRequestGoal & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (terminate_status > inobj.terminate_status) return true;
        if (inobj.terminate_status >  terminate_status) return false; 
        if (ignore_cancel > inobj.ignore_cancel) return true;
        if (inobj.ignore_cancel >  ignore_cancel) return false; 
        if (result_text > inobj.result_text) return true;
        if (inobj.result_text >  result_text) return false; 
        if (the_result > inobj.the_result) return true;
        if (inobj.the_result >  the_result) return false; 
        if (is_simple_client > inobj.is_simple_client) return true;
        if (inobj.is_simple_client >  is_simple_client) return false; 
        if (delay_accept > inobj.delay_accept) return true;
        if (inobj.delay_accept >  delay_accept) return false; 
        if (delay_terminate > inobj.delay_terminate) return true;
        if (inobj.delay_terminate >  delay_terminate) return false; 
        if (pause_status > inobj.pause_status) return true;
        if (inobj.pause_status >  pause_status) return false; ;
    }

    return ret;
}

template <> void rframe::json_io::encode(std::stringstream & sstr, const char * name, const actionlib::TestRequestGoal & t, std::string & indent, bool lastItem)
{
    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectStart(sstr,name,indent);

    rframe::json_io::encode(sstr,"terminate_status",t.terminate_status,indent,false);
    rframe::json_io::encode(sstr,"ignore_cancel",t.ignore_cancel,indent,false);
    rframe::json_io::encode(sstr,"result_text",t.result_text,indent,false);
    rframe::json_io::encode(sstr,"the_result",t.the_result,indent,false);
    rframe::json_io::encode(sstr,"is_simple_client",t.is_simple_client,indent,false);
    rframe::json_io::encode(sstr,"delay_accept",t.delay_accept,indent,false);
    rframe::json_io::encode(sstr,"delay_terminate",t.delay_terminate,indent,false);
    rframe::json_io::encode(sstr,"pause_status",t.pause_status,indent,true);

    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectEnd(sstr,indent,lastItem);
}

std::string actionlib::TestRequestGoal::toStr(bool pretty) const
{

    stringstream sstr;
    string indent = (pretty == true) ? "\n" : "";

    rframe::json_io::encodeObjectStartMain(sstr,indent);
    rframe::json_io::encode(sstr,"",*this,indent,true);
    rframe::json_io::encodeObjectEnd(sstr,indent,true); // false so as to  not add , at end of string

    return sstr.str();

};

std::basic_ostream<char>& operator<<(std::basic_ostream<char> &s, const actionlib::TestRequestGoal & value)
{
    return s << value.toStr(false);
}


// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:03 -0500
//  From Template/Script: data_templates/ROSTemplate.h.rb
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#ifndef _CODEGEN_ACTIONLIB_GENCPP_ROS_H_
#define _CODEGEN_ACTIONLIB_GENCPP_ROS_H_

#include <opensource/ros/serialization.h>
#include <opensource/ros/message_traits.h>
#include <opensource/ros/message_operations.h>

#include <messaging/ros/ROSMessageFactory.h>
#include <messaging/Message.h>

namespace rframe { class DataTypeInfo; };

#include "actionlib_gencpp_Library.h"

#include "actionlib_msgs/actionlib_msgs_gencpp_ROS.h"
#include "std_msgs/std_msgs_gencpp_ROS.h"
#include "std_srvs/std_srvs_gencpp_ROS.h"

namespace actionlib { 

    /** definition of message factory for actionlib_gencpp */
    class actionlib_gencppROSMessageFactory : public ROSMessageFactory
    {
    public:
        /** constructor */
        actionlib_gencppROSMessageFactory();
        /** destructor */
        virtual ~actionlib_gencppROSMessageFactory();

        /** see  rframe::MessageFactoryInterface */
        virtual void dataTypes(std::vector<DataTypeInfo> & ids);
        /** see  rframe::MessageFactoryInterface */
        virtual int dataType(ros::SerializedMessage & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<ros::SerializedMessage> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateTransport(ros::SerializedMessage * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateMessage(MessageBase * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int toTransport( MessageBase & src, ros::SerializedMessage & dst);
        /** see  rframe::MessageFactoryInterface */
        virtual int fromTransport( ros::SerializedMessage & src, MessageBase & dst);

		/** see rframe::ROSMessageFactory */
        virtual int typeName(std::string & str, rframe::ID_TYPE id);
		/** see rframe::ROSMessageFactory */
        virtual int desc(std::string & str, rframe::ID_TYPE id);
		/** see rframe::ROSMessageFactory */
        virtual int md5String(std::string & str, rframe::ID_TYPE id);
        /** see rframe::ROSMessageFactory */
        virtual int md5(unsigned long long & highOrder, unsigned long long & lowOrder, rframe::ID_TYPE id);
        /** see rframe::ROSMessageFactory */
		int updateHeader(rframe::MessageBase &msg, unsigned int seqNo);
    };

    /** factory allocation function for use when not dynamically loading the factory library  */
    ROSMessageFactory * allocate_actionlib_gencpp();

}; // end namespace actionlib

// declare ros serialization templates
namespace ros
{
  namespace serialization
  {  

      template <> struct Serializer<actionlib::TestAction>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TestAction & t)
          { 
              stream.next(t.action_goal); 
              stream.next(t.action_result); 
              stream.next(t.action_feedback); 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TestAction & t)
          { 
              stream.next(t.action_goal); 
              stream.next(t.action_result); 
              stream.next(t.action_feedback); 
          };

          inline static uint32_t serializedLength(const actionlib::TestAction & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.action_goal); 
              size += serializationLength(t.action_result); 
              size += serializationLength(t.action_feedback); 
              return size;
          };
      }; // end struct Serializer<actionlib::TestAction>

      template <> struct Serializer<actionlib::TestActionFeedback>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TestActionFeedback & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.feedback); 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TestActionFeedback & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.feedback); 
          };

          inline static uint32_t serializedLength(const actionlib::TestActionFeedback & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.status); 
              size += serializationLength(t.feedback); 
              return size;
          };
      }; // end struct Serializer<actionlib::TestActionFeedback>

      template <> struct Serializer<actionlib::TestActionGoal>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TestActionGoal & t)
          { 
              stream.next(t.header); 
              stream.next(t.goal_id); 
              stream.next(t.goal); 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TestActionGoal & t)
          { 
              stream.next(t.header); 
              stream.next(t.goal_id); 
              stream.next(t.goal); 
          };

          inline static uint32_t serializedLength(const actionlib::TestActionGoal & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.goal_id); 
              size += serializationLength(t.goal); 
              return size;
          };
      }; // end struct Serializer<actionlib::TestActionGoal>

      template <> struct Serializer<actionlib::TestActionResult>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TestActionResult & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.result); 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TestActionResult & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.result); 
          };

          inline static uint32_t serializedLength(const actionlib::TestActionResult & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.status); 
              size += serializationLength(t.result); 
              return size;
          };
      }; // end struct Serializer<actionlib::TestActionResult>

      template <> struct Serializer<actionlib::TestFeedback>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TestFeedback & t)
          { 
              stream.next(t.feedback); 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TestFeedback & t)
          { 
              stream.next(t.feedback); 
          };

          inline static uint32_t serializedLength(const actionlib::TestFeedback & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.feedback); 
              return size;
          };
      }; // end struct Serializer<actionlib::TestFeedback>

      template <> struct Serializer<actionlib::TestGoal>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TestGoal & t)
          { 
              stream.next(t.goal); 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TestGoal & t)
          { 
              stream.next(t.goal); 
          };

          inline static uint32_t serializedLength(const actionlib::TestGoal & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.goal); 
              return size;
          };
      }; // end struct Serializer<actionlib::TestGoal>

      template <> struct Serializer<actionlib::TestRequestAction>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TestRequestAction & t)
          { 
              stream.next(t.action_goal); 
              stream.next(t.action_result); 
              stream.next(t.action_feedback); 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TestRequestAction & t)
          { 
              stream.next(t.action_goal); 
              stream.next(t.action_result); 
              stream.next(t.action_feedback); 
          };

          inline static uint32_t serializedLength(const actionlib::TestRequestAction & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.action_goal); 
              size += serializationLength(t.action_result); 
              size += serializationLength(t.action_feedback); 
              return size;
          };
      }; // end struct Serializer<actionlib::TestRequestAction>

      template <> struct Serializer<actionlib::TestRequestActionFeedback>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TestRequestActionFeedback & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.feedback); 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TestRequestActionFeedback & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.feedback); 
          };

          inline static uint32_t serializedLength(const actionlib::TestRequestActionFeedback & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.status); 
              size += serializationLength(t.feedback); 
              return size;
          };
      }; // end struct Serializer<actionlib::TestRequestActionFeedback>

      template <> struct Serializer<actionlib::TestRequestActionGoal>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TestRequestActionGoal & t)
          { 
              stream.next(t.header); 
              stream.next(t.goal_id); 
              stream.next(t.goal); 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TestRequestActionGoal & t)
          { 
              stream.next(t.header); 
              stream.next(t.goal_id); 
              stream.next(t.goal); 
          };

          inline static uint32_t serializedLength(const actionlib::TestRequestActionGoal & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.goal_id); 
              size += serializationLength(t.goal); 
              return size;
          };
      }; // end struct Serializer<actionlib::TestRequestActionGoal>

      template <> struct Serializer<actionlib::TestRequestActionResult>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TestRequestActionResult & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.result); 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TestRequestActionResult & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.result); 
          };

          inline static uint32_t serializedLength(const actionlib::TestRequestActionResult & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.status); 
              size += serializationLength(t.result); 
              return size;
          };
      }; // end struct Serializer<actionlib::TestRequestActionResult>

      template <> struct Serializer<actionlib::TestRequestFeedback>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TestRequestFeedback & t)
          { 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TestRequestFeedback & t)
          { 
          };

          inline static uint32_t serializedLength(const actionlib::TestRequestFeedback & t)
          { 
              uint32_t size = 0;

              return size;
          };
      }; // end struct Serializer<actionlib::TestRequestFeedback>

      template <> struct Serializer<actionlib::TestRequestGoal>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TestRequestGoal & t)
          { 
              stream.next(t.terminate_status); 
              stream.next(t.ignore_cancel); 
              stream.next(t.result_text); 
              stream.next(t.the_result); 
              stream.next(t.is_simple_client); 
              stream.next(t.delay_accept); 
              stream.next(t.delay_terminate); 
              stream.next(t.pause_status); 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TestRequestGoal & t)
          { 
              stream.next(t.terminate_status); 
              stream.next(t.ignore_cancel); 
              stream.next(t.result_text); 
              stream.next(t.the_result); 
              stream.next(t.is_simple_client); 
              stream.next(t.delay_accept); 
              stream.next(t.delay_terminate); 
              stream.next(t.pause_status); 
          };

          inline static uint32_t serializedLength(const actionlib::TestRequestGoal & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.terminate_status); 
              size += serializationLength(t.ignore_cancel); 
              size += serializationLength(t.result_text); 
              size += serializationLength(t.the_result); 
              size += serializationLength(t.is_simple_client); 
              size += serializationLength(t.delay_accept); 
              size += serializationLength(t.delay_terminate); 
              size += serializationLength(t.pause_status); 
              return size;
          };
      }; // end struct Serializer<actionlib::TestRequestGoal>

      template <> struct Serializer<actionlib::TestRequestResult>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TestRequestResult & t)
          { 
              stream.next(t.the_result); 
              stream.next(t.is_simple_server); 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TestRequestResult & t)
          { 
              stream.next(t.the_result); 
              stream.next(t.is_simple_server); 
          };

          inline static uint32_t serializedLength(const actionlib::TestRequestResult & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.the_result); 
              size += serializationLength(t.is_simple_server); 
              return size;
          };
      }; // end struct Serializer<actionlib::TestRequestResult>

      template <> struct Serializer<actionlib::TestResult>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TestResult & t)
          { 
              stream.next(t.result); 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TestResult & t)
          { 
              stream.next(t.result); 
          };

          inline static uint32_t serializedLength(const actionlib::TestResult & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.result); 
              return size;
          };
      }; // end struct Serializer<actionlib::TestResult>

      template <> struct Serializer<actionlib::TwoIntsAction>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TwoIntsAction & t)
          { 
              stream.next(t.action_goal); 
              stream.next(t.action_result); 
              stream.next(t.action_feedback); 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TwoIntsAction & t)
          { 
              stream.next(t.action_goal); 
              stream.next(t.action_result); 
              stream.next(t.action_feedback); 
          };

          inline static uint32_t serializedLength(const actionlib::TwoIntsAction & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.action_goal); 
              size += serializationLength(t.action_result); 
              size += serializationLength(t.action_feedback); 
              return size;
          };
      }; // end struct Serializer<actionlib::TwoIntsAction>

      template <> struct Serializer<actionlib::TwoIntsActionFeedback>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TwoIntsActionFeedback & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.feedback); 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TwoIntsActionFeedback & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.feedback); 
          };

          inline static uint32_t serializedLength(const actionlib::TwoIntsActionFeedback & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.status); 
              size += serializationLength(t.feedback); 
              return size;
          };
      }; // end struct Serializer<actionlib::TwoIntsActionFeedback>

      template <> struct Serializer<actionlib::TwoIntsActionGoal>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TwoIntsActionGoal & t)
          { 
              stream.next(t.header); 
              stream.next(t.goal_id); 
              stream.next(t.goal); 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TwoIntsActionGoal & t)
          { 
              stream.next(t.header); 
              stream.next(t.goal_id); 
              stream.next(t.goal); 
          };

          inline static uint32_t serializedLength(const actionlib::TwoIntsActionGoal & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.goal_id); 
              size += serializationLength(t.goal); 
              return size;
          };
      }; // end struct Serializer<actionlib::TwoIntsActionGoal>

      template <> struct Serializer<actionlib::TwoIntsActionResult>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TwoIntsActionResult & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.result); 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TwoIntsActionResult & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.result); 
          };

          inline static uint32_t serializedLength(const actionlib::TwoIntsActionResult & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.status); 
              size += serializationLength(t.result); 
              return size;
          };
      }; // end struct Serializer<actionlib::TwoIntsActionResult>

      template <> struct Serializer<actionlib::TwoIntsFeedback>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TwoIntsFeedback & t)
          { 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TwoIntsFeedback & t)
          { 
          };

          inline static uint32_t serializedLength(const actionlib::TwoIntsFeedback & t)
          { 
              uint32_t size = 0;

              return size;
          };
      }; // end struct Serializer<actionlib::TwoIntsFeedback>

      template <> struct Serializer<actionlib::TwoIntsGoal>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TwoIntsGoal & t)
          { 
              stream.next(t.a); 
              stream.next(t.b); 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TwoIntsGoal & t)
          { 
              stream.next(t.a); 
              stream.next(t.b); 
          };

          inline static uint32_t serializedLength(const actionlib::TwoIntsGoal & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.a); 
              size += serializationLength(t.b); 
              return size;
          };
      }; // end struct Serializer<actionlib::TwoIntsGoal>

      template <> struct Serializer<actionlib::TwoIntsResult>
      {
          template <typename Stream> inline static void write(Stream & stream, const actionlib::TwoIntsResult & t)
          { 
              stream.next(t.sum); 
          };

          template <typename Stream> inline static void read(Stream & stream, actionlib::TwoIntsResult & t)
          { 
              stream.next(t.sum); 
          };

          inline static uint32_t serializedLength(const actionlib::TwoIntsResult & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.sum); 
              return size;
          };
      }; // end struct Serializer<actionlib::TwoIntsResult>

  }; // namespace serialization

  namespace message_traits
  {

      template <> struct MD5Sum<actionlib::TestAction>
      {

          static const char * value() 
          { 
              return "991e87a72802262dfbe5d1b3cf6efc9a"; 
          };

          static const uint64_t static_value1 = 0x991e87a72802262dULL;
          static const uint64_t static_value2 = 0xfbe5d1b3cf6efc9aULL;
      }; // end struct MD5Sum<actionlib::TestAction>

      template <> struct DataType<actionlib::TestAction>
      {
          static const char * value() { return "actionlib/TestAction";};
      }; // end DataType

      template <> struct Definition<actionlib::TestAction>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nTestActionGoal action_goal\nTestActionResult action_result\nTestActionFeedback action_feedback\n\n================================================================================\nMSG: actionlib/TestActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nTestGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: actionlib/TestGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 goal\n\n================================================================================\nMSG: actionlib/TestActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nTestResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib/TestResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 result\n\n================================================================================\nMSG: actionlib/TestActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nTestFeedback feedback\n\n================================================================================\nMSG: actionlib/TestFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 feedback\n\n";
          };
      };

      template <> struct MD5Sum<actionlib::TestActionFeedback>
      {

          static const char * value() 
          { 
              return "6d3d0bf7fb3dda24779c010a9f3eb7cb"; 
          };

          static const uint64_t static_value1 = 0x6d3d0bf7fb3dda24ULL;
          static const uint64_t static_value2 = 0x779c010a9f3eb7cbULL;
      }; // end struct MD5Sum<actionlib::TestActionFeedback>

      template <> struct DataType<actionlib::TestActionFeedback>
      {
          static const char * value() { return "actionlib/TestActionFeedback";};
      }; // end DataType

      template <> struct Definition<actionlib::TestActionFeedback>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nTestFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: actionlib/TestFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 feedback\n\n";
          };
      };

      template <> struct MD5Sum<actionlib::TestActionGoal>
      {

          static const char * value() 
          { 
              return "348369c5b403676156094e8c159720bf"; 
          };

          static const uint64_t static_value1 = 0x348369c5b4036761ULL;
          static const uint64_t static_value2 = 0x56094e8c159720bfULL;
      }; // end struct MD5Sum<actionlib::TestActionGoal>

      template <> struct DataType<actionlib::TestActionGoal>
      {
          static const char * value() { return "actionlib/TestActionGoal";};
      }; // end DataType

      template <> struct Definition<actionlib::TestActionGoal>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nTestGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: actionlib/TestGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 goal\n";
          };
      };

      template <> struct MD5Sum<actionlib::TestActionResult>
      {

          static const char * value() 
          { 
              return "3d669e3a63aa986c667ea7b0f46ce85e"; 
          };

          static const uint64_t static_value1 = 0x3d669e3a63aa986cULL;
          static const uint64_t static_value2 = 0x667ea7b0f46ce85eULL;
      }; // end struct MD5Sum<actionlib::TestActionResult>

      template <> struct DataType<actionlib::TestActionResult>
      {
          static const char * value() { return "actionlib/TestActionResult";};
      }; // end DataType

      template <> struct Definition<actionlib::TestActionResult>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nTestResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: actionlib/TestResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 result\n";
          };
      };

      template <> struct MD5Sum<actionlib::TestFeedback>
      {

          static const char * value() 
          { 
              return "49ceb5b32ea3af22073ede4a0328249e"; 
          };

          static const uint64_t static_value1 = 0x49ceb5b32ea3af22ULL;
          static const uint64_t static_value2 = 0x073ede4a0328249eULL;
      }; // end struct MD5Sum<actionlib::TestFeedback>

      template <> struct DataType<actionlib::TestFeedback>
      {
          static const char * value() { return "actionlib/TestFeedback";};
      }; // end DataType

      template <> struct Definition<actionlib::TestFeedback>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 feedback\n\n";
          };
      };

      template <> struct MD5Sum<actionlib::TestGoal>
      {

          static const char * value() 
          { 
              return "18df0149936b7aa95588e3862476ebde"; 
          };

          static const uint64_t static_value1 = 0x18df0149936b7aa9ULL;
          static const uint64_t static_value2 = 0x5588e3862476ebdeULL;
      }; // end struct MD5Sum<actionlib::TestGoal>

      template <> struct DataType<actionlib::TestGoal>
      {
          static const char * value() { return "actionlib/TestGoal";};
      }; // end DataType

      template <> struct Definition<actionlib::TestGoal>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 goal\n";
          };
      };

      template <> struct MD5Sum<actionlib::TestRequestAction>
      {

          static const char * value() 
          { 
              return "dc44b1f4045dbf0d1db54423b3b86b30"; 
          };

          static const uint64_t static_value1 = 0xdc44b1f4045dbf0dULL;
          static const uint64_t static_value2 = 0x1db54423b3b86b30ULL;
      }; // end struct MD5Sum<actionlib::TestRequestAction>

      template <> struct DataType<actionlib::TestRequestAction>
      {
          static const char * value() { return "actionlib/TestRequestAction";};
      }; // end DataType

      template <> struct Definition<actionlib::TestRequestAction>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nTestRequestActionGoal action_goal\nTestRequestActionResult action_result\nTestRequestActionFeedback action_feedback\n\n================================================================================\nMSG: actionlib/TestRequestActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nTestRequestGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: actionlib/TestRequestGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 TERMINATE_SUCCESS = 0\nint32 TERMINATE_ABORTED = 1\nint32 TERMINATE_REJECTED = 2\nint32 TERMINATE_LOSE = 3\nint32 TERMINATE_DROP = 4\nint32 TERMINATE_EXCEPTION = 5\nint32 terminate_status\nbool ignore_cancel  # If true, ignores requests to cancel\nstring result_text\nint32 the_result    # Desired value for the_result in the Result\nbool is_simple_client\nduration delay_accept  # Delays accepting the goal by this amount of time\nduration delay_terminate  # Delays terminating for this amount of time\nduration pause_status  # Pauses the status messages for this amount of time\n\n================================================================================\nMSG: actionlib/TestRequestActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nTestRequestResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib/TestRequestResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 the_result\nbool is_simple_server\n\n================================================================================\nMSG: actionlib/TestRequestActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nTestRequestFeedback feedback\n\n================================================================================\nMSG: actionlib/TestRequestFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n";
          };
      };

      template <> struct MD5Sum<actionlib::TestRequestActionFeedback>
      {

          static const char * value() 
          { 
              return "aae20e09065c3809e8a8e87c4c8953fd"; 
          };

          static const uint64_t static_value1 = 0xaae20e09065c3809ULL;
          static const uint64_t static_value2 = 0xe8a8e87c4c8953fdULL;
      }; // end struct MD5Sum<actionlib::TestRequestActionFeedback>

      template <> struct DataType<actionlib::TestRequestActionFeedback>
      {
          static const char * value() { return "actionlib/TestRequestActionFeedback";};
      }; // end DataType

      template <> struct Definition<actionlib::TestRequestActionFeedback>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nTestRequestFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: actionlib/TestRequestFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n";
          };
      };

      template <> struct MD5Sum<actionlib::TestRequestActionGoal>
      {

          static const char * value() 
          { 
              return "1889556d3fef88f821c7cb004e4251f3"; 
          };

          static const uint64_t static_value1 = 0x1889556d3fef88f8ULL;
          static const uint64_t static_value2 = 0x21c7cb004e4251f3ULL;
      }; // end struct MD5Sum<actionlib::TestRequestActionGoal>

      template <> struct DataType<actionlib::TestRequestActionGoal>
      {
          static const char * value() { return "actionlib/TestRequestActionGoal";};
      }; // end DataType

      template <> struct Definition<actionlib::TestRequestActionGoal>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nTestRequestGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: actionlib/TestRequestGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 TERMINATE_SUCCESS = 0\nint32 TERMINATE_ABORTED = 1\nint32 TERMINATE_REJECTED = 2\nint32 TERMINATE_LOSE = 3\nint32 TERMINATE_DROP = 4\nint32 TERMINATE_EXCEPTION = 5\nint32 terminate_status\nbool ignore_cancel  # If true, ignores requests to cancel\nstring result_text\nint32 the_result    # Desired value for the_result in the Result\nbool is_simple_client\nduration delay_accept  # Delays accepting the goal by this amount of time\nduration delay_terminate  # Delays terminating for this amount of time\nduration pause_status  # Pauses the status messages for this amount of time\n";
          };
      };

      template <> struct MD5Sum<actionlib::TestRequestActionResult>
      {

          static const char * value() 
          { 
              return "0476d1fdf437a3a6e7d6d0e9f5561298"; 
          };

          static const uint64_t static_value1 = 0x0476d1fdf437a3a6ULL;
          static const uint64_t static_value2 = 0xe7d6d0e9f5561298ULL;
      }; // end struct MD5Sum<actionlib::TestRequestActionResult>

      template <> struct DataType<actionlib::TestRequestActionResult>
      {
          static const char * value() { return "actionlib/TestRequestActionResult";};
      }; // end DataType

      template <> struct Definition<actionlib::TestRequestActionResult>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nTestRequestResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: actionlib/TestRequestResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 the_result\nbool is_simple_server\n";
          };
      };

      template <> struct MD5Sum<actionlib::TestRequestFeedback>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<actionlib::TestRequestFeedback>

      template <> struct DataType<actionlib::TestRequestFeedback>
      {
          static const char * value() { return "actionlib/TestRequestFeedback";};
      }; // end DataType

      template <> struct Definition<actionlib::TestRequestFeedback>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n";
          };
      };

      template <> struct MD5Sum<actionlib::TestRequestGoal>
      {

          static const char * value() 
          { 
              return "db5d00ba98302d6c6dd3737e9a03ceea"; 
          };

          static const uint64_t static_value1 = 0xdb5d00ba98302d6cULL;
          static const uint64_t static_value2 = 0x6dd3737e9a03ceeaULL;
      }; // end struct MD5Sum<actionlib::TestRequestGoal>

      template <> struct DataType<actionlib::TestRequestGoal>
      {
          static const char * value() { return "actionlib/TestRequestGoal";};
      }; // end DataType

      template <> struct Definition<actionlib::TestRequestGoal>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 TERMINATE_SUCCESS = 0\nint32 TERMINATE_ABORTED = 1\nint32 TERMINATE_REJECTED = 2\nint32 TERMINATE_LOSE = 3\nint32 TERMINATE_DROP = 4\nint32 TERMINATE_EXCEPTION = 5\nint32 terminate_status\nbool ignore_cancel  # If true, ignores requests to cancel\nstring result_text\nint32 the_result    # Desired value for the_result in the Result\nbool is_simple_client\nduration delay_accept  # Delays accepting the goal by this amount of time\nduration delay_terminate  # Delays terminating for this amount of time\nduration pause_status  # Pauses the status messages for this amount of time\n";
          };
      };

      template <> struct MD5Sum<actionlib::TestRequestResult>
      {

          static const char * value() 
          { 
              return "61c2364524499c7c5017e2f3fce7ba06"; 
          };

          static const uint64_t static_value1 = 0x61c2364524499c7cULL;
          static const uint64_t static_value2 = 0x5017e2f3fce7ba06ULL;
      }; // end struct MD5Sum<actionlib::TestRequestResult>

      template <> struct DataType<actionlib::TestRequestResult>
      {
          static const char * value() { return "actionlib/TestRequestResult";};
      }; // end DataType

      template <> struct Definition<actionlib::TestRequestResult>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 the_result\nbool is_simple_server\n";
          };
      };

      template <> struct MD5Sum<actionlib::TestResult>
      {

          static const char * value() 
          { 
              return "034a8e20d6a306665e3a5b340fab3f09"; 
          };

          static const uint64_t static_value1 = 0x034a8e20d6a30666ULL;
          static const uint64_t static_value2 = 0x5e3a5b340fab3f09ULL;
      }; // end struct MD5Sum<actionlib::TestResult>

      template <> struct DataType<actionlib::TestResult>
      {
          static const char * value() { return "actionlib/TestResult";};
      }; // end DataType

      template <> struct Definition<actionlib::TestResult>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 result\n";
          };
      };

      template <> struct MD5Sum<actionlib::TwoIntsAction>
      {

          static const char * value() 
          { 
              return "6d1aa538c4bd6183a2dfb7fcac41ee50"; 
          };

          static const uint64_t static_value1 = 0x6d1aa538c4bd6183ULL;
          static const uint64_t static_value2 = 0xa2dfb7fcac41ee50ULL;
      }; // end struct MD5Sum<actionlib::TwoIntsAction>

      template <> struct DataType<actionlib::TwoIntsAction>
      {
          static const char * value() { return "actionlib/TwoIntsAction";};
      }; // end DataType

      template <> struct Definition<actionlib::TwoIntsAction>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nTwoIntsActionGoal action_goal\nTwoIntsActionResult action_result\nTwoIntsActionFeedback action_feedback\n\n================================================================================\nMSG: actionlib/TwoIntsActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nTwoIntsGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: actionlib/TwoIntsGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint64 a\nint64 b\n\n================================================================================\nMSG: actionlib/TwoIntsActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nTwoIntsResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib/TwoIntsResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint64 sum\n\n================================================================================\nMSG: actionlib/TwoIntsActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nTwoIntsFeedback feedback\n\n================================================================================\nMSG: actionlib/TwoIntsFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n";
          };
      };

      template <> struct MD5Sum<actionlib::TwoIntsActionFeedback>
      {

          static const char * value() 
          { 
              return "aae20e09065c3809e8a8e87c4c8953fd"; 
          };

          static const uint64_t static_value1 = 0xaae20e09065c3809ULL;
          static const uint64_t static_value2 = 0xe8a8e87c4c8953fdULL;
      }; // end struct MD5Sum<actionlib::TwoIntsActionFeedback>

      template <> struct DataType<actionlib::TwoIntsActionFeedback>
      {
          static const char * value() { return "actionlib/TwoIntsActionFeedback";};
      }; // end DataType

      template <> struct Definition<actionlib::TwoIntsActionFeedback>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nTwoIntsFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: actionlib/TwoIntsFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n";
          };
      };

      template <> struct MD5Sum<actionlib::TwoIntsActionGoal>
      {

          static const char * value() 
          { 
              return "684a2db55d6ffb8046fb9d6764ce0860"; 
          };

          static const uint64_t static_value1 = 0x684a2db55d6ffb80ULL;
          static const uint64_t static_value2 = 0x46fb9d6764ce0860ULL;
      }; // end struct MD5Sum<actionlib::TwoIntsActionGoal>

      template <> struct DataType<actionlib::TwoIntsActionGoal>
      {
          static const char * value() { return "actionlib/TwoIntsActionGoal";};
      }; // end DataType

      template <> struct Definition<actionlib::TwoIntsActionGoal>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nTwoIntsGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: actionlib/TwoIntsGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint64 a\nint64 b\n";
          };
      };

      template <> struct MD5Sum<actionlib::TwoIntsActionResult>
      {

          static const char * value() 
          { 
              return "3ba7dea8b8cddcae4528ade4ef74b6e7"; 
          };

          static const uint64_t static_value1 = 0x3ba7dea8b8cddcaeULL;
          static const uint64_t static_value2 = 0x4528ade4ef74b6e7ULL;
      }; // end struct MD5Sum<actionlib::TwoIntsActionResult>

      template <> struct DataType<actionlib::TwoIntsActionResult>
      {
          static const char * value() { return "actionlib/TwoIntsActionResult";};
      }; // end DataType

      template <> struct Definition<actionlib::TwoIntsActionResult>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nTwoIntsResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: actionlib/TwoIntsResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint64 sum\n";
          };
      };

      template <> struct MD5Sum<actionlib::TwoIntsFeedback>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<actionlib::TwoIntsFeedback>

      template <> struct DataType<actionlib::TwoIntsFeedback>
      {
          static const char * value() { return "actionlib/TwoIntsFeedback";};
      }; // end DataType

      template <> struct Definition<actionlib::TwoIntsFeedback>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n";
          };
      };

      template <> struct MD5Sum<actionlib::TwoIntsGoal>
      {

          static const char * value() 
          { 
              return "36d09b846be0b371c5f190354dd3153e"; 
          };

          static const uint64_t static_value1 = 0x36d09b846be0b371ULL;
          static const uint64_t static_value2 = 0xc5f190354dd3153eULL;
      }; // end struct MD5Sum<actionlib::TwoIntsGoal>

      template <> struct DataType<actionlib::TwoIntsGoal>
      {
          static const char * value() { return "actionlib/TwoIntsGoal";};
      }; // end DataType

      template <> struct Definition<actionlib::TwoIntsGoal>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint64 a\nint64 b\n";
          };
      };

      template <> struct MD5Sum<actionlib::TwoIntsResult>
      {

          static const char * value() 
          { 
              return "b88405221c77b1878a3cbbfff53428d7"; 
          };

          static const uint64_t static_value1 = 0xb88405221c77b187ULL;
          static const uint64_t static_value2 = 0x8a3cbbfff53428d7ULL;
      }; // end struct MD5Sum<actionlib::TwoIntsResult>

      template <> struct DataType<actionlib::TwoIntsResult>
      {
          static const char * value() { return "actionlib/TwoIntsResult";};
      }; // end DataType

      template <> struct Definition<actionlib::TwoIntsResult>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint64 sum\n";
          };
      };

  }; // end namespace message_traits

}; // namespace ros

#endif // _CODEGEN_ACTIONLIB_GENCPP_ROS_H_


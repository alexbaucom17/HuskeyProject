// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:07 -0500
//  From Template/Script: data_templates/NMLClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <stdio.h>
// main rcslib header
#include <nml.hh>
// cms updater header
#include <cms_up.hh>
#include <cms_pup.hh>

#include <common/Error.h>
#include <common/Log.h>
#include <common/Common.h>
#include <common/DataTypeInfo.h>

#include "roscpp_tutorials_gencpp_NML.h"
#include "roscpp_tutorials_gencpp_Library.h"
#include <messaging/nml/NMLSupport.h>
#include <interfaces/MessageFactoryInterface.h>

#include <TwoIntsRequest.h>
#include <TwoIntsResponse.h>
#include <TwoInts.h>

#include <boost/iostreams/stream_buffer.hpp>
#include <boost/iostreams/stream.hpp>

#include <boost/serialization/serialization.hpp>
#include <opensource/eos/archive/portable_iarchive.hpp>
#include <opensource/eos/archive/portable_oarchive.hpp>

using namespace std;
using namespace roscpp_tutorials;

rframe::NMLMessageFactory * NML_roscpp_tutorials_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        NML_roscpp_tutorials_gencppfactory = new roscpp_tutorials_gencppNMLMessageFactory();
        return NML_roscpp_tutorials_gencppfactory;
    };
}

rframe::NMLMessageFactory * roscpp_tutorials::allocate_roscpp_tutorials_gencpp()
{
    NML_roscpp_tutorials_gencppfactory = new roscpp_tutorials_gencppNMLMessageFactory();
    return NML_roscpp_tutorials_gencppfactory;
};

roscpp_tutorials_gencppNMLMessageFactory::roscpp_tutorials_gencppNMLMessageFactory()
{
    name("roscpp_tutorials_gencpp");
    // use constructor to register data types
    roscpp_tutorials::registerLibrary();
}

roscpp_tutorials_gencppNMLMessageFactory::~roscpp_tutorials_gencppNMLMessageFactory()
{
}

NML_FORMAT_PTR roscpp_tutorials_gencppNMLMessageFactory::FormatPointer()
{
    return roscpp_tutorials_gencpp_format;
}

int roscpp_tutorials_gencppNMLMessageFactory::dataType(NMLmsg & msg)
{
    return msg.type;
}

void roscpp_tutorials_gencppNMLMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(TwoIntsRequest::ID);
    info.name(TwoIntsRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(TwoIntsRequest::DATA_VERSION);
    info.md5Key(TwoIntsRequest::VERSION_MD5);
    info.xmlSource(TwoIntsRequest::XML_SOURCE);
    info.flat(TwoIntsRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(TwoIntsResponse::ID);
    info.name(TwoIntsResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(TwoIntsResponse::DATA_VERSION);
    info.md5Key(TwoIntsResponse::VERSION_MD5);
    info.xmlSource(TwoIntsResponse::XML_SOURCE);
    info.flat(TwoIntsResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(TwoInts::ID);
    info.name(TwoInts::DATA_TYPE_FULL_NAME);
    info.hashKey(TwoInts::DATA_VERSION);
    info.md5Key(TwoInts::VERSION_MD5);
    info.xmlSource(TwoInts::XML_SOURCE);
    info.flat(TwoInts::dataTypeFlat());
    ids.push_back(info);

}

int roscpp_tutorials_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<NMLmsg> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case TwoIntsRequest::ID:
        {
            //TwoIntsRequestNML * newmsg = new TwoIntsRequestNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new TwoIntsRequestNML(),std::bind(&roscpp_tutorials_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case TwoIntsResponse::ID:
        {
            //TwoIntsResponseNML * newmsg = new TwoIntsResponseNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new TwoIntsResponseNML(),std::bind(&roscpp_tutorials_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case TwoInts::ID:
        {
            //TwoIntsNML * newmsg = new TwoIntsNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new TwoIntsNML(),std::bind(&roscpp_tutorials_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int roscpp_tutorials_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case TwoIntsRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<TwoIntsRequest>(),std::bind(&roscpp_tutorials_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case TwoIntsResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<TwoIntsResponse>(),std::bind(&roscpp_tutorials_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case TwoInts::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<TwoInts>(),std::bind(&roscpp_tutorials_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int roscpp_tutorials_gencppNMLMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    delete msg;

    return retval;
}

int roscpp_tutorials_gencppNMLMessageFactory::deallocateTransport(NMLmsg * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        switch (msg->type)
        { 
            case TwoIntsRequest::ID:
            {
                TwoIntsRequestNML * tempmsg = static_cast<TwoIntsRequestNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case TwoIntsResponse::ID:
            {
                TwoIntsResponseNML * tempmsg = static_cast<TwoIntsResponseNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case TwoInts::ID:
            {
                TwoIntsNML * tempmsg = static_cast<TwoIntsNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            default:
            {
                retval = Error::NOT_FOUND;
                break;
            }
        }
    }

    return retval;
}

int roscpp_tutorials_gencppNMLMessageFactory::toTransport(MessageBase & src, NMLmsg & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)dst.type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.type)
        { 
            case TwoIntsRequest::ID:
            {
                TwoIntsRequestNML & tempDst = static_cast<TwoIntsRequestNML&>(dst);
                Message<TwoIntsRequest > & tempSrc = static_cast<Message<TwoIntsRequest>&>(src);

                if (tempSrc.version() != TwoIntsRequest::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of TwoIntsRequest: " << __FILE__ << " expected: " 
                             << TwoIntsRequest::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of TwoIntsRequest: " << __FILE__ << " expected: " 
                         << TwoIntsRequest::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case TwoIntsResponse::ID:
            {
                TwoIntsResponseNML & tempDst = static_cast<TwoIntsResponseNML&>(dst);
                Message<TwoIntsResponse > & tempSrc = static_cast<Message<TwoIntsResponse>&>(src);

                if (tempSrc.version() != TwoIntsResponse::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of TwoIntsResponse: " << __FILE__ << " expected: " 
                             << TwoIntsResponse::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of TwoIntsResponse: " << __FILE__ << " expected: " 
                         << TwoIntsResponse::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case TwoInts::ID:
            {
                TwoIntsNML & tempDst = static_cast<TwoIntsNML&>(dst);
                Message<TwoInts > & tempSrc = static_cast<Message<TwoInts>&>(src);

                if (tempSrc.version() != TwoInts::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of TwoInts: " << __FILE__ << " expected: " 
                             << TwoInts::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of TwoInts: " << __FILE__ << " expected: " 
                         << TwoInts::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int roscpp_tutorials_gencppNMLMessageFactory::fromTransport(NMLmsg & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.type)
        { 
            case TwoIntsRequest::ID:
            {
                TwoIntsRequestNML & tempSrc = static_cast<TwoIntsRequestNML&>(src);
                Message<TwoIntsRequest > & tempDst = static_cast<Message<TwoIntsRequest>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (TwoIntsRequest::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case TwoIntsResponse::ID:
            {
                TwoIntsResponseNML & tempSrc = static_cast<TwoIntsResponseNML&>(src);
                Message<TwoIntsResponse > & tempDst = static_cast<Message<TwoIntsResponse>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (TwoIntsResponse::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case TwoInts::ID:
            {
                TwoIntsNML & tempSrc = static_cast<TwoIntsNML&>(src);
                Message<TwoInts > & tempDst = static_cast<Message<TwoInts>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (TwoInts::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int roscpp_tutorials_gencppNMLMessageFactory::constructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    switch (id)
    { 
        case TwoIntsRequest::ID:
        {
            // only need to construct if data type is not flat
            if (TwoIntsRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing TwoIntsRequest at %p\n",buffer);
                TwoIntsRequestNML * p = static_cast<TwoIntsRequestNML*>(buffer);
                // construct the type at pointer p
                new (p) TwoIntsRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing TwoIntsRequest at %p,, is flat\n",buffer);
            }
            break;
        } 
        case TwoIntsResponse::ID:
        {
            // only need to construct if data type is not flat
            if (TwoIntsResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing TwoIntsResponse at %p\n",buffer);
                TwoIntsResponseNML * p = static_cast<TwoIntsResponseNML*>(buffer);
                // construct the type at pointer p
                new (p) TwoIntsResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing TwoIntsResponse at %p,, is flat\n",buffer);
            }
            break;
        } 
        case TwoInts::ID:
        {
            // only need to construct if data type is not flat
            if (TwoInts::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing TwoInts at %p\n",buffer);
                TwoIntsNML * p = static_cast<TwoIntsNML*>(buffer);
                // construct the type at pointer p
                new (p) TwoIntsNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing TwoInts at %p,, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

int roscpp_tutorials_gencppNMLMessageFactory::destructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    if (buffer == nullptr) return retval;

    switch (id)
    { 
        case TwoIntsRequest::ID:
        {
            // only need to destruct if data type is not flat
            if (TwoIntsRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing TwoIntsRequest at %p\n",buffer);
                TwoIntsRequestNML * p = static_cast<TwoIntsRequestNML*>(buffer);
                p->~TwoIntsRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction TwoIntsRequest at %p, is flat\n",buffer);
            }
            break;
        } 
        case TwoIntsResponse::ID:
        {
            // only need to destruct if data type is not flat
            if (TwoIntsResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing TwoIntsResponse at %p\n",buffer);
                TwoIntsResponseNML * p = static_cast<TwoIntsResponseNML*>(buffer);
                p->~TwoIntsResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction TwoIntsResponse at %p, is flat\n",buffer);
            }
            break;
        } 
        case TwoInts::ID:
        {
            // only need to destruct if data type is not flat
            if (TwoInts::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing TwoInts at %p\n",buffer);
                TwoIntsNML * p = static_cast<TwoIntsNML*>(buffer);
                p->~TwoIntsNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction TwoInts at %p, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

void roscpp_tutorials::nmlupdate(CMS * cms, TwoIntsRequest & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate TwoIntsRequest, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        cms->update(inobj.a);
        cms->update(inobj.b);

    }  
 }

TwoIntsRequestNML::TwoIntsRequestNML() : NMLmsg((NMLTYPE)TwoIntsRequest::ID,sizeof(TwoIntsRequestNML)), nmlVersion(TwoIntsRequest::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new TwoIntsRequest()*/)
{
};

TwoIntsRequestNML::~TwoIntsRequestNML()
{
};

TwoIntsRequestNML & TwoIntsRequestNML::operator=(const TwoIntsRequestNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

TwoIntsRequestNML & TwoIntsRequestNML::operator=(const TwoIntsRequest & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(TwoIntsRequest);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void TwoIntsRequestNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<TwoIntsRequest&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: TwoIntsRequestNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<TwoIntsRequest> temp(new TwoIntsRequest());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: roscpp_tutorials_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (TwoIntsRequest::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: TwoIntsRequest Message version mismatch, expected " << TwoIntsRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: TwoIntsRequest Message version mismatch, expected " << TwoIntsRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void roscpp_tutorials::nmlupdate(CMS * cms, TwoIntsResponse & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate TwoIntsResponse, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        cms->update(inobj.sum);

    }  
 }

TwoIntsResponseNML::TwoIntsResponseNML() : NMLmsg((NMLTYPE)TwoIntsResponse::ID,sizeof(TwoIntsResponseNML)), nmlVersion(TwoIntsResponse::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new TwoIntsResponse()*/)
{
};

TwoIntsResponseNML::~TwoIntsResponseNML()
{
};

TwoIntsResponseNML & TwoIntsResponseNML::operator=(const TwoIntsResponseNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

TwoIntsResponseNML & TwoIntsResponseNML::operator=(const TwoIntsResponse & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(TwoIntsResponse);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void TwoIntsResponseNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<TwoIntsResponse&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: TwoIntsResponseNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<TwoIntsResponse> temp(new TwoIntsResponse());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: roscpp_tutorials_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (TwoIntsResponse::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: TwoIntsResponse Message version mismatch, expected " << TwoIntsResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: TwoIntsResponse Message version mismatch, expected " << TwoIntsResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void roscpp_tutorials::nmlupdate(CMS * cms, TwoInts & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate TwoInts, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.request);
        nmlupdate(cms,inobj.response);

    }  
 }

TwoIntsNML::TwoIntsNML() : NMLmsg((NMLTYPE)TwoInts::ID,sizeof(TwoIntsNML)), nmlVersion(TwoInts::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new TwoInts()*/)
{
};

TwoIntsNML::~TwoIntsNML()
{
};

TwoIntsNML & TwoIntsNML::operator=(const TwoIntsNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

TwoIntsNML & TwoIntsNML::operator=(const TwoInts & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(TwoInts);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void TwoIntsNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<TwoInts&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: TwoIntsNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<TwoInts> temp(new TwoInts());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: roscpp_tutorials_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (TwoInts::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: TwoInts Message version mismatch, expected " << TwoInts::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: TwoInts Message version mismatch, expected " << TwoInts::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

int roscpp_tutorials::roscpp_tutorials_gencpp_format(NMLTYPE type, void * buffer, CMS* cms)
{
    int retval = 1;
    int retval2 = rframe::Error::SUCCESS;

          //printf("roscpp_tutorials_gencpp_format: buffer parameters: type: %d, %p, encode: %d\n",(int)type, buffer,cms->mode);

    switch (type)
    { 
        case 0:
        {
            // do nothing, 0 is passed in on buffer creation
            break;
        }
        case TwoIntsRequest::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for TwoIntsRequest, id " << TwoIntsRequest::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_roscpp_tutorials_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"roscpp_tutorials_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((TwoIntsRequestNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case TwoIntsResponse::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for TwoIntsResponse, id " << TwoIntsResponse::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_roscpp_tutorials_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"roscpp_tutorials_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((TwoIntsResponseNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case TwoInts::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for TwoInts, id " << TwoInts::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_roscpp_tutorials_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"roscpp_tutorials_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((TwoIntsNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        }                   
        default:
        {

            retval = 0;
            break;
        }
    }

          //   printf("format done\n");
    return retval;
}


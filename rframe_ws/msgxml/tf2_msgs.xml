<!--
 
  AUTOGENERATED FILE:   do not edit

  Generated by:         alex on alex-laptop, 2017-01-26 12:56:42 -0500
  From Template/Script: rosToXML.rb
 

-->
<classes library_name="tf2_msgs_gencpp" namespace="tf2_msgs" >

<class name="LookupTransformAction" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="7ee01ba91a56c2245c610992dbaa3c37" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nLookupTransformActionGoal action_goal\nLookupTransformActionResult action_result\nLookupTransformActionFeedback action_feedback\n\n================================================================================\nMSG: tf2_msgs/LookupTransformActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nLookupTransformGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: tf2_msgs/LookupTransformGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#Simple API\nstring target_frame\nstring source_frame\ntime source_time\nduration timeout\n\n#Advanced API\ntime target_time\nstring fixed_frame\n\n#Whether or not to use the advanced API\nbool advanced\n\n\n================================================================================\nMSG: tf2_msgs/LookupTransformActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nLookupTransformResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: tf2_msgs/LookupTransformResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ngeometry_msgs/TransformStamped transform\ntf2_msgs/TF2Error error\n\n================================================================================\nMSG: geometry_msgs/TransformStamped\n# This expresses a transform from coordinate frame header.frame_id\n# to the coordinate frame child_frame_id\n#\n# This message is mostly used by the \n# &lt;a href=\&quot;http://wiki.ros.org/tf\&quot;&gt;tf&lt;/a&gt; package. \n# See its documentation for more information.\n\nHeader header\nstring child_frame_id # the frame id of the child frame\nTransform transform\n\n================================================================================\nMSG: geometry_msgs/Transform\n# This represents the transform between two coordinate frames in free space.\n\nVector3 translation\nQuaternion rotation\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: tf2_msgs/TF2Error\nuint8 NO_ERROR = 0\nuint8 LOOKUP_ERROR = 1\nuint8 CONNECTIVITY_ERROR = 2\nuint8 EXTRAPOLATION_ERROR = 3\nuint8 INVALID_ARGUMENT_ERROR = 4\nuint8 TIMEOUT_ERROR = 5\nuint8 TRANSFORM_ERROR = 6\n\nuint8 error\nstring error_string\n\n================================================================================\nMSG: tf2_msgs/LookupTransformActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nLookupTransformFeedback feedback\n\n================================================================================\nMSG: tf2_msgs/LookupTransformFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="action_goal" type="LookupTransformActionGoal"  sourceType="LookupTransformActionGoal" comment="" />
  <field name="action_result" type="LookupTransformActionResult"  sourceType="LookupTransformActionResult" comment="" />
  <field name="action_feedback" type="LookupTransformActionFeedback"  sourceType="LookupTransformActionFeedback" comment="" />
</class>

<class name="LookupTransformActionFeedback" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="aae20e09065c3809e8a8e87c4c8953fd" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nLookupTransformFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: tf2_msgs/LookupTransformFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="status" type="actionlib_msgs::GoalStatus"  sourceType="actionlib_msgs::GoalStatus" comment="" />
  <field name="feedback" type="LookupTransformFeedback"  sourceType="LookupTransformFeedback" comment="" />
</class>

<class name="LookupTransformActionGoal" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="f2e7bcdb75c847978d0351a13e699da5" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nLookupTransformGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: tf2_msgs/LookupTransformGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#Simple API\nstring target_frame\nstring source_frame\ntime source_time\nduration timeout\n\n#Advanced API\ntime target_time\nstring fixed_frame\n\n#Whether or not to use the advanced API\nbool advanced\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="goal_id" type="actionlib_msgs::GoalID"  sourceType="actionlib_msgs::GoalID" comment="" />
  <field name="goal" type="LookupTransformGoal"  sourceType="LookupTransformGoal" comment="" />
</class>

<class name="LookupTransformActionResult" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="ac26ce75a41384fa8bb4dc10f491ab90" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nLookupTransformResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: tf2_msgs/LookupTransformResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ngeometry_msgs/TransformStamped transform\ntf2_msgs/TF2Error error\n\n================================================================================\nMSG: geometry_msgs/TransformStamped\n# This expresses a transform from coordinate frame header.frame_id\n# to the coordinate frame child_frame_id\n#\n# This message is mostly used by the \n# &lt;a href=\&quot;http://wiki.ros.org/tf\&quot;&gt;tf&lt;/a&gt; package. \n# See its documentation for more information.\n\nHeader header\nstring child_frame_id # the frame id of the child frame\nTransform transform\n\n================================================================================\nMSG: geometry_msgs/Transform\n# This represents the transform between two coordinate frames in free space.\n\nVector3 translation\nQuaternion rotation\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: tf2_msgs/TF2Error\nuint8 NO_ERROR = 0\nuint8 LOOKUP_ERROR = 1\nuint8 CONNECTIVITY_ERROR = 2\nuint8 EXTRAPOLATION_ERROR = 3\nuint8 INVALID_ARGUMENT_ERROR = 4\nuint8 TIMEOUT_ERROR = 5\nuint8 TRANSFORM_ERROR = 6\n\nuint8 error\nstring error_string\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="status" type="actionlib_msgs::GoalStatus"  sourceType="actionlib_msgs::GoalStatus" comment="" />
  <field name="result" type="LookupTransformResult"  sourceType="LookupTransformResult" comment="" />
</class>

<class name="LookupTransformFeedback" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="d41d8cd98f00b204e9800998ecf8427e" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
</class>

<class name="LookupTransformGoal" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="35e3720468131d675a18bb6f3e5f22f8" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#Simple API\nstring target_frame\nstring source_frame\ntime source_time\nduration timeout\n\n#Advanced API\ntime target_time\nstring fixed_frame\n\n#Whether or not to use the advanced API\nbool advanced\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
Simple API" >
  <field name="target_frame" type="string"  sourceType="string" comment="" />
  <field name="source_frame" type="string"  sourceType="string" comment="" />
  <field name="source_time" type="std_msgs::RosTime"  sourceType="time" comment="" />
  <field name="timeout" type="std_msgs::RosDuration"  sourceType="duration" comment="Advanced API" />
  <field name="target_time" type="std_msgs::RosTime"  sourceType="time" comment="" />
  <field name="fixed_frame" type="string"  sourceType="string" comment="Whether or not to use the advanced API" />
  <field name="advanced" type="bool"  sourceType="bool" comment="" />
</class>

<class name="LookupTransformResult" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="3fe5db6a19ca9cfb675418c5ad875c36" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ngeometry_msgs/TransformStamped transform\ntf2_msgs/TF2Error error\n\n================================================================================\nMSG: geometry_msgs/TransformStamped\n# This expresses a transform from coordinate frame header.frame_id\n# to the coordinate frame child_frame_id\n#\n# This message is mostly used by the \n# &lt;a href=\&quot;http://wiki.ros.org/tf\&quot;&gt;tf&lt;/a&gt; package. \n# See its documentation for more information.\n\nHeader header\nstring child_frame_id # the frame id of the child frame\nTransform transform\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Transform\n# This represents the transform between two coordinate frames in free space.\n\nVector3 translation\nQuaternion rotation\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: tf2_msgs/TF2Error\nuint8 NO_ERROR = 0\nuint8 LOOKUP_ERROR = 1\nuint8 CONNECTIVITY_ERROR = 2\nuint8 EXTRAPOLATION_ERROR = 3\nuint8 INVALID_ARGUMENT_ERROR = 4\nuint8 TIMEOUT_ERROR = 5\nuint8 TRANSFORM_ERROR = 6\n\nuint8 error\nstring error_string\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="transform" type="geometry_msgs::TransformStamped"  sourceType="geometry_msgs::TransformStamped" comment="" />
  <field name="error" type="tf2_msgs::TF2Error"  sourceType="tf2_msgs::TF2Error" comment="" />
</class>

<class name="TF2Error" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="bc6848fd6fd750c92e38575618a4917d" rosDesc="uint8 NO_ERROR = 0\nuint8 LOOKUP_ERROR = 1\nuint8 CONNECTIVITY_ERROR = 2\nuint8 EXTRAPOLATION_ERROR = 3\nuint8 INVALID_ARGUMENT_ERROR = 4\nuint8 TIMEOUT_ERROR = 5\nuint8 TRANSFORM_ERROR = 6\n\nuint8 error\nstring error_string\n" comment="" >
  <constant init="0" name="NO_ERROR" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="1" name="LOOKUP_ERROR" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="2" name="CONNECTIVITY_ERROR" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="3" name="EXTRAPOLATION_ERROR" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="4" name="INVALID_ARGUMENT_ERROR" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="5" name="TIMEOUT_ERROR" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="6" name="TRANSFORM_ERROR" type="unsigned char"  sourceType="uint8" comment="" />
  <field name="error" type="unsigned char"  sourceType="uint8" comment="" />
  <field name="error_string" type="string"  sourceType="string" comment="" />
</class>

<class name="TFMessage" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="94810edda583a504dfda3829e70d7eec" rosDesc="geometry_msgs/TransformStamped[] transforms\n\n================================================================================\nMSG: geometry_msgs/TransformStamped\n# This expresses a transform from coordinate frame header.frame_id\n# to the coordinate frame child_frame_id\n#\n# This message is mostly used by the \n# &lt;a href=\&quot;http://wiki.ros.org/tf\&quot;&gt;tf&lt;/a&gt; package. \n# See its documentation for more information.\n\nHeader header\nstring child_frame_id # the frame id of the child frame\nTransform transform\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Transform\n# This represents the transform between two coordinate frames in free space.\n\nVector3 translation\nQuaternion rotation\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n" comment="" >
  <field name="transforms" type="vector(geometry_msgs::TransformStamped)"  sourceType="geometry_msgs::TransformStamped" comment="" />
</class>

<class name="FrameGraphRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
</class>

<class name="FrameGraphResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="frame_yaml" type="string"  sourceType="string" comment="" />
</class>

<class name="FrameGraph" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <definition name="Request" type="FrameGraphRequest" />
  <definition name="Response" type="FrameGraphResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<dependency name="actionlib_msgs_gencpp"/>
<dependency name="geometry_msgs_gencpp"/>
<dependency name="std_msgs_gencpp"/>
<dependency name="std_srvs_gencpp"/>

</classes>

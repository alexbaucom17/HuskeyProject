// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 12:55:19 -0500
//  From Template/Script: data_templates/NMLClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <stdio.h>
// main rcslib header
#include <nml.hh>
// cms updater header
#include <cms_up.hh>
#include <cms_pup.hh>

#include <common/Error.h>
#include <common/Log.h>
#include <common/Common.h>
#include <common/DataTypeInfo.h>

#include "pcl_msgs_gencpp_NML.h"
#include "pcl_msgs_gencpp_Library.h"
#include <messaging/nml/NMLSupport.h>
#include <interfaces/MessageFactoryInterface.h>

#include <ModelCoefficients.h>
#include <PointIndices.h>
#include <PolygonMesh.h>
#include <Vertices.h>

#include <boost/iostreams/stream_buffer.hpp>
#include <boost/iostreams/stream.hpp>

#include <boost/serialization/serialization.hpp>
#include <opensource/eos/archive/portable_iarchive.hpp>
#include <opensource/eos/archive/portable_oarchive.hpp>

using namespace std;
using namespace pcl_msgs;

rframe::NMLMessageFactory * NML_pcl_msgs_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        NML_pcl_msgs_gencppfactory = new pcl_msgs_gencppNMLMessageFactory();
        return NML_pcl_msgs_gencppfactory;
    };
}

rframe::NMLMessageFactory * pcl_msgs::allocate_pcl_msgs_gencpp()
{
    NML_pcl_msgs_gencppfactory = new pcl_msgs_gencppNMLMessageFactory();
    return NML_pcl_msgs_gencppfactory;
};

pcl_msgs_gencppNMLMessageFactory::pcl_msgs_gencppNMLMessageFactory()
{
    name("pcl_msgs_gencpp");
    // use constructor to register data types
    pcl_msgs::registerLibrary();
}

pcl_msgs_gencppNMLMessageFactory::~pcl_msgs_gencppNMLMessageFactory()
{
}

NML_FORMAT_PTR pcl_msgs_gencppNMLMessageFactory::FormatPointer()
{
    return pcl_msgs_gencpp_format;
}

int pcl_msgs_gencppNMLMessageFactory::dataType(NMLmsg & msg)
{
    return msg.type;
}

void pcl_msgs_gencppNMLMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(ModelCoefficients::ID);
    info.name(ModelCoefficients::DATA_TYPE_FULL_NAME);
    info.hashKey(ModelCoefficients::DATA_VERSION);
    info.md5Key(ModelCoefficients::VERSION_MD5);
    info.xmlSource(ModelCoefficients::XML_SOURCE);
    info.flat(ModelCoefficients::dataTypeFlat());
    ids.push_back(info);

    info.id(PointIndices::ID);
    info.name(PointIndices::DATA_TYPE_FULL_NAME);
    info.hashKey(PointIndices::DATA_VERSION);
    info.md5Key(PointIndices::VERSION_MD5);
    info.xmlSource(PointIndices::XML_SOURCE);
    info.flat(PointIndices::dataTypeFlat());
    ids.push_back(info);

    info.id(PolygonMesh::ID);
    info.name(PolygonMesh::DATA_TYPE_FULL_NAME);
    info.hashKey(PolygonMesh::DATA_VERSION);
    info.md5Key(PolygonMesh::VERSION_MD5);
    info.xmlSource(PolygonMesh::XML_SOURCE);
    info.flat(PolygonMesh::dataTypeFlat());
    ids.push_back(info);

    info.id(Vertices::ID);
    info.name(Vertices::DATA_TYPE_FULL_NAME);
    info.hashKey(Vertices::DATA_VERSION);
    info.md5Key(Vertices::VERSION_MD5);
    info.xmlSource(Vertices::XML_SOURCE);
    info.flat(Vertices::dataTypeFlat());
    ids.push_back(info);

}

int pcl_msgs_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<NMLmsg> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case ModelCoefficients::ID:
        {
            //ModelCoefficientsNML * newmsg = new ModelCoefficientsNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new ModelCoefficientsNML(),std::bind(&pcl_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case PointIndices::ID:
        {
            //PointIndicesNML * newmsg = new PointIndicesNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new PointIndicesNML(),std::bind(&pcl_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case PolygonMesh::ID:
        {
            //PolygonMeshNML * newmsg = new PolygonMeshNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new PolygonMeshNML(),std::bind(&pcl_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case Vertices::ID:
        {
            //VerticesNML * newmsg = new VerticesNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new VerticesNML(),std::bind(&pcl_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int pcl_msgs_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case ModelCoefficients::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<ModelCoefficients>(),std::bind(&pcl_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case PointIndices::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<PointIndices>(),std::bind(&pcl_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case PolygonMesh::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<PolygonMesh>(),std::bind(&pcl_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case Vertices::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<Vertices>(),std::bind(&pcl_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int pcl_msgs_gencppNMLMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    delete msg;

    return retval;
}

int pcl_msgs_gencppNMLMessageFactory::deallocateTransport(NMLmsg * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        switch (msg->type)
        { 
            case ModelCoefficients::ID:
            {
                ModelCoefficientsNML * tempmsg = static_cast<ModelCoefficientsNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case PointIndices::ID:
            {
                PointIndicesNML * tempmsg = static_cast<PointIndicesNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case PolygonMesh::ID:
            {
                PolygonMeshNML * tempmsg = static_cast<PolygonMeshNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case Vertices::ID:
            {
                VerticesNML * tempmsg = static_cast<VerticesNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            default:
            {
                retval = Error::NOT_FOUND;
                break;
            }
        }
    }

    return retval;
}

int pcl_msgs_gencppNMLMessageFactory::toTransport(MessageBase & src, NMLmsg & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)dst.type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.type)
        { 
            case ModelCoefficients::ID:
            {
                ModelCoefficientsNML & tempDst = static_cast<ModelCoefficientsNML&>(dst);
                Message<ModelCoefficients > & tempSrc = static_cast<Message<ModelCoefficients>&>(src);

                if (tempSrc.version() != ModelCoefficients::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of ModelCoefficients: " << __FILE__ << " expected: " 
                             << ModelCoefficients::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of ModelCoefficients: " << __FILE__ << " expected: " 
                         << ModelCoefficients::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case PointIndices::ID:
            {
                PointIndicesNML & tempDst = static_cast<PointIndicesNML&>(dst);
                Message<PointIndices > & tempSrc = static_cast<Message<PointIndices>&>(src);

                if (tempSrc.version() != PointIndices::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of PointIndices: " << __FILE__ << " expected: " 
                             << PointIndices::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of PointIndices: " << __FILE__ << " expected: " 
                         << PointIndices::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case PolygonMesh::ID:
            {
                PolygonMeshNML & tempDst = static_cast<PolygonMeshNML&>(dst);
                Message<PolygonMesh > & tempSrc = static_cast<Message<PolygonMesh>&>(src);

                if (tempSrc.version() != PolygonMesh::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of PolygonMesh: " << __FILE__ << " expected: " 
                             << PolygonMesh::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of PolygonMesh: " << __FILE__ << " expected: " 
                         << PolygonMesh::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case Vertices::ID:
            {
                VerticesNML & tempDst = static_cast<VerticesNML&>(dst);
                Message<Vertices > & tempSrc = static_cast<Message<Vertices>&>(src);

                if (tempSrc.version() != Vertices::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of Vertices: " << __FILE__ << " expected: " 
                             << Vertices::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of Vertices: " << __FILE__ << " expected: " 
                         << Vertices::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int pcl_msgs_gencppNMLMessageFactory::fromTransport(NMLmsg & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.type)
        { 
            case ModelCoefficients::ID:
            {
                ModelCoefficientsNML & tempSrc = static_cast<ModelCoefficientsNML&>(src);
                Message<ModelCoefficients > & tempDst = static_cast<Message<ModelCoefficients>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (ModelCoefficients::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case PointIndices::ID:
            {
                PointIndicesNML & tempSrc = static_cast<PointIndicesNML&>(src);
                Message<PointIndices > & tempDst = static_cast<Message<PointIndices>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (PointIndices::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case PolygonMesh::ID:
            {
                PolygonMeshNML & tempSrc = static_cast<PolygonMeshNML&>(src);
                Message<PolygonMesh > & tempDst = static_cast<Message<PolygonMesh>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (PolygonMesh::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case Vertices::ID:
            {
                VerticesNML & tempSrc = static_cast<VerticesNML&>(src);
                Message<Vertices > & tempDst = static_cast<Message<Vertices>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (Vertices::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int pcl_msgs_gencppNMLMessageFactory::constructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    switch (id)
    { 
        case ModelCoefficients::ID:
        {
            // only need to construct if data type is not flat
            if (ModelCoefficients::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing ModelCoefficients at %p\n",buffer);
                ModelCoefficientsNML * p = static_cast<ModelCoefficientsNML*>(buffer);
                // construct the type at pointer p
                new (p) ModelCoefficientsNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing ModelCoefficients at %p,, is flat\n",buffer);
            }
            break;
        } 
        case PointIndices::ID:
        {
            // only need to construct if data type is not flat
            if (PointIndices::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing PointIndices at %p\n",buffer);
                PointIndicesNML * p = static_cast<PointIndicesNML*>(buffer);
                // construct the type at pointer p
                new (p) PointIndicesNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing PointIndices at %p,, is flat\n",buffer);
            }
            break;
        } 
        case PolygonMesh::ID:
        {
            // only need to construct if data type is not flat
            if (PolygonMesh::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing PolygonMesh at %p\n",buffer);
                PolygonMeshNML * p = static_cast<PolygonMeshNML*>(buffer);
                // construct the type at pointer p
                new (p) PolygonMeshNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing PolygonMesh at %p,, is flat\n",buffer);
            }
            break;
        } 
        case Vertices::ID:
        {
            // only need to construct if data type is not flat
            if (Vertices::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing Vertices at %p\n",buffer);
                VerticesNML * p = static_cast<VerticesNML*>(buffer);
                // construct the type at pointer p
                new (p) VerticesNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing Vertices at %p,, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

int pcl_msgs_gencppNMLMessageFactory::destructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    if (buffer == nullptr) return retval;

    switch (id)
    { 
        case ModelCoefficients::ID:
        {
            // only need to destruct if data type is not flat
            if (ModelCoefficients::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing ModelCoefficients at %p\n",buffer);
                ModelCoefficientsNML * p = static_cast<ModelCoefficientsNML*>(buffer);
                p->~ModelCoefficientsNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction ModelCoefficients at %p, is flat\n",buffer);
            }
            break;
        } 
        case PointIndices::ID:
        {
            // only need to destruct if data type is not flat
            if (PointIndices::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing PointIndices at %p\n",buffer);
                PointIndicesNML * p = static_cast<PointIndicesNML*>(buffer);
                p->~PointIndicesNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction PointIndices at %p, is flat\n",buffer);
            }
            break;
        } 
        case PolygonMesh::ID:
        {
            // only need to destruct if data type is not flat
            if (PolygonMesh::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing PolygonMesh at %p\n",buffer);
                PolygonMeshNML * p = static_cast<PolygonMeshNML*>(buffer);
                p->~PolygonMeshNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction PolygonMesh at %p, is flat\n",buffer);
            }
            break;
        } 
        case Vertices::ID:
        {
            // only need to destruct if data type is not flat
            if (Vertices::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing Vertices at %p\n",buffer);
                VerticesNML * p = static_cast<VerticesNML*>(buffer);
                p->~VerticesNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction Vertices at %p, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

void pcl_msgs::nmlupdate(CMS * cms, ModelCoefficients & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate ModelCoefficients, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.header);
        nmlupdate(cms,inobj.values);

    }  
 }

ModelCoefficientsNML::ModelCoefficientsNML() : NMLmsg((NMLTYPE)ModelCoefficients::ID,sizeof(ModelCoefficientsNML)), nmlVersion(ModelCoefficients::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new ModelCoefficients()*/)
{
};

ModelCoefficientsNML::~ModelCoefficientsNML()
{
};

ModelCoefficientsNML & ModelCoefficientsNML::operator=(const ModelCoefficientsNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

ModelCoefficientsNML & ModelCoefficientsNML::operator=(const ModelCoefficients & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(ModelCoefficients);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void ModelCoefficientsNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<ModelCoefficients&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: ModelCoefficientsNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<ModelCoefficients> temp(new ModelCoefficients());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: pcl_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (ModelCoefficients::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: ModelCoefficients Message version mismatch, expected " << ModelCoefficients::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: ModelCoefficients Message version mismatch, expected " << ModelCoefficients::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void pcl_msgs::nmlupdate(CMS * cms, PointIndices & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate PointIndices, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.header);
        nmlupdate(cms,inobj.indices);

    }  
 }

PointIndicesNML::PointIndicesNML() : NMLmsg((NMLTYPE)PointIndices::ID,sizeof(PointIndicesNML)), nmlVersion(PointIndices::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new PointIndices()*/)
{
};

PointIndicesNML::~PointIndicesNML()
{
};

PointIndicesNML & PointIndicesNML::operator=(const PointIndicesNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

PointIndicesNML & PointIndicesNML::operator=(const PointIndices & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(PointIndices);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void PointIndicesNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<PointIndices&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: PointIndicesNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<PointIndices> temp(new PointIndices());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: pcl_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (PointIndices::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: PointIndices Message version mismatch, expected " << PointIndices::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: PointIndices Message version mismatch, expected " << PointIndices::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void pcl_msgs::nmlupdate(CMS * cms, PolygonMesh & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate PolygonMesh, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.header);
        nmlupdate(cms,inobj.cloud);
        nmlupdate(cms,inobj.polygons);

    }  
 }

PolygonMeshNML::PolygonMeshNML() : NMLmsg((NMLTYPE)PolygonMesh::ID,sizeof(PolygonMeshNML)), nmlVersion(PolygonMesh::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new PolygonMesh()*/)
{
};

PolygonMeshNML::~PolygonMeshNML()
{
};

PolygonMeshNML & PolygonMeshNML::operator=(const PolygonMeshNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

PolygonMeshNML & PolygonMeshNML::operator=(const PolygonMesh & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(PolygonMesh);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void PolygonMeshNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<PolygonMesh&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: PolygonMeshNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<PolygonMesh> temp(new PolygonMesh());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: pcl_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (PolygonMesh::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: PolygonMesh Message version mismatch, expected " << PolygonMesh::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: PolygonMesh Message version mismatch, expected " << PolygonMesh::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void pcl_msgs::nmlupdate(CMS * cms, Vertices & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate Vertices, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.vertices);

    }  
 }

VerticesNML::VerticesNML() : NMLmsg((NMLTYPE)Vertices::ID,sizeof(VerticesNML)), nmlVersion(Vertices::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new Vertices()*/)
{
};

VerticesNML::~VerticesNML()
{
};

VerticesNML & VerticesNML::operator=(const VerticesNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

VerticesNML & VerticesNML::operator=(const Vertices & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(Vertices);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void VerticesNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<Vertices&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: VerticesNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<Vertices> temp(new Vertices());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: pcl_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (Vertices::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: Vertices Message version mismatch, expected " << Vertices::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: Vertices Message version mismatch, expected " << Vertices::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

int pcl_msgs::pcl_msgs_gencpp_format(NMLTYPE type, void * buffer, CMS* cms)
{
    int retval = 1;
    int retval2 = rframe::Error::SUCCESS;

          //printf("pcl_msgs_gencpp_format: buffer parameters: type: %d, %p, encode: %d\n",(int)type, buffer,cms->mode);

    switch (type)
    { 
        case 0:
        {
            // do nothing, 0 is passed in on buffer creation
            break;
        }
        case ModelCoefficients::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for ModelCoefficients, id " << ModelCoefficients::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_pcl_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"pcl_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((ModelCoefficientsNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case PointIndices::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for PointIndices, id " << PointIndices::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_pcl_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"pcl_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((PointIndicesNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case PolygonMesh::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for PolygonMesh, id " << PolygonMesh::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_pcl_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"pcl_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((PolygonMeshNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case Vertices::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for Vertices, id " << Vertices::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_pcl_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"pcl_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((VerticesNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        }                   
        default:
        {

            retval = 0;
            break;
        }
    }

          //   printf("format done\n");
    return retval;
}


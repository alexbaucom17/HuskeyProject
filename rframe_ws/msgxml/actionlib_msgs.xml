<!--
 
  AUTOGENERATED FILE:   do not edit

  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:56:55 -0500
  From Template/Script: rosToXML.rb
 

-->
<classes library_name="actionlib_msgs_gencpp" namespace="actionlib_msgs" >

<class name="GoalID" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="302881f31927c1df708a2dbab0e80ee8" rosDesc="# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n" comment="The stamp should store the time at which this goal was requested.
 It is used by an action server when it tries to preempt all
 goals that were requested before a certain time" >
  <field name="stamp" type="std_msgs::RosTime"  sourceType="time" comment="The id provides a way to associate feedback and
 result message with specific goal requests. The id
 specified must be unique." />
  <field name="id" type="string"  sourceType="string" comment="" />
</class>

<class name="GoalStatus" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="d388f9b87b3c471f784434d671988d4a" rosDesc="GoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n" comment="" >
  <field name="goal_id" type="GoalID"  sourceType="GoalID" comment="" />
  <field name="status" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="0" name="PENDING" type="unsigned char"  sourceType="uint8" comment="The goal has yet to be processed by the action server" />
  <constant init="1" name="ACTIVE" type="unsigned char"  sourceType="uint8" comment="The goal is currently being processed by the action server" />
  <constant init="2" name="PREEMPTED" type="unsigned char"  sourceType="uint8" comment="The goal received a cancel request after it started executing
   and has since completed its execution (Terminal State)" />
  <constant init="3" name="SUCCEEDED" type="unsigned char"  sourceType="uint8" comment="The goal was achieved successfully by the action server (Terminal State)" />
  <constant init="4" name="ABORTED" type="unsigned char"  sourceType="uint8" comment="The goal was aborted during execution by the action server due
    to some failure (Terminal State)" />
  <constant init="5" name="REJECTED" type="unsigned char"  sourceType="uint8" comment="The goal was rejected by the action server without being processed,
    because the goal was unattainable or invalid (Terminal State)" />
  <constant init="6" name="PREEMPTING" type="unsigned char"  sourceType="uint8" comment="The goal received a cancel request after it started executing
    and has not yet completed execution" />
  <constant init="7" name="RECALLING" type="unsigned char"  sourceType="uint8" comment="The goal received a cancel request before it started executing,
    but the action server has not yet confirmed that the goal is canceled" />
  <constant init="8" name="RECALLED" type="unsigned char"  sourceType="uint8" comment="The goal received a cancel request before it started executing
    and was successfully cancelled (Terminal State)" />
  <constant init="9" name="LOST" type="unsigned char"  sourceType="uint8" comment="An action client can determine that a goal is LOST. This should not be
    sent over the wire by an action server
Allow for the user to associate a string with GoalStatus for debugging" />
  <field name="text" type="string"  sourceType="string" comment="" />
</class>

<class name="GoalStatusArray" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="8b2b82f13216d0a8ea88bd3af735e619" rosDesc="# Stores the statuses for goals that are currently being tracked\n# by an action server\nHeader header\nGoalStatus[] status_list\n\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n" comment="Stores the statuses for goals that are currently being tracked
 by an action server" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="status_list" type="vector(GoalStatus)"  sourceType="GoalStatus" comment="" />
</class>

<dependency name="std_msgs_gencpp"/>
<dependency name="std_srvs_gencpp"/>

</classes>

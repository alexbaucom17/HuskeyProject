// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:08 -0500
//  From Template/Script: data_templates/ROSTemplate.cpp.rb
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "tf2_msgs_gencpp_ROS.h"
#include <common/Log.h>
#include <common/DataTypeInfo.h>

using namespace std;
using namespace tf2_msgs;

rframe::ROSMessageFactory * ROS_tf2_msgs_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        ROS_tf2_msgs_gencppfactory = new tf2_msgs_gencppROSMessageFactory();

        return ROS_tf2_msgs_gencppfactory;
    };
}

rframe::ROSMessageFactory * tf2_msgs::allocate_tf2_msgs_gencpp()
{
    ROS_tf2_msgs_gencppfactory = new tf2_msgs_gencppROSMessageFactory();
    return ROS_tf2_msgs_gencppfactory;
};

tf2_msgs_gencppROSMessageFactory::tf2_msgs_gencppROSMessageFactory()
{
    name("tf2_msgs_gencpp");
    // use constructor to register data types
    tf2_msgs::registerLibrary();
}

tf2_msgs_gencppROSMessageFactory::~tf2_msgs_gencppROSMessageFactory()
{
}

int tf2_msgs_gencppROSMessageFactory::dataType(ros::SerializedMessage & msg)
{
    return msg.message_type;
}

void tf2_msgs_gencppROSMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(LookupTransformAction::ID);
    info.name(LookupTransformAction::DATA_TYPE_FULL_NAME);
    info.hashKey(LookupTransformAction::DATA_VERSION);
    info.md5Key(LookupTransformAction::VERSION_MD5);
    info.xmlSource(LookupTransformAction::XML_SOURCE);
    info.flat(LookupTransformAction::dataTypeFlat());
    ids.push_back(info);

    info.id(LookupTransformActionFeedback::ID);
    info.name(LookupTransformActionFeedback::DATA_TYPE_FULL_NAME);
    info.hashKey(LookupTransformActionFeedback::DATA_VERSION);
    info.md5Key(LookupTransformActionFeedback::VERSION_MD5);
    info.xmlSource(LookupTransformActionFeedback::XML_SOURCE);
    info.flat(LookupTransformActionFeedback::dataTypeFlat());
    ids.push_back(info);

    info.id(LookupTransformActionGoal::ID);
    info.name(LookupTransformActionGoal::DATA_TYPE_FULL_NAME);
    info.hashKey(LookupTransformActionGoal::DATA_VERSION);
    info.md5Key(LookupTransformActionGoal::VERSION_MD5);
    info.xmlSource(LookupTransformActionGoal::XML_SOURCE);
    info.flat(LookupTransformActionGoal::dataTypeFlat());
    ids.push_back(info);

    info.id(LookupTransformActionResult::ID);
    info.name(LookupTransformActionResult::DATA_TYPE_FULL_NAME);
    info.hashKey(LookupTransformActionResult::DATA_VERSION);
    info.md5Key(LookupTransformActionResult::VERSION_MD5);
    info.xmlSource(LookupTransformActionResult::XML_SOURCE);
    info.flat(LookupTransformActionResult::dataTypeFlat());
    ids.push_back(info);

    info.id(LookupTransformFeedback::ID);
    info.name(LookupTransformFeedback::DATA_TYPE_FULL_NAME);
    info.hashKey(LookupTransformFeedback::DATA_VERSION);
    info.md5Key(LookupTransformFeedback::VERSION_MD5);
    info.xmlSource(LookupTransformFeedback::XML_SOURCE);
    info.flat(LookupTransformFeedback::dataTypeFlat());
    ids.push_back(info);

    info.id(LookupTransformGoal::ID);
    info.name(LookupTransformGoal::DATA_TYPE_FULL_NAME);
    info.hashKey(LookupTransformGoal::DATA_VERSION);
    info.md5Key(LookupTransformGoal::VERSION_MD5);
    info.xmlSource(LookupTransformGoal::XML_SOURCE);
    info.flat(LookupTransformGoal::dataTypeFlat());
    ids.push_back(info);

    info.id(LookupTransformResult::ID);
    info.name(LookupTransformResult::DATA_TYPE_FULL_NAME);
    info.hashKey(LookupTransformResult::DATA_VERSION);
    info.md5Key(LookupTransformResult::VERSION_MD5);
    info.xmlSource(LookupTransformResult::XML_SOURCE);
    info.flat(LookupTransformResult::dataTypeFlat());
    ids.push_back(info);

    info.id(TF2Error::ID);
    info.name(TF2Error::DATA_TYPE_FULL_NAME);
    info.hashKey(TF2Error::DATA_VERSION);
    info.md5Key(TF2Error::VERSION_MD5);
    info.xmlSource(TF2Error::XML_SOURCE);
    info.flat(TF2Error::dataTypeFlat());
    ids.push_back(info);

    info.id(TFMessage::ID);
    info.name(TFMessage::DATA_TYPE_FULL_NAME);
    info.hashKey(TFMessage::DATA_VERSION);
    info.md5Key(TFMessage::VERSION_MD5);
    info.xmlSource(TFMessage::XML_SOURCE);
    info.flat(TFMessage::dataTypeFlat());
    ids.push_back(info);

    info.id(FrameGraphRequest::ID);
    info.name(FrameGraphRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(FrameGraphRequest::DATA_VERSION);
    info.md5Key(FrameGraphRequest::VERSION_MD5);
    info.xmlSource(FrameGraphRequest::XML_SOURCE);
    info.flat(FrameGraphRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(FrameGraphResponse::ID);
    info.name(FrameGraphResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(FrameGraphResponse::DATA_VERSION);
    info.md5Key(FrameGraphResponse::VERSION_MD5);
    info.xmlSource(FrameGraphResponse::XML_SOURCE);
    info.flat(FrameGraphResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(FrameGraph::ID);
    info.name(FrameGraph::DATA_TYPE_FULL_NAME);
    info.hashKey(FrameGraph::DATA_VERSION);
    info.md5Key(FrameGraph::VERSION_MD5);
    info.xmlSource(FrameGraph::XML_SOURCE);
    info.flat(FrameGraph::dataTypeFlat());
    ids.push_back(info);

}

int tf2_msgs_gencppROSMessageFactory::typeName(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case LookupTransformAction::ID:
        {
            str = "tf2_msgs/LookupTransformAction";
            break;
        }
        case LookupTransformActionFeedback::ID:
        {
            str = "tf2_msgs/LookupTransformActionFeedback";
            break;
        }
        case LookupTransformActionGoal::ID:
        {
            str = "tf2_msgs/LookupTransformActionGoal";
            break;
        }
        case LookupTransformActionResult::ID:
        {
            str = "tf2_msgs/LookupTransformActionResult";
            break;
        }
        case LookupTransformFeedback::ID:
        {
            str = "tf2_msgs/LookupTransformFeedback";
            break;
        }
        case LookupTransformGoal::ID:
        {
            str = "tf2_msgs/LookupTransformGoal";
            break;
        }
        case LookupTransformResult::ID:
        {
            str = "tf2_msgs/LookupTransformResult";
            break;
        }
        case TF2Error::ID:
        {
            str = "tf2_msgs/TF2Error";
            break;
        }
        case TFMessage::ID:
        {
            str = "tf2_msgs/TFMessage";
            break;
        }
        case FrameGraphRequest::ID:
        {
            str = "tf2_msgs/FrameGraphRequest";
            break;
        }
        case FrameGraphResponse::ID:
        {
            str = "tf2_msgs/FrameGraphResponse";
            break;
        }
        case FrameGraph::ID:
        {
            str = "tf2_msgs/FrameGraph";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int tf2_msgs_gencppROSMessageFactory::desc(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case LookupTransformAction::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nLookupTransformActionGoal action_goal\nLookupTransformActionResult action_result\nLookupTransformActionFeedback action_feedback\n\n================================================================================\nMSG: tf2_msgs/LookupTransformActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nLookupTransformGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: tf2_msgs/LookupTransformGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#Simple API\nstring target_frame\nstring source_frame\ntime source_time\nduration timeout\n\n#Advanced API\ntime target_time\nstring fixed_frame\n\n#Whether or not to use the advanced API\nbool advanced\n\n\n================================================================================\nMSG: tf2_msgs/LookupTransformActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nLookupTransformResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: tf2_msgs/LookupTransformResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ngeometry_msgs/TransformStamped transform\ntf2_msgs/TF2Error error\n\n================================================================================\nMSG: geometry_msgs/TransformStamped\n# This expresses a transform from coordinate frame header.frame_id\n# to the coordinate frame child_frame_id\n#\n# This message is mostly used by the \n# <a href=\"http://wiki.ros.org/tf\">tf</a> package. \n# See its documentation for more information.\n\nHeader header\nstring child_frame_id # the frame id of the child frame\nTransform transform\n\n================================================================================\nMSG: geometry_msgs/Transform\n# This represents the transform between two coordinate frames in free space.\n\nVector3 translation\nQuaternion rotation\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: tf2_msgs/TF2Error\nuint8 NO_ERROR = 0\nuint8 LOOKUP_ERROR = 1\nuint8 CONNECTIVITY_ERROR = 2\nuint8 EXTRAPOLATION_ERROR = 3\nuint8 INVALID_ARGUMENT_ERROR = 4\nuint8 TIMEOUT_ERROR = 5\nuint8 TRANSFORM_ERROR = 6\n\nuint8 error\nstring error_string\n\n================================================================================\nMSG: tf2_msgs/LookupTransformActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nLookupTransformFeedback feedback\n\n================================================================================\nMSG: tf2_msgs/LookupTransformFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n";
            break;
        }
        case LookupTransformActionFeedback::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nLookupTransformFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: tf2_msgs/LookupTransformFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n";
            break;
        }
        case LookupTransformActionGoal::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nLookupTransformGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: tf2_msgs/LookupTransformGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#Simple API\nstring target_frame\nstring source_frame\ntime source_time\nduration timeout\n\n#Advanced API\ntime target_time\nstring fixed_frame\n\n#Whether or not to use the advanced API\nbool advanced\n\n";
            break;
        }
        case LookupTransformActionResult::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nLookupTransformResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: tf2_msgs/LookupTransformResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ngeometry_msgs/TransformStamped transform\ntf2_msgs/TF2Error error\n\n================================================================================\nMSG: geometry_msgs/TransformStamped\n# This expresses a transform from coordinate frame header.frame_id\n# to the coordinate frame child_frame_id\n#\n# This message is mostly used by the \n# <a href=\"http://wiki.ros.org/tf\">tf</a> package. \n# See its documentation for more information.\n\nHeader header\nstring child_frame_id # the frame id of the child frame\nTransform transform\n\n================================================================================\nMSG: geometry_msgs/Transform\n# This represents the transform between two coordinate frames in free space.\n\nVector3 translation\nQuaternion rotation\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: tf2_msgs/TF2Error\nuint8 NO_ERROR = 0\nuint8 LOOKUP_ERROR = 1\nuint8 CONNECTIVITY_ERROR = 2\nuint8 EXTRAPOLATION_ERROR = 3\nuint8 INVALID_ARGUMENT_ERROR = 4\nuint8 TIMEOUT_ERROR = 5\nuint8 TRANSFORM_ERROR = 6\n\nuint8 error\nstring error_string\n";
            break;
        }
        case LookupTransformFeedback::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n";
            break;
        }
        case LookupTransformGoal::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#Simple API\nstring target_frame\nstring source_frame\ntime source_time\nduration timeout\n\n#Advanced API\ntime target_time\nstring fixed_frame\n\n#Whether or not to use the advanced API\nbool advanced\n\n";
            break;
        }
        case LookupTransformResult::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ngeometry_msgs/TransformStamped transform\ntf2_msgs/TF2Error error\n\n================================================================================\nMSG: geometry_msgs/TransformStamped\n# This expresses a transform from coordinate frame header.frame_id\n# to the coordinate frame child_frame_id\n#\n# This message is mostly used by the \n# <a href=\"http://wiki.ros.org/tf\">tf</a> package. \n# See its documentation for more information.\n\nHeader header\nstring child_frame_id # the frame id of the child frame\nTransform transform\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Transform\n# This represents the transform between two coordinate frames in free space.\n\nVector3 translation\nQuaternion rotation\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: tf2_msgs/TF2Error\nuint8 NO_ERROR = 0\nuint8 LOOKUP_ERROR = 1\nuint8 CONNECTIVITY_ERROR = 2\nuint8 EXTRAPOLATION_ERROR = 3\nuint8 INVALID_ARGUMENT_ERROR = 4\nuint8 TIMEOUT_ERROR = 5\nuint8 TRANSFORM_ERROR = 6\n\nuint8 error\nstring error_string\n";
            break;
        }
        case TF2Error::ID:
        {
            str = "uint8 NO_ERROR = 0\nuint8 LOOKUP_ERROR = 1\nuint8 CONNECTIVITY_ERROR = 2\nuint8 EXTRAPOLATION_ERROR = 3\nuint8 INVALID_ARGUMENT_ERROR = 4\nuint8 TIMEOUT_ERROR = 5\nuint8 TRANSFORM_ERROR = 6\n\nuint8 error\nstring error_string\n";
            break;
        }
        case TFMessage::ID:
        {
            str = "geometry_msgs/TransformStamped[] transforms\n\n================================================================================\nMSG: geometry_msgs/TransformStamped\n# This expresses a transform from coordinate frame header.frame_id\n# to the coordinate frame child_frame_id\n#\n# This message is mostly used by the \n# <a href=\"http://wiki.ros.org/tf\">tf</a> package. \n# See its documentation for more information.\n\nHeader header\nstring child_frame_id # the frame id of the child frame\nTransform transform\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Transform\n# This represents the transform between two coordinate frames in free space.\n\nVector3 translation\nQuaternion rotation\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n";
            break;
        }
        case FrameGraphRequest::ID:
        {
            str = FrameGraphRequest::XML_SOURCE;
            break;
        }
        case FrameGraphResponse::ID:
        {
            str = FrameGraphResponse::XML_SOURCE;
            break;
        }
        case FrameGraph::ID:
        {
            str = FrameGraph::XML_SOURCE;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int tf2_msgs_gencppROSMessageFactory::md5String(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case LookupTransformAction::ID:
        {
            str = "7ee01ba91a56c2245c610992dbaa3c37";
            break;
        }
        case LookupTransformActionFeedback::ID:
        {
            str = "aae20e09065c3809e8a8e87c4c8953fd";
            break;
        }
        case LookupTransformActionGoal::ID:
        {
            str = "f2e7bcdb75c847978d0351a13e699da5";
            break;
        }
        case LookupTransformActionResult::ID:
        {
            str = "ac26ce75a41384fa8bb4dc10f491ab90";
            break;
        }
        case LookupTransformFeedback::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case LookupTransformGoal::ID:
        {
            str = "35e3720468131d675a18bb6f3e5f22f8";
            break;
        }
        case LookupTransformResult::ID:
        {
            str = "3fe5db6a19ca9cfb675418c5ad875c36";
            break;
        }
        case TF2Error::ID:
        {
            str = "bc6848fd6fd750c92e38575618a4917d";
            break;
        }
        case TFMessage::ID:
        {
            str = "94810edda583a504dfda3829e70d7eec";
            break;
        }
        case FrameGraphRequest::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case FrameGraphResponse::ID:
        {
            str = "c4af9ac907e58e906eb0b6e3c58478c0";
            break;
        }
        case FrameGraph::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int tf2_msgs_gencppROSMessageFactory::md5(unsigned long long & highOrder, unsigned long long & lowOrder, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case LookupTransformAction::ID:
        {   
		    highOrder = 0x7ee01ba91a56c224ULL;
            lowOrder = 0x5c610992dbaa3c37ULL;
            break;
        }
        case LookupTransformActionFeedback::ID:
        {   
		    highOrder = 0xaae20e09065c3809ULL;
            lowOrder = 0xe8a8e87c4c8953fdULL;
            break;
        }
        case LookupTransformActionGoal::ID:
        {   
		    highOrder = 0xf2e7bcdb75c84797ULL;
            lowOrder = 0x8d0351a13e699da5ULL;
            break;
        }
        case LookupTransformActionResult::ID:
        {   
		    highOrder = 0xac26ce75a41384faULL;
            lowOrder = 0x8bb4dc10f491ab90ULL;
            break;
        }
        case LookupTransformFeedback::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case LookupTransformGoal::ID:
        {   
		    highOrder = 0x35e3720468131d67ULL;
            lowOrder = 0x5a18bb6f3e5f22f8ULL;
            break;
        }
        case LookupTransformResult::ID:
        {   
		    highOrder = 0x3fe5db6a19ca9cfbULL;
            lowOrder = 0x675418c5ad875c36ULL;
            break;
        }
        case TF2Error::ID:
        {   
		    highOrder = 0xbc6848fd6fd750c9ULL;
            lowOrder = 0x2e38575618a4917dULL;
            break;
        }
        case TFMessage::ID:
        {   
		    highOrder = 0x94810edda583a504ULL;
            lowOrder = 0xdfda3829e70d7eecULL;
            break;
        }
        case FrameGraphRequest::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case FrameGraphResponse::ID:
        {   
		    highOrder = 0xc4af9ac907e58e90ULL;
            lowOrder = 0x6eb0b6e3c58478c0ULL;
            break;
        }
        case FrameGraph::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int tf2_msgs_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<ros::SerializedMessage> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case LookupTransformAction::ID:
        case LookupTransformActionFeedback::ID:
        case LookupTransformActionGoal::ID:
        case LookupTransformActionResult::ID:
        case LookupTransformFeedback::ID:
        case LookupTransformGoal::ID:
        case LookupTransformResult::ID:
        case TF2Error::ID:
        case TFMessage::ID:
        case FrameGraphRequest::ID:
        case FrameGraphResponse::ID:
        case FrameGraph::ID:
        {
            break;
        } 
        default:
	    {
            retval = rframe::Error::PARAM_RANGE;
            break;
	    }
    }

    if (retval == rframe::Error::SUCCESS)
	{
        std::shared_ptr<ros::SerializedMessage> newmsg(new ros::SerializedMessage);

        if (newmsg.get() == NULL)
	    {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else
	    {
            newmsg->message_type = id;
            msg.swap(newmsg);
        }
    }

    return retval;
}

int tf2_msgs_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case LookupTransformAction::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<LookupTransformAction>(),std::bind(&tf2_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case LookupTransformActionFeedback::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<LookupTransformActionFeedback>(),std::bind(&tf2_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case LookupTransformActionGoal::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<LookupTransformActionGoal>(),std::bind(&tf2_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case LookupTransformActionResult::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<LookupTransformActionResult>(),std::bind(&tf2_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case LookupTransformFeedback::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<LookupTransformFeedback>(),std::bind(&tf2_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case LookupTransformGoal::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<LookupTransformGoal>(),std::bind(&tf2_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case LookupTransformResult::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<LookupTransformResult>(),std::bind(&tf2_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case TF2Error::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<TF2Error>(),std::bind(&tf2_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case TFMessage::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<TFMessage>(),std::bind(&tf2_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case FrameGraphRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<FrameGraphRequest>(),std::bind(&tf2_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case FrameGraphResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<FrameGraphResponse>(),std::bind(&tf2_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case FrameGraph::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<FrameGraph>(),std::bind(&tf2_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            retval = rframe::Error::PARAM_RANGE;
        }
    }

    return retval;
}

int tf2_msgs_gencppROSMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
	{
        delete msg;
    }

    return retval;
}

int tf2_msgs_gencppROSMessageFactory::deallocateTransport(ros::SerializedMessage * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        delete msg;
    }

    return retval;
}

int tf2_msgs_gencppROSMessageFactory::toTransport(MessageBase & src, ros::SerializedMessage & dst)
{
    int retval = rframe::Error::SUCCESS;

    if (dst.message_type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.message_type)
        { 
            case LookupTransformAction::ID:
            {
                Message<LookupTransformAction > & tempSrc = static_cast<Message<LookupTransformAction>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: tf2_msgs_gencpp::LookupTransformAction buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case LookupTransformActionFeedback::ID:
            {
                Message<LookupTransformActionFeedback > & tempSrc = static_cast<Message<LookupTransformActionFeedback>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: tf2_msgs_gencpp::LookupTransformActionFeedback buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case LookupTransformActionGoal::ID:
            {
                Message<LookupTransformActionGoal > & tempSrc = static_cast<Message<LookupTransformActionGoal>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: tf2_msgs_gencpp::LookupTransformActionGoal buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case LookupTransformActionResult::ID:
            {
                Message<LookupTransformActionResult > & tempSrc = static_cast<Message<LookupTransformActionResult>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: tf2_msgs_gencpp::LookupTransformActionResult buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case LookupTransformFeedback::ID:
            {
                Message<LookupTransformFeedback > & tempSrc = static_cast<Message<LookupTransformFeedback>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: tf2_msgs_gencpp::LookupTransformFeedback buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case LookupTransformGoal::ID:
            {
                Message<LookupTransformGoal > & tempSrc = static_cast<Message<LookupTransformGoal>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: tf2_msgs_gencpp::LookupTransformGoal buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case LookupTransformResult::ID:
            {
                Message<LookupTransformResult > & tempSrc = static_cast<Message<LookupTransformResult>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: tf2_msgs_gencpp::LookupTransformResult buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case TF2Error::ID:
            {
                Message<TF2Error > & tempSrc = static_cast<Message<TF2Error>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: tf2_msgs_gencpp::TF2Error buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case TFMessage::ID:
            {
                Message<TFMessage > & tempSrc = static_cast<Message<TFMessage>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: tf2_msgs_gencpp::TFMessage buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case FrameGraphRequest::ID:
            {
                Message<FrameGraphRequest > & tempSrc = static_cast<Message<FrameGraphRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: tf2_msgs_gencpp::FrameGraphRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case FrameGraphResponse::ID:
            {
                Message<FrameGraphResponse > & tempSrc = static_cast<Message<FrameGraphResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: tf2_msgs_gencpp::FrameGraphResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case FrameGraph::ID:
            {
                Message<FrameGraph > & tempSrc = static_cast<Message<FrameGraph>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: tf2_msgs_gencpp::FrameGraph buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int tf2_msgs_gencppROSMessageFactory::fromTransport(ros::SerializedMessage & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.message_type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.message_type)
        { 
            case LookupTransformAction::ID:
            {
                Message<LookupTransformAction > & tempDst = static_cast<Message<LookupTransformAction>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case LookupTransformActionFeedback::ID:
            {
                Message<LookupTransformActionFeedback > & tempDst = static_cast<Message<LookupTransformActionFeedback>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case LookupTransformActionGoal::ID:
            {
                Message<LookupTransformActionGoal > & tempDst = static_cast<Message<LookupTransformActionGoal>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case LookupTransformActionResult::ID:
            {
                Message<LookupTransformActionResult > & tempDst = static_cast<Message<LookupTransformActionResult>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case LookupTransformFeedback::ID:
            {
                Message<LookupTransformFeedback > & tempDst = static_cast<Message<LookupTransformFeedback>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case LookupTransformGoal::ID:
            {
                Message<LookupTransformGoal > & tempDst = static_cast<Message<LookupTransformGoal>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case LookupTransformResult::ID:
            {
                Message<LookupTransformResult > & tempDst = static_cast<Message<LookupTransformResult>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case TF2Error::ID:
            {
                Message<TF2Error > & tempDst = static_cast<Message<TF2Error>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case TFMessage::ID:
            {
                Message<TFMessage > & tempDst = static_cast<Message<TFMessage>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case FrameGraphRequest::ID:
            {
                Message<FrameGraphRequest > & tempDst = static_cast<Message<FrameGraphRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case FrameGraphResponse::ID:
            {
                Message<FrameGraphResponse > & tempDst = static_cast<Message<FrameGraphResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case FrameGraph::ID:
            {
                Message<FrameGraph > & tempDst = static_cast<Message<FrameGraph>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int tf2_msgs_gencppROSMessageFactory::updateHeader(rframe::MessageBase &msg, unsigned int seqNo)
{
    int retval = rframe::Error::SUCCESS;

    switch (msg.id())
    {   
        // LookupTransformAction does not have a Header as its first member 
        case LookupTransformActionFeedback::ID:
        {
            Message<LookupTransformActionFeedback > & tempMsg = static_cast<Message<LookupTransformActionFeedback>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        case LookupTransformActionGoal::ID:
        {
            Message<LookupTransformActionGoal > & tempMsg = static_cast<Message<LookupTransformActionGoal>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        case LookupTransformActionResult::ID:
        {
            Message<LookupTransformActionResult > & tempMsg = static_cast<Message<LookupTransformActionResult>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        // LookupTransformGoal does not have a Header as its first member 
        // LookupTransformResult does not have a Header as its first member 
        // TF2Error does not have a Header as its first member 
        // TFMessage does not have a Header as its first member 
        // FrameGraphResponse does not have a Header as its first member 
        // FrameGraph does not have a Header as its first member 
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

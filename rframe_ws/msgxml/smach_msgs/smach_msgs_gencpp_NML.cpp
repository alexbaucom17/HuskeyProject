// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:55 -0500
//  From Template/Script: data_templates/NMLClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <stdio.h>
// main rcslib header
#include <nml.hh>
// cms updater header
#include <cms_up.hh>
#include <cms_pup.hh>

#include <common/Error.h>
#include <common/Log.h>
#include <common/Common.h>
#include <common/DataTypeInfo.h>

#include "smach_msgs_gencpp_NML.h"
#include "smach_msgs_gencpp_Library.h"
#include <messaging/nml/NMLSupport.h>
#include <interfaces/MessageFactoryInterface.h>

#include <SmachContainerInitialStatusCmd.h>
#include <SmachContainerStatus.h>
#include <SmachContainerStructure.h>

#include <boost/iostreams/stream_buffer.hpp>
#include <boost/iostreams/stream.hpp>

#include <boost/serialization/serialization.hpp>
#include <opensource/eos/archive/portable_iarchive.hpp>
#include <opensource/eos/archive/portable_oarchive.hpp>

using namespace std;
using namespace smach_msgs;

rframe::NMLMessageFactory * NML_smach_msgs_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        NML_smach_msgs_gencppfactory = new smach_msgs_gencppNMLMessageFactory();
        return NML_smach_msgs_gencppfactory;
    };
}

rframe::NMLMessageFactory * smach_msgs::allocate_smach_msgs_gencpp()
{
    NML_smach_msgs_gencppfactory = new smach_msgs_gencppNMLMessageFactory();
    return NML_smach_msgs_gencppfactory;
};

smach_msgs_gencppNMLMessageFactory::smach_msgs_gencppNMLMessageFactory()
{
    name("smach_msgs_gencpp");
    // use constructor to register data types
    smach_msgs::registerLibrary();
}

smach_msgs_gencppNMLMessageFactory::~smach_msgs_gencppNMLMessageFactory()
{
}

NML_FORMAT_PTR smach_msgs_gencppNMLMessageFactory::FormatPointer()
{
    return smach_msgs_gencpp_format;
}

int smach_msgs_gencppNMLMessageFactory::dataType(NMLmsg & msg)
{
    return msg.type;
}

void smach_msgs_gencppNMLMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(SmachContainerInitialStatusCmd::ID);
    info.name(SmachContainerInitialStatusCmd::DATA_TYPE_FULL_NAME);
    info.hashKey(SmachContainerInitialStatusCmd::DATA_VERSION);
    info.md5Key(SmachContainerInitialStatusCmd::VERSION_MD5);
    info.xmlSource(SmachContainerInitialStatusCmd::XML_SOURCE);
    info.flat(SmachContainerInitialStatusCmd::dataTypeFlat());
    ids.push_back(info);

    info.id(SmachContainerStatus::ID);
    info.name(SmachContainerStatus::DATA_TYPE_FULL_NAME);
    info.hashKey(SmachContainerStatus::DATA_VERSION);
    info.md5Key(SmachContainerStatus::VERSION_MD5);
    info.xmlSource(SmachContainerStatus::XML_SOURCE);
    info.flat(SmachContainerStatus::dataTypeFlat());
    ids.push_back(info);

    info.id(SmachContainerStructure::ID);
    info.name(SmachContainerStructure::DATA_TYPE_FULL_NAME);
    info.hashKey(SmachContainerStructure::DATA_VERSION);
    info.md5Key(SmachContainerStructure::VERSION_MD5);
    info.xmlSource(SmachContainerStructure::XML_SOURCE);
    info.flat(SmachContainerStructure::dataTypeFlat());
    ids.push_back(info);

}

int smach_msgs_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<NMLmsg> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case SmachContainerInitialStatusCmd::ID:
        {
            //SmachContainerInitialStatusCmdNML * newmsg = new SmachContainerInitialStatusCmdNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new SmachContainerInitialStatusCmdNML(),std::bind(&smach_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case SmachContainerStatus::ID:
        {
            //SmachContainerStatusNML * newmsg = new SmachContainerStatusNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new SmachContainerStatusNML(),std::bind(&smach_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case SmachContainerStructure::ID:
        {
            //SmachContainerStructureNML * newmsg = new SmachContainerStructureNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new SmachContainerStructureNML(),std::bind(&smach_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int smach_msgs_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case SmachContainerInitialStatusCmd::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SmachContainerInitialStatusCmd>(),std::bind(&smach_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SmachContainerStatus::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SmachContainerStatus>(),std::bind(&smach_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SmachContainerStructure::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SmachContainerStructure>(),std::bind(&smach_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int smach_msgs_gencppNMLMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    delete msg;

    return retval;
}

int smach_msgs_gencppNMLMessageFactory::deallocateTransport(NMLmsg * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        switch (msg->type)
        { 
            case SmachContainerInitialStatusCmd::ID:
            {
                SmachContainerInitialStatusCmdNML * tempmsg = static_cast<SmachContainerInitialStatusCmdNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case SmachContainerStatus::ID:
            {
                SmachContainerStatusNML * tempmsg = static_cast<SmachContainerStatusNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case SmachContainerStructure::ID:
            {
                SmachContainerStructureNML * tempmsg = static_cast<SmachContainerStructureNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            default:
            {
                retval = Error::NOT_FOUND;
                break;
            }
        }
    }

    return retval;
}

int smach_msgs_gencppNMLMessageFactory::toTransport(MessageBase & src, NMLmsg & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)dst.type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.type)
        { 
            case SmachContainerInitialStatusCmd::ID:
            {
                SmachContainerInitialStatusCmdNML & tempDst = static_cast<SmachContainerInitialStatusCmdNML&>(dst);
                Message<SmachContainerInitialStatusCmd > & tempSrc = static_cast<Message<SmachContainerInitialStatusCmd>&>(src);

                if (tempSrc.version() != SmachContainerInitialStatusCmd::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of SmachContainerInitialStatusCmd: " << __FILE__ << " expected: " 
                             << SmachContainerInitialStatusCmd::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of SmachContainerInitialStatusCmd: " << __FILE__ << " expected: " 
                         << SmachContainerInitialStatusCmd::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case SmachContainerStatus::ID:
            {
                SmachContainerStatusNML & tempDst = static_cast<SmachContainerStatusNML&>(dst);
                Message<SmachContainerStatus > & tempSrc = static_cast<Message<SmachContainerStatus>&>(src);

                if (tempSrc.version() != SmachContainerStatus::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of SmachContainerStatus: " << __FILE__ << " expected: " 
                             << SmachContainerStatus::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of SmachContainerStatus: " << __FILE__ << " expected: " 
                         << SmachContainerStatus::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case SmachContainerStructure::ID:
            {
                SmachContainerStructureNML & tempDst = static_cast<SmachContainerStructureNML&>(dst);
                Message<SmachContainerStructure > & tempSrc = static_cast<Message<SmachContainerStructure>&>(src);

                if (tempSrc.version() != SmachContainerStructure::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of SmachContainerStructure: " << __FILE__ << " expected: " 
                             << SmachContainerStructure::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of SmachContainerStructure: " << __FILE__ << " expected: " 
                         << SmachContainerStructure::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int smach_msgs_gencppNMLMessageFactory::fromTransport(NMLmsg & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.type)
        { 
            case SmachContainerInitialStatusCmd::ID:
            {
                SmachContainerInitialStatusCmdNML & tempSrc = static_cast<SmachContainerInitialStatusCmdNML&>(src);
                Message<SmachContainerInitialStatusCmd > & tempDst = static_cast<Message<SmachContainerInitialStatusCmd>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (SmachContainerInitialStatusCmd::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case SmachContainerStatus::ID:
            {
                SmachContainerStatusNML & tempSrc = static_cast<SmachContainerStatusNML&>(src);
                Message<SmachContainerStatus > & tempDst = static_cast<Message<SmachContainerStatus>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (SmachContainerStatus::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case SmachContainerStructure::ID:
            {
                SmachContainerStructureNML & tempSrc = static_cast<SmachContainerStructureNML&>(src);
                Message<SmachContainerStructure > & tempDst = static_cast<Message<SmachContainerStructure>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (SmachContainerStructure::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int smach_msgs_gencppNMLMessageFactory::constructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    switch (id)
    { 
        case SmachContainerInitialStatusCmd::ID:
        {
            // only need to construct if data type is not flat
            if (SmachContainerInitialStatusCmd::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing SmachContainerInitialStatusCmd at %p\n",buffer);
                SmachContainerInitialStatusCmdNML * p = static_cast<SmachContainerInitialStatusCmdNML*>(buffer);
                // construct the type at pointer p
                new (p) SmachContainerInitialStatusCmdNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing SmachContainerInitialStatusCmd at %p,, is flat\n",buffer);
            }
            break;
        } 
        case SmachContainerStatus::ID:
        {
            // only need to construct if data type is not flat
            if (SmachContainerStatus::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing SmachContainerStatus at %p\n",buffer);
                SmachContainerStatusNML * p = static_cast<SmachContainerStatusNML*>(buffer);
                // construct the type at pointer p
                new (p) SmachContainerStatusNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing SmachContainerStatus at %p,, is flat\n",buffer);
            }
            break;
        } 
        case SmachContainerStructure::ID:
        {
            // only need to construct if data type is not flat
            if (SmachContainerStructure::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing SmachContainerStructure at %p\n",buffer);
                SmachContainerStructureNML * p = static_cast<SmachContainerStructureNML*>(buffer);
                // construct the type at pointer p
                new (p) SmachContainerStructureNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing SmachContainerStructure at %p,, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

int smach_msgs_gencppNMLMessageFactory::destructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    if (buffer == nullptr) return retval;

    switch (id)
    { 
        case SmachContainerInitialStatusCmd::ID:
        {
            // only need to destruct if data type is not flat
            if (SmachContainerInitialStatusCmd::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing SmachContainerInitialStatusCmd at %p\n",buffer);
                SmachContainerInitialStatusCmdNML * p = static_cast<SmachContainerInitialStatusCmdNML*>(buffer);
                p->~SmachContainerInitialStatusCmdNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction SmachContainerInitialStatusCmd at %p, is flat\n",buffer);
            }
            break;
        } 
        case SmachContainerStatus::ID:
        {
            // only need to destruct if data type is not flat
            if (SmachContainerStatus::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing SmachContainerStatus at %p\n",buffer);
                SmachContainerStatusNML * p = static_cast<SmachContainerStatusNML*>(buffer);
                p->~SmachContainerStatusNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction SmachContainerStatus at %p, is flat\n",buffer);
            }
            break;
        } 
        case SmachContainerStructure::ID:
        {
            // only need to destruct if data type is not flat
            if (SmachContainerStructure::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing SmachContainerStructure at %p\n",buffer);
                SmachContainerStructureNML * p = static_cast<SmachContainerStructureNML*>(buffer);
                p->~SmachContainerStructureNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction SmachContainerStructure at %p, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

void smach_msgs::nmlupdate(CMS * cms, SmachContainerInitialStatusCmd & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate SmachContainerInitialStatusCmd, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.path);
        nmlupdate(cms,inobj.initial_states);
        nmlupdate(cms,inobj.local_data);

    }  
 }

SmachContainerInitialStatusCmdNML::SmachContainerInitialStatusCmdNML() : NMLmsg((NMLTYPE)SmachContainerInitialStatusCmd::ID,sizeof(SmachContainerInitialStatusCmdNML)), nmlVersion(SmachContainerInitialStatusCmd::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new SmachContainerInitialStatusCmd()*/)
{
};

SmachContainerInitialStatusCmdNML::~SmachContainerInitialStatusCmdNML()
{
};

SmachContainerInitialStatusCmdNML & SmachContainerInitialStatusCmdNML::operator=(const SmachContainerInitialStatusCmdNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

SmachContainerInitialStatusCmdNML & SmachContainerInitialStatusCmdNML::operator=(const SmachContainerInitialStatusCmd & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(SmachContainerInitialStatusCmd);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void SmachContainerInitialStatusCmdNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<SmachContainerInitialStatusCmd&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: SmachContainerInitialStatusCmdNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<SmachContainerInitialStatusCmd> temp(new SmachContainerInitialStatusCmd());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: smach_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (SmachContainerInitialStatusCmd::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: SmachContainerInitialStatusCmd Message version mismatch, expected " << SmachContainerInitialStatusCmd::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: SmachContainerInitialStatusCmd Message version mismatch, expected " << SmachContainerInitialStatusCmd::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void smach_msgs::nmlupdate(CMS * cms, SmachContainerStatus & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate SmachContainerStatus, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.header);
        nmlupdate(cms,inobj.path);
        nmlupdate(cms,inobj.initial_states);
        nmlupdate(cms,inobj.active_states);
        nmlupdate(cms,inobj.local_data);
        nmlupdate(cms,inobj.info);

    }  
 }

SmachContainerStatusNML::SmachContainerStatusNML() : NMLmsg((NMLTYPE)SmachContainerStatus::ID,sizeof(SmachContainerStatusNML)), nmlVersion(SmachContainerStatus::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new SmachContainerStatus()*/)
{
};

SmachContainerStatusNML::~SmachContainerStatusNML()
{
};

SmachContainerStatusNML & SmachContainerStatusNML::operator=(const SmachContainerStatusNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

SmachContainerStatusNML & SmachContainerStatusNML::operator=(const SmachContainerStatus & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(SmachContainerStatus);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void SmachContainerStatusNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<SmachContainerStatus&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: SmachContainerStatusNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<SmachContainerStatus> temp(new SmachContainerStatus());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: smach_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (SmachContainerStatus::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: SmachContainerStatus Message version mismatch, expected " << SmachContainerStatus::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: SmachContainerStatus Message version mismatch, expected " << SmachContainerStatus::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void smach_msgs::nmlupdate(CMS * cms, SmachContainerStructure & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate SmachContainerStructure, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.header);
        nmlupdate(cms,inobj.path);
        nmlupdate(cms,inobj.children);
        nmlupdate(cms,inobj.internal_outcomes);
        nmlupdate(cms,inobj.outcomes_from);
        nmlupdate(cms,inobj.outcomes_to);
        nmlupdate(cms,inobj.container_outcomes);

    }  
 }

SmachContainerStructureNML::SmachContainerStructureNML() : NMLmsg((NMLTYPE)SmachContainerStructure::ID,sizeof(SmachContainerStructureNML)), nmlVersion(SmachContainerStructure::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new SmachContainerStructure()*/)
{
};

SmachContainerStructureNML::~SmachContainerStructureNML()
{
};

SmachContainerStructureNML & SmachContainerStructureNML::operator=(const SmachContainerStructureNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

SmachContainerStructureNML & SmachContainerStructureNML::operator=(const SmachContainerStructure & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(SmachContainerStructure);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void SmachContainerStructureNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<SmachContainerStructure&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: SmachContainerStructureNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<SmachContainerStructure> temp(new SmachContainerStructure());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: smach_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (SmachContainerStructure::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: SmachContainerStructure Message version mismatch, expected " << SmachContainerStructure::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: SmachContainerStructure Message version mismatch, expected " << SmachContainerStructure::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

int smach_msgs::smach_msgs_gencpp_format(NMLTYPE type, void * buffer, CMS* cms)
{
    int retval = 1;
    int retval2 = rframe::Error::SUCCESS;

          //printf("smach_msgs_gencpp_format: buffer parameters: type: %d, %p, encode: %d\n",(int)type, buffer,cms->mode);

    switch (type)
    { 
        case 0:
        {
            // do nothing, 0 is passed in on buffer creation
            break;
        }
        case SmachContainerInitialStatusCmd::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for SmachContainerInitialStatusCmd, id " << SmachContainerInitialStatusCmd::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_smach_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"smach_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((SmachContainerInitialStatusCmdNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case SmachContainerStatus::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for SmachContainerStatus, id " << SmachContainerStatus::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_smach_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"smach_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((SmachContainerStatusNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case SmachContainerStructure::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for SmachContainerStructure, id " << SmachContainerStructure::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_smach_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"smach_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((SmachContainerStructureNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        }                   
        default:
        {

            retval = 0;
            break;
        }
    }

          //   printf("format done\n");
    return retval;
}


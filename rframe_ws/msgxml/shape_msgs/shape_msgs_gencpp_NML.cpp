// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:07 -0500
//  From Template/Script: data_templates/NMLClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <stdio.h>
// main rcslib header
#include <nml.hh>
// cms updater header
#include <cms_up.hh>
#include <cms_pup.hh>

#include <common/Error.h>
#include <common/Log.h>
#include <common/Common.h>
#include <common/DataTypeInfo.h>

#include "shape_msgs_gencpp_NML.h"
#include "shape_msgs_gencpp_Library.h"
#include <messaging/nml/NMLSupport.h>
#include <interfaces/MessageFactoryInterface.h>

#include <Mesh.h>
#include <MeshTriangle.h>
#include <Plane.h>
#include <SolidPrimitive.h>

#include <boost/iostreams/stream_buffer.hpp>
#include <boost/iostreams/stream.hpp>

#include <boost/serialization/serialization.hpp>
#include <opensource/eos/archive/portable_iarchive.hpp>
#include <opensource/eos/archive/portable_oarchive.hpp>

using namespace std;
using namespace shape_msgs;

rframe::NMLMessageFactory * NML_shape_msgs_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        NML_shape_msgs_gencppfactory = new shape_msgs_gencppNMLMessageFactory();
        return NML_shape_msgs_gencppfactory;
    };
}

rframe::NMLMessageFactory * shape_msgs::allocate_shape_msgs_gencpp()
{
    NML_shape_msgs_gencppfactory = new shape_msgs_gencppNMLMessageFactory();
    return NML_shape_msgs_gencppfactory;
};

shape_msgs_gencppNMLMessageFactory::shape_msgs_gencppNMLMessageFactory()
{
    name("shape_msgs_gencpp");
    // use constructor to register data types
    shape_msgs::registerLibrary();
}

shape_msgs_gencppNMLMessageFactory::~shape_msgs_gencppNMLMessageFactory()
{
}

NML_FORMAT_PTR shape_msgs_gencppNMLMessageFactory::FormatPointer()
{
    return shape_msgs_gencpp_format;
}

int shape_msgs_gencppNMLMessageFactory::dataType(NMLmsg & msg)
{
    return msg.type;
}

void shape_msgs_gencppNMLMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(Mesh::ID);
    info.name(Mesh::DATA_TYPE_FULL_NAME);
    info.hashKey(Mesh::DATA_VERSION);
    info.md5Key(Mesh::VERSION_MD5);
    info.xmlSource(Mesh::XML_SOURCE);
    info.flat(Mesh::dataTypeFlat());
    ids.push_back(info);

    info.id(MeshTriangle::ID);
    info.name(MeshTriangle::DATA_TYPE_FULL_NAME);
    info.hashKey(MeshTriangle::DATA_VERSION);
    info.md5Key(MeshTriangle::VERSION_MD5);
    info.xmlSource(MeshTriangle::XML_SOURCE);
    info.flat(MeshTriangle::dataTypeFlat());
    ids.push_back(info);

    info.id(Plane::ID);
    info.name(Plane::DATA_TYPE_FULL_NAME);
    info.hashKey(Plane::DATA_VERSION);
    info.md5Key(Plane::VERSION_MD5);
    info.xmlSource(Plane::XML_SOURCE);
    info.flat(Plane::dataTypeFlat());
    ids.push_back(info);

    info.id(SolidPrimitive::ID);
    info.name(SolidPrimitive::DATA_TYPE_FULL_NAME);
    info.hashKey(SolidPrimitive::DATA_VERSION);
    info.md5Key(SolidPrimitive::VERSION_MD5);
    info.xmlSource(SolidPrimitive::XML_SOURCE);
    info.flat(SolidPrimitive::dataTypeFlat());
    ids.push_back(info);

}

int shape_msgs_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<NMLmsg> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case Mesh::ID:
        {
            //MeshNML * newmsg = new MeshNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new MeshNML(),std::bind(&shape_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case MeshTriangle::ID:
        {
            //MeshTriangleNML * newmsg = new MeshTriangleNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new MeshTriangleNML(),std::bind(&shape_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case Plane::ID:
        {
            //PlaneNML * newmsg = new PlaneNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new PlaneNML(),std::bind(&shape_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case SolidPrimitive::ID:
        {
            //SolidPrimitiveNML * newmsg = new SolidPrimitiveNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new SolidPrimitiveNML(),std::bind(&shape_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int shape_msgs_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case Mesh::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<Mesh>(),std::bind(&shape_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case MeshTriangle::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<MeshTriangle>(),std::bind(&shape_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case Plane::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<Plane>(),std::bind(&shape_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SolidPrimitive::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SolidPrimitive>(),std::bind(&shape_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int shape_msgs_gencppNMLMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    delete msg;

    return retval;
}

int shape_msgs_gencppNMLMessageFactory::deallocateTransport(NMLmsg * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        switch (msg->type)
        { 
            case Mesh::ID:
            {
                MeshNML * tempmsg = static_cast<MeshNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case MeshTriangle::ID:
            {
                MeshTriangleNML * tempmsg = static_cast<MeshTriangleNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case Plane::ID:
            {
                PlaneNML * tempmsg = static_cast<PlaneNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case SolidPrimitive::ID:
            {
                SolidPrimitiveNML * tempmsg = static_cast<SolidPrimitiveNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            default:
            {
                retval = Error::NOT_FOUND;
                break;
            }
        }
    }

    return retval;
}

int shape_msgs_gencppNMLMessageFactory::toTransport(MessageBase & src, NMLmsg & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)dst.type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.type)
        { 
            case Mesh::ID:
            {
                MeshNML & tempDst = static_cast<MeshNML&>(dst);
                Message<Mesh > & tempSrc = static_cast<Message<Mesh>&>(src);

                if (tempSrc.version() != Mesh::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of Mesh: " << __FILE__ << " expected: " 
                             << Mesh::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of Mesh: " << __FILE__ << " expected: " 
                         << Mesh::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case MeshTriangle::ID:
            {
                MeshTriangleNML & tempDst = static_cast<MeshTriangleNML&>(dst);
                Message<MeshTriangle > & tempSrc = static_cast<Message<MeshTriangle>&>(src);

                if (tempSrc.version() != MeshTriangle::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of MeshTriangle: " << __FILE__ << " expected: " 
                             << MeshTriangle::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of MeshTriangle: " << __FILE__ << " expected: " 
                         << MeshTriangle::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case Plane::ID:
            {
                PlaneNML & tempDst = static_cast<PlaneNML&>(dst);
                Message<Plane > & tempSrc = static_cast<Message<Plane>&>(src);

                if (tempSrc.version() != Plane::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of Plane: " << __FILE__ << " expected: " 
                             << Plane::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of Plane: " << __FILE__ << " expected: " 
                         << Plane::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case SolidPrimitive::ID:
            {
                SolidPrimitiveNML & tempDst = static_cast<SolidPrimitiveNML&>(dst);
                Message<SolidPrimitive > & tempSrc = static_cast<Message<SolidPrimitive>&>(src);

                if (tempSrc.version() != SolidPrimitive::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of SolidPrimitive: " << __FILE__ << " expected: " 
                             << SolidPrimitive::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of SolidPrimitive: " << __FILE__ << " expected: " 
                         << SolidPrimitive::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int shape_msgs_gencppNMLMessageFactory::fromTransport(NMLmsg & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.type)
        { 
            case Mesh::ID:
            {
                MeshNML & tempSrc = static_cast<MeshNML&>(src);
                Message<Mesh > & tempDst = static_cast<Message<Mesh>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (Mesh::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case MeshTriangle::ID:
            {
                MeshTriangleNML & tempSrc = static_cast<MeshTriangleNML&>(src);
                Message<MeshTriangle > & tempDst = static_cast<Message<MeshTriangle>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (MeshTriangle::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case Plane::ID:
            {
                PlaneNML & tempSrc = static_cast<PlaneNML&>(src);
                Message<Plane > & tempDst = static_cast<Message<Plane>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (Plane::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case SolidPrimitive::ID:
            {
                SolidPrimitiveNML & tempSrc = static_cast<SolidPrimitiveNML&>(src);
                Message<SolidPrimitive > & tempDst = static_cast<Message<SolidPrimitive>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (SolidPrimitive::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int shape_msgs_gencppNMLMessageFactory::constructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    switch (id)
    { 
        case Mesh::ID:
        {
            // only need to construct if data type is not flat
            if (Mesh::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing Mesh at %p\n",buffer);
                MeshNML * p = static_cast<MeshNML*>(buffer);
                // construct the type at pointer p
                new (p) MeshNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing Mesh at %p,, is flat\n",buffer);
            }
            break;
        } 
        case MeshTriangle::ID:
        {
            // only need to construct if data type is not flat
            if (MeshTriangle::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing MeshTriangle at %p\n",buffer);
                MeshTriangleNML * p = static_cast<MeshTriangleNML*>(buffer);
                // construct the type at pointer p
                new (p) MeshTriangleNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing MeshTriangle at %p,, is flat\n",buffer);
            }
            break;
        } 
        case Plane::ID:
        {
            // only need to construct if data type is not flat
            if (Plane::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing Plane at %p\n",buffer);
                PlaneNML * p = static_cast<PlaneNML*>(buffer);
                // construct the type at pointer p
                new (p) PlaneNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing Plane at %p,, is flat\n",buffer);
            }
            break;
        } 
        case SolidPrimitive::ID:
        {
            // only need to construct if data type is not flat
            if (SolidPrimitive::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing SolidPrimitive at %p\n",buffer);
                SolidPrimitiveNML * p = static_cast<SolidPrimitiveNML*>(buffer);
                // construct the type at pointer p
                new (p) SolidPrimitiveNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing SolidPrimitive at %p,, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

int shape_msgs_gencppNMLMessageFactory::destructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    if (buffer == nullptr) return retval;

    switch (id)
    { 
        case Mesh::ID:
        {
            // only need to destruct if data type is not flat
            if (Mesh::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing Mesh at %p\n",buffer);
                MeshNML * p = static_cast<MeshNML*>(buffer);
                p->~MeshNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction Mesh at %p, is flat\n",buffer);
            }
            break;
        } 
        case MeshTriangle::ID:
        {
            // only need to destruct if data type is not flat
            if (MeshTriangle::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing MeshTriangle at %p\n",buffer);
                MeshTriangleNML * p = static_cast<MeshTriangleNML*>(buffer);
                p->~MeshTriangleNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction MeshTriangle at %p, is flat\n",buffer);
            }
            break;
        } 
        case Plane::ID:
        {
            // only need to destruct if data type is not flat
            if (Plane::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing Plane at %p\n",buffer);
                PlaneNML * p = static_cast<PlaneNML*>(buffer);
                p->~PlaneNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction Plane at %p, is flat\n",buffer);
            }
            break;
        } 
        case SolidPrimitive::ID:
        {
            // only need to destruct if data type is not flat
            if (SolidPrimitive::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing SolidPrimitive at %p\n",buffer);
                SolidPrimitiveNML * p = static_cast<SolidPrimitiveNML*>(buffer);
                p->~SolidPrimitiveNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction SolidPrimitive at %p, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

void shape_msgs::nmlupdate(CMS * cms, Mesh & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate Mesh, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.triangles);
        nmlupdate(cms,inobj.vertices);

    }  
 }

MeshNML::MeshNML() : NMLmsg((NMLTYPE)Mesh::ID,sizeof(MeshNML)), nmlVersion(Mesh::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new Mesh()*/)
{
};

MeshNML::~MeshNML()
{
};

MeshNML & MeshNML::operator=(const MeshNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

MeshNML & MeshNML::operator=(const Mesh & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(Mesh);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void MeshNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<Mesh&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: MeshNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<Mesh> temp(new Mesh());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: shape_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (Mesh::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: Mesh Message version mismatch, expected " << Mesh::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: Mesh Message version mismatch, expected " << Mesh::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void shape_msgs::nmlupdate(CMS * cms, MeshTriangle & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate MeshTriangle, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        cms->update(inobj.vertex_indices.data(),3); 

    }  
 }

MeshTriangleNML::MeshTriangleNML() : NMLmsg((NMLTYPE)MeshTriangle::ID,sizeof(MeshTriangleNML)), nmlVersion(MeshTriangle::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new MeshTriangle()*/)
{
};

MeshTriangleNML::~MeshTriangleNML()
{
};

MeshTriangleNML & MeshTriangleNML::operator=(const MeshTriangleNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

MeshTriangleNML & MeshTriangleNML::operator=(const MeshTriangle & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(MeshTriangle);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void MeshTriangleNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<MeshTriangle&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: MeshTriangleNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<MeshTriangle> temp(new MeshTriangle());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: shape_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (MeshTriangle::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: MeshTriangle Message version mismatch, expected " << MeshTriangle::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: MeshTriangle Message version mismatch, expected " << MeshTriangle::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void shape_msgs::nmlupdate(CMS * cms, Plane & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate Plane, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        cms->update(inobj.coef.data(),4); 

    }  
 }

PlaneNML::PlaneNML() : NMLmsg((NMLTYPE)Plane::ID,sizeof(PlaneNML)), nmlVersion(Plane::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new Plane()*/)
{
};

PlaneNML::~PlaneNML()
{
};

PlaneNML & PlaneNML::operator=(const PlaneNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

PlaneNML & PlaneNML::operator=(const Plane & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(Plane);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void PlaneNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<Plane&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: PlaneNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<Plane> temp(new Plane());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: shape_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (Plane::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: Plane Message version mismatch, expected " << Plane::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: Plane Message version mismatch, expected " << Plane::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void shape_msgs::nmlupdate(CMS * cms, SolidPrimitive & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate SolidPrimitive, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        cms->update(inobj.type);
        nmlupdate(cms,inobj.dimensions);

    }  
 }

SolidPrimitiveNML::SolidPrimitiveNML() : NMLmsg((NMLTYPE)SolidPrimitive::ID,sizeof(SolidPrimitiveNML)), nmlVersion(SolidPrimitive::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new SolidPrimitive()*/)
{
};

SolidPrimitiveNML::~SolidPrimitiveNML()
{
};

SolidPrimitiveNML & SolidPrimitiveNML::operator=(const SolidPrimitiveNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

SolidPrimitiveNML & SolidPrimitiveNML::operator=(const SolidPrimitive & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(SolidPrimitive);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void SolidPrimitiveNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<SolidPrimitive&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: SolidPrimitiveNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<SolidPrimitive> temp(new SolidPrimitive());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: shape_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (SolidPrimitive::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: SolidPrimitive Message version mismatch, expected " << SolidPrimitive::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: SolidPrimitive Message version mismatch, expected " << SolidPrimitive::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

int shape_msgs::shape_msgs_gencpp_format(NMLTYPE type, void * buffer, CMS* cms)
{
    int retval = 1;
    int retval2 = rframe::Error::SUCCESS;

          //printf("shape_msgs_gencpp_format: buffer parameters: type: %d, %p, encode: %d\n",(int)type, buffer,cms->mode);

    switch (type)
    { 
        case 0:
        {
            // do nothing, 0 is passed in on buffer creation
            break;
        }
        case Mesh::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for Mesh, id " << Mesh::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_shape_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"shape_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((MeshNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case MeshTriangle::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for MeshTriangle, id " << MeshTriangle::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_shape_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"shape_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((MeshTriangleNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case Plane::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for Plane, id " << Plane::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_shape_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"shape_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((PlaneNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case SolidPrimitive::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for SolidPrimitive, id " << SolidPrimitive::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_shape_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"shape_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((SolidPrimitiveNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        }                   
        default:
        {

            retval = 0;
            break;
        }
    }

          //   printf("format done\n");
    return retval;
}


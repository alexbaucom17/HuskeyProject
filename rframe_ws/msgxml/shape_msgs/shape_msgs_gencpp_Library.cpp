// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:07 -0500
//  From Template/Script: data_templates/DataLibraryTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "shape_msgs_gencpp_Library.h"
#include <common/Log.h>
#include <common/TypeRegistry.h>
#include <messaging/Message.h>

#include <shape_msgs/Mesh.h>
#include <shape_msgs/MeshTriangle.h>
#include <shape_msgs/Plane.h>
#include <shape_msgs/SolidPrimitive.h>

extern "C"
{
    /** library access method */
    int rframeRegisterDataLibrary()
    {
        return shape_msgs::registerLibrary();
    };
}

namespace shape_msgs
{

    static void deallocateMessage(MessageBase * msg)
    {
        delete msg;
    }

    static int allocateMessage(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
    {
        int retval = rframe::Error::SUCCESS;
        bool found = true;
        switch (id)
        { 
            case Mesh::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Mesh>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case MeshTriangle::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<MeshTriangle>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Plane::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Plane>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case SolidPrimitive::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<SolidPrimitive>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            default:
            {
                found = false;
            }
        }

        if (found == false)
        {
            retval = rframe::Error::PARAM_RANGE;
        }
        else if (msg.get() == NULL)
        {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else if (msg.get() != NULL)
        {
            retval = rframe::Error::SUCCESS;
        }

        return retval;
    }

    /** registry this data set with the system */
    //int register_shape_msgs_gencpp()
    int registerLibrary()
    {
        int retval = rframe::Error::SUCCESS;
        static bool registered = false;
        rframe::TypeRegistry & reg = rframe::TypeRegistry::instance();

        LOG_INFO("registering data for library: shape_msgs_gencpp");

        if (registered == false)
        {
            registered = true;

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = shape_msgs::Mesh::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<shape_msgs::Mesh>(
                    // boost::lambda::new_ptr<shape_msgs::Mesh>(),
                    [](){ return new shape_msgs::Mesh(); },
                                std::bind(allocateMessage,shape_msgs::Mesh::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Mesh");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = shape_msgs::Mesh::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(shape_msgs::Mesh::DATA_TYPE_NAME,shape_msgs::Mesh::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Mesh");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = shape_msgs::MeshTriangle::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<shape_msgs::MeshTriangle>(
                    // boost::lambda::new_ptr<shape_msgs::MeshTriangle>(),
                    [](){ return new shape_msgs::MeshTriangle(); },
                                std::bind(allocateMessage,shape_msgs::MeshTriangle::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: MeshTriangle");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = shape_msgs::MeshTriangle::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(shape_msgs::MeshTriangle::DATA_TYPE_NAME,shape_msgs::MeshTriangle::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: MeshTriangle");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = shape_msgs::Plane::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<shape_msgs::Plane>(
                    // boost::lambda::new_ptr<shape_msgs::Plane>(),
                    [](){ return new shape_msgs::Plane(); },
                                std::bind(allocateMessage,shape_msgs::Plane::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Plane");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = shape_msgs::Plane::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(shape_msgs::Plane::DATA_TYPE_NAME,shape_msgs::Plane::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Plane");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = shape_msgs::SolidPrimitive::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<shape_msgs::SolidPrimitive>(
                    // boost::lambda::new_ptr<shape_msgs::SolidPrimitive>(),
                    [](){ return new shape_msgs::SolidPrimitive(); },
                                std::bind(allocateMessage,shape_msgs::SolidPrimitive::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: SolidPrimitive");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = shape_msgs::SolidPrimitive::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(shape_msgs::SolidPrimitive::DATA_TYPE_NAME,shape_msgs::SolidPrimitive::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: SolidPrimitive");
            }

        }

        return retval;
    };

    std::string xmlSource()
    {
        return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\
<!--\
 \
  AUTOGENERATED FILE:   do not edit\
\
  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:00 -0500\
  From Template/Script: rosToXML.rb\
 \
\
-->\
<classes library_name=\"shape_msgs_gencpp\" namespace=\"shape_msgs\">\
\
<class name=\"Mesh\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"1ffdae9486cd3316a121c578b47a85cc\" rosDesc=\"# Definition of a mesh\\n\\n# list of triangles; the index values refer to positions in vertices[]\\nMeshTriangle[] triangles\\n\\n# the actual vertices that make up the mesh\\ngeometry_msgs/Point[] vertices\\n\\n================================================================================\\nMSG: shape_msgs/MeshTriangle\\n# Definition of a triangle's vertices\\nuint32[3] vertex_indices\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\" comment=\"Definition of a mesh\">\
  <field name=\"triangles\" type=\"vector(MeshTriangle)\" sourceType=\"MeshTriangle\" comment=\"the actual vertices that make up the mesh\"/>\
  <field name=\"vertices\" type=\"vector(geometry_msgs::Point)\" sourceType=\"geometry_msgs::Point\" comment=\"\"/>\
</class>\
\
<class name=\"MeshTriangle\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"23688b2e6d2de3d32fe8af104a903253\" rosDesc=\"# Definition of a triangle's vertices\\nuint32[3] vertex_indices\\n\" comment=\"Definition of a triangle's vertices\">\
  <field name=\"vertex_indices\" type=\"unsigned int\" size=\"3\" sourceType=\"uint32\" comment=\"\"/>\
</class>\
\
<class name=\"Plane\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"2c1b92ed8f31492f8e73f6a4a44ca796\" rosDesc=\"# Representation of a plane, using the plane equation ax + by + cz + d = 0\\n\\n# a := coef[0]\\n# b := coef[1]\\n# c := coef[2]\\n# d := coef[3]\\n\\nfloat64[4] coef\\n\" comment=\"Representation of a plane, using the plane equation ax + by + cz + d = 0\">\
  <field name=\"coef\" type=\"double\" size=\"4\" sourceType=\"float64\" comment=\"\"/>\
</class>\
\
<class name=\"SolidPrimitive\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"d8f8cbc74c5ff283fca29569ccefb45d\" rosDesc=\"# Define box, sphere, cylinder, cone \\n# All shapes are defined to have their bounding boxes centered around 0,0,0.\\n\\nuint8 BOX=1\\nuint8 SPHERE=2\\nuint8 CYLINDER=3\\nuint8 CONE=4\\n\\n# The type of the shape\\nuint8 type\\n\\n\\n# The dimensions of the shape\\nfloat64[] dimensions\\n\\n# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array\\n\\n# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding\\n# sides of the box.\\nuint8 BOX_X=0\\nuint8 BOX_Y=1\\nuint8 BOX_Z=2\\n\\n\\n# For the SPHERE type, only one component is used, and it gives the radius of\\n# the sphere.\\nuint8 SPHERE_RADIUS=0\\n\\n\\n# For the CYLINDER and CONE types, the center line is oriented along\\n# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component\\n# of dimensions gives the height of the cylinder (cone).  The\\n# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the\\n# radius of the base of the cylinder (cone).  Cone and cylinder\\n# primitives are defined to be circular. The tip of the cone is\\n# pointing up, along +Z axis.\\n\\nuint8 CYLINDER_HEIGHT=0\\nuint8 CYLINDER_RADIUS=1\\n\\nuint8 CONE_HEIGHT=0\\nuint8 CONE_RADIUS=1\\n\" comment=\"Define box, sphere, cylinder, cone   All shapes are defined to have their bounding boxes centered around 0,0,0.\">\
  <constant init=\"1\" name=\"BOX\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"2\" name=\"SPHERE\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"3\" name=\"CYLINDER\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"4\" name=\"CONE\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"The type of the shape\"/>\
  <field name=\"type\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"The dimensions of the shape\"/>\
  <field name=\"dimensions\" type=\"vector(double)\" sourceType=\"float64\" comment=\"The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array  For the BOX type, the X, Y, and Z dimensions are the length of the corresponding  sides of the box.\"/>\
  <constant init=\"0\" name=\"BOX_X\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"1\" name=\"BOX_Y\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"2\" name=\"BOX_Z\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"For the SPHERE type, only one component is used, and it gives the radius of  the sphere.\"/>\
  <constant init=\"0\" name=\"SPHERE_RADIUS\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"For the CYLINDER and CONE types, the center line is oriented along  the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component  of dimensions gives the height of the cylinder (cone).  The  CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the  radius of the base of the cylinder (cone).  Cone and cylinder  primitives are defined to be circular. The tip of the cone is  pointing up, along +Z axis.\"/>\
  <constant init=\"0\" name=\"CYLINDER_HEIGHT\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"1\" name=\"CYLINDER_RADIUS\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"0\" name=\"CONE_HEIGHT\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"1\" name=\"CONE_RADIUS\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
</class>\
\
<dependency name=\"geometry_msgs_gencpp\"/>\
<dependency name=\"std_msgs_gencpp\"/>\
<dependency name=\"std_srvs_gencpp\"/>\
\
</classes>\
";
    }

}; // end namespace shape_msgs


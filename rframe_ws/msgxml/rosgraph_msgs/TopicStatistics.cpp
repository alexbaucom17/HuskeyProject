// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:07 -0500
//  From Template/Script: data_templates/DataClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <math.h> // to allow use of common constants...
#include <common/Error.h>
#include "rosgraph_msgs/TopicStatistics.h"

#include <common/JsonIo.h> // include here so container types are included by the class header 

using namespace std;

const unsigned int rosgraph_msgs::TopicStatistics::ID;
const unsigned int rosgraph_msgs::TopicStatistics::DATA_VERSION;
const std::string rosgraph_msgs::TopicStatistics::DATA_TYPE_NAME = "TopicStatistics";
const std::string rosgraph_msgs::TopicStatistics::DATA_TYPE_FULL_NAME = "rosgraph_msgs::TopicStatistics";
const std::string rosgraph_msgs::TopicStatistics::VERSION_MD5 = "4713286ce40c1d9b101e835c887ef3cb";
/* xml source for this class */
const std::string rosgraph_msgs::TopicStatistics::XML_SOURCE = "<class name=\"TopicStatistics\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"10152ed868c5097a5e2e4a89d7daa710\" rosDesc=\"# name of the topic\\nstring topic\\n\\n# node id of the publisher\\nstring node_pub\\n\\n# node id of the subscriber\\nstring node_sub\\n\\n# the statistics apply to this time window\\ntime window_start\\ntime window_stop\\n\\n# number of messages delivered during the window\\nint32 delivered_msgs\\n# numbers of messages dropped during the window\\nint32 dropped_msgs\\n\\n# traffic during the window, in bytes\\nint32 traffic\\n\\n# mean/stddev/max period between two messages\\nduration period_mean\\nduration period_stddev\\nduration period_max\\n\\n# mean/stddev/max age of the message based on the\\n# timestamp in the message header. In case the\\n# message does not have a header, it will be 0.\\nduration stamp_age_mean\\nduration stamp_age_stddev\\nduration stamp_age_max\\n\" comment=\"name of the topic\" id=\"571172704\">\
  <field name=\"topic\" type=\"string\" sourceType=\"string\" comment=\"node id of the publisher\"/>\
  <field name=\"node_pub\" type=\"string\" sourceType=\"string\" comment=\"node id of the subscriber\"/>\
  <field name=\"node_sub\" type=\"string\" sourceType=\"string\" comment=\"the statistics apply to this time window\"/>\
  <field name=\"window_start\" type=\"std_msgs::RosTime\" sourceType=\"time\" comment=\"\"/>\
  <field name=\"window_stop\" type=\"std_msgs::RosTime\" sourceType=\"time\" comment=\"number of messages delivered during the window\"/>\
  <field name=\"delivered_msgs\" type=\"int\" sourceType=\"int32\" comment=\"numbers of messages dropped during the window\"/>\
  <field name=\"dropped_msgs\" type=\"int\" sourceType=\"int32\" comment=\"traffic during the window, in bytes\"/>\
  <field name=\"traffic\" type=\"int\" sourceType=\"int32\" comment=\"mean/stddev/max period between two messages\"/>\
  <field name=\"period_mean\" type=\"std_msgs::RosDuration\" sourceType=\"duration\" comment=\"\"/>\
  <field name=\"period_stddev\" type=\"std_msgs::RosDuration\" sourceType=\"duration\" comment=\"\"/>\
  <field name=\"period_max\" type=\"std_msgs::RosDuration\" sourceType=\"duration\" comment=\"mean/stddev/max age of the message based on the  timestamp in the message header. In case the  message does not have a header, it will be 0.\"/>\
  <field name=\"stamp_age_mean\" type=\"std_msgs::RosDuration\" sourceType=\"duration\" comment=\"\"/>\
  <field name=\"stamp_age_stddev\" type=\"std_msgs::RosDuration\" sourceType=\"duration\" comment=\"\"/>\
  <field name=\"stamp_age_max\" type=\"std_msgs::RosDuration\" sourceType=\"duration\" comment=\"\"/>\
</class>";

rosgraph_msgs::TopicStatistics::TopicStatistics() : topic(), node_pub(), node_sub(), window_start(), window_stop(), delivered_msgs(0), dropped_msgs(0), traffic(0), period_mean(), period_stddev(), period_max(), stamp_age_mean(), stamp_age_stddev(), stamp_age_max()
{  
};

rosgraph_msgs::TopicStatistics::TopicStatistics(const rosgraph_msgs::TopicStatistics & inobj) : topic(inobj.topic), node_pub(inobj.node_pub), node_sub(inobj.node_sub), window_start(inobj.window_start), window_stop(inobj.window_stop), delivered_msgs(inobj.delivered_msgs), dropped_msgs(inobj.dropped_msgs), traffic(inobj.traffic), period_mean(inobj.period_mean), period_stddev(inobj.period_stddev), period_max(inobj.period_max), stamp_age_mean(inobj.stamp_age_mean), stamp_age_stddev(inobj.stamp_age_stddev), stamp_age_max(inobj.stamp_age_max)
{
};

rosgraph_msgs::TopicStatistics::~TopicStatistics()
{
};

rosgraph_msgs::TopicStatistics * rosgraph_msgs::TopicStatistics::New()
{ 
    return new TopicStatistics();
};

bool rosgraph_msgs::TopicStatistics::dataTypeFlat() 
{  
    return std_msgs::RosTime::dataTypeFlat() && std_msgs::RosDuration::dataTypeFlat() && rframe::CodeGenTraits<std::string>::flat();

};

rosgraph_msgs::TopicStatistics & rosgraph_msgs::TopicStatistics::operator=(const rosgraph_msgs::TopicStatistics & inobj)
{
    if (this != &inobj)
    {

        // if datatype is flat, optimize with memcpy (complier level optimiation)
              /*  if (dataTypeFlat() == true)
                  REMOVED invalid when assigning from a parent type as this is the pointer to the derived type, thus rosgraph_msgs::TopicStatistics is copied to the wrong location

        {
            memcpy(this,&inobj,sizeof(rosgraph_msgs::TopicStatistics));
        }
        else */ 
        {

            topic = inobj.topic;
            node_pub = inobj.node_pub;
            node_sub = inobj.node_sub;
            window_start = inobj.window_start;
            window_stop = inobj.window_stop;
            delivered_msgs = inobj.delivered_msgs;
            dropped_msgs = inobj.dropped_msgs;
            traffic = inobj.traffic;
            period_mean = inobj.period_mean;
            period_stddev = inobj.period_stddev;
            period_max = inobj.period_max;
            stamp_age_mean = inobj.stamp_age_mean;
            stamp_age_stddev = inobj.stamp_age_stddev;
            stamp_age_max = inobj.stamp_age_max;
        }
    }

    return *this;
}

bool rosgraph_msgs::TopicStatistics::operator==(const rosgraph_msgs::TopicStatistics & inobj) const
{
    bool ret = true;

    if (this != &inobj)
    { 
        ret = ret 
             && (topic == inobj.topic)
             && (node_pub == inobj.node_pub)
             && (node_sub == inobj.node_sub)
             && (window_start == inobj.window_start)
             && (window_stop == inobj.window_stop)
             && (delivered_msgs == inobj.delivered_msgs)
             && (dropped_msgs == inobj.dropped_msgs)
             && (traffic == inobj.traffic)
             && (period_mean == inobj.period_mean)
             && (period_stddev == inobj.period_stddev)
             && (period_max == inobj.period_max)
             && (stamp_age_mean == inobj.stamp_age_mean)
             && (stamp_age_stddev == inobj.stamp_age_stddev)
             && (stamp_age_max == inobj.stamp_age_max);
    }

    return ret;
}

bool rosgraph_msgs::TopicStatistics::operator!=(const rosgraph_msgs::TopicStatistics & inobj) const
{
    bool ret = false;

    if (this != &inobj)
    {
        ret = !operator==(inobj);
    }

    return ret;
}

bool rosgraph_msgs::TopicStatistics::operator<(const rosgraph_msgs::TopicStatistics & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {  
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (topic < inobj.topic) return true;
        if (inobj.topic <  topic) return false; 
        if (node_pub < inobj.node_pub) return true;
        if (inobj.node_pub <  node_pub) return false; 
        if (node_sub < inobj.node_sub) return true;
        if (inobj.node_sub <  node_sub) return false; 
        if (window_start < inobj.window_start) return true;
        if (inobj.window_start <  window_start) return false; 
        if (window_stop < inobj.window_stop) return true;
        if (inobj.window_stop <  window_stop) return false; 
        if (delivered_msgs < inobj.delivered_msgs) return true;
        if (inobj.delivered_msgs <  delivered_msgs) return false; 
        if (dropped_msgs < inobj.dropped_msgs) return true;
        if (inobj.dropped_msgs <  dropped_msgs) return false; 
        if (traffic < inobj.traffic) return true;
        if (inobj.traffic <  traffic) return false; 
        if (period_mean < inobj.period_mean) return true;
        if (inobj.period_mean <  period_mean) return false; 
        if (period_stddev < inobj.period_stddev) return true;
        if (inobj.period_stddev <  period_stddev) return false; 
        if (period_max < inobj.period_max) return true;
        if (inobj.period_max <  period_max) return false; 
        if (stamp_age_mean < inobj.stamp_age_mean) return true;
        if (inobj.stamp_age_mean <  stamp_age_mean) return false; 
        if (stamp_age_stddev < inobj.stamp_age_stddev) return true;
        if (inobj.stamp_age_stddev <  stamp_age_stddev) return false; 
        if (stamp_age_max < inobj.stamp_age_max) return true;
        if (inobj.stamp_age_max <  stamp_age_max) return false; ;
    }

    return ret;
}

bool rosgraph_msgs::TopicStatistics::operator>(const rosgraph_msgs::TopicStatistics & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (topic > inobj.topic) return true;
        if (inobj.topic >  topic) return false; 
        if (node_pub > inobj.node_pub) return true;
        if (inobj.node_pub >  node_pub) return false; 
        if (node_sub > inobj.node_sub) return true;
        if (inobj.node_sub >  node_sub) return false; 
        if (window_start > inobj.window_start) return true;
        if (inobj.window_start >  window_start) return false; 
        if (window_stop > inobj.window_stop) return true;
        if (inobj.window_stop >  window_stop) return false; 
        if (delivered_msgs > inobj.delivered_msgs) return true;
        if (inobj.delivered_msgs >  delivered_msgs) return false; 
        if (dropped_msgs > inobj.dropped_msgs) return true;
        if (inobj.dropped_msgs >  dropped_msgs) return false; 
        if (traffic > inobj.traffic) return true;
        if (inobj.traffic >  traffic) return false; 
        if (period_mean > inobj.period_mean) return true;
        if (inobj.period_mean >  period_mean) return false; 
        if (period_stddev > inobj.period_stddev) return true;
        if (inobj.period_stddev >  period_stddev) return false; 
        if (period_max > inobj.period_max) return true;
        if (inobj.period_max >  period_max) return false; 
        if (stamp_age_mean > inobj.stamp_age_mean) return true;
        if (inobj.stamp_age_mean >  stamp_age_mean) return false; 
        if (stamp_age_stddev > inobj.stamp_age_stddev) return true;
        if (inobj.stamp_age_stddev >  stamp_age_stddev) return false; 
        if (stamp_age_max > inobj.stamp_age_max) return true;
        if (inobj.stamp_age_max >  stamp_age_max) return false; ;
    }

    return ret;
}

template <> void rframe::json_io::encode(std::stringstream & sstr, const char * name, const rosgraph_msgs::TopicStatistics & t, std::string & indent, bool lastItem)
{
    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectStart(sstr,name,indent);

    rframe::json_io::encode(sstr,"topic",t.topic,indent,false);
    rframe::json_io::encode(sstr,"node_pub",t.node_pub,indent,false);
    rframe::json_io::encode(sstr,"node_sub",t.node_sub,indent,false);
    rframe::json_io::encode(sstr,"window_start",t.window_start,indent,false);
    rframe::json_io::encode(sstr,"window_stop",t.window_stop,indent,false);
    rframe::json_io::encode(sstr,"delivered_msgs",t.delivered_msgs,indent,false);
    rframe::json_io::encode(sstr,"dropped_msgs",t.dropped_msgs,indent,false);
    rframe::json_io::encode(sstr,"traffic",t.traffic,indent,false);
    rframe::json_io::encode(sstr,"period_mean",t.period_mean,indent,false);
    rframe::json_io::encode(sstr,"period_stddev",t.period_stddev,indent,false);
    rframe::json_io::encode(sstr,"period_max",t.period_max,indent,false);
    rframe::json_io::encode(sstr,"stamp_age_mean",t.stamp_age_mean,indent,false);
    rframe::json_io::encode(sstr,"stamp_age_stddev",t.stamp_age_stddev,indent,false);
    rframe::json_io::encode(sstr,"stamp_age_max",t.stamp_age_max,indent,true);

    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectEnd(sstr,indent,lastItem);
}

std::string rosgraph_msgs::TopicStatistics::toStr(bool pretty) const
{

    stringstream sstr;
    string indent = (pretty == true) ? "\n" : "";

    rframe::json_io::encodeObjectStartMain(sstr,indent);
    rframe::json_io::encode(sstr,"",*this,indent,true);
    rframe::json_io::encodeObjectEnd(sstr,indent,true); // false so as to  not add , at end of string

    return sstr.str();

};

std::basic_ostream<char>& operator<<(std::basic_ostream<char> &s, const rosgraph_msgs::TopicStatistics & value)
{
    return s << value.toStr(false);
}


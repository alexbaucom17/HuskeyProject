// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:07 -0500
//  From Template/Script: data_templates/ROSTemplate.h.rb
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#ifndef _CODEGEN_ROSGRAPH_MSGS_GENCPP_ROS_H_
#define _CODEGEN_ROSGRAPH_MSGS_GENCPP_ROS_H_

#include <opensource/ros/serialization.h>
#include <opensource/ros/message_traits.h>
#include <opensource/ros/message_operations.h>

#include <messaging/ros/ROSMessageFactory.h>
#include <messaging/Message.h>

namespace rframe { class DataTypeInfo; };

#include "rosgraph_msgs_gencpp_Library.h"

#include "std_msgs/std_msgs_gencpp_ROS.h"
#include "std_srvs/std_srvs_gencpp_ROS.h"

namespace rosgraph_msgs { 

    /** definition of message factory for rosgraph_msgs_gencpp */
    class rosgraph_msgs_gencppROSMessageFactory : public ROSMessageFactory
    {
    public:
        /** constructor */
        rosgraph_msgs_gencppROSMessageFactory();
        /** destructor */
        virtual ~rosgraph_msgs_gencppROSMessageFactory();

        /** see  rframe::MessageFactoryInterface */
        virtual void dataTypes(std::vector<DataTypeInfo> & ids);
        /** see  rframe::MessageFactoryInterface */
        virtual int dataType(ros::SerializedMessage & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<ros::SerializedMessage> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateTransport(ros::SerializedMessage * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateMessage(MessageBase * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int toTransport( MessageBase & src, ros::SerializedMessage & dst);
        /** see  rframe::MessageFactoryInterface */
        virtual int fromTransport( ros::SerializedMessage & src, MessageBase & dst);

		/** see rframe::ROSMessageFactory */
        virtual int typeName(std::string & str, rframe::ID_TYPE id);
		/** see rframe::ROSMessageFactory */
        virtual int desc(std::string & str, rframe::ID_TYPE id);
		/** see rframe::ROSMessageFactory */
        virtual int md5String(std::string & str, rframe::ID_TYPE id);
        /** see rframe::ROSMessageFactory */
        virtual int md5(unsigned long long & highOrder, unsigned long long & lowOrder, rframe::ID_TYPE id);
        /** see rframe::ROSMessageFactory */
		int updateHeader(rframe::MessageBase &msg, unsigned int seqNo);
    };

    /** factory allocation function for use when not dynamically loading the factory library  */
    ROSMessageFactory * allocate_rosgraph_msgs_gencpp();

}; // end namespace rosgraph_msgs

// declare ros serialization templates
namespace ros
{
  namespace serialization
  {  

      template <> struct Serializer<rosgraph_msgs::Clock>
      {
          template <typename Stream> inline static void write(Stream & stream, const rosgraph_msgs::Clock & t)
          { 
              stream.next(t.clock); 
          };

          template <typename Stream> inline static void read(Stream & stream, rosgraph_msgs::Clock & t)
          { 
              stream.next(t.clock); 
          };

          inline static uint32_t serializedLength(const rosgraph_msgs::Clock & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.clock); 
              return size;
          };
      }; // end struct Serializer<rosgraph_msgs::Clock>

      template <> struct Serializer<rosgraph_msgs::Log>
      {
          template <typename Stream> inline static void write(Stream & stream, const rosgraph_msgs::Log & t)
          { 
              stream.next(t.header); 
              stream.next(t.level); 
              stream.next(t.name); 
              stream.next(t.msg); 
              stream.next(t.file); 
              stream.next(t.function); 
              stream.next(t.line); 
              stream.next(t.topics); 
          };

          template <typename Stream> inline static void read(Stream & stream, rosgraph_msgs::Log & t)
          { 
              stream.next(t.header); 
              stream.next(t.level); 
              stream.next(t.name); 
              stream.next(t.msg); 
              stream.next(t.file); 
              stream.next(t.function); 
              stream.next(t.line); 
              stream.next(t.topics); 
          };

          inline static uint32_t serializedLength(const rosgraph_msgs::Log & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.level); 
              size += serializationLength(t.name); 
              size += serializationLength(t.msg); 
              size += serializationLength(t.file); 
              size += serializationLength(t.function); 
              size += serializationLength(t.line); 
              size += serializationLength(t.topics); 
              return size;
          };
      }; // end struct Serializer<rosgraph_msgs::Log>

      template <> struct Serializer<rosgraph_msgs::TopicStatistics>
      {
          template <typename Stream> inline static void write(Stream & stream, const rosgraph_msgs::TopicStatistics & t)
          { 
              stream.next(t.topic); 
              stream.next(t.node_pub); 
              stream.next(t.node_sub); 
              stream.next(t.window_start); 
              stream.next(t.window_stop); 
              stream.next(t.delivered_msgs); 
              stream.next(t.dropped_msgs); 
              stream.next(t.traffic); 
              stream.next(t.period_mean); 
              stream.next(t.period_stddev); 
              stream.next(t.period_max); 
              stream.next(t.stamp_age_mean); 
              stream.next(t.stamp_age_stddev); 
              stream.next(t.stamp_age_max); 
          };

          template <typename Stream> inline static void read(Stream & stream, rosgraph_msgs::TopicStatistics & t)
          { 
              stream.next(t.topic); 
              stream.next(t.node_pub); 
              stream.next(t.node_sub); 
              stream.next(t.window_start); 
              stream.next(t.window_stop); 
              stream.next(t.delivered_msgs); 
              stream.next(t.dropped_msgs); 
              stream.next(t.traffic); 
              stream.next(t.period_mean); 
              stream.next(t.period_stddev); 
              stream.next(t.period_max); 
              stream.next(t.stamp_age_mean); 
              stream.next(t.stamp_age_stddev); 
              stream.next(t.stamp_age_max); 
          };

          inline static uint32_t serializedLength(const rosgraph_msgs::TopicStatistics & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.topic); 
              size += serializationLength(t.node_pub); 
              size += serializationLength(t.node_sub); 
              size += serializationLength(t.window_start); 
              size += serializationLength(t.window_stop); 
              size += serializationLength(t.delivered_msgs); 
              size += serializationLength(t.dropped_msgs); 
              size += serializationLength(t.traffic); 
              size += serializationLength(t.period_mean); 
              size += serializationLength(t.period_stddev); 
              size += serializationLength(t.period_max); 
              size += serializationLength(t.stamp_age_mean); 
              size += serializationLength(t.stamp_age_stddev); 
              size += serializationLength(t.stamp_age_max); 
              return size;
          };
      }; // end struct Serializer<rosgraph_msgs::TopicStatistics>

  }; // namespace serialization

  namespace message_traits
  {

      template <> struct MD5Sum<rosgraph_msgs::Clock>
      {

          static const char * value() 
          { 
              return "a9c97c1d230cfc112e270351a944ee47"; 
          };

          static const uint64_t static_value1 = 0xa9c97c1d230cfc11ULL;
          static const uint64_t static_value2 = 0x2e270351a944ee47ULL;
      }; // end struct MD5Sum<rosgraph_msgs::Clock>

      template <> struct DataType<rosgraph_msgs::Clock>
      {
          static const char * value() { return "rosgraph_msgs/Clock";};
      }; // end DataType

      template <> struct Definition<rosgraph_msgs::Clock>
      {
          static const char * value()
          { 
              return "# roslib/Clock is used for publishing simulated time in ROS. \n# This message simply communicates the current time.\n# For more information, see http://www.ros.org/wiki/Clock\ntime clock\n";
          };
      };

      template <> struct MD5Sum<rosgraph_msgs::Log>
      {

          static const char * value() 
          { 
              return "acffd30cd6b6de30f120938c17c593fb"; 
          };

          static const uint64_t static_value1 = 0xacffd30cd6b6de30ULL;
          static const uint64_t static_value2 = 0xf120938c17c593fbULL;
      }; // end struct MD5Sum<rosgraph_msgs::Log>

      template <> struct DataType<rosgraph_msgs::Log>
      {
          static const char * value() { return "rosgraph_msgs/Log";};
      }; // end DataType

      template <> struct Definition<rosgraph_msgs::Log>
      {
          static const char * value()
          { 
              return "##\n## Severity level constants\n##\nbyte DEBUG=1 #debug level\nbyte INFO=2  #general level\nbyte WARN=4  #warning level\nbyte ERROR=8 #error level\nbyte FATAL=16 #fatal/critical level\n##\n## Fields\n##\nHeader header\nbyte level\nstring name # name of the node\nstring msg # message \nstring file # file the message came from\nstring function # function the message came from\nuint32 line # line the message came from\nstring[] topics # topic names that the node publishes\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n";
          };
      };

      template <> struct MD5Sum<rosgraph_msgs::TopicStatistics>
      {

          static const char * value() 
          { 
              return "10152ed868c5097a5e2e4a89d7daa710"; 
          };

          static const uint64_t static_value1 = 0x10152ed868c5097aULL;
          static const uint64_t static_value2 = 0x5e2e4a89d7daa710ULL;
      }; // end struct MD5Sum<rosgraph_msgs::TopicStatistics>

      template <> struct DataType<rosgraph_msgs::TopicStatistics>
      {
          static const char * value() { return "rosgraph_msgs/TopicStatistics";};
      }; // end DataType

      template <> struct Definition<rosgraph_msgs::TopicStatistics>
      {
          static const char * value()
          { 
              return "# name of the topic\nstring topic\n\n# node id of the publisher\nstring node_pub\n\n# node id of the subscriber\nstring node_sub\n\n# the statistics apply to this time window\ntime window_start\ntime window_stop\n\n# number of messages delivered during the window\nint32 delivered_msgs\n# numbers of messages dropped during the window\nint32 dropped_msgs\n\n# traffic during the window, in bytes\nint32 traffic\n\n# mean/stddev/max period between two messages\nduration period_mean\nduration period_stddev\nduration period_max\n\n# mean/stddev/max age of the message based on the\n# timestamp in the message header. In case the\n# message does not have a header, it will be 0.\nduration stamp_age_mean\nduration stamp_age_stddev\nduration stamp_age_max\n";
          };
      };

  }; // end namespace message_traits

}; // namespace ros

#endif // _CODEGEN_ROSGRAPH_MSGS_GENCPP_ROS_H_


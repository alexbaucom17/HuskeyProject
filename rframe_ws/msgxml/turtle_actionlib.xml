<!--
 
  AUTOGENERATED FILE:   do not edit

  Generated by:         alex on alex-laptop, 2017-01-26 12:56:44 -0500
  From Template/Script: rosToXML.rb
 

-->
<classes library_name="turtle_actionlib_gencpp" namespace="turtle_actionlib" >

<class name="ShapeAction" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="d73b17d6237a925511f5d7727a1dc903" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nShapeActionGoal action_goal\nShapeActionResult action_result\nShapeActionFeedback action_feedback\n\n================================================================================\nMSG: turtle_actionlib/ShapeActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nShapeGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: turtle_actionlib/ShapeGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#goal definition\nint32 edges\nfloat32 radius\n\n================================================================================\nMSG: turtle_actionlib/ShapeActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nShapeResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: turtle_actionlib/ShapeResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#result definition\nfloat32 interior_angle\nfloat32 apothem\n\n================================================================================\nMSG: turtle_actionlib/ShapeActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nShapeFeedback feedback\n\n================================================================================\nMSG: turtle_actionlib/ShapeFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#feedback\n\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="action_goal" type="ShapeActionGoal"  sourceType="ShapeActionGoal" comment="" />
  <field name="action_result" type="ShapeActionResult"  sourceType="ShapeActionResult" comment="" />
  <field name="action_feedback" type="ShapeActionFeedback"  sourceType="ShapeActionFeedback" comment="" />
</class>

<class name="ShapeActionFeedback" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="aae20e09065c3809e8a8e87c4c8953fd" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nShapeFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: turtle_actionlib/ShapeFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#feedback\n\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="status" type="actionlib_msgs::GoalStatus"  sourceType="actionlib_msgs::GoalStatus" comment="" />
  <field name="feedback" type="ShapeFeedback"  sourceType="ShapeFeedback" comment="" />
</class>

<class name="ShapeActionGoal" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="dbfccd187f2ec9c593916447ffd6cc77" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nShapeGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: turtle_actionlib/ShapeGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#goal definition\nint32 edges\nfloat32 radius\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="goal_id" type="actionlib_msgs::GoalID"  sourceType="actionlib_msgs::GoalID" comment="" />
  <field name="goal" type="ShapeGoal"  sourceType="ShapeGoal" comment="" />
</class>

<class name="ShapeActionResult" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="c8d13d5d140f1047a2e4d3bf5c045822" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nShapeResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: turtle_actionlib/ShapeResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#result definition\nfloat32 interior_angle\nfloat32 apothem\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="status" type="actionlib_msgs::GoalStatus"  sourceType="actionlib_msgs::GoalStatus" comment="" />
  <field name="result" type="ShapeResult"  sourceType="ShapeResult" comment="" />
</class>

<class name="ShapeFeedback" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="d41d8cd98f00b204e9800998ecf8427e" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#feedback\n\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
feedback" >
</class>

<class name="ShapeGoal" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="3b9202ab7292cebe5a95ab2bf6b9c091" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#goal definition\nint32 edges\nfloat32 radius\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
goal definition" >
  <field name="edges" type="int"  sourceType="int32" comment="" />
  <field name="radius" type="float"  sourceType="float32" comment="" />
</class>

<class name="ShapeResult" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="b06c6e2225f820dbc644270387cd1a7c" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#result definition\nfloat32 interior_angle\nfloat32 apothem\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
result definition" >
  <field name="interior_angle" type="float"  sourceType="float32" comment="" />
  <field name="apothem" type="float"  sourceType="float32" comment="" />
</class>

<class name="Velocity" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="9d5c2dcd348ac8f76ce2a4307bd63a13" rosDesc="# Copied from turtlesim https://github.com/ros/ros_tutorials/blob/f7da7779e82dcc3977b2c220a843cd86dd269832/turtlesim/msg/Velocity.msg. We had to copy this into this package since it has been replaced with geometry_msgs/Twist there and comforming to Twist requires to change code, which I doubt worth time it takes. So if you think it is, please go ahead make a patch.\n\nfloat32 linear\nfloat32 angular\n" comment="Copied from turtlesim https://github.com/ros/ros_tutorials/blob/f7da7779e82dcc3977b2c220a843cd86dd269832/turtlesim/msg/Velocity.msg. We had to copy this into this package since it has been replaced with geometry_msgs/Twist there and comforming to Twist requires to change code, which I doubt worth time it takes. So if you think it is, please go ahead make a patch." >
  <field name="linear" type="float"  sourceType="float32" comment="" />
  <field name="angular" type="float"  sourceType="float32" comment="" />
</class>

<dependency name="actionlib_msgs_gencpp"/>
<dependency name="std_msgs_gencpp"/>
<dependency name="std_srvs_gencpp"/>

</classes>

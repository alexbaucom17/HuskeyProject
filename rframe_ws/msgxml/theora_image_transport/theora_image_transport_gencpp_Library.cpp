// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 12:55:20 -0500
//  From Template/Script: data_templates/DataLibraryTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "theora_image_transport_gencpp_Library.h"
#include <common/Log.h>
#include <common/TypeRegistry.h>
#include <messaging/Message.h>

#include <theora_image_transport/Packet.h>

extern "C"
{
    /** library access method */
    int rframeRegisterDataLibrary()
    {
        return theora_image_transport::registerLibrary();
    };
}

namespace theora_image_transport
{

    static void deallocateMessage(MessageBase * msg)
    {
        delete msg;
    }

    static int allocateMessage(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
    {
        int retval = rframe::Error::SUCCESS;
        bool found = true;
        switch (id)
        { 
            case Packet::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Packet>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            default:
            {
                found = false;
            }
        }

        if (found == false)
        {
            retval = rframe::Error::PARAM_RANGE;
        }
        else if (msg.get() == NULL)
        {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else if (msg.get() != NULL)
        {
            retval = rframe::Error::SUCCESS;
        }

        return retval;
    }

    /** registry this data set with the system */
    //int register_theora_image_transport_gencpp()
    int registerLibrary()
    {
        int retval = rframe::Error::SUCCESS;
        static bool registered = false;
        rframe::TypeRegistry & reg = rframe::TypeRegistry::instance();

        LOG_INFO("registering data for library: theora_image_transport_gencpp");

        if (registered == false)
        {
            registered = true;

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = theora_image_transport::Packet::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<theora_image_transport::Packet>(
                    // boost::lambda::new_ptr<theora_image_transport::Packet>(),
                    [](){ return new theora_image_transport::Packet(); },
                                std::bind(allocateMessage,theora_image_transport::Packet::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Packet");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = theora_image_transport::Packet::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(theora_image_transport::Packet::DATA_TYPE_NAME,theora_image_transport::Packet::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Packet");
            }

        }

        return retval;
    };

    std::string xmlSource()
    {
        return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\
<!--\
 \
  AUTOGENERATED FILE:   do not edit\
\
  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 12:55:15 -0500\
  From Template/Script: rosToXML.rb\
 \
\
-->\
<classes library_name=\"theora_image_transport_gencpp\" namespace=\"theora_image_transport\">\
\
<class name=\"Packet\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"33ac4e14a7cff32e7e0d65f18bb410f3\" rosDesc=\"# ROS message adaptation of the ogg_packet struct from libogg,\\n# see http://www.xiph.org/ogg/doc/libogg/ogg_packet.html.\\n\\nHeader header     # Original sensor_msgs/Image header\\nuint8[] data      # Raw Theora packet data (combines packet and bytes fields from ogg_packet)\\nint32 b_o_s       # Flag indicating whether this packet begins a logical bitstream\\nint32 e_o_s       # Flag indicating whether this packet ends a bitstream\\nint64 granulepos  # A number indicating the position of this packet in the decoded data\\nint64 packetno    # Sequential number of this packet in the ogg bitstream\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\" comment=\"ROS message adaptation of the ogg_packet struct from libogg,  see http://www.xiph.org/ogg/doc/libogg/ogg_packet.html.\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"Original sensor_msgs/Image header\"/>\
  <field name=\"data\" type=\"vector(unsigned char)\" sourceType=\"uint8\" comment=\"Raw Theora packet data (combines packet and bytes fields from ogg_packet)\"/>\
  <field name=\"b_o_s\" type=\"int\" sourceType=\"int32\" comment=\"Flag indicating whether this packet begins a logical bitstream\"/>\
  <field name=\"e_o_s\" type=\"int\" sourceType=\"int32\" comment=\"Flag indicating whether this packet ends a bitstream\"/>\
  <field name=\"granulepos\" type=\"long long int\" sourceType=\"int64\" comment=\"A number indicating the position of this packet in the decoded data\"/>\
  <field name=\"packetno\" type=\"long long int\" sourceType=\"int64\" comment=\"Sequential number of this packet in the ogg bitstream\"/>\
</class>\
\
<dependency name=\"std_msgs_gencpp\"/>\
<dependency name=\"std_srvs_gencpp\"/>\
\
</classes>\
";
    }

}; // end namespace theora_image_transport


// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:03 -0500
//  From Template/Script: data_templates/ROSTemplate.cpp.rb
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "actionlib_tutorials_gencpp_ROS.h"
#include <common/Log.h>
#include <common/DataTypeInfo.h>

using namespace std;
using namespace actionlib_tutorials;

rframe::ROSMessageFactory * ROS_actionlib_tutorials_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        ROS_actionlib_tutorials_gencppfactory = new actionlib_tutorials_gencppROSMessageFactory();

        return ROS_actionlib_tutorials_gencppfactory;
    };
}

rframe::ROSMessageFactory * actionlib_tutorials::allocate_actionlib_tutorials_gencpp()
{
    ROS_actionlib_tutorials_gencppfactory = new actionlib_tutorials_gencppROSMessageFactory();
    return ROS_actionlib_tutorials_gencppfactory;
};

actionlib_tutorials_gencppROSMessageFactory::actionlib_tutorials_gencppROSMessageFactory()
{
    name("actionlib_tutorials_gencpp");
    // use constructor to register data types
    actionlib_tutorials::registerLibrary();
}

actionlib_tutorials_gencppROSMessageFactory::~actionlib_tutorials_gencppROSMessageFactory()
{
}

int actionlib_tutorials_gencppROSMessageFactory::dataType(ros::SerializedMessage & msg)
{
    return msg.message_type;
}

void actionlib_tutorials_gencppROSMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(AveragingAction::ID);
    info.name(AveragingAction::DATA_TYPE_FULL_NAME);
    info.hashKey(AveragingAction::DATA_VERSION);
    info.md5Key(AveragingAction::VERSION_MD5);
    info.xmlSource(AveragingAction::XML_SOURCE);
    info.flat(AveragingAction::dataTypeFlat());
    ids.push_back(info);

    info.id(AveragingActionFeedback::ID);
    info.name(AveragingActionFeedback::DATA_TYPE_FULL_NAME);
    info.hashKey(AveragingActionFeedback::DATA_VERSION);
    info.md5Key(AveragingActionFeedback::VERSION_MD5);
    info.xmlSource(AveragingActionFeedback::XML_SOURCE);
    info.flat(AveragingActionFeedback::dataTypeFlat());
    ids.push_back(info);

    info.id(AveragingActionGoal::ID);
    info.name(AveragingActionGoal::DATA_TYPE_FULL_NAME);
    info.hashKey(AveragingActionGoal::DATA_VERSION);
    info.md5Key(AveragingActionGoal::VERSION_MD5);
    info.xmlSource(AveragingActionGoal::XML_SOURCE);
    info.flat(AveragingActionGoal::dataTypeFlat());
    ids.push_back(info);

    info.id(AveragingActionResult::ID);
    info.name(AveragingActionResult::DATA_TYPE_FULL_NAME);
    info.hashKey(AveragingActionResult::DATA_VERSION);
    info.md5Key(AveragingActionResult::VERSION_MD5);
    info.xmlSource(AveragingActionResult::XML_SOURCE);
    info.flat(AveragingActionResult::dataTypeFlat());
    ids.push_back(info);

    info.id(AveragingFeedback::ID);
    info.name(AveragingFeedback::DATA_TYPE_FULL_NAME);
    info.hashKey(AveragingFeedback::DATA_VERSION);
    info.md5Key(AveragingFeedback::VERSION_MD5);
    info.xmlSource(AveragingFeedback::XML_SOURCE);
    info.flat(AveragingFeedback::dataTypeFlat());
    ids.push_back(info);

    info.id(AveragingGoal::ID);
    info.name(AveragingGoal::DATA_TYPE_FULL_NAME);
    info.hashKey(AveragingGoal::DATA_VERSION);
    info.md5Key(AveragingGoal::VERSION_MD5);
    info.xmlSource(AveragingGoal::XML_SOURCE);
    info.flat(AveragingGoal::dataTypeFlat());
    ids.push_back(info);

    info.id(AveragingResult::ID);
    info.name(AveragingResult::DATA_TYPE_FULL_NAME);
    info.hashKey(AveragingResult::DATA_VERSION);
    info.md5Key(AveragingResult::VERSION_MD5);
    info.xmlSource(AveragingResult::XML_SOURCE);
    info.flat(AveragingResult::dataTypeFlat());
    ids.push_back(info);

    info.id(FibonacciAction::ID);
    info.name(FibonacciAction::DATA_TYPE_FULL_NAME);
    info.hashKey(FibonacciAction::DATA_VERSION);
    info.md5Key(FibonacciAction::VERSION_MD5);
    info.xmlSource(FibonacciAction::XML_SOURCE);
    info.flat(FibonacciAction::dataTypeFlat());
    ids.push_back(info);

    info.id(FibonacciActionFeedback::ID);
    info.name(FibonacciActionFeedback::DATA_TYPE_FULL_NAME);
    info.hashKey(FibonacciActionFeedback::DATA_VERSION);
    info.md5Key(FibonacciActionFeedback::VERSION_MD5);
    info.xmlSource(FibonacciActionFeedback::XML_SOURCE);
    info.flat(FibonacciActionFeedback::dataTypeFlat());
    ids.push_back(info);

    info.id(FibonacciActionGoal::ID);
    info.name(FibonacciActionGoal::DATA_TYPE_FULL_NAME);
    info.hashKey(FibonacciActionGoal::DATA_VERSION);
    info.md5Key(FibonacciActionGoal::VERSION_MD5);
    info.xmlSource(FibonacciActionGoal::XML_SOURCE);
    info.flat(FibonacciActionGoal::dataTypeFlat());
    ids.push_back(info);

    info.id(FibonacciActionResult::ID);
    info.name(FibonacciActionResult::DATA_TYPE_FULL_NAME);
    info.hashKey(FibonacciActionResult::DATA_VERSION);
    info.md5Key(FibonacciActionResult::VERSION_MD5);
    info.xmlSource(FibonacciActionResult::XML_SOURCE);
    info.flat(FibonacciActionResult::dataTypeFlat());
    ids.push_back(info);

    info.id(FibonacciFeedback::ID);
    info.name(FibonacciFeedback::DATA_TYPE_FULL_NAME);
    info.hashKey(FibonacciFeedback::DATA_VERSION);
    info.md5Key(FibonacciFeedback::VERSION_MD5);
    info.xmlSource(FibonacciFeedback::XML_SOURCE);
    info.flat(FibonacciFeedback::dataTypeFlat());
    ids.push_back(info);

    info.id(FibonacciGoal::ID);
    info.name(FibonacciGoal::DATA_TYPE_FULL_NAME);
    info.hashKey(FibonacciGoal::DATA_VERSION);
    info.md5Key(FibonacciGoal::VERSION_MD5);
    info.xmlSource(FibonacciGoal::XML_SOURCE);
    info.flat(FibonacciGoal::dataTypeFlat());
    ids.push_back(info);

    info.id(FibonacciResult::ID);
    info.name(FibonacciResult::DATA_TYPE_FULL_NAME);
    info.hashKey(FibonacciResult::DATA_VERSION);
    info.md5Key(FibonacciResult::VERSION_MD5);
    info.xmlSource(FibonacciResult::XML_SOURCE);
    info.flat(FibonacciResult::dataTypeFlat());
    ids.push_back(info);

}

int actionlib_tutorials_gencppROSMessageFactory::typeName(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case AveragingAction::ID:
        {
            str = "actionlib_tutorials/AveragingAction";
            break;
        }
        case AveragingActionFeedback::ID:
        {
            str = "actionlib_tutorials/AveragingActionFeedback";
            break;
        }
        case AveragingActionGoal::ID:
        {
            str = "actionlib_tutorials/AveragingActionGoal";
            break;
        }
        case AveragingActionResult::ID:
        {
            str = "actionlib_tutorials/AveragingActionResult";
            break;
        }
        case AveragingFeedback::ID:
        {
            str = "actionlib_tutorials/AveragingFeedback";
            break;
        }
        case AveragingGoal::ID:
        {
            str = "actionlib_tutorials/AveragingGoal";
            break;
        }
        case AveragingResult::ID:
        {
            str = "actionlib_tutorials/AveragingResult";
            break;
        }
        case FibonacciAction::ID:
        {
            str = "actionlib_tutorials/FibonacciAction";
            break;
        }
        case FibonacciActionFeedback::ID:
        {
            str = "actionlib_tutorials/FibonacciActionFeedback";
            break;
        }
        case FibonacciActionGoal::ID:
        {
            str = "actionlib_tutorials/FibonacciActionGoal";
            break;
        }
        case FibonacciActionResult::ID:
        {
            str = "actionlib_tutorials/FibonacciActionResult";
            break;
        }
        case FibonacciFeedback::ID:
        {
            str = "actionlib_tutorials/FibonacciFeedback";
            break;
        }
        case FibonacciGoal::ID:
        {
            str = "actionlib_tutorials/FibonacciGoal";
            break;
        }
        case FibonacciResult::ID:
        {
            str = "actionlib_tutorials/FibonacciResult";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int actionlib_tutorials_gencppROSMessageFactory::desc(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case AveragingAction::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nAveragingActionGoal action_goal\nAveragingActionResult action_result\nAveragingActionFeedback action_feedback\n\n================================================================================\nMSG: actionlib_tutorials/AveragingActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nAveragingGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: actionlib_tutorials/AveragingGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#goal definition\nint32 samples\n\n================================================================================\nMSG: actionlib_tutorials/AveragingActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nAveragingResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_tutorials/AveragingResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#result definition\nfloat32 mean\nfloat32 std_dev\n\n================================================================================\nMSG: actionlib_tutorials/AveragingActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nAveragingFeedback feedback\n\n================================================================================\nMSG: actionlib_tutorials/AveragingFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#feedback\nint32 sample\nfloat32 data\nfloat32 mean\nfloat32 std_dev\n\n";
            break;
        }
        case AveragingActionFeedback::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nAveragingFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: actionlib_tutorials/AveragingFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#feedback\nint32 sample\nfloat32 data\nfloat32 mean\nfloat32 std_dev\n\n";
            break;
        }
        case AveragingActionGoal::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nAveragingGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: actionlib_tutorials/AveragingGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#goal definition\nint32 samples\n";
            break;
        }
        case AveragingActionResult::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nAveragingResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: actionlib_tutorials/AveragingResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#result definition\nfloat32 mean\nfloat32 std_dev\n";
            break;
        }
        case AveragingFeedback::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#feedback\nint32 sample\nfloat32 data\nfloat32 mean\nfloat32 std_dev\n\n";
            break;
        }
        case AveragingGoal::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#goal definition\nint32 samples\n";
            break;
        }
        case AveragingResult::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#result definition\nfloat32 mean\nfloat32 std_dev\n";
            break;
        }
        case FibonacciAction::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nFibonacciActionGoal action_goal\nFibonacciActionResult action_result\nFibonacciActionFeedback action_feedback\n\n================================================================================\nMSG: actionlib_tutorials/FibonacciActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nFibonacciGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: actionlib_tutorials/FibonacciGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#goal definition\nint32 order\n\n================================================================================\nMSG: actionlib_tutorials/FibonacciActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nFibonacciResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_tutorials/FibonacciResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#result definition\nint32[] sequence\n\n================================================================================\nMSG: actionlib_tutorials/FibonacciActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nFibonacciFeedback feedback\n\n================================================================================\nMSG: actionlib_tutorials/FibonacciFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#feedback\nint32[] sequence\n\n";
            break;
        }
        case FibonacciActionFeedback::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nFibonacciFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: actionlib_tutorials/FibonacciFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#feedback\nint32[] sequence\n\n";
            break;
        }
        case FibonacciActionGoal::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nFibonacciGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: actionlib_tutorials/FibonacciGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#goal definition\nint32 order\n";
            break;
        }
        case FibonacciActionResult::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nFibonacciResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: actionlib_tutorials/FibonacciResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#result definition\nint32[] sequence\n";
            break;
        }
        case FibonacciFeedback::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#feedback\nint32[] sequence\n\n";
            break;
        }
        case FibonacciGoal::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#goal definition\nint32 order\n";
            break;
        }
        case FibonacciResult::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#result definition\nint32[] sequence\n";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int actionlib_tutorials_gencppROSMessageFactory::md5String(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case AveragingAction::ID:
        {
            str = "628678f2b4fa6a5951746a4a2d39e716";
            break;
        }
        case AveragingActionFeedback::ID:
        {
            str = "78a4a09241b1791069223ae7ebd5b16b";
            break;
        }
        case AveragingActionGoal::ID:
        {
            str = "1561825b734ebd6039851c501e3fb570";
            break;
        }
        case AveragingActionResult::ID:
        {
            str = "8672cb489d347580acdcd05c5d497497";
            break;
        }
        case AveragingFeedback::ID:
        {
            str = "9e8dfc53c2f2a032ca33fa80ec46fd4f";
            break;
        }
        case AveragingGoal::ID:
        {
            str = "32c9b10ef9b253faa93b93f564762c8f";
            break;
        }
        case AveragingResult::ID:
        {
            str = "d5c7decf6df75ffb4367a05c1bcc7612";
            break;
        }
        case FibonacciAction::ID:
        {
            str = "f59df5767bf7634684781c92598b2406";
            break;
        }
        case FibonacciActionFeedback::ID:
        {
            str = "73b8497a9f629a31c0020900e4148f07";
            break;
        }
        case FibonacciActionGoal::ID:
        {
            str = "006871c7fa1d0e3d5fe2226bf17b2a94";
            break;
        }
        case FibonacciActionResult::ID:
        {
            str = "bee73a9fe29ae25e966e105f5553dd03";
            break;
        }
        case FibonacciFeedback::ID:
        {
            str = "b81e37d2a31925a0e8ae261a8699cb79";
            break;
        }
        case FibonacciGoal::ID:
        {
            str = "6889063349a00b249bd1661df429d822";
            break;
        }
        case FibonacciResult::ID:
        {
            str = "b81e37d2a31925a0e8ae261a8699cb79";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int actionlib_tutorials_gencppROSMessageFactory::md5(unsigned long long & highOrder, unsigned long long & lowOrder, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case AveragingAction::ID:
        {   
		    highOrder = 0x628678f2b4fa6a59ULL;
            lowOrder = 0x51746a4a2d39e716ULL;
            break;
        }
        case AveragingActionFeedback::ID:
        {   
		    highOrder = 0x78a4a09241b17910ULL;
            lowOrder = 0x69223ae7ebd5b16bULL;
            break;
        }
        case AveragingActionGoal::ID:
        {   
		    highOrder = 0x1561825b734ebd60ULL;
            lowOrder = 0x39851c501e3fb570ULL;
            break;
        }
        case AveragingActionResult::ID:
        {   
		    highOrder = 0x8672cb489d347580ULL;
            lowOrder = 0xacdcd05c5d497497ULL;
            break;
        }
        case AveragingFeedback::ID:
        {   
		    highOrder = 0x9e8dfc53c2f2a032ULL;
            lowOrder = 0xca33fa80ec46fd4fULL;
            break;
        }
        case AveragingGoal::ID:
        {   
		    highOrder = 0x32c9b10ef9b253faULL;
            lowOrder = 0xa93b93f564762c8fULL;
            break;
        }
        case AveragingResult::ID:
        {   
		    highOrder = 0xd5c7decf6df75ffbULL;
            lowOrder = 0x4367a05c1bcc7612ULL;
            break;
        }
        case FibonacciAction::ID:
        {   
		    highOrder = 0xf59df5767bf76346ULL;
            lowOrder = 0x84781c92598b2406ULL;
            break;
        }
        case FibonacciActionFeedback::ID:
        {   
		    highOrder = 0x73b8497a9f629a31ULL;
            lowOrder = 0xc0020900e4148f07ULL;
            break;
        }
        case FibonacciActionGoal::ID:
        {   
		    highOrder = 0x006871c7fa1d0e3dULL;
            lowOrder = 0x5fe2226bf17b2a94ULL;
            break;
        }
        case FibonacciActionResult::ID:
        {   
		    highOrder = 0xbee73a9fe29ae25eULL;
            lowOrder = 0x966e105f5553dd03ULL;
            break;
        }
        case FibonacciFeedback::ID:
        {   
		    highOrder = 0xb81e37d2a31925a0ULL;
            lowOrder = 0xe8ae261a8699cb79ULL;
            break;
        }
        case FibonacciGoal::ID:
        {   
		    highOrder = 0x6889063349a00b24ULL;
            lowOrder = 0x9bd1661df429d822ULL;
            break;
        }
        case FibonacciResult::ID:
        {   
		    highOrder = 0xb81e37d2a31925a0ULL;
            lowOrder = 0xe8ae261a8699cb79ULL;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int actionlib_tutorials_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<ros::SerializedMessage> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case AveragingAction::ID:
        case AveragingActionFeedback::ID:
        case AveragingActionGoal::ID:
        case AveragingActionResult::ID:
        case AveragingFeedback::ID:
        case AveragingGoal::ID:
        case AveragingResult::ID:
        case FibonacciAction::ID:
        case FibonacciActionFeedback::ID:
        case FibonacciActionGoal::ID:
        case FibonacciActionResult::ID:
        case FibonacciFeedback::ID:
        case FibonacciGoal::ID:
        case FibonacciResult::ID:
        {
            break;
        } 
        default:
	    {
            retval = rframe::Error::PARAM_RANGE;
            break;
	    }
    }

    if (retval == rframe::Error::SUCCESS)
	{
        std::shared_ptr<ros::SerializedMessage> newmsg(new ros::SerializedMessage);

        if (newmsg.get() == NULL)
	    {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else
	    {
            newmsg->message_type = id;
            msg.swap(newmsg);
        }
    }

    return retval;
}

int actionlib_tutorials_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case AveragingAction::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AveragingAction>(),std::bind(&actionlib_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AveragingActionFeedback::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AveragingActionFeedback>(),std::bind(&actionlib_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AveragingActionGoal::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AveragingActionGoal>(),std::bind(&actionlib_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AveragingActionResult::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AveragingActionResult>(),std::bind(&actionlib_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AveragingFeedback::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AveragingFeedback>(),std::bind(&actionlib_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AveragingGoal::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AveragingGoal>(),std::bind(&actionlib_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AveragingResult::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AveragingResult>(),std::bind(&actionlib_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case FibonacciAction::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<FibonacciAction>(),std::bind(&actionlib_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case FibonacciActionFeedback::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<FibonacciActionFeedback>(),std::bind(&actionlib_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case FibonacciActionGoal::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<FibonacciActionGoal>(),std::bind(&actionlib_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case FibonacciActionResult::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<FibonacciActionResult>(),std::bind(&actionlib_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case FibonacciFeedback::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<FibonacciFeedback>(),std::bind(&actionlib_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case FibonacciGoal::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<FibonacciGoal>(),std::bind(&actionlib_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case FibonacciResult::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<FibonacciResult>(),std::bind(&actionlib_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            retval = rframe::Error::PARAM_RANGE;
        }
    }

    return retval;
}

int actionlib_tutorials_gencppROSMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
	{
        delete msg;
    }

    return retval;
}

int actionlib_tutorials_gencppROSMessageFactory::deallocateTransport(ros::SerializedMessage * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        delete msg;
    }

    return retval;
}

int actionlib_tutorials_gencppROSMessageFactory::toTransport(MessageBase & src, ros::SerializedMessage & dst)
{
    int retval = rframe::Error::SUCCESS;

    if (dst.message_type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.message_type)
        { 
            case AveragingAction::ID:
            {
                Message<AveragingAction > & tempSrc = static_cast<Message<AveragingAction>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: actionlib_tutorials_gencpp::AveragingAction buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case AveragingActionFeedback::ID:
            {
                Message<AveragingActionFeedback > & tempSrc = static_cast<Message<AveragingActionFeedback>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: actionlib_tutorials_gencpp::AveragingActionFeedback buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case AveragingActionGoal::ID:
            {
                Message<AveragingActionGoal > & tempSrc = static_cast<Message<AveragingActionGoal>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: actionlib_tutorials_gencpp::AveragingActionGoal buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case AveragingActionResult::ID:
            {
                Message<AveragingActionResult > & tempSrc = static_cast<Message<AveragingActionResult>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: actionlib_tutorials_gencpp::AveragingActionResult buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case AveragingFeedback::ID:
            {
                Message<AveragingFeedback > & tempSrc = static_cast<Message<AveragingFeedback>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: actionlib_tutorials_gencpp::AveragingFeedback buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case AveragingGoal::ID:
            {
                Message<AveragingGoal > & tempSrc = static_cast<Message<AveragingGoal>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: actionlib_tutorials_gencpp::AveragingGoal buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case AveragingResult::ID:
            {
                Message<AveragingResult > & tempSrc = static_cast<Message<AveragingResult>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: actionlib_tutorials_gencpp::AveragingResult buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case FibonacciAction::ID:
            {
                Message<FibonacciAction > & tempSrc = static_cast<Message<FibonacciAction>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: actionlib_tutorials_gencpp::FibonacciAction buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case FibonacciActionFeedback::ID:
            {
                Message<FibonacciActionFeedback > & tempSrc = static_cast<Message<FibonacciActionFeedback>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: actionlib_tutorials_gencpp::FibonacciActionFeedback buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case FibonacciActionGoal::ID:
            {
                Message<FibonacciActionGoal > & tempSrc = static_cast<Message<FibonacciActionGoal>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: actionlib_tutorials_gencpp::FibonacciActionGoal buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case FibonacciActionResult::ID:
            {
                Message<FibonacciActionResult > & tempSrc = static_cast<Message<FibonacciActionResult>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: actionlib_tutorials_gencpp::FibonacciActionResult buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case FibonacciFeedback::ID:
            {
                Message<FibonacciFeedback > & tempSrc = static_cast<Message<FibonacciFeedback>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: actionlib_tutorials_gencpp::FibonacciFeedback buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case FibonacciGoal::ID:
            {
                Message<FibonacciGoal > & tempSrc = static_cast<Message<FibonacciGoal>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: actionlib_tutorials_gencpp::FibonacciGoal buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case FibonacciResult::ID:
            {
                Message<FibonacciResult > & tempSrc = static_cast<Message<FibonacciResult>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: actionlib_tutorials_gencpp::FibonacciResult buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int actionlib_tutorials_gencppROSMessageFactory::fromTransport(ros::SerializedMessage & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.message_type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.message_type)
        { 
            case AveragingAction::ID:
            {
                Message<AveragingAction > & tempDst = static_cast<Message<AveragingAction>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case AveragingActionFeedback::ID:
            {
                Message<AveragingActionFeedback > & tempDst = static_cast<Message<AveragingActionFeedback>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case AveragingActionGoal::ID:
            {
                Message<AveragingActionGoal > & tempDst = static_cast<Message<AveragingActionGoal>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case AveragingActionResult::ID:
            {
                Message<AveragingActionResult > & tempDst = static_cast<Message<AveragingActionResult>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case AveragingFeedback::ID:
            {
                Message<AveragingFeedback > & tempDst = static_cast<Message<AveragingFeedback>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case AveragingGoal::ID:
            {
                Message<AveragingGoal > & tempDst = static_cast<Message<AveragingGoal>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case AveragingResult::ID:
            {
                Message<AveragingResult > & tempDst = static_cast<Message<AveragingResult>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case FibonacciAction::ID:
            {
                Message<FibonacciAction > & tempDst = static_cast<Message<FibonacciAction>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case FibonacciActionFeedback::ID:
            {
                Message<FibonacciActionFeedback > & tempDst = static_cast<Message<FibonacciActionFeedback>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case FibonacciActionGoal::ID:
            {
                Message<FibonacciActionGoal > & tempDst = static_cast<Message<FibonacciActionGoal>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case FibonacciActionResult::ID:
            {
                Message<FibonacciActionResult > & tempDst = static_cast<Message<FibonacciActionResult>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case FibonacciFeedback::ID:
            {
                Message<FibonacciFeedback > & tempDst = static_cast<Message<FibonacciFeedback>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case FibonacciGoal::ID:
            {
                Message<FibonacciGoal > & tempDst = static_cast<Message<FibonacciGoal>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case FibonacciResult::ID:
            {
                Message<FibonacciResult > & tempDst = static_cast<Message<FibonacciResult>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int actionlib_tutorials_gencppROSMessageFactory::updateHeader(rframe::MessageBase &msg, unsigned int seqNo)
{
    int retval = rframe::Error::SUCCESS;

    switch (msg.id())
    {   
        // AveragingAction does not have a Header as its first member 
        case AveragingActionFeedback::ID:
        {
            Message<AveragingActionFeedback > & tempMsg = static_cast<Message<AveragingActionFeedback>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        case AveragingActionGoal::ID:
        {
            Message<AveragingActionGoal > & tempMsg = static_cast<Message<AveragingActionGoal>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        case AveragingActionResult::ID:
        {
            Message<AveragingActionResult > & tempMsg = static_cast<Message<AveragingActionResult>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        // AveragingFeedback does not have a Header as its first member 
        // AveragingGoal does not have a Header as its first member 
        // AveragingResult does not have a Header as its first member 
        // FibonacciAction does not have a Header as its first member 
        case FibonacciActionFeedback::ID:
        {
            Message<FibonacciActionFeedback > & tempMsg = static_cast<Message<FibonacciActionFeedback>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        case FibonacciActionGoal::ID:
        {
            Message<FibonacciActionGoal > & tempMsg = static_cast<Message<FibonacciActionGoal>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        case FibonacciActionResult::ID:
        {
            Message<FibonacciActionResult > & tempMsg = static_cast<Message<FibonacciActionResult>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        // FibonacciFeedback does not have a Header as its first member 
        // FibonacciGoal does not have a Header as its first member 
        // FibonacciResult does not have a Header as its first member 
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

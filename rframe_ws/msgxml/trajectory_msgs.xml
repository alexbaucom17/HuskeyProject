<!--
 
  AUTOGENERATED FILE:   do not edit

  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:01 -0500
  From Template/Script: rosToXML.rb
 

-->
<classes library_name="trajectory_msgs_gencpp" namespace="trajectory_msgs" >

<class name="JointTrajectory" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="65b4f94a94d1ed67169da35a02f33d3f" rosDesc="Header header\nstring[] joint_names\nJointTrajectoryPoint[] points\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectoryPoint\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n" comment="" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="joint_names" type="vector(string)"  sourceType="string" comment="" />
  <field name="points" type="vector(JointTrajectoryPoint)"  sourceType="JointTrajectoryPoint" comment="" />
</class>

<class name="JointTrajectoryPoint" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="f3cd1e1c4d320c79d6985c904ae5dcd3" rosDesc="# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n" comment="Each trajectory point specifies either positions[, velocities[, accelerations]]
 or positions[, effort] for the trajectory to be executed.
 All specified values are in the same order as the joint names in JointTrajectory.msg" >
  <field name="positions" type="vector(double)"  sourceType="float64" comment="" />
  <field name="velocities" type="vector(double)"  sourceType="float64" comment="" />
  <field name="accelerations" type="vector(double)"  sourceType="float64" comment="" />
  <field name="effort" type="vector(double)"  sourceType="float64" comment="" />
  <field name="time_from_start" type="std_msgs::RosDuration"  sourceType="duration" comment="" />
</class>

<class name="MultiDOFJointTrajectory" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="ef145a45a5f47b77b7f5cdde4b16c942" rosDesc="# The header is used to specify the coordinate frame and the reference time for the trajectory durations\nHeader header\n\n# A representation of a multi-dof joint trajectory (each point is a transformation)\n# Each point along the trajectory will include an array of positions/velocities/accelerations\n# that has the same length as the array of joint names, and has the same order of joints as \n# the joint names array.\n\nstring[] joint_names\nMultiDOFJointTrajectoryPoint[] points\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: trajectory_msgs/MultiDOFJointTrajectoryPoint\n# Each multi-dof joint can specify a transform (up to 6 DOF)\ngeometry_msgs/Transform[] transforms\n\n# There can be a velocity specified for the origin of the joint \ngeometry_msgs/Twist[] velocities\n\n# There can be an acceleration specified for the origin of the joint \ngeometry_msgs/Twist[] accelerations\n\nduration time_from_start\n\n================================================================================\nMSG: geometry_msgs/Transform\n# This represents the transform between two coordinate frames in free space.\n\nVector3 translation\nQuaternion rotation\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\nVector3  linear\nVector3  angular\n" comment="The header is used to specify the coordinate frame and the reference time for the trajectory durations" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="A representation of a multi-dof joint trajectory (each point is a transformation)
 Each point along the trajectory will include an array of positions/velocities/accelerations
 that has the same length as the array of joint names, and has the same order of joints as 
 the joint names array." />
  <field name="joint_names" type="vector(string)"  sourceType="string" comment="" />
  <field name="points" type="vector(MultiDOFJointTrajectoryPoint)"  sourceType="MultiDOFJointTrajectoryPoint" comment="" />
</class>

<class name="MultiDOFJointTrajectoryPoint" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="3ebe08d1abd5b65862d50e09430db776" rosDesc="# Each multi-dof joint can specify a transform (up to 6 DOF)\ngeometry_msgs/Transform[] transforms\n\n# There can be a velocity specified for the origin of the joint \ngeometry_msgs/Twist[] velocities\n\n# There can be an acceleration specified for the origin of the joint \ngeometry_msgs/Twist[] accelerations\n\nduration time_from_start\n\n================================================================================\nMSG: geometry_msgs/Transform\n# This represents the transform between two coordinate frames in free space.\n\nVector3 translation\nQuaternion rotation\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\nVector3  linear\nVector3  angular\n" comment="Each multi-dof joint can specify a transform (up to 6 DOF)" >
  <field name="transforms" type="vector(geometry_msgs::Transform)"  sourceType="geometry_msgs::Transform" comment="There can be a velocity specified for the origin of the joint" />
  <field name="velocities" type="vector(geometry_msgs::Twist)"  sourceType="geometry_msgs::Twist" comment="There can be an acceleration specified for the origin of the joint" />
  <field name="accelerations" type="vector(geometry_msgs::Twist)"  sourceType="geometry_msgs::Twist" comment="" />
  <field name="time_from_start" type="std_msgs::RosDuration"  sourceType="duration" comment="" />
</class>

<dependency name="geometry_msgs_gencpp"/>
<dependency name="std_msgs_gencpp"/>
<dependency name="std_srvs_gencpp"/>

</classes>

// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:07 -0500
//  From Template/Script: data_templates/DataLibraryTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "polled_camera_gencpp_Library.h"
#include <common/Log.h>
#include <common/TypeRegistry.h>
#include <messaging/Message.h>

#include <polled_camera/GetPolledImageRequest.h>
#include <polled_camera/GetPolledImageResponse.h>
#include <polled_camera/GetPolledImage.h>

extern "C"
{
    /** library access method */
    int rframeRegisterDataLibrary()
    {
        return polled_camera::registerLibrary();
    };
}

namespace polled_camera
{

    static void deallocateMessage(MessageBase * msg)
    {
        delete msg;
    }

    static int allocateMessage(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
    {
        int retval = rframe::Error::SUCCESS;
        bool found = true;
        switch (id)
        { 
            case GetPolledImageRequest::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<GetPolledImageRequest>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case GetPolledImageResponse::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<GetPolledImageResponse>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case GetPolledImage::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<GetPolledImage>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            default:
            {
                found = false;
            }
        }

        if (found == false)
        {
            retval = rframe::Error::PARAM_RANGE;
        }
        else if (msg.get() == NULL)
        {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else if (msg.get() != NULL)
        {
            retval = rframe::Error::SUCCESS;
        }

        return retval;
    }

    /** registry this data set with the system */
    //int register_polled_camera_gencpp()
    int registerLibrary()
    {
        int retval = rframe::Error::SUCCESS;
        static bool registered = false;
        rframe::TypeRegistry & reg = rframe::TypeRegistry::instance();

        LOG_INFO("registering data for library: polled_camera_gencpp");

        if (registered == false)
        {
            registered = true;

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = polled_camera::GetPolledImageRequest::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<polled_camera::GetPolledImageRequest>(
                    // boost::lambda::new_ptr<polled_camera::GetPolledImageRequest>(),
                    [](){ return new polled_camera::GetPolledImageRequest(); },
                                std::bind(allocateMessage,polled_camera::GetPolledImageRequest::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: GetPolledImageRequest");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = polled_camera::GetPolledImageRequest::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(polled_camera::GetPolledImageRequest::DATA_TYPE_NAME,polled_camera::GetPolledImageRequest::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: GetPolledImageRequest");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = polled_camera::GetPolledImageResponse::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<polled_camera::GetPolledImageResponse>(
                    // boost::lambda::new_ptr<polled_camera::GetPolledImageResponse>(),
                    [](){ return new polled_camera::GetPolledImageResponse(); },
                                std::bind(allocateMessage,polled_camera::GetPolledImageResponse::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: GetPolledImageResponse");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = polled_camera::GetPolledImageResponse::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(polled_camera::GetPolledImageResponse::DATA_TYPE_NAME,polled_camera::GetPolledImageResponse::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: GetPolledImageResponse");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = polled_camera::GetPolledImage::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<polled_camera::GetPolledImage>(
                    // boost::lambda::new_ptr<polled_camera::GetPolledImage>(),
                    [](){ return new polled_camera::GetPolledImage(); },
                                std::bind(allocateMessage,polled_camera::GetPolledImage::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: GetPolledImage");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = polled_camera::GetPolledImage::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(polled_camera::GetPolledImage::DATA_TYPE_NAME,polled_camera::GetPolledImage::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: GetPolledImage");
            }

        }

        return retval;
    };

    std::string xmlSource()
    {
        return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\
<!--\
 \
  AUTOGENERATED FILE:   do not edit\
\
  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:56:59 -0500\
  From Template/Script: rosToXML.rb\
 \
\
-->\
<classes library_name=\"polled_camera_gencpp\" namespace=\"polled_camera\">\
\
<class name=\"GetPolledImageRequest\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"Namespace to publish response topics in. A polled camera driver node  should publish:    &lt;response_namespace&gt;/image_raw    &lt;response_namespace&gt;/camera_info\">\
  <field name=\"response_namespace\" type=\"string\" sourceType=\"string\" comment=\"Timeout for attempting to capture data from the device. This does not  include latency from ROS communication, post-processing of raw camera  data, etc. A zero duration indicates no time limit.\"/>\
  <field name=\"timeout\" type=\"std_msgs::RosDuration\" sourceType=\"duration\" comment=\"Binning settings, if supported by the camera.\"/>\
  <field name=\"binning_x\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"\"/>\
  <field name=\"binning_y\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"Region of interest, if supported by the camera.\"/>\
  <field name=\"roi\" type=\"sensor_msgs::RegionOfInterest\" sourceType=\"sensor_msgs::RegionOfInterest\" comment=\"no comment provided\"/>\
</class>\
\
<class name=\"GetPolledImageResponse\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"Namespace to publish response topics in. A polled camera driver node  should publish:    &lt;response_namespace&gt;/image_raw    &lt;response_namespace&gt;/camera_info\">\
  <field name=\"success\" type=\"bool\" sourceType=\"bool\" comment=\"Could the image be captured?\"/>\
  <field name=\"status_message\" type=\"string\" sourceType=\"string\" comment=\"Error message in case of failure\"/>\
  <field name=\"stamp\" type=\"std_msgs::RosTime\" sourceType=\"time\" comment=\"Timestamp of the captured image. Can be matched  against incoming sensor_msgs/Image header.\"/>\
</class>\
\
<class name=\"GetPolledImage\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"Namespace to publish response topics in. A polled camera driver node  should publish:    &lt;response_namespace&gt;/image_raw    &lt;response_namespace&gt;/camera_info\">\
  <definition name=\"Request\" type=\"GetPolledImageRequest\"/>\
  <definition name=\"Response\" type=\"GetPolledImageResponse\"/>\
  <field name=\"request\" type=\"Request\" comment=\"request data type\"/>\
  <field name=\"response\" type=\"Response\" comment=\"response data type\"/>\
</class>\
\
<dependency name=\"sensor_msgs_gencpp\"/>\
<dependency name=\"std_msgs_gencpp\"/>\
<dependency name=\"std_srvs_gencpp\"/>\
\
</classes>\
";
    }

}; // end namespace polled_camera


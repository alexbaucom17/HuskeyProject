// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:07 -0500
//  From Template/Script: data_templates/ROSTemplate.cpp.rb
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "polled_camera_gencpp_ROS.h"
#include <common/Log.h>
#include <common/DataTypeInfo.h>

using namespace std;
using namespace polled_camera;

rframe::ROSMessageFactory * ROS_polled_camera_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        ROS_polled_camera_gencppfactory = new polled_camera_gencppROSMessageFactory();

        return ROS_polled_camera_gencppfactory;
    };
}

rframe::ROSMessageFactory * polled_camera::allocate_polled_camera_gencpp()
{
    ROS_polled_camera_gencppfactory = new polled_camera_gencppROSMessageFactory();
    return ROS_polled_camera_gencppfactory;
};

polled_camera_gencppROSMessageFactory::polled_camera_gencppROSMessageFactory()
{
    name("polled_camera_gencpp");
    // use constructor to register data types
    polled_camera::registerLibrary();
}

polled_camera_gencppROSMessageFactory::~polled_camera_gencppROSMessageFactory()
{
}

int polled_camera_gencppROSMessageFactory::dataType(ros::SerializedMessage & msg)
{
    return msg.message_type;
}

void polled_camera_gencppROSMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(GetPolledImageRequest::ID);
    info.name(GetPolledImageRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(GetPolledImageRequest::DATA_VERSION);
    info.md5Key(GetPolledImageRequest::VERSION_MD5);
    info.xmlSource(GetPolledImageRequest::XML_SOURCE);
    info.flat(GetPolledImageRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(GetPolledImageResponse::ID);
    info.name(GetPolledImageResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(GetPolledImageResponse::DATA_VERSION);
    info.md5Key(GetPolledImageResponse::VERSION_MD5);
    info.xmlSource(GetPolledImageResponse::XML_SOURCE);
    info.flat(GetPolledImageResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(GetPolledImage::ID);
    info.name(GetPolledImage::DATA_TYPE_FULL_NAME);
    info.hashKey(GetPolledImage::DATA_VERSION);
    info.md5Key(GetPolledImage::VERSION_MD5);
    info.xmlSource(GetPolledImage::XML_SOURCE);
    info.flat(GetPolledImage::dataTypeFlat());
    ids.push_back(info);

}

int polled_camera_gencppROSMessageFactory::typeName(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case GetPolledImageRequest::ID:
        {
            str = "polled_camera/GetPolledImageRequest";
            break;
        }
        case GetPolledImageResponse::ID:
        {
            str = "polled_camera/GetPolledImageResponse";
            break;
        }
        case GetPolledImage::ID:
        {
            str = "polled_camera/GetPolledImage";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int polled_camera_gencppROSMessageFactory::desc(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case GetPolledImageRequest::ID:
        {
            str = GetPolledImageRequest::XML_SOURCE;
            break;
        }
        case GetPolledImageResponse::ID:
        {
            str = GetPolledImageResponse::XML_SOURCE;
            break;
        }
        case GetPolledImage::ID:
        {
            str = GetPolledImage::XML_SOURCE;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int polled_camera_gencppROSMessageFactory::md5String(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case GetPolledImageRequest::ID:
        {
            str = "c77ed43e530fd48e9e7a2a93845e154c";
            break;
        }
        case GetPolledImageResponse::ID:
        {
            str = "dbf1f851bc511800e6129ccd5a3542ab";
            break;
        }
        case GetPolledImage::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int polled_camera_gencppROSMessageFactory::md5(unsigned long long & highOrder, unsigned long long & lowOrder, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case GetPolledImageRequest::ID:
        {   
		    highOrder = 0xc77ed43e530fd48eULL;
            lowOrder = 0x9e7a2a93845e154cULL;
            break;
        }
        case GetPolledImageResponse::ID:
        {   
		    highOrder = 0xdbf1f851bc511800ULL;
            lowOrder = 0xe6129ccd5a3542abULL;
            break;
        }
        case GetPolledImage::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int polled_camera_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<ros::SerializedMessage> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case GetPolledImageRequest::ID:
        case GetPolledImageResponse::ID:
        case GetPolledImage::ID:
        {
            break;
        } 
        default:
	    {
            retval = rframe::Error::PARAM_RANGE;
            break;
	    }
    }

    if (retval == rframe::Error::SUCCESS)
	{
        std::shared_ptr<ros::SerializedMessage> newmsg(new ros::SerializedMessage);

        if (newmsg.get() == NULL)
	    {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else
	    {
            newmsg->message_type = id;
            msg.swap(newmsg);
        }
    }

    return retval;
}

int polled_camera_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case GetPolledImageRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetPolledImageRequest>(),std::bind(&polled_camera_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetPolledImageResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetPolledImageResponse>(),std::bind(&polled_camera_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetPolledImage::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetPolledImage>(),std::bind(&polled_camera_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            retval = rframe::Error::PARAM_RANGE;
        }
    }

    return retval;
}

int polled_camera_gencppROSMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
	{
        delete msg;
    }

    return retval;
}

int polled_camera_gencppROSMessageFactory::deallocateTransport(ros::SerializedMessage * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        delete msg;
    }

    return retval;
}

int polled_camera_gencppROSMessageFactory::toTransport(MessageBase & src, ros::SerializedMessage & dst)
{
    int retval = rframe::Error::SUCCESS;

    if (dst.message_type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.message_type)
        { 
            case GetPolledImageRequest::ID:
            {
                Message<GetPolledImageRequest > & tempSrc = static_cast<Message<GetPolledImageRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: polled_camera_gencpp::GetPolledImageRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetPolledImageResponse::ID:
            {
                Message<GetPolledImageResponse > & tempSrc = static_cast<Message<GetPolledImageResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: polled_camera_gencpp::GetPolledImageResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetPolledImage::ID:
            {
                Message<GetPolledImage > & tempSrc = static_cast<Message<GetPolledImage>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: polled_camera_gencpp::GetPolledImage buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int polled_camera_gencppROSMessageFactory::fromTransport(ros::SerializedMessage & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.message_type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.message_type)
        { 
            case GetPolledImageRequest::ID:
            {
                Message<GetPolledImageRequest > & tempDst = static_cast<Message<GetPolledImageRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetPolledImageResponse::ID:
            {
                Message<GetPolledImageResponse > & tempDst = static_cast<Message<GetPolledImageResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetPolledImage::ID:
            {
                Message<GetPolledImage > & tempDst = static_cast<Message<GetPolledImage>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int polled_camera_gencppROSMessageFactory::updateHeader(rframe::MessageBase &msg, unsigned int seqNo)
{
    int retval = rframe::Error::SUCCESS;

    switch (msg.id())
    {   
        // GetPolledImageRequest does not have a Header as its first member 
        // GetPolledImageResponse does not have a Header as its first member 
        // GetPolledImage does not have a Header as its first member 
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

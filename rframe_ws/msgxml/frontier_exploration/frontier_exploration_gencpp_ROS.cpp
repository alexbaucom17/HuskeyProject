// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:30:54 -0500
//  From Template/Script: data_templates/ROSTemplate.cpp.rb
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "frontier_exploration_gencpp_ROS.h"
#include <common/Log.h>
#include <common/DataTypeInfo.h>

using namespace std;
using namespace frontier_exploration;

rframe::ROSMessageFactory * ROS_frontier_exploration_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        ROS_frontier_exploration_gencppfactory = new frontier_exploration_gencppROSMessageFactory();

        return ROS_frontier_exploration_gencppfactory;
    };
}

rframe::ROSMessageFactory * frontier_exploration::allocate_frontier_exploration_gencpp()
{
    ROS_frontier_exploration_gencppfactory = new frontier_exploration_gencppROSMessageFactory();
    return ROS_frontier_exploration_gencppfactory;
};

frontier_exploration_gencppROSMessageFactory::frontier_exploration_gencppROSMessageFactory()
{
    name("frontier_exploration_gencpp");
    // use constructor to register data types
    frontier_exploration::registerLibrary();
}

frontier_exploration_gencppROSMessageFactory::~frontier_exploration_gencppROSMessageFactory()
{
}

int frontier_exploration_gencppROSMessageFactory::dataType(ros::SerializedMessage & msg)
{
    return msg.message_type;
}

void frontier_exploration_gencppROSMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(ExploreTaskAction::ID);
    info.name(ExploreTaskAction::DATA_TYPE_FULL_NAME);
    info.hashKey(ExploreTaskAction::DATA_VERSION);
    info.md5Key(ExploreTaskAction::VERSION_MD5);
    info.xmlSource(ExploreTaskAction::XML_SOURCE);
    info.flat(ExploreTaskAction::dataTypeFlat());
    ids.push_back(info);

    info.id(ExploreTaskActionFeedback::ID);
    info.name(ExploreTaskActionFeedback::DATA_TYPE_FULL_NAME);
    info.hashKey(ExploreTaskActionFeedback::DATA_VERSION);
    info.md5Key(ExploreTaskActionFeedback::VERSION_MD5);
    info.xmlSource(ExploreTaskActionFeedback::XML_SOURCE);
    info.flat(ExploreTaskActionFeedback::dataTypeFlat());
    ids.push_back(info);

    info.id(ExploreTaskActionGoal::ID);
    info.name(ExploreTaskActionGoal::DATA_TYPE_FULL_NAME);
    info.hashKey(ExploreTaskActionGoal::DATA_VERSION);
    info.md5Key(ExploreTaskActionGoal::VERSION_MD5);
    info.xmlSource(ExploreTaskActionGoal::XML_SOURCE);
    info.flat(ExploreTaskActionGoal::dataTypeFlat());
    ids.push_back(info);

    info.id(ExploreTaskActionResult::ID);
    info.name(ExploreTaskActionResult::DATA_TYPE_FULL_NAME);
    info.hashKey(ExploreTaskActionResult::DATA_VERSION);
    info.md5Key(ExploreTaskActionResult::VERSION_MD5);
    info.xmlSource(ExploreTaskActionResult::XML_SOURCE);
    info.flat(ExploreTaskActionResult::dataTypeFlat());
    ids.push_back(info);

    info.id(ExploreTaskFeedback::ID);
    info.name(ExploreTaskFeedback::DATA_TYPE_FULL_NAME);
    info.hashKey(ExploreTaskFeedback::DATA_VERSION);
    info.md5Key(ExploreTaskFeedback::VERSION_MD5);
    info.xmlSource(ExploreTaskFeedback::XML_SOURCE);
    info.flat(ExploreTaskFeedback::dataTypeFlat());
    ids.push_back(info);

    info.id(ExploreTaskGoal::ID);
    info.name(ExploreTaskGoal::DATA_TYPE_FULL_NAME);
    info.hashKey(ExploreTaskGoal::DATA_VERSION);
    info.md5Key(ExploreTaskGoal::VERSION_MD5);
    info.xmlSource(ExploreTaskGoal::XML_SOURCE);
    info.flat(ExploreTaskGoal::dataTypeFlat());
    ids.push_back(info);

    info.id(ExploreTaskResult::ID);
    info.name(ExploreTaskResult::DATA_TYPE_FULL_NAME);
    info.hashKey(ExploreTaskResult::DATA_VERSION);
    info.md5Key(ExploreTaskResult::VERSION_MD5);
    info.xmlSource(ExploreTaskResult::XML_SOURCE);
    info.flat(ExploreTaskResult::dataTypeFlat());
    ids.push_back(info);

    info.id(Frontier::ID);
    info.name(Frontier::DATA_TYPE_FULL_NAME);
    info.hashKey(Frontier::DATA_VERSION);
    info.md5Key(Frontier::VERSION_MD5);
    info.xmlSource(Frontier::XML_SOURCE);
    info.flat(Frontier::dataTypeFlat());
    ids.push_back(info);

    info.id(GetNextFrontierRequest::ID);
    info.name(GetNextFrontierRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(GetNextFrontierRequest::DATA_VERSION);
    info.md5Key(GetNextFrontierRequest::VERSION_MD5);
    info.xmlSource(GetNextFrontierRequest::XML_SOURCE);
    info.flat(GetNextFrontierRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(GetNextFrontierResponse::ID);
    info.name(GetNextFrontierResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(GetNextFrontierResponse::DATA_VERSION);
    info.md5Key(GetNextFrontierResponse::VERSION_MD5);
    info.xmlSource(GetNextFrontierResponse::XML_SOURCE);
    info.flat(GetNextFrontierResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(GetNextFrontier::ID);
    info.name(GetNextFrontier::DATA_TYPE_FULL_NAME);
    info.hashKey(GetNextFrontier::DATA_VERSION);
    info.md5Key(GetNextFrontier::VERSION_MD5);
    info.xmlSource(GetNextFrontier::XML_SOURCE);
    info.flat(GetNextFrontier::dataTypeFlat());
    ids.push_back(info);

    info.id(UpdateBoundaryPolygonRequest::ID);
    info.name(UpdateBoundaryPolygonRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(UpdateBoundaryPolygonRequest::DATA_VERSION);
    info.md5Key(UpdateBoundaryPolygonRequest::VERSION_MD5);
    info.xmlSource(UpdateBoundaryPolygonRequest::XML_SOURCE);
    info.flat(UpdateBoundaryPolygonRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(UpdateBoundaryPolygonResponse::ID);
    info.name(UpdateBoundaryPolygonResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(UpdateBoundaryPolygonResponse::DATA_VERSION);
    info.md5Key(UpdateBoundaryPolygonResponse::VERSION_MD5);
    info.xmlSource(UpdateBoundaryPolygonResponse::XML_SOURCE);
    info.flat(UpdateBoundaryPolygonResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(UpdateBoundaryPolygon::ID);
    info.name(UpdateBoundaryPolygon::DATA_TYPE_FULL_NAME);
    info.hashKey(UpdateBoundaryPolygon::DATA_VERSION);
    info.md5Key(UpdateBoundaryPolygon::VERSION_MD5);
    info.xmlSource(UpdateBoundaryPolygon::XML_SOURCE);
    info.flat(UpdateBoundaryPolygon::dataTypeFlat());
    ids.push_back(info);

}

int frontier_exploration_gencppROSMessageFactory::typeName(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case ExploreTaskAction::ID:
        {
            str = "frontier_exploration/ExploreTaskAction";
            break;
        }
        case ExploreTaskActionFeedback::ID:
        {
            str = "frontier_exploration/ExploreTaskActionFeedback";
            break;
        }
        case ExploreTaskActionGoal::ID:
        {
            str = "frontier_exploration/ExploreTaskActionGoal";
            break;
        }
        case ExploreTaskActionResult::ID:
        {
            str = "frontier_exploration/ExploreTaskActionResult";
            break;
        }
        case ExploreTaskFeedback::ID:
        {
            str = "frontier_exploration/ExploreTaskFeedback";
            break;
        }
        case ExploreTaskGoal::ID:
        {
            str = "frontier_exploration/ExploreTaskGoal";
            break;
        }
        case ExploreTaskResult::ID:
        {
            str = "frontier_exploration/ExploreTaskResult";
            break;
        }
        case Frontier::ID:
        {
            str = "frontier_exploration/Frontier";
            break;
        }
        case GetNextFrontierRequest::ID:
        {
            str = "frontier_exploration/GetNextFrontierRequest";
            break;
        }
        case GetNextFrontierResponse::ID:
        {
            str = "frontier_exploration/GetNextFrontierResponse";
            break;
        }
        case GetNextFrontier::ID:
        {
            str = "frontier_exploration/GetNextFrontier";
            break;
        }
        case UpdateBoundaryPolygonRequest::ID:
        {
            str = "frontier_exploration/UpdateBoundaryPolygonRequest";
            break;
        }
        case UpdateBoundaryPolygonResponse::ID:
        {
            str = "frontier_exploration/UpdateBoundaryPolygonResponse";
            break;
        }
        case UpdateBoundaryPolygon::ID:
        {
            str = "frontier_exploration/UpdateBoundaryPolygon";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int frontier_exploration_gencppROSMessageFactory::desc(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case ExploreTaskAction::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nExploreTaskActionGoal action_goal\nExploreTaskActionResult action_result\nExploreTaskActionFeedback action_feedback\n\n================================================================================\nMSG: frontier_exploration/ExploreTaskActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nExploreTaskGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: frontier_exploration/ExploreTaskGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#Boundary for frontier exploration\ngeometry_msgs/PolygonStamped explore_boundary\n#Center point for frontier exploration, inside explore_boundary\ngeometry_msgs/PointStamped explore_center\n\n================================================================================\nMSG: geometry_msgs/PolygonStamped\n# This represents a Polygon with reference coordinate frame and timestamp\nHeader header\nPolygon polygon\n\n================================================================================\nMSG: geometry_msgs/Polygon\n#A specification of a polygon where the first and last points are assumed to be connected\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommeded to use Point wherever possible instead of Point32.  \n# \n# This recommendation is to promote interoperability.  \n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.  \n\nfloat32 x\nfloat32 y\nfloat32 z\n================================================================================\nMSG: geometry_msgs/PointStamped\n# This represents a Point with reference coordinate frame and timestamp\nHeader header\nPoint point\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: frontier_exploration/ExploreTaskActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nExploreTaskResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: frontier_exploration/ExploreTaskResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n================================================================================\nMSG: frontier_exploration/ExploreTaskActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nExploreTaskFeedback feedback\n\n================================================================================\nMSG: frontier_exploration/ExploreTaskFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#Current target frontier to explore\ngeometry_msgs/PoseStamped next_frontier\n#Current position of robot\ngeometry_msgs/PoseStamped base_position\n\n\n================================================================================\nMSG: geometry_msgs/PoseStamped\n# A Pose with reference coordinate frame and timestamp\nHeader header\nPose pose\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n";
            break;
        }
        case ExploreTaskActionFeedback::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nExploreTaskFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: frontier_exploration/ExploreTaskFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#Current target frontier to explore\ngeometry_msgs/PoseStamped next_frontier\n#Current position of robot\ngeometry_msgs/PoseStamped base_position\n\n\n================================================================================\nMSG: geometry_msgs/PoseStamped\n# A Pose with reference coordinate frame and timestamp\nHeader header\nPose pose\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n";
            break;
        }
        case ExploreTaskActionGoal::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nExploreTaskGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: frontier_exploration/ExploreTaskGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#Boundary for frontier exploration\ngeometry_msgs/PolygonStamped explore_boundary\n#Center point for frontier exploration, inside explore_boundary\ngeometry_msgs/PointStamped explore_center\n\n================================================================================\nMSG: geometry_msgs/PolygonStamped\n# This represents a Polygon with reference coordinate frame and timestamp\nHeader header\nPolygon polygon\n\n================================================================================\nMSG: geometry_msgs/Polygon\n#A specification of a polygon where the first and last points are assumed to be connected\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommeded to use Point wherever possible instead of Point32.  \n# \n# This recommendation is to promote interoperability.  \n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.  \n\nfloat32 x\nfloat32 y\nfloat32 z\n================================================================================\nMSG: geometry_msgs/PointStamped\n# This represents a Point with reference coordinate frame and timestamp\nHeader header\nPoint point\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n";
            break;
        }
        case ExploreTaskActionResult::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nExploreTaskResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: frontier_exploration/ExploreTaskResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n";
            break;
        }
        case ExploreTaskFeedback::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#Current target frontier to explore\ngeometry_msgs/PoseStamped next_frontier\n#Current position of robot\ngeometry_msgs/PoseStamped base_position\n\n\n================================================================================\nMSG: geometry_msgs/PoseStamped\n# A Pose with reference coordinate frame and timestamp\nHeader header\nPose pose\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n";
            break;
        }
        case ExploreTaskGoal::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n#Boundary for frontier exploration\ngeometry_msgs/PolygonStamped explore_boundary\n#Center point for frontier exploration, inside explore_boundary\ngeometry_msgs/PointStamped explore_center\n\n================================================================================\nMSG: geometry_msgs/PolygonStamped\n# This represents a Polygon with reference coordinate frame and timestamp\nHeader header\nPolygon polygon\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Polygon\n#A specification of a polygon where the first and last points are assumed to be connected\nPoint32[] points\n\n================================================================================\nMSG: geometry_msgs/Point32\n# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommeded to use Point wherever possible instead of Point32.  \n# \n# This recommendation is to promote interoperability.  \n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.  \n\nfloat32 x\nfloat32 y\nfloat32 z\n================================================================================\nMSG: geometry_msgs/PointStamped\n# This represents a Point with reference coordinate frame and timestamp\nHeader header\nPoint point\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n";
            break;
        }
        case ExploreTaskResult::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n";
            break;
        }
        case Frontier::ID:
        {
            str = "uint32 size\nfloat64 min_distance\ngeometry_msgs/Point initial\ngeometry_msgs/Point centroid\ngeometry_msgs/Point middle\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n";
            break;
        }
        case GetNextFrontierRequest::ID:
        {
            str = GetNextFrontierRequest::XML_SOURCE;
            break;
        }
        case GetNextFrontierResponse::ID:
        {
            str = GetNextFrontierResponse::XML_SOURCE;
            break;
        }
        case GetNextFrontier::ID:
        {
            str = GetNextFrontier::XML_SOURCE;
            break;
        }
        case UpdateBoundaryPolygonRequest::ID:
        {
            str = UpdateBoundaryPolygonRequest::XML_SOURCE;
            break;
        }
        case UpdateBoundaryPolygonResponse::ID:
        {
            str = UpdateBoundaryPolygonResponse::XML_SOURCE;
            break;
        }
        case UpdateBoundaryPolygon::ID:
        {
            str = UpdateBoundaryPolygon::XML_SOURCE;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int frontier_exploration_gencppROSMessageFactory::md5String(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case ExploreTaskAction::ID:
        {
            str = "8208995b39421491532c2e9386bfec35";
            break;
        }
        case ExploreTaskActionFeedback::ID:
        {
            str = "11b891614a80e5279e0720e16a4e4612";
            break;
        }
        case ExploreTaskActionGoal::ID:
        {
            str = "9636099f4dce4531a0248d068494bc98";
            break;
        }
        case ExploreTaskActionResult::ID:
        {
            str = "1eb06eeff08fa7ea874431638cb52332";
            break;
        }
        case ExploreTaskFeedback::ID:
        {
            str = "00baaad5b6065fdad0f528586c3caaf2";
            break;
        }
        case ExploreTaskGoal::ID:
        {
            str = "b5f41b52fbca52a68ff7363f86187dbf";
            break;
        }
        case ExploreTaskResult::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case Frontier::ID:
        {
            str = "1325c0e43f607455fdee9e36462f6ba0";
            break;
        }
        case GetNextFrontierRequest::ID:
        {
            str = "5b059506b52a2ec83de1e33422377a1b";
            break;
        }
        case GetNextFrontierResponse::ID:
        {
            str = "df2ac5789785e819aa300966fa36644e";
            break;
        }
        case GetNextFrontier::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case UpdateBoundaryPolygonRequest::ID:
        {
            str = "fcd73e86a17cffec115813ce5a863c84";
            break;
        }
        case UpdateBoundaryPolygonResponse::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case UpdateBoundaryPolygon::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int frontier_exploration_gencppROSMessageFactory::md5(unsigned long long & highOrder, unsigned long long & lowOrder, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case ExploreTaskAction::ID:
        {   
		    highOrder = 0x8208995b39421491ULL;
            lowOrder = 0x532c2e9386bfec35ULL;
            break;
        }
        case ExploreTaskActionFeedback::ID:
        {   
		    highOrder = 0x11b891614a80e527ULL;
            lowOrder = 0x9e0720e16a4e4612ULL;
            break;
        }
        case ExploreTaskActionGoal::ID:
        {   
		    highOrder = 0x9636099f4dce4531ULL;
            lowOrder = 0xa0248d068494bc98ULL;
            break;
        }
        case ExploreTaskActionResult::ID:
        {   
		    highOrder = 0x1eb06eeff08fa7eaULL;
            lowOrder = 0x874431638cb52332ULL;
            break;
        }
        case ExploreTaskFeedback::ID:
        {   
		    highOrder = 0x00baaad5b6065fdaULL;
            lowOrder = 0xd0f528586c3caaf2ULL;
            break;
        }
        case ExploreTaskGoal::ID:
        {   
		    highOrder = 0xb5f41b52fbca52a6ULL;
            lowOrder = 0x8ff7363f86187dbfULL;
            break;
        }
        case ExploreTaskResult::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case Frontier::ID:
        {   
		    highOrder = 0x1325c0e43f607455ULL;
            lowOrder = 0xfdee9e36462f6ba0ULL;
            break;
        }
        case GetNextFrontierRequest::ID:
        {   
		    highOrder = 0x5b059506b52a2ec8ULL;
            lowOrder = 0x3de1e33422377a1bULL;
            break;
        }
        case GetNextFrontierResponse::ID:
        {   
		    highOrder = 0xdf2ac5789785e819ULL;
            lowOrder = 0xaa300966fa36644eULL;
            break;
        }
        case GetNextFrontier::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case UpdateBoundaryPolygonRequest::ID:
        {   
		    highOrder = 0xfcd73e86a17cffecULL;
            lowOrder = 0x115813ce5a863c84ULL;
            break;
        }
        case UpdateBoundaryPolygonResponse::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case UpdateBoundaryPolygon::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int frontier_exploration_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<ros::SerializedMessage> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case ExploreTaskAction::ID:
        case ExploreTaskActionFeedback::ID:
        case ExploreTaskActionGoal::ID:
        case ExploreTaskActionResult::ID:
        case ExploreTaskFeedback::ID:
        case ExploreTaskGoal::ID:
        case ExploreTaskResult::ID:
        case Frontier::ID:
        case GetNextFrontierRequest::ID:
        case GetNextFrontierResponse::ID:
        case GetNextFrontier::ID:
        case UpdateBoundaryPolygonRequest::ID:
        case UpdateBoundaryPolygonResponse::ID:
        case UpdateBoundaryPolygon::ID:
        {
            break;
        } 
        default:
	    {
            retval = rframe::Error::PARAM_RANGE;
            break;
	    }
    }

    if (retval == rframe::Error::SUCCESS)
	{
        std::shared_ptr<ros::SerializedMessage> newmsg(new ros::SerializedMessage);

        if (newmsg.get() == NULL)
	    {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else
	    {
            newmsg->message_type = id;
            msg.swap(newmsg);
        }
    }

    return retval;
}

int frontier_exploration_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case ExploreTaskAction::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<ExploreTaskAction>(),std::bind(&frontier_exploration_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case ExploreTaskActionFeedback::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<ExploreTaskActionFeedback>(),std::bind(&frontier_exploration_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case ExploreTaskActionGoal::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<ExploreTaskActionGoal>(),std::bind(&frontier_exploration_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case ExploreTaskActionResult::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<ExploreTaskActionResult>(),std::bind(&frontier_exploration_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case ExploreTaskFeedback::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<ExploreTaskFeedback>(),std::bind(&frontier_exploration_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case ExploreTaskGoal::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<ExploreTaskGoal>(),std::bind(&frontier_exploration_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case ExploreTaskResult::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<ExploreTaskResult>(),std::bind(&frontier_exploration_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case Frontier::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<Frontier>(),std::bind(&frontier_exploration_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetNextFrontierRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetNextFrontierRequest>(),std::bind(&frontier_exploration_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetNextFrontierResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetNextFrontierResponse>(),std::bind(&frontier_exploration_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetNextFrontier::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetNextFrontier>(),std::bind(&frontier_exploration_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case UpdateBoundaryPolygonRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<UpdateBoundaryPolygonRequest>(),std::bind(&frontier_exploration_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case UpdateBoundaryPolygonResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<UpdateBoundaryPolygonResponse>(),std::bind(&frontier_exploration_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case UpdateBoundaryPolygon::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<UpdateBoundaryPolygon>(),std::bind(&frontier_exploration_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            retval = rframe::Error::PARAM_RANGE;
        }
    }

    return retval;
}

int frontier_exploration_gencppROSMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
	{
        delete msg;
    }

    return retval;
}

int frontier_exploration_gencppROSMessageFactory::deallocateTransport(ros::SerializedMessage * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        delete msg;
    }

    return retval;
}

int frontier_exploration_gencppROSMessageFactory::toTransport(MessageBase & src, ros::SerializedMessage & dst)
{
    int retval = rframe::Error::SUCCESS;

    if (dst.message_type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.message_type)
        { 
            case ExploreTaskAction::ID:
            {
                Message<ExploreTaskAction > & tempSrc = static_cast<Message<ExploreTaskAction>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: frontier_exploration_gencpp::ExploreTaskAction buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case ExploreTaskActionFeedback::ID:
            {
                Message<ExploreTaskActionFeedback > & tempSrc = static_cast<Message<ExploreTaskActionFeedback>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: frontier_exploration_gencpp::ExploreTaskActionFeedback buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case ExploreTaskActionGoal::ID:
            {
                Message<ExploreTaskActionGoal > & tempSrc = static_cast<Message<ExploreTaskActionGoal>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: frontier_exploration_gencpp::ExploreTaskActionGoal buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case ExploreTaskActionResult::ID:
            {
                Message<ExploreTaskActionResult > & tempSrc = static_cast<Message<ExploreTaskActionResult>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: frontier_exploration_gencpp::ExploreTaskActionResult buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case ExploreTaskFeedback::ID:
            {
                Message<ExploreTaskFeedback > & tempSrc = static_cast<Message<ExploreTaskFeedback>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: frontier_exploration_gencpp::ExploreTaskFeedback buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case ExploreTaskGoal::ID:
            {
                Message<ExploreTaskGoal > & tempSrc = static_cast<Message<ExploreTaskGoal>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: frontier_exploration_gencpp::ExploreTaskGoal buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case ExploreTaskResult::ID:
            {
                Message<ExploreTaskResult > & tempSrc = static_cast<Message<ExploreTaskResult>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: frontier_exploration_gencpp::ExploreTaskResult buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case Frontier::ID:
            {
                Message<Frontier > & tempSrc = static_cast<Message<Frontier>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: frontier_exploration_gencpp::Frontier buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetNextFrontierRequest::ID:
            {
                Message<GetNextFrontierRequest > & tempSrc = static_cast<Message<GetNextFrontierRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: frontier_exploration_gencpp::GetNextFrontierRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetNextFrontierResponse::ID:
            {
                Message<GetNextFrontierResponse > & tempSrc = static_cast<Message<GetNextFrontierResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: frontier_exploration_gencpp::GetNextFrontierResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetNextFrontier::ID:
            {
                Message<GetNextFrontier > & tempSrc = static_cast<Message<GetNextFrontier>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: frontier_exploration_gencpp::GetNextFrontier buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case UpdateBoundaryPolygonRequest::ID:
            {
                Message<UpdateBoundaryPolygonRequest > & tempSrc = static_cast<Message<UpdateBoundaryPolygonRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: frontier_exploration_gencpp::UpdateBoundaryPolygonRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case UpdateBoundaryPolygonResponse::ID:
            {
                Message<UpdateBoundaryPolygonResponse > & tempSrc = static_cast<Message<UpdateBoundaryPolygonResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: frontier_exploration_gencpp::UpdateBoundaryPolygonResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case UpdateBoundaryPolygon::ID:
            {
                Message<UpdateBoundaryPolygon > & tempSrc = static_cast<Message<UpdateBoundaryPolygon>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: frontier_exploration_gencpp::UpdateBoundaryPolygon buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int frontier_exploration_gencppROSMessageFactory::fromTransport(ros::SerializedMessage & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.message_type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.message_type)
        { 
            case ExploreTaskAction::ID:
            {
                Message<ExploreTaskAction > & tempDst = static_cast<Message<ExploreTaskAction>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case ExploreTaskActionFeedback::ID:
            {
                Message<ExploreTaskActionFeedback > & tempDst = static_cast<Message<ExploreTaskActionFeedback>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case ExploreTaskActionGoal::ID:
            {
                Message<ExploreTaskActionGoal > & tempDst = static_cast<Message<ExploreTaskActionGoal>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case ExploreTaskActionResult::ID:
            {
                Message<ExploreTaskActionResult > & tempDst = static_cast<Message<ExploreTaskActionResult>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case ExploreTaskFeedback::ID:
            {
                Message<ExploreTaskFeedback > & tempDst = static_cast<Message<ExploreTaskFeedback>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case ExploreTaskGoal::ID:
            {
                Message<ExploreTaskGoal > & tempDst = static_cast<Message<ExploreTaskGoal>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case ExploreTaskResult::ID:
            {
                Message<ExploreTaskResult > & tempDst = static_cast<Message<ExploreTaskResult>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case Frontier::ID:
            {
                Message<Frontier > & tempDst = static_cast<Message<Frontier>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetNextFrontierRequest::ID:
            {
                Message<GetNextFrontierRequest > & tempDst = static_cast<Message<GetNextFrontierRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetNextFrontierResponse::ID:
            {
                Message<GetNextFrontierResponse > & tempDst = static_cast<Message<GetNextFrontierResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetNextFrontier::ID:
            {
                Message<GetNextFrontier > & tempDst = static_cast<Message<GetNextFrontier>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case UpdateBoundaryPolygonRequest::ID:
            {
                Message<UpdateBoundaryPolygonRequest > & tempDst = static_cast<Message<UpdateBoundaryPolygonRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case UpdateBoundaryPolygonResponse::ID:
            {
                Message<UpdateBoundaryPolygonResponse > & tempDst = static_cast<Message<UpdateBoundaryPolygonResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case UpdateBoundaryPolygon::ID:
            {
                Message<UpdateBoundaryPolygon > & tempDst = static_cast<Message<UpdateBoundaryPolygon>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int frontier_exploration_gencppROSMessageFactory::updateHeader(rframe::MessageBase &msg, unsigned int seqNo)
{
    int retval = rframe::Error::SUCCESS;

    switch (msg.id())
    {   
        // ExploreTaskAction does not have a Header as its first member 
        case ExploreTaskActionFeedback::ID:
        {
            Message<ExploreTaskActionFeedback > & tempMsg = static_cast<Message<ExploreTaskActionFeedback>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        case ExploreTaskActionGoal::ID:
        {
            Message<ExploreTaskActionGoal > & tempMsg = static_cast<Message<ExploreTaskActionGoal>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        case ExploreTaskActionResult::ID:
        {
            Message<ExploreTaskActionResult > & tempMsg = static_cast<Message<ExploreTaskActionResult>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        // ExploreTaskFeedback does not have a Header as its first member 
        // ExploreTaskGoal does not have a Header as its first member 
        // Frontier does not have a Header as its first member 
        // GetNextFrontierRequest does not have a Header as its first member 
        // GetNextFrontierResponse does not have a Header as its first member 
        // GetNextFrontier does not have a Header as its first member 
        // UpdateBoundaryPolygonRequest does not have a Header as its first member 
        // UpdateBoundaryPolygon does not have a Header as its first member 
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

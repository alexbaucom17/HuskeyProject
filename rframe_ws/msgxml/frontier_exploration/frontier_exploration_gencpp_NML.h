// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:30:54 -0500
//  From Template/Script: data_templates/NMLHeaderTemplate.h
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#ifndef _CODEGEN_FRONTIER_EXPLORATION_GENCPPNML_H_
#define _CODEGEN_FRONTIER_EXPLORATION_GENCPPNML_H_

#include <messaging/nml/NMLMessageFactory.h>
//#include <DataTypeInfo.h>
#include <messaging/Message.h>

#include "frontier_exploration_gencpp_NMLSupport.h"

namespace rframe { class DataTypeInfo; };

#include "ExploreTaskAction.h"
#include "ExploreTaskActionFeedback.h"
#include "ExploreTaskActionGoal.h"
#include "ExploreTaskActionResult.h"
#include "ExploreTaskFeedback.h"
#include "ExploreTaskGoal.h"
#include "ExploreTaskResult.h"
#include "Frontier.h"
#include "GetNextFrontierRequest.h"
#include "GetNextFrontierResponse.h"
#include "GetNextFrontier.h"
#include "UpdateBoundaryPolygonRequest.h"
#include "UpdateBoundaryPolygonResponse.h"
#include "UpdateBoundaryPolygon.h"

namespace frontier_exploration {

    /** definition of message factory for frontier_exploration_gencpp */
    class frontier_exploration_gencppNMLMessageFactory : public NMLMessageFactory
    {
    public:
        /** constructor */
        frontier_exploration_gencppNMLMessageFactory();
        /** destructor */
        virtual ~frontier_exploration_gencppNMLMessageFactory();

        /** see  rframe::MessageFactoryInterface */
        virtual void dataTypes(std::vector<DataTypeInfo> & ids);
        /** see  rframe::MessageFactoryInterface */
        virtual int dataType(NMLmsg & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<NMLmsg> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateTransport(NMLmsg * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateMessage(MessageBase * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int toTransport( MessageBase & src, NMLmsg & dst);
        /** see  rframe::MessageFactoryInterface */
        virtual int fromTransport( NMLmsg & src, MessageBase & dst);

        /** \return poitner to nml format function */
        virtual NML_FORMAT_PTR FormatPointer();
        /** run constructor for class of type id in the provided buffer */
        virtual int constructBuffer(rframe::ID_TYPE id, void * buffer);
        /** run destructor for class of type id in the buffer */
        virtual int destructBuffer(rframe::ID_TYPE id, void * buffer);
    };

    /** factory allocation function for use when not dynamically loading the factory library  */
    NMLMessageFactory * allocate_frontier_exploration_gencpp();

    /** NML interface for ExploreTaskAction 

    */
    class ExploreTaskActionNML : public NMLmsg
    {
    public:

        /** constructor */
        ExploreTaskActionNML();
        /** destructor */
        ~ExploreTaskActionNML();

        /** assignment operator */
        ExploreTaskActionNML & operator=(const ExploreTaskActionNML &inobj);
        /** assignment operator for base data class */
        ExploreTaskActionNML & operator=(const ExploreTaskAction &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        ExploreTaskAction nmlPayload;

        /** set payload */
        void payload(const ExploreTaskAction &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<ExploreTaskAction> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        ExploreTaskAction * payload() { return & nmlPayload; };

    //     std::shared_ptr<ExploreTaskAction> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for ExploreTaskActionFeedback 

    */
    class ExploreTaskActionFeedbackNML : public NMLmsg
    {
    public:

        /** constructor */
        ExploreTaskActionFeedbackNML();
        /** destructor */
        ~ExploreTaskActionFeedbackNML();

        /** assignment operator */
        ExploreTaskActionFeedbackNML & operator=(const ExploreTaskActionFeedbackNML &inobj);
        /** assignment operator for base data class */
        ExploreTaskActionFeedbackNML & operator=(const ExploreTaskActionFeedback &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        ExploreTaskActionFeedback nmlPayload;

        /** set payload */
        void payload(const ExploreTaskActionFeedback &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<ExploreTaskActionFeedback> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        ExploreTaskActionFeedback * payload() { return & nmlPayload; };

    //     std::shared_ptr<ExploreTaskActionFeedback> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for ExploreTaskActionGoal 

    */
    class ExploreTaskActionGoalNML : public NMLmsg
    {
    public:

        /** constructor */
        ExploreTaskActionGoalNML();
        /** destructor */
        ~ExploreTaskActionGoalNML();

        /** assignment operator */
        ExploreTaskActionGoalNML & operator=(const ExploreTaskActionGoalNML &inobj);
        /** assignment operator for base data class */
        ExploreTaskActionGoalNML & operator=(const ExploreTaskActionGoal &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        ExploreTaskActionGoal nmlPayload;

        /** set payload */
        void payload(const ExploreTaskActionGoal &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<ExploreTaskActionGoal> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        ExploreTaskActionGoal * payload() { return & nmlPayload; };

    //     std::shared_ptr<ExploreTaskActionGoal> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for ExploreTaskActionResult 

    */
    class ExploreTaskActionResultNML : public NMLmsg
    {
    public:

        /** constructor */
        ExploreTaskActionResultNML();
        /** destructor */
        ~ExploreTaskActionResultNML();

        /** assignment operator */
        ExploreTaskActionResultNML & operator=(const ExploreTaskActionResultNML &inobj);
        /** assignment operator for base data class */
        ExploreTaskActionResultNML & operator=(const ExploreTaskActionResult &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        ExploreTaskActionResult nmlPayload;

        /** set payload */
        void payload(const ExploreTaskActionResult &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<ExploreTaskActionResult> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        ExploreTaskActionResult * payload() { return & nmlPayload; };

    //     std::shared_ptr<ExploreTaskActionResult> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for ExploreTaskFeedback 

    */
    class ExploreTaskFeedbackNML : public NMLmsg
    {
    public:

        /** constructor */
        ExploreTaskFeedbackNML();
        /** destructor */
        ~ExploreTaskFeedbackNML();

        /** assignment operator */
        ExploreTaskFeedbackNML & operator=(const ExploreTaskFeedbackNML &inobj);
        /** assignment operator for base data class */
        ExploreTaskFeedbackNML & operator=(const ExploreTaskFeedback &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        ExploreTaskFeedback nmlPayload;

        /** set payload */
        void payload(const ExploreTaskFeedback &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<ExploreTaskFeedback> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        ExploreTaskFeedback * payload() { return & nmlPayload; };

    //     std::shared_ptr<ExploreTaskFeedback> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for ExploreTaskGoal 

    */
    class ExploreTaskGoalNML : public NMLmsg
    {
    public:

        /** constructor */
        ExploreTaskGoalNML();
        /** destructor */
        ~ExploreTaskGoalNML();

        /** assignment operator */
        ExploreTaskGoalNML & operator=(const ExploreTaskGoalNML &inobj);
        /** assignment operator for base data class */
        ExploreTaskGoalNML & operator=(const ExploreTaskGoal &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        ExploreTaskGoal nmlPayload;

        /** set payload */
        void payload(const ExploreTaskGoal &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<ExploreTaskGoal> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        ExploreTaskGoal * payload() { return & nmlPayload; };

    //     std::shared_ptr<ExploreTaskGoal> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for ExploreTaskResult 

    */
    class ExploreTaskResultNML : public NMLmsg
    {
    public:

        /** constructor */
        ExploreTaskResultNML();
        /** destructor */
        ~ExploreTaskResultNML();

        /** assignment operator */
        ExploreTaskResultNML & operator=(const ExploreTaskResultNML &inobj);
        /** assignment operator for base data class */
        ExploreTaskResultNML & operator=(const ExploreTaskResult &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        ExploreTaskResult nmlPayload;

        /** set payload */
        void payload(const ExploreTaskResult &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<ExploreTaskResult> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        ExploreTaskResult * payload() { return & nmlPayload; };

    //     std::shared_ptr<ExploreTaskResult> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Frontier 

    */
    class FrontierNML : public NMLmsg
    {
    public:

        /** constructor */
        FrontierNML();
        /** destructor */
        ~FrontierNML();

        /** assignment operator */
        FrontierNML & operator=(const FrontierNML &inobj);
        /** assignment operator for base data class */
        FrontierNML & operator=(const Frontier &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Frontier nmlPayload;

        /** set payload */
        void payload(const Frontier &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Frontier> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Frontier * payload() { return & nmlPayload; };

    //     std::shared_ptr<Frontier> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetNextFrontierRequest 

    */
    class GetNextFrontierRequestNML : public NMLmsg
    {
    public:

        /** constructor */
        GetNextFrontierRequestNML();
        /** destructor */
        ~GetNextFrontierRequestNML();

        /** assignment operator */
        GetNextFrontierRequestNML & operator=(const GetNextFrontierRequestNML &inobj);
        /** assignment operator for base data class */
        GetNextFrontierRequestNML & operator=(const GetNextFrontierRequest &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetNextFrontierRequest nmlPayload;

        /** set payload */
        void payload(const GetNextFrontierRequest &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetNextFrontierRequest> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetNextFrontierRequest * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetNextFrontierRequest> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetNextFrontierResponse 

    */
    class GetNextFrontierResponseNML : public NMLmsg
    {
    public:

        /** constructor */
        GetNextFrontierResponseNML();
        /** destructor */
        ~GetNextFrontierResponseNML();

        /** assignment operator */
        GetNextFrontierResponseNML & operator=(const GetNextFrontierResponseNML &inobj);
        /** assignment operator for base data class */
        GetNextFrontierResponseNML & operator=(const GetNextFrontierResponse &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetNextFrontierResponse nmlPayload;

        /** set payload */
        void payload(const GetNextFrontierResponse &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetNextFrontierResponse> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetNextFrontierResponse * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetNextFrontierResponse> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetNextFrontier 

    */
    class GetNextFrontierNML : public NMLmsg
    {
    public:

        /** constructor */
        GetNextFrontierNML();
        /** destructor */
        ~GetNextFrontierNML();

        /** assignment operator */
        GetNextFrontierNML & operator=(const GetNextFrontierNML &inobj);
        /** assignment operator for base data class */
        GetNextFrontierNML & operator=(const GetNextFrontier &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetNextFrontier nmlPayload;

        /** set payload */
        void payload(const GetNextFrontier &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetNextFrontier> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetNextFrontier * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetNextFrontier> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for UpdateBoundaryPolygonRequest 

    */
    class UpdateBoundaryPolygonRequestNML : public NMLmsg
    {
    public:

        /** constructor */
        UpdateBoundaryPolygonRequestNML();
        /** destructor */
        ~UpdateBoundaryPolygonRequestNML();

        /** assignment operator */
        UpdateBoundaryPolygonRequestNML & operator=(const UpdateBoundaryPolygonRequestNML &inobj);
        /** assignment operator for base data class */
        UpdateBoundaryPolygonRequestNML & operator=(const UpdateBoundaryPolygonRequest &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        UpdateBoundaryPolygonRequest nmlPayload;

        /** set payload */
        void payload(const UpdateBoundaryPolygonRequest &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<UpdateBoundaryPolygonRequest> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        UpdateBoundaryPolygonRequest * payload() { return & nmlPayload; };

    //     std::shared_ptr<UpdateBoundaryPolygonRequest> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for UpdateBoundaryPolygonResponse 

    */
    class UpdateBoundaryPolygonResponseNML : public NMLmsg
    {
    public:

        /** constructor */
        UpdateBoundaryPolygonResponseNML();
        /** destructor */
        ~UpdateBoundaryPolygonResponseNML();

        /** assignment operator */
        UpdateBoundaryPolygonResponseNML & operator=(const UpdateBoundaryPolygonResponseNML &inobj);
        /** assignment operator for base data class */
        UpdateBoundaryPolygonResponseNML & operator=(const UpdateBoundaryPolygonResponse &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        UpdateBoundaryPolygonResponse nmlPayload;

        /** set payload */
        void payload(const UpdateBoundaryPolygonResponse &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<UpdateBoundaryPolygonResponse> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        UpdateBoundaryPolygonResponse * payload() { return & nmlPayload; };

    //     std::shared_ptr<UpdateBoundaryPolygonResponse> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for UpdateBoundaryPolygon 

    */
    class UpdateBoundaryPolygonNML : public NMLmsg
    {
    public:

        /** constructor */
        UpdateBoundaryPolygonNML();
        /** destructor */
        ~UpdateBoundaryPolygonNML();

        /** assignment operator */
        UpdateBoundaryPolygonNML & operator=(const UpdateBoundaryPolygonNML &inobj);
        /** assignment operator for base data class */
        UpdateBoundaryPolygonNML & operator=(const UpdateBoundaryPolygon &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        UpdateBoundaryPolygon nmlPayload;

        /** set payload */
        void payload(const UpdateBoundaryPolygon &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<UpdateBoundaryPolygon> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        UpdateBoundaryPolygon * payload() { return & nmlPayload; };

    //     std::shared_ptr<UpdateBoundaryPolygon> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    // predeclaration of nmlupdate functions (necessary due to namespaces )

    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, frontier_exploration::ExploreTaskAction & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, frontier_exploration::ExploreTaskActionFeedback & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, frontier_exploration::ExploreTaskActionGoal & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, frontier_exploration::ExploreTaskActionResult & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, frontier_exploration::ExploreTaskFeedback & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, frontier_exploration::ExploreTaskGoal & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, frontier_exploration::ExploreTaskResult & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, frontier_exploration::Frontier & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, frontier_exploration::GetNextFrontierRequest & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, frontier_exploration::GetNextFrontierResponse & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, frontier_exploration::GetNextFrontier & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, frontier_exploration::UpdateBoundaryPolygonRequest & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, frontier_exploration::UpdateBoundaryPolygonResponse & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, frontier_exploration::UpdateBoundaryPolygon & inobj);

    /** nml format function */
    int frontier_exploration_gencpp_format(NMLTYPE type, void * buffer, CMS* cms);

}; // end namespace frontier_exploration

#endif // _FRONTIER_EXPLORATION_GENCPPNML_H_

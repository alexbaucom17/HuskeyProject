// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:30:54 -0500
//  From Template/Script: data_templates/DataLibraryTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "frontier_exploration_gencpp_Library.h"
#include <common/Log.h>
#include <common/TypeRegistry.h>
#include <messaging/Message.h>

#include <frontier_exploration/ExploreTaskAction.h>
#include <frontier_exploration/ExploreTaskActionFeedback.h>
#include <frontier_exploration/ExploreTaskActionGoal.h>
#include <frontier_exploration/ExploreTaskActionResult.h>
#include <frontier_exploration/ExploreTaskFeedback.h>
#include <frontier_exploration/ExploreTaskGoal.h>
#include <frontier_exploration/ExploreTaskResult.h>
#include <frontier_exploration/Frontier.h>
#include <frontier_exploration/GetNextFrontierRequest.h>
#include <frontier_exploration/GetNextFrontierResponse.h>
#include <frontier_exploration/GetNextFrontier.h>
#include <frontier_exploration/UpdateBoundaryPolygonRequest.h>
#include <frontier_exploration/UpdateBoundaryPolygonResponse.h>
#include <frontier_exploration/UpdateBoundaryPolygon.h>

extern "C"
{
    /** library access method */
    int rframeRegisterDataLibrary()
    {
        return frontier_exploration::registerLibrary();
    };
}

namespace frontier_exploration
{

    static void deallocateMessage(MessageBase * msg)
    {
        delete msg;
    }

    static int allocateMessage(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
    {
        int retval = rframe::Error::SUCCESS;
        bool found = true;
        switch (id)
        { 
            case ExploreTaskAction::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<ExploreTaskAction>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case ExploreTaskActionFeedback::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<ExploreTaskActionFeedback>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case ExploreTaskActionGoal::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<ExploreTaskActionGoal>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case ExploreTaskActionResult::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<ExploreTaskActionResult>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case ExploreTaskFeedback::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<ExploreTaskFeedback>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case ExploreTaskGoal::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<ExploreTaskGoal>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case ExploreTaskResult::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<ExploreTaskResult>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Frontier::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Frontier>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case GetNextFrontierRequest::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<GetNextFrontierRequest>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case GetNextFrontierResponse::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<GetNextFrontierResponse>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case GetNextFrontier::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<GetNextFrontier>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case UpdateBoundaryPolygonRequest::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<UpdateBoundaryPolygonRequest>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case UpdateBoundaryPolygonResponse::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<UpdateBoundaryPolygonResponse>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case UpdateBoundaryPolygon::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<UpdateBoundaryPolygon>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            default:
            {
                found = false;
            }
        }

        if (found == false)
        {
            retval = rframe::Error::PARAM_RANGE;
        }
        else if (msg.get() == NULL)
        {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else if (msg.get() != NULL)
        {
            retval = rframe::Error::SUCCESS;
        }

        return retval;
    }

    /** registry this data set with the system */
    //int register_frontier_exploration_gencpp()
    int registerLibrary()
    {
        int retval = rframe::Error::SUCCESS;
        static bool registered = false;
        rframe::TypeRegistry & reg = rframe::TypeRegistry::instance();

        LOG_INFO("registering data for library: frontier_exploration_gencpp");

        if (registered == false)
        {
            registered = true;

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::ExploreTaskAction::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<frontier_exploration::ExploreTaskAction>(
                    // boost::lambda::new_ptr<frontier_exploration::ExploreTaskAction>(),
                    [](){ return new frontier_exploration::ExploreTaskAction(); },
                                std::bind(allocateMessage,frontier_exploration::ExploreTaskAction::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: ExploreTaskAction");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::ExploreTaskAction::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(frontier_exploration::ExploreTaskAction::DATA_TYPE_NAME,frontier_exploration::ExploreTaskAction::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: ExploreTaskAction");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::ExploreTaskActionFeedback::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<frontier_exploration::ExploreTaskActionFeedback>(
                    // boost::lambda::new_ptr<frontier_exploration::ExploreTaskActionFeedback>(),
                    [](){ return new frontier_exploration::ExploreTaskActionFeedback(); },
                                std::bind(allocateMessage,frontier_exploration::ExploreTaskActionFeedback::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: ExploreTaskActionFeedback");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::ExploreTaskActionFeedback::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(frontier_exploration::ExploreTaskActionFeedback::DATA_TYPE_NAME,frontier_exploration::ExploreTaskActionFeedback::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: ExploreTaskActionFeedback");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::ExploreTaskActionGoal::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<frontier_exploration::ExploreTaskActionGoal>(
                    // boost::lambda::new_ptr<frontier_exploration::ExploreTaskActionGoal>(),
                    [](){ return new frontier_exploration::ExploreTaskActionGoal(); },
                                std::bind(allocateMessage,frontier_exploration::ExploreTaskActionGoal::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: ExploreTaskActionGoal");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::ExploreTaskActionGoal::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(frontier_exploration::ExploreTaskActionGoal::DATA_TYPE_NAME,frontier_exploration::ExploreTaskActionGoal::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: ExploreTaskActionGoal");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::ExploreTaskActionResult::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<frontier_exploration::ExploreTaskActionResult>(
                    // boost::lambda::new_ptr<frontier_exploration::ExploreTaskActionResult>(),
                    [](){ return new frontier_exploration::ExploreTaskActionResult(); },
                                std::bind(allocateMessage,frontier_exploration::ExploreTaskActionResult::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: ExploreTaskActionResult");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::ExploreTaskActionResult::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(frontier_exploration::ExploreTaskActionResult::DATA_TYPE_NAME,frontier_exploration::ExploreTaskActionResult::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: ExploreTaskActionResult");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::ExploreTaskFeedback::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<frontier_exploration::ExploreTaskFeedback>(
                    // boost::lambda::new_ptr<frontier_exploration::ExploreTaskFeedback>(),
                    [](){ return new frontier_exploration::ExploreTaskFeedback(); },
                                std::bind(allocateMessage,frontier_exploration::ExploreTaskFeedback::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: ExploreTaskFeedback");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::ExploreTaskFeedback::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(frontier_exploration::ExploreTaskFeedback::DATA_TYPE_NAME,frontier_exploration::ExploreTaskFeedback::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: ExploreTaskFeedback");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::ExploreTaskGoal::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<frontier_exploration::ExploreTaskGoal>(
                    // boost::lambda::new_ptr<frontier_exploration::ExploreTaskGoal>(),
                    [](){ return new frontier_exploration::ExploreTaskGoal(); },
                                std::bind(allocateMessage,frontier_exploration::ExploreTaskGoal::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: ExploreTaskGoal");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::ExploreTaskGoal::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(frontier_exploration::ExploreTaskGoal::DATA_TYPE_NAME,frontier_exploration::ExploreTaskGoal::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: ExploreTaskGoal");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::ExploreTaskResult::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<frontier_exploration::ExploreTaskResult>(
                    // boost::lambda::new_ptr<frontier_exploration::ExploreTaskResult>(),
                    [](){ return new frontier_exploration::ExploreTaskResult(); },
                                std::bind(allocateMessage,frontier_exploration::ExploreTaskResult::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: ExploreTaskResult");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::ExploreTaskResult::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(frontier_exploration::ExploreTaskResult::DATA_TYPE_NAME,frontier_exploration::ExploreTaskResult::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: ExploreTaskResult");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::Frontier::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<frontier_exploration::Frontier>(
                    // boost::lambda::new_ptr<frontier_exploration::Frontier>(),
                    [](){ return new frontier_exploration::Frontier(); },
                                std::bind(allocateMessage,frontier_exploration::Frontier::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Frontier");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::Frontier::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(frontier_exploration::Frontier::DATA_TYPE_NAME,frontier_exploration::Frontier::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Frontier");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::GetNextFrontierRequest::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<frontier_exploration::GetNextFrontierRequest>(
                    // boost::lambda::new_ptr<frontier_exploration::GetNextFrontierRequest>(),
                    [](){ return new frontier_exploration::GetNextFrontierRequest(); },
                                std::bind(allocateMessage,frontier_exploration::GetNextFrontierRequest::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: GetNextFrontierRequest");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::GetNextFrontierRequest::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(frontier_exploration::GetNextFrontierRequest::DATA_TYPE_NAME,frontier_exploration::GetNextFrontierRequest::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: GetNextFrontierRequest");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::GetNextFrontierResponse::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<frontier_exploration::GetNextFrontierResponse>(
                    // boost::lambda::new_ptr<frontier_exploration::GetNextFrontierResponse>(),
                    [](){ return new frontier_exploration::GetNextFrontierResponse(); },
                                std::bind(allocateMessage,frontier_exploration::GetNextFrontierResponse::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: GetNextFrontierResponse");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::GetNextFrontierResponse::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(frontier_exploration::GetNextFrontierResponse::DATA_TYPE_NAME,frontier_exploration::GetNextFrontierResponse::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: GetNextFrontierResponse");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::GetNextFrontier::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<frontier_exploration::GetNextFrontier>(
                    // boost::lambda::new_ptr<frontier_exploration::GetNextFrontier>(),
                    [](){ return new frontier_exploration::GetNextFrontier(); },
                                std::bind(allocateMessage,frontier_exploration::GetNextFrontier::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: GetNextFrontier");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::GetNextFrontier::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(frontier_exploration::GetNextFrontier::DATA_TYPE_NAME,frontier_exploration::GetNextFrontier::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: GetNextFrontier");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::UpdateBoundaryPolygonRequest::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<frontier_exploration::UpdateBoundaryPolygonRequest>(
                    // boost::lambda::new_ptr<frontier_exploration::UpdateBoundaryPolygonRequest>(),
                    [](){ return new frontier_exploration::UpdateBoundaryPolygonRequest(); },
                                std::bind(allocateMessage,frontier_exploration::UpdateBoundaryPolygonRequest::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: UpdateBoundaryPolygonRequest");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::UpdateBoundaryPolygonRequest::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(frontier_exploration::UpdateBoundaryPolygonRequest::DATA_TYPE_NAME,frontier_exploration::UpdateBoundaryPolygonRequest::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: UpdateBoundaryPolygonRequest");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::UpdateBoundaryPolygonResponse::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<frontier_exploration::UpdateBoundaryPolygonResponse>(
                    // boost::lambda::new_ptr<frontier_exploration::UpdateBoundaryPolygonResponse>(),
                    [](){ return new frontier_exploration::UpdateBoundaryPolygonResponse(); },
                                std::bind(allocateMessage,frontier_exploration::UpdateBoundaryPolygonResponse::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: UpdateBoundaryPolygonResponse");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::UpdateBoundaryPolygonResponse::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(frontier_exploration::UpdateBoundaryPolygonResponse::DATA_TYPE_NAME,frontier_exploration::UpdateBoundaryPolygonResponse::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: UpdateBoundaryPolygonResponse");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::UpdateBoundaryPolygon::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<frontier_exploration::UpdateBoundaryPolygon>(
                    // boost::lambda::new_ptr<frontier_exploration::UpdateBoundaryPolygon>(),
                    [](){ return new frontier_exploration::UpdateBoundaryPolygon(); },
                                std::bind(allocateMessage,frontier_exploration::UpdateBoundaryPolygon::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: UpdateBoundaryPolygon");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = frontier_exploration::UpdateBoundaryPolygon::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(frontier_exploration::UpdateBoundaryPolygon::DATA_TYPE_NAME,frontier_exploration::UpdateBoundaryPolygon::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: UpdateBoundaryPolygon");
            }

        }

        return retval;
    };

    std::string xmlSource()
    {
        return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\
<!--\
 \
  AUTOGENERATED FILE:   do not edit\
\
  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:30:47 -0500\
  From Template/Script: rosToXML.rb\
 \
\
-->\
<classes library_name=\"frontier_exploration_gencpp\" namespace=\"frontier_exploration\">\
\
<class name=\"ExploreTaskAction\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"8208995b39421491532c2e9386bfec35\" rosDesc=\"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n\\nExploreTaskActionGoal action_goal\\nExploreTaskActionResult action_result\\nExploreTaskActionFeedback action_feedback\\n\\n================================================================================\\nMSG: frontier_exploration/ExploreTaskActionGoal\\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n\\nHeader header\\nactionlib_msgs/GoalID goal_id\\nExploreTaskGoal goal\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: actionlib_msgs/GoalID\\n# The stamp should store the time at which this goal was requested.\\n# It is used by an action server when it tries to preempt all\\n# goals that were requested before a certain time\\ntime stamp\\n\\n# The id provides a way to associate feedback and\\n# result message with specific goal requests. The id\\n# specified must be unique.\\nstring id\\n\\n\\n================================================================================\\nMSG: frontier_exploration/ExploreTaskGoal\\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n#Boundary for frontier exploration\\ngeometry_msgs/PolygonStamped explore_boundary\\n#Center point for frontier exploration, inside explore_boundary\\ngeometry_msgs/PointStamped explore_center\\n\\n================================================================================\\nMSG: geometry_msgs/PolygonStamped\\n# This represents a Polygon with reference coordinate frame and timestamp\\nHeader header\\nPolygon polygon\\n\\n================================================================================\\nMSG: geometry_msgs/Polygon\\n#A specification of a polygon where the first and last points are assumed to be connected\\nPoint32[] points\\n\\n================================================================================\\nMSG: geometry_msgs/Point32\\n# This contains the position of a point in free space(with 32 bits of precision).\\n# It is recommeded to use Point wherever possible instead of Point32.  \\n# \\n# This recommendation is to promote interoperability.  \\n#\\n# This message is designed to take up less space when sending\\n# lots of points at once, as in the case of a PointCloud.  \\n\\nfloat32 x\\nfloat32 y\\nfloat32 z\\n================================================================================\\nMSG: geometry_msgs/PointStamped\\n# This represents a Point with reference coordinate frame and timestamp\\nHeader header\\nPoint point\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\\n================================================================================\\nMSG: frontier_exploration/ExploreTaskActionResult\\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n\\nHeader header\\nactionlib_msgs/GoalStatus status\\nExploreTaskResult result\\n\\n================================================================================\\nMSG: actionlib_msgs/GoalStatus\\nGoalID goal_id\\nuint8 status\\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\\n                            #   and has since completed its execution (Terminal State)\\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\\n                            #    to some failure (Terminal State)\\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\\n                            #    because the goal was unattainable or invalid (Terminal State)\\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\\n                            #    and has not yet completed execution\\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\\n                            #    but the action server has not yet confirmed that the goal is canceled\\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\\n                            #    and was successfully cancelled (Terminal State)\\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\\n                            #    sent over the wire by an action server\\n\\n#Allow for the user to associate a string with GoalStatus for debugging\\nstring text\\n\\n\\n================================================================================\\nMSG: frontier_exploration/ExploreTaskResult\\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n\\n================================================================================\\nMSG: frontier_exploration/ExploreTaskActionFeedback\\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n\\nHeader header\\nactionlib_msgs/GoalStatus status\\nExploreTaskFeedback feedback\\n\\n================================================================================\\nMSG: frontier_exploration/ExploreTaskFeedback\\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n#Current target frontier to explore\\ngeometry_msgs/PoseStamped next_frontier\\n#Current position of robot\\ngeometry_msgs/PoseStamped base_position\\n\\n\\n================================================================================\\nMSG: geometry_msgs/PoseStamped\\n# A Pose with reference coordinate frame and timestamp\\nHeader header\\nPose pose\\n\\n================================================================================\\nMSG: geometry_msgs/Pose\\n# A representation of pose in free space, composed of position and orientation. \\nPoint position\\nQuaternion orientation\\n\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\" comment=\"====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\">\
  <field name=\"action_goal\" type=\"ExploreTaskActionGoal\" sourceType=\"ExploreTaskActionGoal\" comment=\"\"/>\
  <field name=\"action_result\" type=\"ExploreTaskActionResult\" sourceType=\"ExploreTaskActionResult\" comment=\"\"/>\
  <field name=\"action_feedback\" type=\"ExploreTaskActionFeedback\" sourceType=\"ExploreTaskActionFeedback\" comment=\"\"/>\
</class>\
\
<class name=\"ExploreTaskActionFeedback\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"11b891614a80e5279e0720e16a4e4612\" rosDesc=\"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n\\nHeader header\\nactionlib_msgs/GoalStatus status\\nExploreTaskFeedback feedback\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: actionlib_msgs/GoalStatus\\nGoalID goal_id\\nuint8 status\\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\\n                            #   and has since completed its execution (Terminal State)\\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\\n                            #    to some failure (Terminal State)\\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\\n                            #    because the goal was unattainable or invalid (Terminal State)\\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\\n                            #    and has not yet completed execution\\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\\n                            #    but the action server has not yet confirmed that the goal is canceled\\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\\n                            #    and was successfully cancelled (Terminal State)\\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\\n                            #    sent over the wire by an action server\\n\\n#Allow for the user to associate a string with GoalStatus for debugging\\nstring text\\n\\n\\n================================================================================\\nMSG: actionlib_msgs/GoalID\\n# The stamp should store the time at which this goal was requested.\\n# It is used by an action server when it tries to preempt all\\n# goals that were requested before a certain time\\ntime stamp\\n\\n# The id provides a way to associate feedback and\\n# result message with specific goal requests. The id\\n# specified must be unique.\\nstring id\\n\\n\\n================================================================================\\nMSG: frontier_exploration/ExploreTaskFeedback\\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n#Current target frontier to explore\\ngeometry_msgs/PoseStamped next_frontier\\n#Current position of robot\\ngeometry_msgs/PoseStamped base_position\\n\\n\\n================================================================================\\nMSG: geometry_msgs/PoseStamped\\n# A Pose with reference coordinate frame and timestamp\\nHeader header\\nPose pose\\n\\n================================================================================\\nMSG: geometry_msgs/Pose\\n# A representation of pose in free space, composed of position and orientation. \\nPoint position\\nQuaternion orientation\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\" comment=\"====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"status\" type=\"actionlib_msgs::GoalStatus\" sourceType=\"actionlib_msgs::GoalStatus\" comment=\"\"/>\
  <field name=\"feedback\" type=\"ExploreTaskFeedback\" sourceType=\"ExploreTaskFeedback\" comment=\"\"/>\
</class>\
\
<class name=\"ExploreTaskActionGoal\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"9636099f4dce4531a0248d068494bc98\" rosDesc=\"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n\\nHeader header\\nactionlib_msgs/GoalID goal_id\\nExploreTaskGoal goal\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: actionlib_msgs/GoalID\\n# The stamp should store the time at which this goal was requested.\\n# It is used by an action server when it tries to preempt all\\n# goals that were requested before a certain time\\ntime stamp\\n\\n# The id provides a way to associate feedback and\\n# result message with specific goal requests. The id\\n# specified must be unique.\\nstring id\\n\\n\\n================================================================================\\nMSG: frontier_exploration/ExploreTaskGoal\\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n#Boundary for frontier exploration\\ngeometry_msgs/PolygonStamped explore_boundary\\n#Center point for frontier exploration, inside explore_boundary\\ngeometry_msgs/PointStamped explore_center\\n\\n================================================================================\\nMSG: geometry_msgs/PolygonStamped\\n# This represents a Polygon with reference coordinate frame and timestamp\\nHeader header\\nPolygon polygon\\n\\n================================================================================\\nMSG: geometry_msgs/Polygon\\n#A specification of a polygon where the first and last points are assumed to be connected\\nPoint32[] points\\n\\n================================================================================\\nMSG: geometry_msgs/Point32\\n# This contains the position of a point in free space(with 32 bits of precision).\\n# It is recommeded to use Point wherever possible instead of Point32.  \\n# \\n# This recommendation is to promote interoperability.  \\n#\\n# This message is designed to take up less space when sending\\n# lots of points at once, as in the case of a PointCloud.  \\n\\nfloat32 x\\nfloat32 y\\nfloat32 z\\n================================================================================\\nMSG: geometry_msgs/PointStamped\\n# This represents a Point with reference coordinate frame and timestamp\\nHeader header\\nPoint point\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\" comment=\"====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"goal_id\" type=\"actionlib_msgs::GoalID\" sourceType=\"actionlib_msgs::GoalID\" comment=\"\"/>\
  <field name=\"goal\" type=\"ExploreTaskGoal\" sourceType=\"ExploreTaskGoal\" comment=\"\"/>\
</class>\
\
<class name=\"ExploreTaskActionResult\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"1eb06eeff08fa7ea874431638cb52332\" rosDesc=\"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n\\nHeader header\\nactionlib_msgs/GoalStatus status\\nExploreTaskResult result\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: actionlib_msgs/GoalStatus\\nGoalID goal_id\\nuint8 status\\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\\n                            #   and has since completed its execution (Terminal State)\\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\\n                            #    to some failure (Terminal State)\\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\\n                            #    because the goal was unattainable or invalid (Terminal State)\\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\\n                            #    and has not yet completed execution\\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\\n                            #    but the action server has not yet confirmed that the goal is canceled\\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\\n                            #    and was successfully cancelled (Terminal State)\\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\\n                            #    sent over the wire by an action server\\n\\n#Allow for the user to associate a string with GoalStatus for debugging\\nstring text\\n\\n\\n================================================================================\\nMSG: actionlib_msgs/GoalID\\n# The stamp should store the time at which this goal was requested.\\n# It is used by an action server when it tries to preempt all\\n# goals that were requested before a certain time\\ntime stamp\\n\\n# The id provides a way to associate feedback and\\n# result message with specific goal requests. The id\\n# specified must be unique.\\nstring id\\n\\n\\n================================================================================\\nMSG: frontier_exploration/ExploreTaskResult\\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n\" comment=\"====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"status\" type=\"actionlib_msgs::GoalStatus\" sourceType=\"actionlib_msgs::GoalStatus\" comment=\"\"/>\
  <field name=\"result\" type=\"ExploreTaskResult\" sourceType=\"ExploreTaskResult\" comment=\"\"/>\
</class>\
\
<class name=\"ExploreTaskFeedback\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"00baaad5b6065fdad0f528586c3caaf2\" rosDesc=\"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n#Current target frontier to explore\\ngeometry_msgs/PoseStamped next_frontier\\n#Current position of robot\\ngeometry_msgs/PoseStamped base_position\\n\\n\\n================================================================================\\nMSG: geometry_msgs/PoseStamped\\n# A Pose with reference coordinate frame and timestamp\\nHeader header\\nPose pose\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/Pose\\n# A representation of pose in free space, composed of position and orientation. \\nPoint position\\nQuaternion orientation\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\" comment=\"====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ====== Current target frontier to explore\">\
  <field name=\"next_frontier\" type=\"geometry_msgs::PoseStamped\" sourceType=\"geometry_msgs::PoseStamped\" comment=\"Current position of robot\"/>\
  <field name=\"base_position\" type=\"geometry_msgs::PoseStamped\" sourceType=\"geometry_msgs::PoseStamped\" comment=\"\"/>\
</class>\
\
<class name=\"ExploreTaskGoal\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"b5f41b52fbca52a68ff7363f86187dbf\" rosDesc=\"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n#Boundary for frontier exploration\\ngeometry_msgs/PolygonStamped explore_boundary\\n#Center point for frontier exploration, inside explore_boundary\\ngeometry_msgs/PointStamped explore_center\\n\\n================================================================================\\nMSG: geometry_msgs/PolygonStamped\\n# This represents a Polygon with reference coordinate frame and timestamp\\nHeader header\\nPolygon polygon\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/Polygon\\n#A specification of a polygon where the first and last points are assumed to be connected\\nPoint32[] points\\n\\n================================================================================\\nMSG: geometry_msgs/Point32\\n# This contains the position of a point in free space(with 32 bits of precision).\\n# It is recommeded to use Point wherever possible instead of Point32.  \\n# \\n# This recommendation is to promote interoperability.  \\n#\\n# This message is designed to take up less space when sending\\n# lots of points at once, as in the case of a PointCloud.  \\n\\nfloat32 x\\nfloat32 y\\nfloat32 z\\n================================================================================\\nMSG: geometry_msgs/PointStamped\\n# This represents a Point with reference coordinate frame and timestamp\\nHeader header\\nPoint point\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\" comment=\"====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ====== Boundary for frontier exploration\">\
  <field name=\"explore_boundary\" type=\"geometry_msgs::PolygonStamped\" sourceType=\"geometry_msgs::PolygonStamped\" comment=\"Center point for frontier exploration, inside explore_boundary\"/>\
  <field name=\"explore_center\" type=\"geometry_msgs::PointStamped\" sourceType=\"geometry_msgs::PointStamped\" comment=\"\"/>\
</class>\
\
<class name=\"ExploreTaskResult\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"d41d8cd98f00b204e9800998ecf8427e\" rosDesc=\"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n\" comment=\"\">\
</class>\
\
<class name=\"Frontier\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"1325c0e43f607455fdee9e36462f6ba0\" rosDesc=\"uint32 size\\nfloat64 min_distance\\ngeometry_msgs/Point initial\\ngeometry_msgs/Point centroid\\ngeometry_msgs/Point middle\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\" comment=\"\">\
  <field name=\"size\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"\"/>\
  <field name=\"min_distance\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
  <field name=\"initial\" type=\"geometry_msgs::Point\" sourceType=\"geometry_msgs::Point\" comment=\"\"/>\
  <field name=\"centroid\" type=\"geometry_msgs::Point\" sourceType=\"geometry_msgs::Point\" comment=\"\"/>\
  <field name=\"middle\" type=\"geometry_msgs::Point\" sourceType=\"geometry_msgs::Point\" comment=\"\"/>\
</class>\
\
<class name=\"GetNextFrontierRequest\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"\">\
  <field name=\"start_pose\" type=\"geometry_msgs::PoseStamped\" sourceType=\"geometry_msgs::PoseStamped\" comment=\"no comment provided\"/>\
</class>\
\
<class name=\"GetNextFrontierResponse\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"\">\
  <field name=\"next_frontier\" type=\"geometry_msgs::PoseStamped\" sourceType=\"geometry_msgs::PoseStamped\" comment=\"\"/>\
</class>\
\
<class name=\"GetNextFrontier\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"\">\
  <definition name=\"Request\" type=\"GetNextFrontierRequest\"/>\
  <definition name=\"Response\" type=\"GetNextFrontierResponse\"/>\
  <field name=\"request\" type=\"Request\" comment=\"request data type\"/>\
  <field name=\"response\" type=\"Response\" comment=\"response data type\"/>\
</class>\
\
<class name=\"UpdateBoundaryPolygonRequest\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"\">\
  <field name=\"explore_boundary\" type=\"geometry_msgs::PolygonStamped\" sourceType=\"geometry_msgs::PolygonStamped\" comment=\"no comment provided\"/>\
</class>\
\
<class name=\"UpdateBoundaryPolygonResponse\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"\">\
</class>\
\
<class name=\"UpdateBoundaryPolygon\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"\">\
  <definition name=\"Request\" type=\"UpdateBoundaryPolygonRequest\"/>\
  <definition name=\"Response\" type=\"UpdateBoundaryPolygonResponse\"/>\
  <field name=\"request\" type=\"Request\" comment=\"request data type\"/>\
  <field name=\"response\" type=\"Response\" comment=\"response data type\"/>\
</class>\
\
<dependency name=\"actionlib_msgs_gencpp\"/>\
<dependency name=\"geometry_msgs_gencpp\"/>\
<dependency name=\"std_msgs_gencpp\"/>\
<dependency name=\"std_srvs_gencpp\"/>\
\
</classes>\
";
    }

}; // end namespace frontier_exploration


<!--
 
  AUTOGENERATED FILE:   do not edit

  Generated by:         alex on alex-laptop, 2017-01-26 12:56:34 -0500
  From Template/Script: rosToXML.rb
 

-->
<classes library_name="move_base_msgs_gencpp" namespace="move_base_msgs" >

<class name="MoveBaseAction" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="70b6aca7c7f7746d8d1609ad94c80bb8" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nMoveBaseActionGoal action_goal\nMoveBaseActionResult action_result\nMoveBaseActionFeedback action_feedback\n\n================================================================================\nMSG: move_base_msgs/MoveBaseActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nMoveBaseGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: move_base_msgs/MoveBaseGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ngeometry_msgs/PoseStamped target_pose\n\n================================================================================\nMSG: geometry_msgs/PoseStamped\n# A Pose with reference coordinate frame and timestamp\nHeader header\nPose pose\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: move_base_msgs/MoveBaseActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nMoveBaseResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: move_base_msgs/MoveBaseResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n================================================================================\nMSG: move_base_msgs/MoveBaseActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nMoveBaseFeedback feedback\n\n================================================================================\nMSG: move_base_msgs/MoveBaseFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ngeometry_msgs/PoseStamped base_position\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="action_goal" type="MoveBaseActionGoal"  sourceType="MoveBaseActionGoal" comment="" />
  <field name="action_result" type="MoveBaseActionResult"  sourceType="MoveBaseActionResult" comment="" />
  <field name="action_feedback" type="MoveBaseActionFeedback"  sourceType="MoveBaseActionFeedback" comment="" />
</class>

<class name="MoveBaseActionFeedback" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="7d1870ff6e0decea702b943b5af0b42e" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nMoveBaseFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: move_base_msgs/MoveBaseFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ngeometry_msgs/PoseStamped base_position\n\n\n================================================================================\nMSG: geometry_msgs/PoseStamped\n# A Pose with reference coordinate frame and timestamp\nHeader header\nPose pose\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="status" type="actionlib_msgs::GoalStatus"  sourceType="actionlib_msgs::GoalStatus" comment="" />
  <field name="feedback" type="MoveBaseFeedback"  sourceType="MoveBaseFeedback" comment="" />
</class>

<class name="MoveBaseActionGoal" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="660d6895a1b9a16dce51fbdd9a64a56b" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nMoveBaseGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: move_base_msgs/MoveBaseGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ngeometry_msgs/PoseStamped target_pose\n\n================================================================================\nMSG: geometry_msgs/PoseStamped\n# A Pose with reference coordinate frame and timestamp\nHeader header\nPose pose\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="goal_id" type="actionlib_msgs::GoalID"  sourceType="actionlib_msgs::GoalID" comment="" />
  <field name="goal" type="MoveBaseGoal"  sourceType="MoveBaseGoal" comment="" />
</class>

<class name="MoveBaseActionResult" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="1eb06eeff08fa7ea874431638cb52332" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nMoveBaseResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: move_base_msgs/MoveBaseResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="status" type="actionlib_msgs::GoalStatus"  sourceType="actionlib_msgs::GoalStatus" comment="" />
  <field name="result" type="MoveBaseResult"  sourceType="MoveBaseResult" comment="" />
</class>

<class name="MoveBaseFeedback" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="3fb824c456a757373a226f6d08071bf0" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ngeometry_msgs/PoseStamped base_position\n\n\n================================================================================\nMSG: geometry_msgs/PoseStamped\n# A Pose with reference coordinate frame and timestamp\nHeader header\nPose pose\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="base_position" type="geometry_msgs::PoseStamped"  sourceType="geometry_msgs::PoseStamped" comment="" />
</class>

<class name="MoveBaseGoal" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="257d089627d7eb7136c24d3593d05a16" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ngeometry_msgs/PoseStamped target_pose\n\n================================================================================\nMSG: geometry_msgs/PoseStamped\n# A Pose with reference coordinate frame and timestamp\nHeader header\nPose pose\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="target_pose" type="geometry_msgs::PoseStamped"  sourceType="geometry_msgs::PoseStamped" comment="" />
</class>

<class name="MoveBaseResult" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="d41d8cd98f00b204e9800998ecf8427e" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n" comment="" >
</class>

<dependency name="actionlib_msgs_gencpp"/>
<dependency name="geometry_msgs_gencpp"/>
<dependency name="std_msgs_gencpp"/>
<dependency name="std_srvs_gencpp"/>

</classes>

// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:30:54 -0500
//  From Template/Script: data_templates/ROSTemplate.cpp.rb
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "navfn_gencpp_ROS.h"
#include <common/Log.h>
#include <common/DataTypeInfo.h>

using namespace std;
using namespace navfn;

rframe::ROSMessageFactory * ROS_navfn_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        ROS_navfn_gencppfactory = new navfn_gencppROSMessageFactory();

        return ROS_navfn_gencppfactory;
    };
}

rframe::ROSMessageFactory * navfn::allocate_navfn_gencpp()
{
    ROS_navfn_gencppfactory = new navfn_gencppROSMessageFactory();
    return ROS_navfn_gencppfactory;
};

navfn_gencppROSMessageFactory::navfn_gencppROSMessageFactory()
{
    name("navfn_gencpp");
    // use constructor to register data types
    navfn::registerLibrary();
}

navfn_gencppROSMessageFactory::~navfn_gencppROSMessageFactory()
{
}

int navfn_gencppROSMessageFactory::dataType(ros::SerializedMessage & msg)
{
    return msg.message_type;
}

void navfn_gencppROSMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(MakeNavPlanRequest::ID);
    info.name(MakeNavPlanRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(MakeNavPlanRequest::DATA_VERSION);
    info.md5Key(MakeNavPlanRequest::VERSION_MD5);
    info.xmlSource(MakeNavPlanRequest::XML_SOURCE);
    info.flat(MakeNavPlanRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(MakeNavPlanResponse::ID);
    info.name(MakeNavPlanResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(MakeNavPlanResponse::DATA_VERSION);
    info.md5Key(MakeNavPlanResponse::VERSION_MD5);
    info.xmlSource(MakeNavPlanResponse::XML_SOURCE);
    info.flat(MakeNavPlanResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(MakeNavPlan::ID);
    info.name(MakeNavPlan::DATA_TYPE_FULL_NAME);
    info.hashKey(MakeNavPlan::DATA_VERSION);
    info.md5Key(MakeNavPlan::VERSION_MD5);
    info.xmlSource(MakeNavPlan::XML_SOURCE);
    info.flat(MakeNavPlan::dataTypeFlat());
    ids.push_back(info);

    info.id(SetCostmapRequest::ID);
    info.name(SetCostmapRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(SetCostmapRequest::DATA_VERSION);
    info.md5Key(SetCostmapRequest::VERSION_MD5);
    info.xmlSource(SetCostmapRequest::XML_SOURCE);
    info.flat(SetCostmapRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(SetCostmapResponse::ID);
    info.name(SetCostmapResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(SetCostmapResponse::DATA_VERSION);
    info.md5Key(SetCostmapResponse::VERSION_MD5);
    info.xmlSource(SetCostmapResponse::XML_SOURCE);
    info.flat(SetCostmapResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(SetCostmap::ID);
    info.name(SetCostmap::DATA_TYPE_FULL_NAME);
    info.hashKey(SetCostmap::DATA_VERSION);
    info.md5Key(SetCostmap::VERSION_MD5);
    info.xmlSource(SetCostmap::XML_SOURCE);
    info.flat(SetCostmap::dataTypeFlat());
    ids.push_back(info);

}

int navfn_gencppROSMessageFactory::typeName(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case MakeNavPlanRequest::ID:
        {
            str = "navfn/MakeNavPlanRequest";
            break;
        }
        case MakeNavPlanResponse::ID:
        {
            str = "navfn/MakeNavPlanResponse";
            break;
        }
        case MakeNavPlan::ID:
        {
            str = "navfn/MakeNavPlan";
            break;
        }
        case SetCostmapRequest::ID:
        {
            str = "navfn/SetCostmapRequest";
            break;
        }
        case SetCostmapResponse::ID:
        {
            str = "navfn/SetCostmapResponse";
            break;
        }
        case SetCostmap::ID:
        {
            str = "navfn/SetCostmap";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int navfn_gencppROSMessageFactory::desc(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case MakeNavPlanRequest::ID:
        {
            str = MakeNavPlanRequest::XML_SOURCE;
            break;
        }
        case MakeNavPlanResponse::ID:
        {
            str = MakeNavPlanResponse::XML_SOURCE;
            break;
        }
        case MakeNavPlan::ID:
        {
            str = MakeNavPlan::XML_SOURCE;
            break;
        }
        case SetCostmapRequest::ID:
        {
            str = SetCostmapRequest::XML_SOURCE;
            break;
        }
        case SetCostmapResponse::ID:
        {
            str = SetCostmapResponse::XML_SOURCE;
            break;
        }
        case SetCostmap::ID:
        {
            str = SetCostmap::XML_SOURCE;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int navfn_gencppROSMessageFactory::md5String(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case MakeNavPlanRequest::ID:
        {
            str = "2fe3126bd5b2d56edd5005220333d4fd";
            break;
        }
        case MakeNavPlanResponse::ID:
        {
            str = "8b8ed7edf1b237dc9ddda8c8ffed5d3a";
            break;
        }
        case MakeNavPlan::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case SetCostmapRequest::ID:
        {
            str = "370ec969cdb71f9cde7c7cbe0d752308";
            break;
        }
        case SetCostmapResponse::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case SetCostmap::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int navfn_gencppROSMessageFactory::md5(unsigned long long & highOrder, unsigned long long & lowOrder, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case MakeNavPlanRequest::ID:
        {   
		    highOrder = 0x2fe3126bd5b2d56eULL;
            lowOrder = 0xdd5005220333d4fdULL;
            break;
        }
        case MakeNavPlanResponse::ID:
        {   
		    highOrder = 0x8b8ed7edf1b237dcULL;
            lowOrder = 0x9ddda8c8ffed5d3aULL;
            break;
        }
        case MakeNavPlan::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case SetCostmapRequest::ID:
        {   
		    highOrder = 0x370ec969cdb71f9cULL;
            lowOrder = 0xde7c7cbe0d752308ULL;
            break;
        }
        case SetCostmapResponse::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case SetCostmap::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int navfn_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<ros::SerializedMessage> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case MakeNavPlanRequest::ID:
        case MakeNavPlanResponse::ID:
        case MakeNavPlan::ID:
        case SetCostmapRequest::ID:
        case SetCostmapResponse::ID:
        case SetCostmap::ID:
        {
            break;
        } 
        default:
	    {
            retval = rframe::Error::PARAM_RANGE;
            break;
	    }
    }

    if (retval == rframe::Error::SUCCESS)
	{
        std::shared_ptr<ros::SerializedMessage> newmsg(new ros::SerializedMessage);

        if (newmsg.get() == NULL)
	    {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else
	    {
            newmsg->message_type = id;
            msg.swap(newmsg);
        }
    }

    return retval;
}

int navfn_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case MakeNavPlanRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<MakeNavPlanRequest>(),std::bind(&navfn_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case MakeNavPlanResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<MakeNavPlanResponse>(),std::bind(&navfn_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case MakeNavPlan::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<MakeNavPlan>(),std::bind(&navfn_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetCostmapRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetCostmapRequest>(),std::bind(&navfn_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetCostmapResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetCostmapResponse>(),std::bind(&navfn_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetCostmap::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetCostmap>(),std::bind(&navfn_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            retval = rframe::Error::PARAM_RANGE;
        }
    }

    return retval;
}

int navfn_gencppROSMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
	{
        delete msg;
    }

    return retval;
}

int navfn_gencppROSMessageFactory::deallocateTransport(ros::SerializedMessage * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        delete msg;
    }

    return retval;
}

int navfn_gencppROSMessageFactory::toTransport(MessageBase & src, ros::SerializedMessage & dst)
{
    int retval = rframe::Error::SUCCESS;

    if (dst.message_type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.message_type)
        { 
            case MakeNavPlanRequest::ID:
            {
                Message<MakeNavPlanRequest > & tempSrc = static_cast<Message<MakeNavPlanRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: navfn_gencpp::MakeNavPlanRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case MakeNavPlanResponse::ID:
            {
                Message<MakeNavPlanResponse > & tempSrc = static_cast<Message<MakeNavPlanResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: navfn_gencpp::MakeNavPlanResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case MakeNavPlan::ID:
            {
                Message<MakeNavPlan > & tempSrc = static_cast<Message<MakeNavPlan>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: navfn_gencpp::MakeNavPlan buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case SetCostmapRequest::ID:
            {
                Message<SetCostmapRequest > & tempSrc = static_cast<Message<SetCostmapRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: navfn_gencpp::SetCostmapRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case SetCostmapResponse::ID:
            {
                Message<SetCostmapResponse > & tempSrc = static_cast<Message<SetCostmapResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: navfn_gencpp::SetCostmapResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case SetCostmap::ID:
            {
                Message<SetCostmap > & tempSrc = static_cast<Message<SetCostmap>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: navfn_gencpp::SetCostmap buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int navfn_gencppROSMessageFactory::fromTransport(ros::SerializedMessage & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.message_type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.message_type)
        { 
            case MakeNavPlanRequest::ID:
            {
                Message<MakeNavPlanRequest > & tempDst = static_cast<Message<MakeNavPlanRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case MakeNavPlanResponse::ID:
            {
                Message<MakeNavPlanResponse > & tempDst = static_cast<Message<MakeNavPlanResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case MakeNavPlan::ID:
            {
                Message<MakeNavPlan > & tempDst = static_cast<Message<MakeNavPlan>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case SetCostmapRequest::ID:
            {
                Message<SetCostmapRequest > & tempDst = static_cast<Message<SetCostmapRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case SetCostmapResponse::ID:
            {
                Message<SetCostmapResponse > & tempDst = static_cast<Message<SetCostmapResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case SetCostmap::ID:
            {
                Message<SetCostmap > & tempDst = static_cast<Message<SetCostmap>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int navfn_gencppROSMessageFactory::updateHeader(rframe::MessageBase &msg, unsigned int seqNo)
{
    int retval = rframe::Error::SUCCESS;

    switch (msg.id())
    {   
        // MakeNavPlanRequest does not have a Header as its first member 
        // MakeNavPlanResponse does not have a Header as its first member 
        // MakeNavPlan does not have a Header as its first member 
        // SetCostmapRequest does not have a Header as its first member 
        // SetCostmap does not have a Header as its first member 
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

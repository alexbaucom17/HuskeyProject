// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:06 -0500
//  From Template/Script: data_templates/DataClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <math.h> // to allow use of common constants...
#include <common/Error.h>
#include "nav_msgs/GetMapResult.h"

#include <common/JsonIo.h> // include here so container types are included by the class header 

using namespace std;

const unsigned int nav_msgs::GetMapResult::ID;
const unsigned int nav_msgs::GetMapResult::DATA_VERSION;
const std::string nav_msgs::GetMapResult::DATA_TYPE_NAME = "GetMapResult";
const std::string nav_msgs::GetMapResult::DATA_TYPE_FULL_NAME = "nav_msgs::GetMapResult";
const std::string nav_msgs::GetMapResult::VERSION_MD5 = "02e4a3900a7ec4e18bd7d870e4228542";
/* xml source for this class */
const std::string nav_msgs::GetMapResult::XML_SOURCE = "<class name=\"GetMapResult\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"6cdd0a18e0aff5b0a3ca2326a89b54ff\" rosDesc=\"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\nnav_msgs/OccupancyGrid map\\n\\n================================================================================\\nMSG: nav_msgs/OccupancyGrid\\n# This represents a 2-D grid map, in which each cell represents the probability of\\n# occupancy.\\n\\nHeader header \\n\\n#MetaData for the map\\nMapMetaData info\\n\\n# The map data, in row-major order, starting with (0,0).  Occupancy\\n# probabilities are in the range [0,100].  Unknown is -1.\\nint8[] data\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: nav_msgs/MapMetaData\\n# This hold basic information about the characterists of the OccupancyGrid\\n\\n# The time at which the map was loaded\\ntime map_load_time\\n# The map resolution [m/cell]\\nfloat32 resolution\\n# Map width [cells]\\nuint32 width\\n# Map height [cells]\\nuint32 height\\n# The origin of the map [m, m, rad].  This is the real-world pose of the\\n# cell (0,0) in the map.\\ngeometry_msgs/Pose origin\\n================================================================================\\nMSG: geometry_msgs/Pose\\n# A representation of pose in free space, composed of postion and orientation. \\nPoint position\\nQuaternion orientation\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\" comment=\"====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\" id=\"1589304792\">\
  <field name=\"map\" type=\"nav_msgs::OccupancyGrid\" sourceType=\"nav_msgs::OccupancyGrid\" comment=\"\"/>\
</class>";

nav_msgs::GetMapResult::GetMapResult() : map()
{  
};

nav_msgs::GetMapResult::GetMapResult(const nav_msgs::GetMapResult & inobj) : map(inobj.map)
{
};

nav_msgs::GetMapResult::~GetMapResult()
{
};

nav_msgs::GetMapResult * nav_msgs::GetMapResult::New()
{ 
    return new GetMapResult();
};

bool nav_msgs::GetMapResult::dataTypeFlat() 
{  
    return nav_msgs::OccupancyGrid::dataTypeFlat();

};

nav_msgs::GetMapResult & nav_msgs::GetMapResult::operator=(const nav_msgs::GetMapResult & inobj)
{
    if (this != &inobj)
    {

        // if datatype is flat, optimize with memcpy (complier level optimiation)
              /*  if (dataTypeFlat() == true)
                  REMOVED invalid when assigning from a parent type as this is the pointer to the derived type, thus nav_msgs::GetMapResult is copied to the wrong location

        {
            memcpy(this,&inobj,sizeof(nav_msgs::GetMapResult));
        }
        else */ 
        {

            map = inobj.map;
        }
    }

    return *this;
}

bool nav_msgs::GetMapResult::operator==(const nav_msgs::GetMapResult & inobj) const
{
    bool ret = true;

    if (this != &inobj)
    { 
        ret = ret 
             && (map == inobj.map);
    }

    return ret;
}

bool nav_msgs::GetMapResult::operator!=(const nav_msgs::GetMapResult & inobj) const
{
    bool ret = false;

    if (this != &inobj)
    {
        ret = !operator==(inobj);
    }

    return ret;
}

bool nav_msgs::GetMapResult::operator<(const nav_msgs::GetMapResult & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {  
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (map < inobj.map) return true;
        if (inobj.map <  map) return false; ;
    }

    return ret;
}

bool nav_msgs::GetMapResult::operator>(const nav_msgs::GetMapResult & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (map > inobj.map) return true;
        if (inobj.map >  map) return false; ;
    }

    return ret;
}

template <> void rframe::json_io::encode(std::stringstream & sstr, const char * name, const nav_msgs::GetMapResult & t, std::string & indent, bool lastItem)
{
    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectStart(sstr,name,indent);

    rframe::json_io::encode(sstr,"map",t.map,indent,true);

    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectEnd(sstr,indent,lastItem);
}

std::string nav_msgs::GetMapResult::toStr(bool pretty) const
{

    stringstream sstr;
    string indent = (pretty == true) ? "\n" : "";

    rframe::json_io::encodeObjectStartMain(sstr,indent);
    rframe::json_io::encode(sstr,"",*this,indent,true);
    rframe::json_io::encodeObjectEnd(sstr,indent,true); // false so as to  not add , at end of string

    return sstr.str();

};

std::basic_ostream<char>& operator<<(std::basic_ostream<char> &s, const nav_msgs::GetMapResult & value)
{
    return s << value.toStr(false);
}


// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:51 -0500
//  From Template/Script: data_templates/DataLibraryTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "nav_msgs_gencpp_Library.h"
#include <common/Log.h>
#include <common/TypeRegistry.h>
#include <messaging/Message.h>

#include <nav_msgs/GetMapAction.h>
#include <nav_msgs/GetMapActionFeedback.h>
#include <nav_msgs/GetMapActionGoal.h>
#include <nav_msgs/GetMapActionResult.h>
#include <nav_msgs/GetMapFeedback.h>
#include <nav_msgs/GetMapGoal.h>
#include <nav_msgs/GetMapResult.h>
#include <nav_msgs/GridCells.h>
#include <nav_msgs/MapMetaData.h>
#include <nav_msgs/OccupancyGrid.h>
#include <nav_msgs/Odometry.h>
#include <nav_msgs/Path.h>
#include <nav_msgs/GetMapRequest.h>
#include <nav_msgs/GetMapResponse.h>
#include <nav_msgs/GetMap.h>
#include <nav_msgs/GetPlanRequest.h>
#include <nav_msgs/GetPlanResponse.h>
#include <nav_msgs/GetPlan.h>
#include <nav_msgs/SetMapRequest.h>
#include <nav_msgs/SetMapResponse.h>
#include <nav_msgs/SetMap.h>

extern "C"
{
    /** library access method */
    int rframeRegisterDataLibrary()
    {
        return nav_msgs::registerLibrary();
    };
}

namespace nav_msgs
{

    static void deallocateMessage(MessageBase * msg)
    {
        delete msg;
    }

    static int allocateMessage(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
    {
        int retval = rframe::Error::SUCCESS;
        bool found = true;
        switch (id)
        { 
            case GetMapAction::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<GetMapAction>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case GetMapActionFeedback::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<GetMapActionFeedback>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case GetMapActionGoal::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<GetMapActionGoal>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case GetMapActionResult::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<GetMapActionResult>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case GetMapFeedback::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<GetMapFeedback>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case GetMapGoal::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<GetMapGoal>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case GetMapResult::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<GetMapResult>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case GridCells::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<GridCells>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case MapMetaData::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<MapMetaData>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case OccupancyGrid::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<OccupancyGrid>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Odometry::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Odometry>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Path::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Path>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case GetMapRequest::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<GetMapRequest>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case GetMapResponse::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<GetMapResponse>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case GetMap::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<GetMap>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case GetPlanRequest::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<GetPlanRequest>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case GetPlanResponse::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<GetPlanResponse>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case GetPlan::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<GetPlan>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case SetMapRequest::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<SetMapRequest>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case SetMapResponse::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<SetMapResponse>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case SetMap::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<SetMap>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            default:
            {
                found = false;
            }
        }

        if (found == false)
        {
            retval = rframe::Error::PARAM_RANGE;
        }
        else if (msg.get() == NULL)
        {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else if (msg.get() != NULL)
        {
            retval = rframe::Error::SUCCESS;
        }

        return retval;
    }

    /** registry this data set with the system */
    //int register_nav_msgs_gencpp()
    int registerLibrary()
    {
        int retval = rframe::Error::SUCCESS;
        static bool registered = false;
        rframe::TypeRegistry & reg = rframe::TypeRegistry::instance();

        LOG_INFO("registering data for library: nav_msgs_gencpp");

        if (registered == false)
        {
            registered = true;

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetMapAction::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::GetMapAction>(
                    // boost::lambda::new_ptr<nav_msgs::GetMapAction>(),
                    [](){ return new nav_msgs::GetMapAction(); },
                                std::bind(allocateMessage,nav_msgs::GetMapAction::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: GetMapAction");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetMapAction::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::GetMapAction::DATA_TYPE_NAME,nav_msgs::GetMapAction::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: GetMapAction");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetMapActionFeedback::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::GetMapActionFeedback>(
                    // boost::lambda::new_ptr<nav_msgs::GetMapActionFeedback>(),
                    [](){ return new nav_msgs::GetMapActionFeedback(); },
                                std::bind(allocateMessage,nav_msgs::GetMapActionFeedback::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: GetMapActionFeedback");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetMapActionFeedback::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::GetMapActionFeedback::DATA_TYPE_NAME,nav_msgs::GetMapActionFeedback::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: GetMapActionFeedback");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetMapActionGoal::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::GetMapActionGoal>(
                    // boost::lambda::new_ptr<nav_msgs::GetMapActionGoal>(),
                    [](){ return new nav_msgs::GetMapActionGoal(); },
                                std::bind(allocateMessage,nav_msgs::GetMapActionGoal::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: GetMapActionGoal");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetMapActionGoal::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::GetMapActionGoal::DATA_TYPE_NAME,nav_msgs::GetMapActionGoal::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: GetMapActionGoal");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetMapActionResult::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::GetMapActionResult>(
                    // boost::lambda::new_ptr<nav_msgs::GetMapActionResult>(),
                    [](){ return new nav_msgs::GetMapActionResult(); },
                                std::bind(allocateMessage,nav_msgs::GetMapActionResult::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: GetMapActionResult");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetMapActionResult::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::GetMapActionResult::DATA_TYPE_NAME,nav_msgs::GetMapActionResult::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: GetMapActionResult");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetMapFeedback::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::GetMapFeedback>(
                    // boost::lambda::new_ptr<nav_msgs::GetMapFeedback>(),
                    [](){ return new nav_msgs::GetMapFeedback(); },
                                std::bind(allocateMessage,nav_msgs::GetMapFeedback::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: GetMapFeedback");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetMapFeedback::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::GetMapFeedback::DATA_TYPE_NAME,nav_msgs::GetMapFeedback::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: GetMapFeedback");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetMapGoal::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::GetMapGoal>(
                    // boost::lambda::new_ptr<nav_msgs::GetMapGoal>(),
                    [](){ return new nav_msgs::GetMapGoal(); },
                                std::bind(allocateMessage,nav_msgs::GetMapGoal::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: GetMapGoal");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetMapGoal::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::GetMapGoal::DATA_TYPE_NAME,nav_msgs::GetMapGoal::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: GetMapGoal");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetMapResult::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::GetMapResult>(
                    // boost::lambda::new_ptr<nav_msgs::GetMapResult>(),
                    [](){ return new nav_msgs::GetMapResult(); },
                                std::bind(allocateMessage,nav_msgs::GetMapResult::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: GetMapResult");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetMapResult::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::GetMapResult::DATA_TYPE_NAME,nav_msgs::GetMapResult::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: GetMapResult");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GridCells::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::GridCells>(
                    // boost::lambda::new_ptr<nav_msgs::GridCells>(),
                    [](){ return new nav_msgs::GridCells(); },
                                std::bind(allocateMessage,nav_msgs::GridCells::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: GridCells");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GridCells::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::GridCells::DATA_TYPE_NAME,nav_msgs::GridCells::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: GridCells");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::MapMetaData::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::MapMetaData>(
                    // boost::lambda::new_ptr<nav_msgs::MapMetaData>(),
                    [](){ return new nav_msgs::MapMetaData(); },
                                std::bind(allocateMessage,nav_msgs::MapMetaData::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: MapMetaData");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::MapMetaData::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::MapMetaData::DATA_TYPE_NAME,nav_msgs::MapMetaData::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: MapMetaData");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::OccupancyGrid::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::OccupancyGrid>(
                    // boost::lambda::new_ptr<nav_msgs::OccupancyGrid>(),
                    [](){ return new nav_msgs::OccupancyGrid(); },
                                std::bind(allocateMessage,nav_msgs::OccupancyGrid::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: OccupancyGrid");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::OccupancyGrid::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::OccupancyGrid::DATA_TYPE_NAME,nav_msgs::OccupancyGrid::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: OccupancyGrid");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::Odometry::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::Odometry>(
                    // boost::lambda::new_ptr<nav_msgs::Odometry>(),
                    [](){ return new nav_msgs::Odometry(); },
                                std::bind(allocateMessage,nav_msgs::Odometry::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Odometry");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::Odometry::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::Odometry::DATA_TYPE_NAME,nav_msgs::Odometry::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Odometry");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::Path::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::Path>(
                    // boost::lambda::new_ptr<nav_msgs::Path>(),
                    [](){ return new nav_msgs::Path(); },
                                std::bind(allocateMessage,nav_msgs::Path::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Path");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::Path::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::Path::DATA_TYPE_NAME,nav_msgs::Path::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Path");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetMapRequest::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::GetMapRequest>(
                    // boost::lambda::new_ptr<nav_msgs::GetMapRequest>(),
                    [](){ return new nav_msgs::GetMapRequest(); },
                                std::bind(allocateMessage,nav_msgs::GetMapRequest::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: GetMapRequest");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetMapRequest::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::GetMapRequest::DATA_TYPE_NAME,nav_msgs::GetMapRequest::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: GetMapRequest");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetMapResponse::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::GetMapResponse>(
                    // boost::lambda::new_ptr<nav_msgs::GetMapResponse>(),
                    [](){ return new nav_msgs::GetMapResponse(); },
                                std::bind(allocateMessage,nav_msgs::GetMapResponse::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: GetMapResponse");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetMapResponse::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::GetMapResponse::DATA_TYPE_NAME,nav_msgs::GetMapResponse::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: GetMapResponse");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetMap::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::GetMap>(
                    // boost::lambda::new_ptr<nav_msgs::GetMap>(),
                    [](){ return new nav_msgs::GetMap(); },
                                std::bind(allocateMessage,nav_msgs::GetMap::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: GetMap");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetMap::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::GetMap::DATA_TYPE_NAME,nav_msgs::GetMap::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: GetMap");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetPlanRequest::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::GetPlanRequest>(
                    // boost::lambda::new_ptr<nav_msgs::GetPlanRequest>(),
                    [](){ return new nav_msgs::GetPlanRequest(); },
                                std::bind(allocateMessage,nav_msgs::GetPlanRequest::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: GetPlanRequest");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetPlanRequest::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::GetPlanRequest::DATA_TYPE_NAME,nav_msgs::GetPlanRequest::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: GetPlanRequest");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetPlanResponse::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::GetPlanResponse>(
                    // boost::lambda::new_ptr<nav_msgs::GetPlanResponse>(),
                    [](){ return new nav_msgs::GetPlanResponse(); },
                                std::bind(allocateMessage,nav_msgs::GetPlanResponse::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: GetPlanResponse");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetPlanResponse::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::GetPlanResponse::DATA_TYPE_NAME,nav_msgs::GetPlanResponse::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: GetPlanResponse");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetPlan::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::GetPlan>(
                    // boost::lambda::new_ptr<nav_msgs::GetPlan>(),
                    [](){ return new nav_msgs::GetPlan(); },
                                std::bind(allocateMessage,nav_msgs::GetPlan::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: GetPlan");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::GetPlan::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::GetPlan::DATA_TYPE_NAME,nav_msgs::GetPlan::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: GetPlan");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::SetMapRequest::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::SetMapRequest>(
                    // boost::lambda::new_ptr<nav_msgs::SetMapRequest>(),
                    [](){ return new nav_msgs::SetMapRequest(); },
                                std::bind(allocateMessage,nav_msgs::SetMapRequest::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: SetMapRequest");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::SetMapRequest::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::SetMapRequest::DATA_TYPE_NAME,nav_msgs::SetMapRequest::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: SetMapRequest");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::SetMapResponse::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::SetMapResponse>(
                    // boost::lambda::new_ptr<nav_msgs::SetMapResponse>(),
                    [](){ return new nav_msgs::SetMapResponse(); },
                                std::bind(allocateMessage,nav_msgs::SetMapResponse::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: SetMapResponse");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::SetMapResponse::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::SetMapResponse::DATA_TYPE_NAME,nav_msgs::SetMapResponse::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: SetMapResponse");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::SetMap::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<nav_msgs::SetMap>(
                    // boost::lambda::new_ptr<nav_msgs::SetMap>(),
                    [](){ return new nav_msgs::SetMap(); },
                                std::bind(allocateMessage,nav_msgs::SetMap::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: SetMap");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = nav_msgs::SetMap::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(nav_msgs::SetMap::DATA_TYPE_NAME,nav_msgs::SetMap::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: SetMap");
            }

        }

        return retval;
    };

    std::string xmlSource()
    {
        return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\
<!--\
 \
  AUTOGENERATED FILE:   do not edit\
\
  Generated by:         alex on alex-laptop, 2016-11-23 12:44:32 -0500\
  From Template/Script: rosToXML.rb\
 \
\
-->\
<classes library_name=\"nav_msgs_gencpp\" namespace=\"nav_msgs\">\
\
<class name=\"GetMapAction\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"e611ad23fbf237c031b7536416dc7cd7\" rosDesc=\"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n\\nGetMapActionGoal action_goal\\nGetMapActionResult action_result\\nGetMapActionFeedback action_feedback\\n\\n================================================================================\\nMSG: nav_msgs/GetMapActionGoal\\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n\\nHeader header\\nactionlib_msgs/GoalID goal_id\\nGetMapGoal goal\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: actionlib_msgs/GoalID\\n# The stamp should store the time at which this goal was requested.\\n# It is used by an action server when it tries to preempt all\\n# goals that were requested before a certain time\\ntime stamp\\n\\n# The id provides a way to associate feedback and\\n# result message with specific goal requests. The id\\n# specified must be unique.\\nstring id\\n\\n\\n================================================================================\\nMSG: nav_msgs/GetMapGoal\\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n# Get the map as a nav_msgs/OccupancyGrid\\n\\n================================================================================\\nMSG: nav_msgs/GetMapActionResult\\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n\\nHeader header\\nactionlib_msgs/GoalStatus status\\nGetMapResult result\\n\\n================================================================================\\nMSG: actionlib_msgs/GoalStatus\\nGoalID goal_id\\nuint8 status\\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\\n                            #   and has since completed its execution (Terminal State)\\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\\n                            #    to some failure (Terminal State)\\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\\n                            #    because the goal was unattainable or invalid (Terminal State)\\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\\n                            #    and has not yet completed execution\\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\\n                            #    but the action server has not yet confirmed that the goal is canceled\\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\\n                            #    and was successfully cancelled (Terminal State)\\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\\n                            #    sent over the wire by an action server\\n\\n#Allow for the user to associate a string with GoalStatus for debugging\\nstring text\\n\\n\\n================================================================================\\nMSG: nav_msgs/GetMapResult\\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\nnav_msgs/OccupancyGrid map\\n\\n================================================================================\\nMSG: nav_msgs/OccupancyGrid\\n# This represents a 2-D grid map, in which each cell represents the probability of\\n# occupancy.\\n\\nHeader header \\n\\n#MetaData for the map\\nMapMetaData info\\n\\n# The map data, in row-major order, starting with (0,0).  Occupancy\\n# probabilities are in the range [0,100].  Unknown is -1.\\nint8[] data\\n\\n================================================================================\\nMSG: nav_msgs/MapMetaData\\n# This hold basic information about the characterists of the OccupancyGrid\\n\\n# The time at which the map was loaded\\ntime map_load_time\\n# The map resolution [m/cell]\\nfloat32 resolution\\n# Map width [cells]\\nuint32 width\\n# Map height [cells]\\nuint32 height\\n# The origin of the map [m, m, rad].  This is the real-world pose of the\\n# cell (0,0) in the map.\\ngeometry_msgs/Pose origin\\n================================================================================\\nMSG: geometry_msgs/Pose\\n# A representation of pose in free space, composed of position and orientation. \\nPoint position\\nQuaternion orientation\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\\n================================================================================\\nMSG: nav_msgs/GetMapActionFeedback\\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n\\nHeader header\\nactionlib_msgs/GoalStatus status\\nGetMapFeedback feedback\\n\\n================================================================================\\nMSG: nav_msgs/GetMapFeedback\\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n# no feedback\\n\" comment=\"====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\">\
  <field name=\"action_goal\" type=\"GetMapActionGoal\" sourceType=\"GetMapActionGoal\" comment=\"\"/>\
  <field name=\"action_result\" type=\"GetMapActionResult\" sourceType=\"GetMapActionResult\" comment=\"\"/>\
  <field name=\"action_feedback\" type=\"GetMapActionFeedback\" sourceType=\"GetMapActionFeedback\" comment=\"\"/>\
</class>\
\
<class name=\"GetMapActionFeedback\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"aae20e09065c3809e8a8e87c4c8953fd\" rosDesc=\"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n\\nHeader header\\nactionlib_msgs/GoalStatus status\\nGetMapFeedback feedback\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: actionlib_msgs/GoalStatus\\nGoalID goal_id\\nuint8 status\\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\\n                            #   and has since completed its execution (Terminal State)\\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\\n                            #    to some failure (Terminal State)\\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\\n                            #    because the goal was unattainable or invalid (Terminal State)\\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\\n                            #    and has not yet completed execution\\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\\n                            #    but the action server has not yet confirmed that the goal is canceled\\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\\n                            #    and was successfully cancelled (Terminal State)\\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\\n                            #    sent over the wire by an action server\\n\\n#Allow for the user to associate a string with GoalStatus for debugging\\nstring text\\n\\n\\n================================================================================\\nMSG: actionlib_msgs/GoalID\\n# The stamp should store the time at which this goal was requested.\\n# It is used by an action server when it tries to preempt all\\n# goals that were requested before a certain time\\ntime stamp\\n\\n# The id provides a way to associate feedback and\\n# result message with specific goal requests. The id\\n# specified must be unique.\\nstring id\\n\\n\\n================================================================================\\nMSG: nav_msgs/GetMapFeedback\\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n# no feedback\\n\" comment=\"====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"status\" type=\"actionlib_msgs::GoalStatus\" sourceType=\"actionlib_msgs::GoalStatus\" comment=\"\"/>\
  <field name=\"feedback\" type=\"GetMapFeedback\" sourceType=\"GetMapFeedback\" comment=\"\"/>\
</class>\
\
<class name=\"GetMapActionGoal\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"4b30be6cd12b9e72826df56b481f40e0\" rosDesc=\"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n\\nHeader header\\nactionlib_msgs/GoalID goal_id\\nGetMapGoal goal\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: actionlib_msgs/GoalID\\n# The stamp should store the time at which this goal was requested.\\n# It is used by an action server when it tries to preempt all\\n# goals that were requested before a certain time\\ntime stamp\\n\\n# The id provides a way to associate feedback and\\n# result message with specific goal requests. The id\\n# specified must be unique.\\nstring id\\n\\n\\n================================================================================\\nMSG: nav_msgs/GetMapGoal\\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n# Get the map as a nav_msgs/OccupancyGrid\\n\" comment=\"====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"goal_id\" type=\"actionlib_msgs::GoalID\" sourceType=\"actionlib_msgs::GoalID\" comment=\"\"/>\
  <field name=\"goal\" type=\"GetMapGoal\" sourceType=\"GetMapGoal\" comment=\"\"/>\
</class>\
\
<class name=\"GetMapActionResult\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"ac66e5b9a79bb4bbd33dab245236c892\" rosDesc=\"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n\\nHeader header\\nactionlib_msgs/GoalStatus status\\nGetMapResult result\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: actionlib_msgs/GoalStatus\\nGoalID goal_id\\nuint8 status\\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\\n                            #   and has since completed its execution (Terminal State)\\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\\n                            #    to some failure (Terminal State)\\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\\n                            #    because the goal was unattainable or invalid (Terminal State)\\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\\n                            #    and has not yet completed execution\\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\\n                            #    but the action server has not yet confirmed that the goal is canceled\\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\\n                            #    and was successfully cancelled (Terminal State)\\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\\n                            #    sent over the wire by an action server\\n\\n#Allow for the user to associate a string with GoalStatus for debugging\\nstring text\\n\\n\\n================================================================================\\nMSG: actionlib_msgs/GoalID\\n# The stamp should store the time at which this goal was requested.\\n# It is used by an action server when it tries to preempt all\\n# goals that were requested before a certain time\\ntime stamp\\n\\n# The id provides a way to associate feedback and\\n# result message with specific goal requests. The id\\n# specified must be unique.\\nstring id\\n\\n\\n================================================================================\\nMSG: nav_msgs/GetMapResult\\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\nnav_msgs/OccupancyGrid map\\n\\n================================================================================\\nMSG: nav_msgs/OccupancyGrid\\n# This represents a 2-D grid map, in which each cell represents the probability of\\n# occupancy.\\n\\nHeader header \\n\\n#MetaData for the map\\nMapMetaData info\\n\\n# The map data, in row-major order, starting with (0,0).  Occupancy\\n# probabilities are in the range [0,100].  Unknown is -1.\\nint8[] data\\n\\n================================================================================\\nMSG: nav_msgs/MapMetaData\\n# This hold basic information about the characterists of the OccupancyGrid\\n\\n# The time at which the map was loaded\\ntime map_load_time\\n# The map resolution [m/cell]\\nfloat32 resolution\\n# Map width [cells]\\nuint32 width\\n# Map height [cells]\\nuint32 height\\n# The origin of the map [m, m, rad].  This is the real-world pose of the\\n# cell (0,0) in the map.\\ngeometry_msgs/Pose origin\\n================================================================================\\nMSG: geometry_msgs/Pose\\n# A representation of pose in free space, composed of position and orientation. \\nPoint position\\nQuaternion orientation\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\" comment=\"====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"status\" type=\"actionlib_msgs::GoalStatus\" sourceType=\"actionlib_msgs::GoalStatus\" comment=\"\"/>\
  <field name=\"result\" type=\"GetMapResult\" sourceType=\"GetMapResult\" comment=\"\"/>\
</class>\
\
<class name=\"GetMapFeedback\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"d41d8cd98f00b204e9800998ecf8427e\" rosDesc=\"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n# no feedback\\n\" comment=\"\">\
</class>\
\
<class name=\"GetMapGoal\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"d41d8cd98f00b204e9800998ecf8427e\" rosDesc=\"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\n# Get the map as a nav_msgs/OccupancyGrid\\n\" comment=\"\">\
</class>\
\
<class name=\"GetMapResult\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"6cdd0a18e0aff5b0a3ca2326a89b54ff\" rosDesc=\"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\\nnav_msgs/OccupancyGrid map\\n\\n================================================================================\\nMSG: nav_msgs/OccupancyGrid\\n# This represents a 2-D grid map, in which each cell represents the probability of\\n# occupancy.\\n\\nHeader header \\n\\n#MetaData for the map\\nMapMetaData info\\n\\n# The map data, in row-major order, starting with (0,0).  Occupancy\\n# probabilities are in the range [0,100].  Unknown is -1.\\nint8[] data\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: nav_msgs/MapMetaData\\n# This hold basic information about the characterists of the OccupancyGrid\\n\\n# The time at which the map was loaded\\ntime map_load_time\\n# The map resolution [m/cell]\\nfloat32 resolution\\n# Map width [cells]\\nuint32 width\\n# Map height [cells]\\nuint32 height\\n# The origin of the map [m, m, rad].  This is the real-world pose of the\\n# cell (0,0) in the map.\\ngeometry_msgs/Pose origin\\n================================================================================\\nMSG: geometry_msgs/Pose\\n# A representation of pose in free space, composed of position and orientation. \\nPoint position\\nQuaternion orientation\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\" comment=\"====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\">\
  <field name=\"map\" type=\"nav_msgs::OccupancyGrid\" sourceType=\"nav_msgs::OccupancyGrid\" comment=\"\"/>\
</class>\
\
<class name=\"GridCells\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"b9e4f5df6d28e272ebde00a3994830f5\" rosDesc=\"#an array of cells in a 2D grid\\nHeader header\\nfloat32 cell_width\\nfloat32 cell_height\\ngeometry_msgs/Point[] cells\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\" comment=\"an array of cells in a 2D grid\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"cell_width\" type=\"float\" sourceType=\"float32\" comment=\"\"/>\
  <field name=\"cell_height\" type=\"float\" sourceType=\"float32\" comment=\"\"/>\
  <field name=\"cells\" type=\"vector(geometry_msgs::Point)\" sourceType=\"geometry_msgs::Point\" comment=\"\"/>\
</class>\
\
<class name=\"MapMetaData\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"10cfc8a2818024d3248802c00c95f11b\" rosDesc=\"# This hold basic information about the characterists of the OccupancyGrid\\n\\n# The time at which the map was loaded\\ntime map_load_time\\n# The map resolution [m/cell]\\nfloat32 resolution\\n# Map width [cells]\\nuint32 width\\n# Map height [cells]\\nuint32 height\\n# The origin of the map [m, m, rad].  This is the real-world pose of the\\n# cell (0,0) in the map.\\ngeometry_msgs/Pose origin\\n================================================================================\\nMSG: geometry_msgs/Pose\\n# A representation of pose in free space, composed of position and orientation. \\nPoint position\\nQuaternion orientation\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\" comment=\"This hold basic information about the characterists of the OccupancyGrid\">\
  <field name=\"map_load_time\" type=\"std_msgs::RosTime\" sourceType=\"time\" comment=\"The map resolution [m/cell]\"/>\
  <field name=\"resolution\" type=\"float\" sourceType=\"float32\" comment=\"Map width [cells]\"/>\
  <field name=\"width\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"Map height [cells]\"/>\
  <field name=\"height\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"The origin of the map [m, m, rad].  This is the real-world pose of the  cell (0,0) in the map.\"/>\
  <field name=\"origin\" type=\"geometry_msgs::Pose\" sourceType=\"geometry_msgs::Pose\" comment=\"\"/>\
</class>\
\
<class name=\"OccupancyGrid\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"3381f2d731d4076ec5c71b0759edbe4e\" rosDesc=\"# This represents a 2-D grid map, in which each cell represents the probability of\\n# occupancy.\\n\\nHeader header \\n\\n#MetaData for the map\\nMapMetaData info\\n\\n# The map data, in row-major order, starting with (0,0).  Occupancy\\n# probabilities are in the range [0,100].  Unknown is -1.\\nint8[] data\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: nav_msgs/MapMetaData\\n# This hold basic information about the characterists of the OccupancyGrid\\n\\n# The time at which the map was loaded\\ntime map_load_time\\n# The map resolution [m/cell]\\nfloat32 resolution\\n# Map width [cells]\\nuint32 width\\n# Map height [cells]\\nuint32 height\\n# The origin of the map [m, m, rad].  This is the real-world pose of the\\n# cell (0,0) in the map.\\ngeometry_msgs/Pose origin\\n================================================================================\\nMSG: geometry_msgs/Pose\\n# A representation of pose in free space, composed of position and orientation. \\nPoint position\\nQuaternion orientation\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\" comment=\"This represents a 2-D grid map, in which each cell represents the probability of  occupancy.\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"MetaData for the map\"/>\
  <field name=\"info\" type=\"MapMetaData\" sourceType=\"MapMetaData\" comment=\"The map data, in row-major order, starting with (0,0).  Occupancy  probabilities are in the range [0,100].  Unknown is -1.\"/>\
  <field name=\"data\" type=\"vector(char)\" sourceType=\"int8\" comment=\"\"/>\
</class>\
\
<class name=\"Odometry\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"cd5e73d190d741a2f92e81eda573aca7\" rosDesc=\"# This represents an estimate of a position and velocity in free space.  \\n# The pose in this message should be specified in the coordinate frame given by header.frame_id.\\n# The twist in this message should be specified in the coordinate frame given by the child_frame_id\\nHeader header\\nstring child_frame_id\\ngeometry_msgs/PoseWithCovariance pose\\ngeometry_msgs/TwistWithCovariance twist\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/PoseWithCovariance\\n# This represents a pose in free space with uncertainty.\\n\\nPose pose\\n\\n# Row-major representation of the 6x6 covariance matrix\\n# The orientation parameters use a fixed-axis representation.\\n# In order, the parameters are:\\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\\nfloat64[36] covariance\\n\\n================================================================================\\nMSG: geometry_msgs/Pose\\n# A representation of pose in free space, composed of position and orientation. \\nPoint position\\nQuaternion orientation\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\\n================================================================================\\nMSG: geometry_msgs/TwistWithCovariance\\n# This expresses velocity in free space with uncertainty.\\n\\nTwist twist\\n\\n# Row-major representation of the 6x6 covariance matrix\\n# The orientation parameters use a fixed-axis representation.\\n# In order, the parameters are:\\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\\nfloat64[36] covariance\\n\\n================================================================================\\nMSG: geometry_msgs/Twist\\n# This expresses velocity in free space broken into its linear and angular parts.\\nVector3  linear\\nVector3  angular\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\n\" comment=\"This represents an estimate of a position and velocity in free space.    The pose in this message should be specified in the coordinate frame given by header.frame_id.  The twist in this message should be specified in the coordinate frame given by the child_frame_id\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"child_frame_id\" type=\"string\" sourceType=\"string\" comment=\"\"/>\
  <field name=\"pose\" type=\"geometry_msgs::PoseWithCovariance\" sourceType=\"geometry_msgs::PoseWithCovariance\" comment=\"\"/>\
  <field name=\"twist\" type=\"geometry_msgs::TwistWithCovariance\" sourceType=\"geometry_msgs::TwistWithCovariance\" comment=\"\"/>\
</class>\
\
<class name=\"Path\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"6227e2b7e9cce15051f669a5e197bbf7\" rosDesc=\"#An array of poses that represents a Path for a robot to follow\\nHeader header\\ngeometry_msgs/PoseStamped[] poses\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/PoseStamped\\n# A Pose with reference coordinate frame and timestamp\\nHeader header\\nPose pose\\n\\n================================================================================\\nMSG: geometry_msgs/Pose\\n# A representation of pose in free space, composed of position and orientation. \\nPoint position\\nQuaternion orientation\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\" comment=\"An array of poses that represents a Path for a robot to follow\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"poses\" type=\"vector(geometry_msgs::PoseStamped)\" sourceType=\"geometry_msgs::PoseStamped\" comment=\"\"/>\
</class>\
\
<class name=\"GetMapRequest\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"Get the map as a nav_msgs/OccupancyGrid\">\
</class>\
\
<class name=\"GetMapResponse\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"Get the map as a nav_msgs/OccupancyGrid\">\
  <field name=\"map\" type=\"nav_msgs::OccupancyGrid\" sourceType=\"nav_msgs::OccupancyGrid\" comment=\"\"/>\
</class>\
\
<class name=\"GetMap\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"Get the map as a nav_msgs/OccupancyGrid\">\
  <definition name=\"Request\" type=\"GetMapRequest\"/>\
  <definition name=\"Response\" type=\"GetMapResponse\"/>\
  <field name=\"request\" type=\"Request\" comment=\"request data type\"/>\
  <field name=\"response\" type=\"Response\" comment=\"response data type\"/>\
</class>\
\
<class name=\"GetPlanRequest\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"Get a plan from the current position to the goal Pose\">\
  <field name=\"start\" type=\"geometry_msgs::PoseStamped\" sourceType=\"geometry_msgs::PoseStamped\" comment=\"The final pose of the goal position\"/>\
  <field name=\"goal\" type=\"geometry_msgs::PoseStamped\" sourceType=\"geometry_msgs::PoseStamped\" comment=\"If the goal is obstructed, how many meters the planner can   relax the constraint in x and y before failing.\"/>\
  <field name=\"tolerance\" type=\"float\" sourceType=\"float32\" comment=\"no comment provided\"/>\
</class>\
\
<class name=\"GetPlanResponse\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"Get a plan from the current position to the goal Pose\">\
  <field name=\"plan\" type=\"nav_msgs::Path\" sourceType=\"nav_msgs::Path\" comment=\"\"/>\
</class>\
\
<class name=\"GetPlan\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"Get a plan from the current position to the goal Pose\">\
  <definition name=\"Request\" type=\"GetPlanRequest\"/>\
  <definition name=\"Response\" type=\"GetPlanResponse\"/>\
  <field name=\"request\" type=\"Request\" comment=\"request data type\"/>\
  <field name=\"response\" type=\"Response\" comment=\"response data type\"/>\
</class>\
\
<class name=\"SetMapRequest\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"Set a new map together with an initial pose\">\
  <field name=\"map\" type=\"nav_msgs::OccupancyGrid\" sourceType=\"nav_msgs::OccupancyGrid\" comment=\"\"/>\
  <field name=\"initial_pose\" type=\"geometry_msgs::PoseWithCovarianceStamped\" sourceType=\"geometry_msgs::PoseWithCovarianceStamped\" comment=\"no comment provided\"/>\
</class>\
\
<class name=\"SetMapResponse\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"Set a new map together with an initial pose\">\
  <field name=\"success\" type=\"bool\" sourceType=\"bool\" comment=\"\"/>\
</class>\
\
<class name=\"SetMap\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"Set a new map together with an initial pose\">\
  <definition name=\"Request\" type=\"SetMapRequest\"/>\
  <definition name=\"Response\" type=\"SetMapResponse\"/>\
  <field name=\"request\" type=\"Request\" comment=\"request data type\"/>\
  <field name=\"response\" type=\"Response\" comment=\"response data type\"/>\
</class>\
\
<dependency name=\"actionlib_msgs_gencpp\"/>\
<dependency name=\"geometry_msgs_gencpp\"/>\
<dependency name=\"std_msgs_gencpp\"/>\
<dependency name=\"std_srvs_gencpp\"/>\
\
</classes>\
";
    }

}; // end namespace nav_msgs


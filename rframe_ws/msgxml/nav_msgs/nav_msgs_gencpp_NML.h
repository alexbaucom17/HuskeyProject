// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:51 -0500
//  From Template/Script: data_templates/NMLHeaderTemplate.h
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#ifndef _CODEGEN_NAV_MSGS_GENCPPNML_H_
#define _CODEGEN_NAV_MSGS_GENCPPNML_H_

#include <messaging/nml/NMLMessageFactory.h>
//#include <DataTypeInfo.h>
#include <messaging/Message.h>

#include "nav_msgs_gencpp_NMLSupport.h"

namespace rframe { class DataTypeInfo; };

#include "GetMapAction.h"
#include "GetMapActionFeedback.h"
#include "GetMapActionGoal.h"
#include "GetMapActionResult.h"
#include "GetMapFeedback.h"
#include "GetMapGoal.h"
#include "GetMapResult.h"
#include "GridCells.h"
#include "MapMetaData.h"
#include "OccupancyGrid.h"
#include "Odometry.h"
#include "Path.h"
#include "GetMapRequest.h"
#include "GetMapResponse.h"
#include "GetMap.h"
#include "GetPlanRequest.h"
#include "GetPlanResponse.h"
#include "GetPlan.h"
#include "SetMapRequest.h"
#include "SetMapResponse.h"
#include "SetMap.h"

namespace nav_msgs {

    /** definition of message factory for nav_msgs_gencpp */
    class nav_msgs_gencppNMLMessageFactory : public NMLMessageFactory
    {
    public:
        /** constructor */
        nav_msgs_gencppNMLMessageFactory();
        /** destructor */
        virtual ~nav_msgs_gencppNMLMessageFactory();

        /** see  rframe::MessageFactoryInterface */
        virtual void dataTypes(std::vector<DataTypeInfo> & ids);
        /** see  rframe::MessageFactoryInterface */
        virtual int dataType(NMLmsg & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<NMLmsg> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateTransport(NMLmsg * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateMessage(MessageBase * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int toTransport( MessageBase & src, NMLmsg & dst);
        /** see  rframe::MessageFactoryInterface */
        virtual int fromTransport( NMLmsg & src, MessageBase & dst);

        /** \return poitner to nml format function */
        virtual NML_FORMAT_PTR FormatPointer();
        /** run constructor for class of type id in the provided buffer */
        virtual int constructBuffer(rframe::ID_TYPE id, void * buffer);
        /** run destructor for class of type id in the buffer */
        virtual int destructBuffer(rframe::ID_TYPE id, void * buffer);
    };

    /** factory allocation function for use when not dynamically loading the factory library  */
    NMLMessageFactory * allocate_nav_msgs_gencpp();

    /** NML interface for GetMapAction 

    */
    class GetMapActionNML : public NMLmsg
    {
    public:

        /** constructor */
        GetMapActionNML();
        /** destructor */
        ~GetMapActionNML();

        /** assignment operator */
        GetMapActionNML & operator=(const GetMapActionNML &inobj);
        /** assignment operator for base data class */
        GetMapActionNML & operator=(const GetMapAction &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetMapAction nmlPayload;

        /** set payload */
        void payload(const GetMapAction &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetMapAction> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetMapAction * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetMapAction> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetMapActionFeedback 

    */
    class GetMapActionFeedbackNML : public NMLmsg
    {
    public:

        /** constructor */
        GetMapActionFeedbackNML();
        /** destructor */
        ~GetMapActionFeedbackNML();

        /** assignment operator */
        GetMapActionFeedbackNML & operator=(const GetMapActionFeedbackNML &inobj);
        /** assignment operator for base data class */
        GetMapActionFeedbackNML & operator=(const GetMapActionFeedback &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetMapActionFeedback nmlPayload;

        /** set payload */
        void payload(const GetMapActionFeedback &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetMapActionFeedback> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetMapActionFeedback * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetMapActionFeedback> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetMapActionGoal 

    */
    class GetMapActionGoalNML : public NMLmsg
    {
    public:

        /** constructor */
        GetMapActionGoalNML();
        /** destructor */
        ~GetMapActionGoalNML();

        /** assignment operator */
        GetMapActionGoalNML & operator=(const GetMapActionGoalNML &inobj);
        /** assignment operator for base data class */
        GetMapActionGoalNML & operator=(const GetMapActionGoal &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetMapActionGoal nmlPayload;

        /** set payload */
        void payload(const GetMapActionGoal &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetMapActionGoal> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetMapActionGoal * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetMapActionGoal> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetMapActionResult 

    */
    class GetMapActionResultNML : public NMLmsg
    {
    public:

        /** constructor */
        GetMapActionResultNML();
        /** destructor */
        ~GetMapActionResultNML();

        /** assignment operator */
        GetMapActionResultNML & operator=(const GetMapActionResultNML &inobj);
        /** assignment operator for base data class */
        GetMapActionResultNML & operator=(const GetMapActionResult &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetMapActionResult nmlPayload;

        /** set payload */
        void payload(const GetMapActionResult &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetMapActionResult> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetMapActionResult * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetMapActionResult> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetMapFeedback 

    */
    class GetMapFeedbackNML : public NMLmsg
    {
    public:

        /** constructor */
        GetMapFeedbackNML();
        /** destructor */
        ~GetMapFeedbackNML();

        /** assignment operator */
        GetMapFeedbackNML & operator=(const GetMapFeedbackNML &inobj);
        /** assignment operator for base data class */
        GetMapFeedbackNML & operator=(const GetMapFeedback &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetMapFeedback nmlPayload;

        /** set payload */
        void payload(const GetMapFeedback &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetMapFeedback> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetMapFeedback * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetMapFeedback> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetMapGoal 

    */
    class GetMapGoalNML : public NMLmsg
    {
    public:

        /** constructor */
        GetMapGoalNML();
        /** destructor */
        ~GetMapGoalNML();

        /** assignment operator */
        GetMapGoalNML & operator=(const GetMapGoalNML &inobj);
        /** assignment operator for base data class */
        GetMapGoalNML & operator=(const GetMapGoal &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetMapGoal nmlPayload;

        /** set payload */
        void payload(const GetMapGoal &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetMapGoal> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetMapGoal * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetMapGoal> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetMapResult 

    */
    class GetMapResultNML : public NMLmsg
    {
    public:

        /** constructor */
        GetMapResultNML();
        /** destructor */
        ~GetMapResultNML();

        /** assignment operator */
        GetMapResultNML & operator=(const GetMapResultNML &inobj);
        /** assignment operator for base data class */
        GetMapResultNML & operator=(const GetMapResult &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetMapResult nmlPayload;

        /** set payload */
        void payload(const GetMapResult &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetMapResult> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetMapResult * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetMapResult> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GridCells 

    */
    class GridCellsNML : public NMLmsg
    {
    public:

        /** constructor */
        GridCellsNML();
        /** destructor */
        ~GridCellsNML();

        /** assignment operator */
        GridCellsNML & operator=(const GridCellsNML &inobj);
        /** assignment operator for base data class */
        GridCellsNML & operator=(const GridCells &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GridCells nmlPayload;

        /** set payload */
        void payload(const GridCells &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GridCells> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GridCells * payload() { return & nmlPayload; };

    //     std::shared_ptr<GridCells> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for MapMetaData 

    */
    class MapMetaDataNML : public NMLmsg
    {
    public:

        /** constructor */
        MapMetaDataNML();
        /** destructor */
        ~MapMetaDataNML();

        /** assignment operator */
        MapMetaDataNML & operator=(const MapMetaDataNML &inobj);
        /** assignment operator for base data class */
        MapMetaDataNML & operator=(const MapMetaData &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        MapMetaData nmlPayload;

        /** set payload */
        void payload(const MapMetaData &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<MapMetaData> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        MapMetaData * payload() { return & nmlPayload; };

    //     std::shared_ptr<MapMetaData> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for OccupancyGrid 

    */
    class OccupancyGridNML : public NMLmsg
    {
    public:

        /** constructor */
        OccupancyGridNML();
        /** destructor */
        ~OccupancyGridNML();

        /** assignment operator */
        OccupancyGridNML & operator=(const OccupancyGridNML &inobj);
        /** assignment operator for base data class */
        OccupancyGridNML & operator=(const OccupancyGrid &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        OccupancyGrid nmlPayload;

        /** set payload */
        void payload(const OccupancyGrid &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<OccupancyGrid> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        OccupancyGrid * payload() { return & nmlPayload; };

    //     std::shared_ptr<OccupancyGrid> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Odometry 

    */
    class OdometryNML : public NMLmsg
    {
    public:

        /** constructor */
        OdometryNML();
        /** destructor */
        ~OdometryNML();

        /** assignment operator */
        OdometryNML & operator=(const OdometryNML &inobj);
        /** assignment operator for base data class */
        OdometryNML & operator=(const Odometry &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Odometry nmlPayload;

        /** set payload */
        void payload(const Odometry &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Odometry> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Odometry * payload() { return & nmlPayload; };

    //     std::shared_ptr<Odometry> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Path 

    */
    class PathNML : public NMLmsg
    {
    public:

        /** constructor */
        PathNML();
        /** destructor */
        ~PathNML();

        /** assignment operator */
        PathNML & operator=(const PathNML &inobj);
        /** assignment operator for base data class */
        PathNML & operator=(const Path &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Path nmlPayload;

        /** set payload */
        void payload(const Path &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Path> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Path * payload() { return & nmlPayload; };

    //     std::shared_ptr<Path> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetMapRequest 

    */
    class GetMapRequestNML : public NMLmsg
    {
    public:

        /** constructor */
        GetMapRequestNML();
        /** destructor */
        ~GetMapRequestNML();

        /** assignment operator */
        GetMapRequestNML & operator=(const GetMapRequestNML &inobj);
        /** assignment operator for base data class */
        GetMapRequestNML & operator=(const GetMapRequest &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetMapRequest nmlPayload;

        /** set payload */
        void payload(const GetMapRequest &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetMapRequest> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetMapRequest * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetMapRequest> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetMapResponse 

    */
    class GetMapResponseNML : public NMLmsg
    {
    public:

        /** constructor */
        GetMapResponseNML();
        /** destructor */
        ~GetMapResponseNML();

        /** assignment operator */
        GetMapResponseNML & operator=(const GetMapResponseNML &inobj);
        /** assignment operator for base data class */
        GetMapResponseNML & operator=(const GetMapResponse &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetMapResponse nmlPayload;

        /** set payload */
        void payload(const GetMapResponse &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetMapResponse> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetMapResponse * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetMapResponse> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetMap 

    */
    class GetMapNML : public NMLmsg
    {
    public:

        /** constructor */
        GetMapNML();
        /** destructor */
        ~GetMapNML();

        /** assignment operator */
        GetMapNML & operator=(const GetMapNML &inobj);
        /** assignment operator for base data class */
        GetMapNML & operator=(const GetMap &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetMap nmlPayload;

        /** set payload */
        void payload(const GetMap &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetMap> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetMap * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetMap> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetPlanRequest 

    */
    class GetPlanRequestNML : public NMLmsg
    {
    public:

        /** constructor */
        GetPlanRequestNML();
        /** destructor */
        ~GetPlanRequestNML();

        /** assignment operator */
        GetPlanRequestNML & operator=(const GetPlanRequestNML &inobj);
        /** assignment operator for base data class */
        GetPlanRequestNML & operator=(const GetPlanRequest &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetPlanRequest nmlPayload;

        /** set payload */
        void payload(const GetPlanRequest &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetPlanRequest> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetPlanRequest * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetPlanRequest> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetPlanResponse 

    */
    class GetPlanResponseNML : public NMLmsg
    {
    public:

        /** constructor */
        GetPlanResponseNML();
        /** destructor */
        ~GetPlanResponseNML();

        /** assignment operator */
        GetPlanResponseNML & operator=(const GetPlanResponseNML &inobj);
        /** assignment operator for base data class */
        GetPlanResponseNML & operator=(const GetPlanResponse &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetPlanResponse nmlPayload;

        /** set payload */
        void payload(const GetPlanResponse &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetPlanResponse> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetPlanResponse * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetPlanResponse> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetPlan 

    */
    class GetPlanNML : public NMLmsg
    {
    public:

        /** constructor */
        GetPlanNML();
        /** destructor */
        ~GetPlanNML();

        /** assignment operator */
        GetPlanNML & operator=(const GetPlanNML &inobj);
        /** assignment operator for base data class */
        GetPlanNML & operator=(const GetPlan &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetPlan nmlPayload;

        /** set payload */
        void payload(const GetPlan &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetPlan> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetPlan * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetPlan> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for SetMapRequest 

    */
    class SetMapRequestNML : public NMLmsg
    {
    public:

        /** constructor */
        SetMapRequestNML();
        /** destructor */
        ~SetMapRequestNML();

        /** assignment operator */
        SetMapRequestNML & operator=(const SetMapRequestNML &inobj);
        /** assignment operator for base data class */
        SetMapRequestNML & operator=(const SetMapRequest &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        SetMapRequest nmlPayload;

        /** set payload */
        void payload(const SetMapRequest &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<SetMapRequest> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        SetMapRequest * payload() { return & nmlPayload; };

    //     std::shared_ptr<SetMapRequest> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for SetMapResponse 

    */
    class SetMapResponseNML : public NMLmsg
    {
    public:

        /** constructor */
        SetMapResponseNML();
        /** destructor */
        ~SetMapResponseNML();

        /** assignment operator */
        SetMapResponseNML & operator=(const SetMapResponseNML &inobj);
        /** assignment operator for base data class */
        SetMapResponseNML & operator=(const SetMapResponse &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        SetMapResponse nmlPayload;

        /** set payload */
        void payload(const SetMapResponse &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<SetMapResponse> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        SetMapResponse * payload() { return & nmlPayload; };

    //     std::shared_ptr<SetMapResponse> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for SetMap 

    */
    class SetMapNML : public NMLmsg
    {
    public:

        /** constructor */
        SetMapNML();
        /** destructor */
        ~SetMapNML();

        /** assignment operator */
        SetMapNML & operator=(const SetMapNML &inobj);
        /** assignment operator for base data class */
        SetMapNML & operator=(const SetMap &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        SetMap nmlPayload;

        /** set payload */
        void payload(const SetMap &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<SetMap> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        SetMap * payload() { return & nmlPayload; };

    //     std::shared_ptr<SetMap> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    // predeclaration of nmlupdate functions (necessary due to namespaces )

    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::GetMapAction & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::GetMapActionFeedback & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::GetMapActionGoal & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::GetMapActionResult & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::GetMapFeedback & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::GetMapGoal & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::GetMapResult & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::GridCells & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::MapMetaData & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::OccupancyGrid & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::Odometry & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::Path & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::GetMapRequest & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::GetMapResponse & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::GetMap & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::GetPlanRequest & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::GetPlanResponse & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::GetPlan & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::SetMapRequest & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::SetMapResponse & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, nav_msgs::SetMap & inobj);

    /** nml format function */
    int nav_msgs_gencpp_format(NMLTYPE type, void * buffer, CMS* cms);

}; // end namespace nav_msgs

#endif // _NAV_MSGS_GENCPPNML_H_

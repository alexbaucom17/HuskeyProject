// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:09 -0500
//  From Template/Script: data_templates/DataClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <math.h> // to allow use of common constants...
#include <common/Error.h>
#include "visualization_msgs/InteractiveMarkerFeedback.h"

#include <common/JsonIo.h> // include here so container types are included by the class header 

using namespace std;

const unsigned char visualization_msgs::InteractiveMarkerFeedback::KEEP_ALIVE = 0;
const unsigned char visualization_msgs::InteractiveMarkerFeedback::POSE_UPDATE = 1;
const unsigned char visualization_msgs::InteractiveMarkerFeedback::MENU_SELECT = 2;
const unsigned char visualization_msgs::InteractiveMarkerFeedback::BUTTON_CLICK = 3;
const unsigned char visualization_msgs::InteractiveMarkerFeedback::MOUSE_DOWN = 4;
const unsigned char visualization_msgs::InteractiveMarkerFeedback::MOUSE_UP = 5;

const unsigned int visualization_msgs::InteractiveMarkerFeedback::ID;
const unsigned int visualization_msgs::InteractiveMarkerFeedback::DATA_VERSION;
const std::string visualization_msgs::InteractiveMarkerFeedback::DATA_TYPE_NAME = "InteractiveMarkerFeedback";
const std::string visualization_msgs::InteractiveMarkerFeedback::DATA_TYPE_FULL_NAME = "visualization_msgs::InteractiveMarkerFeedback";
const std::string visualization_msgs::InteractiveMarkerFeedback::VERSION_MD5 = "9982990ff709f5bd47e3d66fff4cb171";
/* xml source for this class */
const std::string visualization_msgs::InteractiveMarkerFeedback::XML_SOURCE = "<class name=\"InteractiveMarkerFeedback\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"ab0f1eee058667e28c19ff3ffc3f4b78\" rosDesc=\"# Time/frame info.\\nHeader header\\n\\n# Identifying string. Must be unique in the topic namespace.\\nstring client_id\\n\\n# Feedback message sent back from the GUI, e.g.\\n# when the status of an interactive marker was modified by the user.\\n\\n# Specifies which interactive marker and control this message refers to\\nstring marker_name\\nstring control_name\\n\\n# Type of the event\\n# KEEP_ALIVE: sent while dragging to keep up control of the marker\\n# MENU_SELECT: a menu entry has been selected\\n# BUTTON_CLICK: a button control has been clicked\\n# POSE_UPDATE: the pose has been changed using one of the controls\\nuint8 KEEP_ALIVE = 0\\nuint8 POSE_UPDATE = 1\\nuint8 MENU_SELECT = 2\\nuint8 BUTTON_CLICK = 3\\n\\nuint8 MOUSE_DOWN = 4\\nuint8 MOUSE_UP = 5\\n\\nuint8 event_type\\n\\n# Current pose of the marker\\n# Note: Has to be valid for all feedback types.\\ngeometry_msgs/Pose pose\\n\\n# Contains the ID of the selected menu entry\\n# Only valid for MENU_SELECT events.\\nuint32 menu_entry_id\\n\\n# If event_type is BUTTON_CLICK, MOUSE_DOWN, or MOUSE_UP, mouse_point\\n# may contain the 3 dimensional position of the event on the\\n# control.  If it does, mouse_point_valid will be true.  mouse_point\\n# will be relative to the frame listed in the header.\\ngeometry_msgs/Point mouse_point\\nbool mouse_point_valid\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/Pose\\n# A representation of pose in free space, composed of postion and orientation. \\nPoint position\\nQuaternion orientation\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\" comment=\"Time/frame info.\" id=\"2125420982\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"Identifying string. Must be unique in the topic namespace.\"/>\
  <field name=\"client_id\" type=\"string\" sourceType=\"string\" comment=\"Feedback message sent back from the GUI, e.g.  when the status of an interactive marker was modified by the user.  Specifies which interactive marker and control this message refers to\"/>\
  <field name=\"marker_name\" type=\"string\" sourceType=\"string\" comment=\"\"/>\
  <field name=\"control_name\" type=\"string\" sourceType=\"string\" comment=\"Type of the event  KEEP_ALIVE: sent while dragging to keep up control of the marker  MENU_SELECT: a menu entry has been selected  BUTTON_CLICK: a button control has been clicked  POSE_UPDATE: the pose has been changed using one of the controls\"/>\
  <constant init=\"0\" name=\"KEEP_ALIVE\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"1\" name=\"POSE_UPDATE\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"2\" name=\"MENU_SELECT\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"3\" name=\"BUTTON_CLICK\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"4\" name=\"MOUSE_DOWN\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"5\" name=\"MOUSE_UP\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <field name=\"event_type\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"Current pose of the marker  Note: Has to be valid for all feedback types.\"/>\
  <field name=\"pose\" type=\"geometry_msgs::Pose\" sourceType=\"geometry_msgs::Pose\" comment=\"Contains the ID of the selected menu entry  Only valid for MENU_SELECT events.\"/>\
  <field name=\"menu_entry_id\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"If event_type is BUTTON_CLICK, MOUSE_DOWN, or MOUSE_UP, mouse_point  may contain the 3 dimensional position of the event on the  control.  If it does, mouse_point_valid will be true.  mouse_point  will be relative to the frame listed in the header.\"/>\
  <field name=\"mouse_point\" type=\"geometry_msgs::Point\" sourceType=\"geometry_msgs::Point\" comment=\"\"/>\
  <field name=\"mouse_point_valid\" type=\"bool\" sourceType=\"bool\" comment=\"\"/>\
</class>";

visualization_msgs::InteractiveMarkerFeedback::InteractiveMarkerFeedback() : header(), client_id(), marker_name(), control_name(), event_type(0), pose(), menu_entry_id(0), mouse_point(), mouse_point_valid(0)
{  
};

visualization_msgs::InteractiveMarkerFeedback::InteractiveMarkerFeedback(const visualization_msgs::InteractiveMarkerFeedback & inobj) : header(inobj.header), client_id(inobj.client_id), marker_name(inobj.marker_name), control_name(inobj.control_name), event_type(inobj.event_type), pose(inobj.pose), menu_entry_id(inobj.menu_entry_id), mouse_point(inobj.mouse_point), mouse_point_valid(inobj.mouse_point_valid)
{
};

visualization_msgs::InteractiveMarkerFeedback::~InteractiveMarkerFeedback()
{
};

visualization_msgs::InteractiveMarkerFeedback * visualization_msgs::InteractiveMarkerFeedback::New()
{ 
    return new InteractiveMarkerFeedback();
};

bool visualization_msgs::InteractiveMarkerFeedback::dataTypeFlat() 
{  
    return std_msgs::Header::dataTypeFlat() && geometry_msgs::Pose::dataTypeFlat() && geometry_msgs::Point::dataTypeFlat() && rframe::CodeGenTraits<std::string>::flat();

};

visualization_msgs::InteractiveMarkerFeedback & visualization_msgs::InteractiveMarkerFeedback::operator=(const visualization_msgs::InteractiveMarkerFeedback & inobj)
{
    if (this != &inobj)
    {

        // if datatype is flat, optimize with memcpy (complier level optimiation)
              /*  if (dataTypeFlat() == true)
                  REMOVED invalid when assigning from a parent type as this is the pointer to the derived type, thus visualization_msgs::InteractiveMarkerFeedback is copied to the wrong location

        {
            memcpy(this,&inobj,sizeof(visualization_msgs::InteractiveMarkerFeedback));
        }
        else */ 
        {

            header = inobj.header;
            client_id = inobj.client_id;
            marker_name = inobj.marker_name;
            control_name = inobj.control_name;
            event_type = inobj.event_type;
            pose = inobj.pose;
            menu_entry_id = inobj.menu_entry_id;
            mouse_point = inobj.mouse_point;
            mouse_point_valid = inobj.mouse_point_valid;
        }
    }

    return *this;
}

bool visualization_msgs::InteractiveMarkerFeedback::operator==(const visualization_msgs::InteractiveMarkerFeedback & inobj) const
{
    bool ret = true;

    if (this != &inobj)
    { 
        ret = ret 
             && (header == inobj.header)
             && (client_id == inobj.client_id)
             && (marker_name == inobj.marker_name)
             && (control_name == inobj.control_name)
             && (event_type == inobj.event_type)
             && (pose == inobj.pose)
             && (menu_entry_id == inobj.menu_entry_id)
             && (mouse_point == inobj.mouse_point)
             && (mouse_point_valid == inobj.mouse_point_valid);
    }

    return ret;
}

bool visualization_msgs::InteractiveMarkerFeedback::operator!=(const visualization_msgs::InteractiveMarkerFeedback & inobj) const
{
    bool ret = false;

    if (this != &inobj)
    {
        ret = !operator==(inobj);
    }

    return ret;
}

bool visualization_msgs::InteractiveMarkerFeedback::operator<(const visualization_msgs::InteractiveMarkerFeedback & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {  
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (header < inobj.header) return true;
        if (inobj.header <  header) return false; 
        if (client_id < inobj.client_id) return true;
        if (inobj.client_id <  client_id) return false; 
        if (marker_name < inobj.marker_name) return true;
        if (inobj.marker_name <  marker_name) return false; 
        if (control_name < inobj.control_name) return true;
        if (inobj.control_name <  control_name) return false; 
        if (event_type < inobj.event_type) return true;
        if (inobj.event_type <  event_type) return false; 
        if (pose < inobj.pose) return true;
        if (inobj.pose <  pose) return false; 
        if (menu_entry_id < inobj.menu_entry_id) return true;
        if (inobj.menu_entry_id <  menu_entry_id) return false; 
        if (mouse_point < inobj.mouse_point) return true;
        if (inobj.mouse_point <  mouse_point) return false; 
        if (mouse_point_valid < inobj.mouse_point_valid) return true;
        if (inobj.mouse_point_valid <  mouse_point_valid) return false; ;
    }

    return ret;
}

bool visualization_msgs::InteractiveMarkerFeedback::operator>(const visualization_msgs::InteractiveMarkerFeedback & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (header > inobj.header) return true;
        if (inobj.header >  header) return false; 
        if (client_id > inobj.client_id) return true;
        if (inobj.client_id >  client_id) return false; 
        if (marker_name > inobj.marker_name) return true;
        if (inobj.marker_name >  marker_name) return false; 
        if (control_name > inobj.control_name) return true;
        if (inobj.control_name >  control_name) return false; 
        if (event_type > inobj.event_type) return true;
        if (inobj.event_type >  event_type) return false; 
        if (pose > inobj.pose) return true;
        if (inobj.pose >  pose) return false; 
        if (menu_entry_id > inobj.menu_entry_id) return true;
        if (inobj.menu_entry_id >  menu_entry_id) return false; 
        if (mouse_point > inobj.mouse_point) return true;
        if (inobj.mouse_point >  mouse_point) return false; 
        if (mouse_point_valid > inobj.mouse_point_valid) return true;
        if (inobj.mouse_point_valid >  mouse_point_valid) return false; ;
    }

    return ret;
}

template <> void rframe::json_io::encode(std::stringstream & sstr, const char * name, const visualization_msgs::InteractiveMarkerFeedback & t, std::string & indent, bool lastItem)
{
    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectStart(sstr,name,indent);

    rframe::json_io::encode(sstr,"header",t.header,indent,false);
    rframe::json_io::encode(sstr,"client_id",t.client_id,indent,false);
    rframe::json_io::encode(sstr,"marker_name",t.marker_name,indent,false);
    rframe::json_io::encode(sstr,"control_name",t.control_name,indent,false);
    rframe::json_io::encode(sstr,"event_type",t.event_type,indent,false);
    rframe::json_io::encode(sstr,"pose",t.pose,indent,false);
    rframe::json_io::encode(sstr,"menu_entry_id",t.menu_entry_id,indent,false);
    rframe::json_io::encode(sstr,"mouse_point",t.mouse_point,indent,false);
    rframe::json_io::encode(sstr,"mouse_point_valid",t.mouse_point_valid,indent,true);

    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectEnd(sstr,indent,lastItem);
}

std::string visualization_msgs::InteractiveMarkerFeedback::toStr(bool pretty) const
{

    stringstream sstr;
    string indent = (pretty == true) ? "\n" : "";

    rframe::json_io::encodeObjectStartMain(sstr,indent);
    rframe::json_io::encode(sstr,"",*this,indent,true);
    rframe::json_io::encodeObjectEnd(sstr,indent,true); // false so as to  not add , at end of string

    return sstr.str();

};

std::basic_ostream<char>& operator<<(std::basic_ostream<char> &s, const visualization_msgs::InteractiveMarkerFeedback & value)
{
    return s << value.toStr(false);
}


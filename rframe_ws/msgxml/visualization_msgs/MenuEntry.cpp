// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:09 -0500
//  From Template/Script: data_templates/DataClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <math.h> // to allow use of common constants...
#include <common/Error.h>
#include "visualization_msgs/MenuEntry.h"

#include <common/JsonIo.h> // include here so container types are included by the class header 

using namespace std;

const unsigned char visualization_msgs::MenuEntry::FEEDBACK = 0;
const unsigned char visualization_msgs::MenuEntry::ROSRUN = 1;
const unsigned char visualization_msgs::MenuEntry::ROSLAUNCH = 2;

const unsigned int visualization_msgs::MenuEntry::ID;
const unsigned int visualization_msgs::MenuEntry::DATA_VERSION;
const std::string visualization_msgs::MenuEntry::DATA_TYPE_NAME = "MenuEntry";
const std::string visualization_msgs::MenuEntry::DATA_TYPE_FULL_NAME = "visualization_msgs::MenuEntry";
const std::string visualization_msgs::MenuEntry::VERSION_MD5 = "8671b44d509ea067ce6b61788f392995";
/* xml source for this class */
const std::string visualization_msgs::MenuEntry::XML_SOURCE = "<class name=\"MenuEntry\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"b90ec63024573de83b57aa93eb39be2d\" rosDesc=\"# MenuEntry message.\\n\\n# Each InteractiveMarker message has an array of MenuEntry messages.\\n# A collection of MenuEntries together describe a\\n# menu/submenu/subsubmenu/etc tree, though they are stored in a flat\\n# array.  The tree structure is represented by giving each menu entry\\n# an ID number and a \\&quot;parent_id\\&quot; field.  Top-level entries are the\\n# ones with parent_id = 0.  Menu entries are ordered within their\\n# level the same way they are ordered in the containing array.  Parent\\n# entries must appear before their children.\\n\\n# Example:\\n# - id = 3\\n#   parent_id = 0\\n#   title = \\&quot;fun\\&quot;\\n# - id = 2\\n#   parent_id = 0\\n#   title = \\&quot;robot\\&quot;\\n# - id = 4\\n#   parent_id = 2\\n#   title = \\&quot;pr2\\&quot;\\n# - id = 5\\n#   parent_id = 2\\n#   title = \\&quot;turtle\\&quot;\\n#\\n# Gives a menu tree like this:\\n#  - fun\\n#  - robot\\n#    - pr2\\n#    - turtle\\n\\n# ID is a number for each menu entry.  Must be unique within the\\n# control, and should never be 0.\\nuint32 id\\n\\n# ID of the parent of this menu entry, if it is a submenu.  If this\\n# menu entry is a top-level entry, set parent_id to 0.\\nuint32 parent_id\\n\\n# menu / entry title\\nstring title\\n\\n# Arguments to command indicated by command_type (below)\\nstring command\\n\\n# Command_type stores the type of response desired when this menu\\n# entry is clicked.\\n# FEEDBACK: send an InteractiveMarkerFeedback message with menu_entry_id set to this entry's id.\\n# ROSRUN: execute \\&quot;rosrun\\&quot; with arguments given in the command field (above).\\n# ROSLAUNCH: execute \\&quot;roslaunch\\&quot; with arguments given in the command field (above).\\nuint8 FEEDBACK=0\\nuint8 ROSRUN=1\\nuint8 ROSLAUNCH=2\\nuint8 command_type\\n\" comment=\"MenuEntry message.\" id=\"2125420988\">\
  <field name=\"id\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"ID of the parent of this menu entry, if it is a submenu.  If this  menu entry is a top-level entry, set parent_id to 0.\"/>\
  <field name=\"parent_id\" type=\"unsigned int\" sourceType=\"uint32\" comment=\"menu / entry title\"/>\
  <field name=\"title\" type=\"string\" sourceType=\"string\" comment=\"Arguments to command indicated by command_type (below)\"/>\
  <field name=\"command\" type=\"string\" sourceType=\"string\" comment=\"Command_type stores the type of response desired when this menu  entry is clicked.  FEEDBACK: send an InteractiveMarkerFeedback message with menu_entry_id set to this entry's id.  ROSRUN: execute &quot;rosrun&quot; with arguments given in the command field (above).  ROSLAUNCH: execute &quot;roslaunch&quot; with arguments given in the command field (above).\"/>\
  <constant init=\"0\" name=\"FEEDBACK\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"1\" name=\"ROSRUN\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"2\" name=\"ROSLAUNCH\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <field name=\"command_type\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
</class>";

visualization_msgs::MenuEntry::MenuEntry() : id(0), parent_id(0), title(), command(), command_type(0)
{  
};

visualization_msgs::MenuEntry::MenuEntry(const visualization_msgs::MenuEntry & inobj) : id(inobj.id), parent_id(inobj.parent_id), title(inobj.title), command(inobj.command), command_type(inobj.command_type)
{
};

visualization_msgs::MenuEntry::~MenuEntry()
{
};

visualization_msgs::MenuEntry * visualization_msgs::MenuEntry::New()
{ 
    return new MenuEntry();
};

bool visualization_msgs::MenuEntry::dataTypeFlat() 
{  
    return rframe::CodeGenTraits<std::string>::flat();

};

visualization_msgs::MenuEntry & visualization_msgs::MenuEntry::operator=(const visualization_msgs::MenuEntry & inobj)
{
    if (this != &inobj)
    {

        // if datatype is flat, optimize with memcpy (complier level optimiation)
              /*  if (dataTypeFlat() == true)
                  REMOVED invalid when assigning from a parent type as this is the pointer to the derived type, thus visualization_msgs::MenuEntry is copied to the wrong location

        {
            memcpy(this,&inobj,sizeof(visualization_msgs::MenuEntry));
        }
        else */ 
        {

            id = inobj.id;
            parent_id = inobj.parent_id;
            title = inobj.title;
            command = inobj.command;
            command_type = inobj.command_type;
        }
    }

    return *this;
}

bool visualization_msgs::MenuEntry::operator==(const visualization_msgs::MenuEntry & inobj) const
{
    bool ret = true;

    if (this != &inobj)
    { 
        ret = ret 
             && (id == inobj.id)
             && (parent_id == inobj.parent_id)
             && (title == inobj.title)
             && (command == inobj.command)
             && (command_type == inobj.command_type);
    }

    return ret;
}

bool visualization_msgs::MenuEntry::operator!=(const visualization_msgs::MenuEntry & inobj) const
{
    bool ret = false;

    if (this != &inobj)
    {
        ret = !operator==(inobj);
    }

    return ret;
}

bool visualization_msgs::MenuEntry::operator<(const visualization_msgs::MenuEntry & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {  
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (id < inobj.id) return true;
        if (inobj.id <  id) return false; 
        if (parent_id < inobj.parent_id) return true;
        if (inobj.parent_id <  parent_id) return false; 
        if (title < inobj.title) return true;
        if (inobj.title <  title) return false; 
        if (command < inobj.command) return true;
        if (inobj.command <  command) return false; 
        if (command_type < inobj.command_type) return true;
        if (inobj.command_type <  command_type) return false; ;
    }

    return ret;
}

bool visualization_msgs::MenuEntry::operator>(const visualization_msgs::MenuEntry & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (id > inobj.id) return true;
        if (inobj.id >  id) return false; 
        if (parent_id > inobj.parent_id) return true;
        if (inobj.parent_id >  parent_id) return false; 
        if (title > inobj.title) return true;
        if (inobj.title >  title) return false; 
        if (command > inobj.command) return true;
        if (inobj.command >  command) return false; 
        if (command_type > inobj.command_type) return true;
        if (inobj.command_type >  command_type) return false; ;
    }

    return ret;
}

template <> void rframe::json_io::encode(std::stringstream & sstr, const char * name, const visualization_msgs::MenuEntry & t, std::string & indent, bool lastItem)
{
    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectStart(sstr,name,indent);

    rframe::json_io::encode(sstr,"id",t.id,indent,false);
    rframe::json_io::encode(sstr,"parent_id",t.parent_id,indent,false);
    rframe::json_io::encode(sstr,"title",t.title,indent,false);
    rframe::json_io::encode(sstr,"command",t.command,indent,false);
    rframe::json_io::encode(sstr,"command_type",t.command_type,indent,true);

    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectEnd(sstr,indent,lastItem);
}

std::string visualization_msgs::MenuEntry::toStr(bool pretty) const
{

    stringstream sstr;
    string indent = (pretty == true) ? "\n" : "";

    rframe::json_io::encodeObjectStartMain(sstr,indent);
    rframe::json_io::encode(sstr,"",*this,indent,true);
    rframe::json_io::encodeObjectEnd(sstr,indent,true); // false so as to  not add , at end of string

    return sstr.str();

};

std::basic_ostream<char>& operator<<(std::basic_ostream<char> &s, const visualization_msgs::MenuEntry & value)
{
    return s << value.toStr(false);
}


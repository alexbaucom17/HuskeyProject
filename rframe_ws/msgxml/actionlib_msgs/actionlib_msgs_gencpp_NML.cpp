// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:45 -0500
//  From Template/Script: data_templates/NMLClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <stdio.h>
// main rcslib header
#include <nml.hh>
// cms updater header
#include <cms_up.hh>
#include <cms_pup.hh>

#include <common/Error.h>
#include <common/Log.h>
#include <common/Common.h>
#include <common/DataTypeInfo.h>

#include "actionlib_msgs_gencpp_NML.h"
#include "actionlib_msgs_gencpp_Library.h"
#include <messaging/nml/NMLSupport.h>
#include <interfaces/MessageFactoryInterface.h>

#include <GoalID.h>
#include <GoalStatus.h>
#include <GoalStatusArray.h>

#include <boost/iostreams/stream_buffer.hpp>
#include <boost/iostreams/stream.hpp>

#include <boost/serialization/serialization.hpp>
#include <opensource/eos/archive/portable_iarchive.hpp>
#include <opensource/eos/archive/portable_oarchive.hpp>

using namespace std;
using namespace actionlib_msgs;

rframe::NMLMessageFactory * NML_actionlib_msgs_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        NML_actionlib_msgs_gencppfactory = new actionlib_msgs_gencppNMLMessageFactory();
        return NML_actionlib_msgs_gencppfactory;
    };
}

rframe::NMLMessageFactory * actionlib_msgs::allocate_actionlib_msgs_gencpp()
{
    NML_actionlib_msgs_gencppfactory = new actionlib_msgs_gencppNMLMessageFactory();
    return NML_actionlib_msgs_gencppfactory;
};

actionlib_msgs_gencppNMLMessageFactory::actionlib_msgs_gencppNMLMessageFactory()
{
    name("actionlib_msgs_gencpp");
    // use constructor to register data types
    actionlib_msgs::registerLibrary();
}

actionlib_msgs_gencppNMLMessageFactory::~actionlib_msgs_gencppNMLMessageFactory()
{
}

NML_FORMAT_PTR actionlib_msgs_gencppNMLMessageFactory::FormatPointer()
{
    return actionlib_msgs_gencpp_format;
}

int actionlib_msgs_gencppNMLMessageFactory::dataType(NMLmsg & msg)
{
    return msg.type;
}

void actionlib_msgs_gencppNMLMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(GoalID::ID);
    info.name(GoalID::DATA_TYPE_FULL_NAME);
    info.hashKey(GoalID::DATA_VERSION);
    info.md5Key(GoalID::VERSION_MD5);
    info.xmlSource(GoalID::XML_SOURCE);
    info.flat(GoalID::dataTypeFlat());
    ids.push_back(info);

    info.id(GoalStatus::ID);
    info.name(GoalStatus::DATA_TYPE_FULL_NAME);
    info.hashKey(GoalStatus::DATA_VERSION);
    info.md5Key(GoalStatus::VERSION_MD5);
    info.xmlSource(GoalStatus::XML_SOURCE);
    info.flat(GoalStatus::dataTypeFlat());
    ids.push_back(info);

    info.id(GoalStatusArray::ID);
    info.name(GoalStatusArray::DATA_TYPE_FULL_NAME);
    info.hashKey(GoalStatusArray::DATA_VERSION);
    info.md5Key(GoalStatusArray::VERSION_MD5);
    info.xmlSource(GoalStatusArray::XML_SOURCE);
    info.flat(GoalStatusArray::dataTypeFlat());
    ids.push_back(info);

}

int actionlib_msgs_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<NMLmsg> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case GoalID::ID:
        {
            //GoalIDNML * newmsg = new GoalIDNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new GoalIDNML(),std::bind(&actionlib_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case GoalStatus::ID:
        {
            //GoalStatusNML * newmsg = new GoalStatusNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new GoalStatusNML(),std::bind(&actionlib_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case GoalStatusArray::ID:
        {
            //GoalStatusArrayNML * newmsg = new GoalStatusArrayNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new GoalStatusArrayNML(),std::bind(&actionlib_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int actionlib_msgs_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case GoalID::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GoalID>(),std::bind(&actionlib_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GoalStatus::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GoalStatus>(),std::bind(&actionlib_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GoalStatusArray::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GoalStatusArray>(),std::bind(&actionlib_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int actionlib_msgs_gencppNMLMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    delete msg;

    return retval;
}

int actionlib_msgs_gencppNMLMessageFactory::deallocateTransport(NMLmsg * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        switch (msg->type)
        { 
            case GoalID::ID:
            {
                GoalIDNML * tempmsg = static_cast<GoalIDNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case GoalStatus::ID:
            {
                GoalStatusNML * tempmsg = static_cast<GoalStatusNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case GoalStatusArray::ID:
            {
                GoalStatusArrayNML * tempmsg = static_cast<GoalStatusArrayNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            default:
            {
                retval = Error::NOT_FOUND;
                break;
            }
        }
    }

    return retval;
}

int actionlib_msgs_gencppNMLMessageFactory::toTransport(MessageBase & src, NMLmsg & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)dst.type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.type)
        { 
            case GoalID::ID:
            {
                GoalIDNML & tempDst = static_cast<GoalIDNML&>(dst);
                Message<GoalID > & tempSrc = static_cast<Message<GoalID>&>(src);

                if (tempSrc.version() != GoalID::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of GoalID: " << __FILE__ << " expected: " 
                             << GoalID::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of GoalID: " << __FILE__ << " expected: " 
                         << GoalID::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case GoalStatus::ID:
            {
                GoalStatusNML & tempDst = static_cast<GoalStatusNML&>(dst);
                Message<GoalStatus > & tempSrc = static_cast<Message<GoalStatus>&>(src);

                if (tempSrc.version() != GoalStatus::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of GoalStatus: " << __FILE__ << " expected: " 
                             << GoalStatus::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of GoalStatus: " << __FILE__ << " expected: " 
                         << GoalStatus::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case GoalStatusArray::ID:
            {
                GoalStatusArrayNML & tempDst = static_cast<GoalStatusArrayNML&>(dst);
                Message<GoalStatusArray > & tempSrc = static_cast<Message<GoalStatusArray>&>(src);

                if (tempSrc.version() != GoalStatusArray::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of GoalStatusArray: " << __FILE__ << " expected: " 
                             << GoalStatusArray::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of GoalStatusArray: " << __FILE__ << " expected: " 
                         << GoalStatusArray::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int actionlib_msgs_gencppNMLMessageFactory::fromTransport(NMLmsg & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.type)
        { 
            case GoalID::ID:
            {
                GoalIDNML & tempSrc = static_cast<GoalIDNML&>(src);
                Message<GoalID > & tempDst = static_cast<Message<GoalID>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (GoalID::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case GoalStatus::ID:
            {
                GoalStatusNML & tempSrc = static_cast<GoalStatusNML&>(src);
                Message<GoalStatus > & tempDst = static_cast<Message<GoalStatus>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (GoalStatus::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case GoalStatusArray::ID:
            {
                GoalStatusArrayNML & tempSrc = static_cast<GoalStatusArrayNML&>(src);
                Message<GoalStatusArray > & tempDst = static_cast<Message<GoalStatusArray>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (GoalStatusArray::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int actionlib_msgs_gencppNMLMessageFactory::constructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    switch (id)
    { 
        case GoalID::ID:
        {
            // only need to construct if data type is not flat
            if (GoalID::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing GoalID at %p\n",buffer);
                GoalIDNML * p = static_cast<GoalIDNML*>(buffer);
                // construct the type at pointer p
                new (p) GoalIDNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing GoalID at %p,, is flat\n",buffer);
            }
            break;
        } 
        case GoalStatus::ID:
        {
            // only need to construct if data type is not flat
            if (GoalStatus::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing GoalStatus at %p\n",buffer);
                GoalStatusNML * p = static_cast<GoalStatusNML*>(buffer);
                // construct the type at pointer p
                new (p) GoalStatusNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing GoalStatus at %p,, is flat\n",buffer);
            }
            break;
        } 
        case GoalStatusArray::ID:
        {
            // only need to construct if data type is not flat
            if (GoalStatusArray::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing GoalStatusArray at %p\n",buffer);
                GoalStatusArrayNML * p = static_cast<GoalStatusArrayNML*>(buffer);
                // construct the type at pointer p
                new (p) GoalStatusArrayNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing GoalStatusArray at %p,, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

int actionlib_msgs_gencppNMLMessageFactory::destructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    if (buffer == nullptr) return retval;

    switch (id)
    { 
        case GoalID::ID:
        {
            // only need to destruct if data type is not flat
            if (GoalID::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing GoalID at %p\n",buffer);
                GoalIDNML * p = static_cast<GoalIDNML*>(buffer);
                p->~GoalIDNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction GoalID at %p, is flat\n",buffer);
            }
            break;
        } 
        case GoalStatus::ID:
        {
            // only need to destruct if data type is not flat
            if (GoalStatus::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing GoalStatus at %p\n",buffer);
                GoalStatusNML * p = static_cast<GoalStatusNML*>(buffer);
                p->~GoalStatusNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction GoalStatus at %p, is flat\n",buffer);
            }
            break;
        } 
        case GoalStatusArray::ID:
        {
            // only need to destruct if data type is not flat
            if (GoalStatusArray::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing GoalStatusArray at %p\n",buffer);
                GoalStatusArrayNML * p = static_cast<GoalStatusArrayNML*>(buffer);
                p->~GoalStatusArrayNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction GoalStatusArray at %p, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

void actionlib_msgs::nmlupdate(CMS * cms, GoalID & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate GoalID, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.stamp);
        nmlupdate(cms,inobj.id);

    }  
 }

GoalIDNML::GoalIDNML() : NMLmsg((NMLTYPE)GoalID::ID,sizeof(GoalIDNML)), nmlVersion(GoalID::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new GoalID()*/)
{
};

GoalIDNML::~GoalIDNML()
{
};

GoalIDNML & GoalIDNML::operator=(const GoalIDNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

GoalIDNML & GoalIDNML::operator=(const GoalID & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(GoalID);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void GoalIDNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<GoalID&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: GoalIDNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<GoalID> temp(new GoalID());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: actionlib_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (GoalID::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: GoalID Message version mismatch, expected " << GoalID::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: GoalID Message version mismatch, expected " << GoalID::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void actionlib_msgs::nmlupdate(CMS * cms, GoalStatus & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate GoalStatus, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.goal_id);
        cms->update(inobj.status);
        nmlupdate(cms,inobj.text);

    }  
 }

GoalStatusNML::GoalStatusNML() : NMLmsg((NMLTYPE)GoalStatus::ID,sizeof(GoalStatusNML)), nmlVersion(GoalStatus::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new GoalStatus()*/)
{
};

GoalStatusNML::~GoalStatusNML()
{
};

GoalStatusNML & GoalStatusNML::operator=(const GoalStatusNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

GoalStatusNML & GoalStatusNML::operator=(const GoalStatus & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(GoalStatus);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void GoalStatusNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<GoalStatus&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: GoalStatusNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<GoalStatus> temp(new GoalStatus());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: actionlib_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (GoalStatus::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: GoalStatus Message version mismatch, expected " << GoalStatus::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: GoalStatus Message version mismatch, expected " << GoalStatus::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void actionlib_msgs::nmlupdate(CMS * cms, GoalStatusArray & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate GoalStatusArray, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.header);
        nmlupdate(cms,inobj.status_list);

    }  
 }

GoalStatusArrayNML::GoalStatusArrayNML() : NMLmsg((NMLTYPE)GoalStatusArray::ID,sizeof(GoalStatusArrayNML)), nmlVersion(GoalStatusArray::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new GoalStatusArray()*/)
{
};

GoalStatusArrayNML::~GoalStatusArrayNML()
{
};

GoalStatusArrayNML & GoalStatusArrayNML::operator=(const GoalStatusArrayNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

GoalStatusArrayNML & GoalStatusArrayNML::operator=(const GoalStatusArray & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(GoalStatusArray);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void GoalStatusArrayNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<GoalStatusArray&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: GoalStatusArrayNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<GoalStatusArray> temp(new GoalStatusArray());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: actionlib_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (GoalStatusArray::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: GoalStatusArray Message version mismatch, expected " << GoalStatusArray::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: GoalStatusArray Message version mismatch, expected " << GoalStatusArray::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

int actionlib_msgs::actionlib_msgs_gencpp_format(NMLTYPE type, void * buffer, CMS* cms)
{
    int retval = 1;
    int retval2 = rframe::Error::SUCCESS;

          //printf("actionlib_msgs_gencpp_format: buffer parameters: type: %d, %p, encode: %d\n",(int)type, buffer,cms->mode);

    switch (type)
    { 
        case 0:
        {
            // do nothing, 0 is passed in on buffer creation
            break;
        }
        case GoalID::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for GoalID, id " << GoalID::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_actionlib_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"actionlib_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((GoalIDNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case GoalStatus::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for GoalStatus, id " << GoalStatus::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_actionlib_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"actionlib_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((GoalStatusNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case GoalStatusArray::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for GoalStatusArray, id " << GoalStatusArray::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_actionlib_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"actionlib_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((GoalStatusArrayNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        }                   
        default:
        {

            retval = 0;
            break;
        }
    }

          //   printf("format done\n");
    return retval;
}


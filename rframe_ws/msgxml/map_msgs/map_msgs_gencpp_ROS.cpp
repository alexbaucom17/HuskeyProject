// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:50 -0500
//  From Template/Script: data_templates/ROSTemplate.cpp.rb
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "map_msgs_gencpp_ROS.h"
#include <common/Log.h>
#include <common/DataTypeInfo.h>

using namespace std;
using namespace map_msgs;

rframe::ROSMessageFactory * ROS_map_msgs_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        ROS_map_msgs_gencppfactory = new map_msgs_gencppROSMessageFactory();

        return ROS_map_msgs_gencppfactory;
    };
}

rframe::ROSMessageFactory * map_msgs::allocate_map_msgs_gencpp()
{
    ROS_map_msgs_gencppfactory = new map_msgs_gencppROSMessageFactory();
    return ROS_map_msgs_gencppfactory;
};

map_msgs_gencppROSMessageFactory::map_msgs_gencppROSMessageFactory()
{
    name("map_msgs_gencpp");
    // use constructor to register data types
    map_msgs::registerLibrary();
}

map_msgs_gencppROSMessageFactory::~map_msgs_gencppROSMessageFactory()
{
}

int map_msgs_gencppROSMessageFactory::dataType(ros::SerializedMessage & msg)
{
    return msg.message_type;
}

void map_msgs_gencppROSMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(OccupancyGridUpdate::ID);
    info.name(OccupancyGridUpdate::DATA_TYPE_FULL_NAME);
    info.hashKey(OccupancyGridUpdate::DATA_VERSION);
    info.md5Key(OccupancyGridUpdate::VERSION_MD5);
    info.xmlSource(OccupancyGridUpdate::XML_SOURCE);
    info.flat(OccupancyGridUpdate::dataTypeFlat());
    ids.push_back(info);

    info.id(PointCloud2Update::ID);
    info.name(PointCloud2Update::DATA_TYPE_FULL_NAME);
    info.hashKey(PointCloud2Update::DATA_VERSION);
    info.md5Key(PointCloud2Update::VERSION_MD5);
    info.xmlSource(PointCloud2Update::XML_SOURCE);
    info.flat(PointCloud2Update::dataTypeFlat());
    ids.push_back(info);

    info.id(ProjectedMap::ID);
    info.name(ProjectedMap::DATA_TYPE_FULL_NAME);
    info.hashKey(ProjectedMap::DATA_VERSION);
    info.md5Key(ProjectedMap::VERSION_MD5);
    info.xmlSource(ProjectedMap::XML_SOURCE);
    info.flat(ProjectedMap::dataTypeFlat());
    ids.push_back(info);

    info.id(ProjectedMapInfo::ID);
    info.name(ProjectedMapInfo::DATA_TYPE_FULL_NAME);
    info.hashKey(ProjectedMapInfo::DATA_VERSION);
    info.md5Key(ProjectedMapInfo::VERSION_MD5);
    info.xmlSource(ProjectedMapInfo::XML_SOURCE);
    info.flat(ProjectedMapInfo::dataTypeFlat());
    ids.push_back(info);

    info.id(GetMapROIRequest::ID);
    info.name(GetMapROIRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(GetMapROIRequest::DATA_VERSION);
    info.md5Key(GetMapROIRequest::VERSION_MD5);
    info.xmlSource(GetMapROIRequest::XML_SOURCE);
    info.flat(GetMapROIRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(GetMapROIResponse::ID);
    info.name(GetMapROIResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(GetMapROIResponse::DATA_VERSION);
    info.md5Key(GetMapROIResponse::VERSION_MD5);
    info.xmlSource(GetMapROIResponse::XML_SOURCE);
    info.flat(GetMapROIResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(GetMapROI::ID);
    info.name(GetMapROI::DATA_TYPE_FULL_NAME);
    info.hashKey(GetMapROI::DATA_VERSION);
    info.md5Key(GetMapROI::VERSION_MD5);
    info.xmlSource(GetMapROI::XML_SOURCE);
    info.flat(GetMapROI::dataTypeFlat());
    ids.push_back(info);

    info.id(GetPointMapRequest::ID);
    info.name(GetPointMapRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(GetPointMapRequest::DATA_VERSION);
    info.md5Key(GetPointMapRequest::VERSION_MD5);
    info.xmlSource(GetPointMapRequest::XML_SOURCE);
    info.flat(GetPointMapRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(GetPointMapResponse::ID);
    info.name(GetPointMapResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(GetPointMapResponse::DATA_VERSION);
    info.md5Key(GetPointMapResponse::VERSION_MD5);
    info.xmlSource(GetPointMapResponse::XML_SOURCE);
    info.flat(GetPointMapResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(GetPointMap::ID);
    info.name(GetPointMap::DATA_TYPE_FULL_NAME);
    info.hashKey(GetPointMap::DATA_VERSION);
    info.md5Key(GetPointMap::VERSION_MD5);
    info.xmlSource(GetPointMap::XML_SOURCE);
    info.flat(GetPointMap::dataTypeFlat());
    ids.push_back(info);

    info.id(GetPointMapROIRequest::ID);
    info.name(GetPointMapROIRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(GetPointMapROIRequest::DATA_VERSION);
    info.md5Key(GetPointMapROIRequest::VERSION_MD5);
    info.xmlSource(GetPointMapROIRequest::XML_SOURCE);
    info.flat(GetPointMapROIRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(GetPointMapROIResponse::ID);
    info.name(GetPointMapROIResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(GetPointMapROIResponse::DATA_VERSION);
    info.md5Key(GetPointMapROIResponse::VERSION_MD5);
    info.xmlSource(GetPointMapROIResponse::XML_SOURCE);
    info.flat(GetPointMapROIResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(GetPointMapROI::ID);
    info.name(GetPointMapROI::DATA_TYPE_FULL_NAME);
    info.hashKey(GetPointMapROI::DATA_VERSION);
    info.md5Key(GetPointMapROI::VERSION_MD5);
    info.xmlSource(GetPointMapROI::XML_SOURCE);
    info.flat(GetPointMapROI::dataTypeFlat());
    ids.push_back(info);

    info.id(ProjectedMapsInfo::ID);
    info.name(ProjectedMapsInfo::DATA_TYPE_FULL_NAME);
    info.hashKey(ProjectedMapsInfo::DATA_VERSION);
    info.md5Key(ProjectedMapsInfo::VERSION_MD5);
    info.xmlSource(ProjectedMapsInfo::XML_SOURCE);
    info.flat(ProjectedMapsInfo::dataTypeFlat());
    ids.push_back(info);

    info.id(SaveMap::ID);
    info.name(SaveMap::DATA_TYPE_FULL_NAME);
    info.hashKey(SaveMap::DATA_VERSION);
    info.md5Key(SaveMap::VERSION_MD5);
    info.xmlSource(SaveMap::XML_SOURCE);
    info.flat(SaveMap::dataTypeFlat());
    ids.push_back(info);

    info.id(SetMapProjectionsRequest::ID);
    info.name(SetMapProjectionsRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(SetMapProjectionsRequest::DATA_VERSION);
    info.md5Key(SetMapProjectionsRequest::VERSION_MD5);
    info.xmlSource(SetMapProjectionsRequest::XML_SOURCE);
    info.flat(SetMapProjectionsRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(SetMapProjectionsResponse::ID);
    info.name(SetMapProjectionsResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(SetMapProjectionsResponse::DATA_VERSION);
    info.md5Key(SetMapProjectionsResponse::VERSION_MD5);
    info.xmlSource(SetMapProjectionsResponse::XML_SOURCE);
    info.flat(SetMapProjectionsResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(SetMapProjections::ID);
    info.name(SetMapProjections::DATA_TYPE_FULL_NAME);
    info.hashKey(SetMapProjections::DATA_VERSION);
    info.md5Key(SetMapProjections::VERSION_MD5);
    info.xmlSource(SetMapProjections::XML_SOURCE);
    info.flat(SetMapProjections::dataTypeFlat());
    ids.push_back(info);

}

int map_msgs_gencppROSMessageFactory::typeName(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case OccupancyGridUpdate::ID:
        {
            str = "map_msgs/OccupancyGridUpdate";
            break;
        }
        case PointCloud2Update::ID:
        {
            str = "map_msgs/PointCloud2Update";
            break;
        }
        case ProjectedMap::ID:
        {
            str = "map_msgs/ProjectedMap";
            break;
        }
        case ProjectedMapInfo::ID:
        {
            str = "map_msgs/ProjectedMapInfo";
            break;
        }
        case GetMapROIRequest::ID:
        {
            str = "map_msgs/GetMapROIRequest";
            break;
        }
        case GetMapROIResponse::ID:
        {
            str = "map_msgs/GetMapROIResponse";
            break;
        }
        case GetMapROI::ID:
        {
            str = "map_msgs/GetMapROI";
            break;
        }
        case GetPointMapRequest::ID:
        {
            str = "map_msgs/GetPointMapRequest";
            break;
        }
        case GetPointMapResponse::ID:
        {
            str = "map_msgs/GetPointMapResponse";
            break;
        }
        case GetPointMap::ID:
        {
            str = "map_msgs/GetPointMap";
            break;
        }
        case GetPointMapROIRequest::ID:
        {
            str = "map_msgs/GetPointMapROIRequest";
            break;
        }
        case GetPointMapROIResponse::ID:
        {
            str = "map_msgs/GetPointMapROIResponse";
            break;
        }
        case GetPointMapROI::ID:
        {
            str = "map_msgs/GetPointMapROI";
            break;
        }
        case ProjectedMapsInfo::ID:
        {
            str = "map_msgs/ProjectedMapsInfo";
            break;
        }
        case SaveMap::ID:
        {
            str = "map_msgs/SaveMap";
            break;
        }
        case SetMapProjectionsRequest::ID:
        {
            str = "map_msgs/SetMapProjectionsRequest";
            break;
        }
        case SetMapProjectionsResponse::ID:
        {
            str = "map_msgs/SetMapProjectionsResponse";
            break;
        }
        case SetMapProjections::ID:
        {
            str = "map_msgs/SetMapProjections";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int map_msgs_gencppROSMessageFactory::desc(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case OccupancyGridUpdate::ID:
        {
            str = "Header header\nint32 x\nint32 y\nuint32 width\nuint32 height\nint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n";
            break;
        }
        case PointCloud2Update::ID:
        {
            str = "uint32 ADD=0\nuint32 DELETE=1\nHeader header\nuint32 type          # type of update, one of ADD or DELETE\nsensor_msgs/PointCloud2 points\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: sensor_msgs/PointCloud2\n# This message holds a collection of N-dimensional points, which may\n# contain additional information such as normals, intensity, etc. The\n# point data is stored as a binary blob, its layout described by the\n# contents of the \"fields\" array.\n\n# The point cloud data may be organized 2d (image-like) or 1d\n# (unordered). Point clouds organized as 2d images may be produced by\n# camera depth sensors such as stereo or time-of-flight.\n\n# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n# points).\nHeader header\n\n# 2D structure of the point cloud. If the cloud is unordered, height is\n# 1 and width is the length of the point cloud.\nuint32 height\nuint32 width\n\n# Describes the channels and their layout in the binary data blob.\nPointField[] fields\n\nbool    is_bigendian # Is this data bigendian?\nuint32  point_step   # Length of a point in bytes\nuint32  row_step     # Length of a row in bytes\nuint8[] data         # Actual point data, size is (row_step*height)\n\nbool is_dense        # True if there are no invalid points\n\n================================================================================\nMSG: sensor_msgs/PointField\n# This message holds the description of one point entry in the\n# PointCloud2 message format.\nuint8 INT8    = 1\nuint8 UINT8   = 2\nuint8 INT16   = 3\nuint8 UINT16  = 4\nuint8 INT32   = 5\nuint8 UINT32  = 6\nuint8 FLOAT32 = 7\nuint8 FLOAT64 = 8\n\nstring name      # Name of field\nuint32 offset    # Offset from start of point struct\nuint8  datatype  # Datatype enumeration, see above\nuint32 count     # How many elements in the field\n";
            break;
        }
        case ProjectedMap::ID:
        {
            str = "nav_msgs/OccupancyGrid map\nfloat64 min_z\nfloat64 max_z\n================================================================================\nMSG: nav_msgs/OccupancyGrid\n# This represents a 2-D grid map, in which each cell represents the probability of\n# occupancy.\n\nHeader header \n\n#MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0).  Occupancy\n# probabilities are in the range [0,100].  Unknown is -1.\nint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characterists of the OccupancyGrid\n\n# The time at which the map was loaded\ntime map_load_time\n# The map resolution [m/cell]\nfloat32 resolution\n# Map width [cells]\nuint32 width\n# Map height [cells]\nuint32 height\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# cell (0,0) in the map.\ngeometry_msgs/Pose origin\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n";
            break;
        }
        case ProjectedMapInfo::ID:
        {
            str = "string frame_id\nfloat64 x\nfloat64 y\nfloat64 width\nfloat64 height\nfloat64 min_z\n";
            break;
        }
        case GetMapROIRequest::ID:
        {
            str = GetMapROIRequest::XML_SOURCE;
            break;
        }
        case GetMapROIResponse::ID:
        {
            str = GetMapROIResponse::XML_SOURCE;
            break;
        }
        case GetMapROI::ID:
        {
            str = GetMapROI::XML_SOURCE;
            break;
        }
        case GetPointMapRequest::ID:
        {
            str = GetPointMapRequest::XML_SOURCE;
            break;
        }
        case GetPointMapResponse::ID:
        {
            str = GetPointMapResponse::XML_SOURCE;
            break;
        }
        case GetPointMap::ID:
        {
            str = GetPointMap::XML_SOURCE;
            break;
        }
        case GetPointMapROIRequest::ID:
        {
            str = GetPointMapROIRequest::XML_SOURCE;
            break;
        }
        case GetPointMapROIResponse::ID:
        {
            str = GetPointMapROIResponse::XML_SOURCE;
            break;
        }
        case GetPointMapROI::ID:
        {
            str = GetPointMapROI::XML_SOURCE;
            break;
        }
        case ProjectedMapsInfo::ID:
        {
            str = "map_msgs/ProjectedMapInfo[] projected_maps_info\n\n\n================================================================================\nMSG: map_msgs/ProjectedMapInfo\nstring frame_id\nfloat64 x\nfloat64 y\nfloat64 width\nfloat64 height\nfloat64 min_z\n";
            break;
        }
        case SaveMap::ID:
        {
            str = "\nstd_msgs/String filename\n\n\n================================================================================\nMSG: std_msgs/String\nstring data\n";
            break;
        }
        case SetMapProjectionsRequest::ID:
        {
            str = SetMapProjectionsRequest::XML_SOURCE;
            break;
        }
        case SetMapProjectionsResponse::ID:
        {
            str = SetMapProjectionsResponse::XML_SOURCE;
            break;
        }
        case SetMapProjections::ID:
        {
            str = SetMapProjections::XML_SOURCE;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int map_msgs_gencppROSMessageFactory::md5String(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case OccupancyGridUpdate::ID:
        {
            str = "b295be292b335c34718bd939deebe1c9";
            break;
        }
        case PointCloud2Update::ID:
        {
            str = "6c58e4f249ae9cd2b24fb1ee0f99195e";
            break;
        }
        case ProjectedMap::ID:
        {
            str = "7bbe8f96e45089681dc1ea7d023cbfca";
            break;
        }
        case ProjectedMapInfo::ID:
        {
            str = "2dc10595ae94de23f22f8a6d2a0eef7a";
            break;
        }
        case GetMapROIRequest::ID:
        {
            str = "43c2ff8f45af555c0eaf070c401e9a47";
            break;
        }
        case GetMapROIResponse::ID:
        {
            str = "4d1986519c00d81967d2891a606b234c";
            break;
        }
        case GetMapROI::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case GetPointMapRequest::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case GetPointMapResponse::ID:
        {
            str = "b84fbb39505086eb6a62d933c75cb7b4";
            break;
        }
        case GetPointMap::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case GetPointMapROIRequest::ID:
        {
            str = "895f7e437a9a6dd225316872b187a303";
            break;
        }
        case GetPointMapROIResponse::ID:
        {
            str = "313769f8b0e724525c6463336cbccd63";
            break;
        }
        case GetPointMapROI::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case ProjectedMapsInfo::ID:
        {
            str = "d7980a33202421c8cd74565e57a4d229";
            break;
        }
        case SaveMap::ID:
        {
            str = "716e25f9d9dc76ceba197f93cbf05dc7";
            break;
        }
        case SetMapProjectionsRequest::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case SetMapProjectionsResponse::ID:
        {
            str = "d7980a33202421c8cd74565e57a4d229";
            break;
        }
        case SetMapProjections::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int map_msgs_gencppROSMessageFactory::md5(unsigned long long & highOrder, unsigned long long & lowOrder, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case OccupancyGridUpdate::ID:
        {   
		    highOrder = 0xb295be292b335c34ULL;
            lowOrder = 0x718bd939deebe1c9ULL;
            break;
        }
        case PointCloud2Update::ID:
        {   
		    highOrder = 0x6c58e4f249ae9cd2ULL;
            lowOrder = 0xb24fb1ee0f99195eULL;
            break;
        }
        case ProjectedMap::ID:
        {   
		    highOrder = 0x7bbe8f96e4508968ULL;
            lowOrder = 0x1dc1ea7d023cbfcaULL;
            break;
        }
        case ProjectedMapInfo::ID:
        {   
		    highOrder = 0x2dc10595ae94de23ULL;
            lowOrder = 0xf22f8a6d2a0eef7aULL;
            break;
        }
        case GetMapROIRequest::ID:
        {   
		    highOrder = 0x43c2ff8f45af555cULL;
            lowOrder = 0x0eaf070c401e9a47ULL;
            break;
        }
        case GetMapROIResponse::ID:
        {   
		    highOrder = 0x4d1986519c00d819ULL;
            lowOrder = 0x67d2891a606b234cULL;
            break;
        }
        case GetMapROI::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case GetPointMapRequest::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case GetPointMapResponse::ID:
        {   
		    highOrder = 0xb84fbb39505086ebULL;
            lowOrder = 0x6a62d933c75cb7b4ULL;
            break;
        }
        case GetPointMap::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case GetPointMapROIRequest::ID:
        {   
		    highOrder = 0x895f7e437a9a6dd2ULL;
            lowOrder = 0x25316872b187a303ULL;
            break;
        }
        case GetPointMapROIResponse::ID:
        {   
		    highOrder = 0x313769f8b0e72452ULL;
            lowOrder = 0x5c6463336cbccd63ULL;
            break;
        }
        case GetPointMapROI::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case ProjectedMapsInfo::ID:
        {   
		    highOrder = 0xd7980a33202421c8ULL;
            lowOrder = 0xcd74565e57a4d229ULL;
            break;
        }
        case SaveMap::ID:
        {   
		    highOrder = 0x716e25f9d9dc76ceULL;
            lowOrder = 0xba197f93cbf05dc7ULL;
            break;
        }
        case SetMapProjectionsRequest::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case SetMapProjectionsResponse::ID:
        {   
		    highOrder = 0xd7980a33202421c8ULL;
            lowOrder = 0xcd74565e57a4d229ULL;
            break;
        }
        case SetMapProjections::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int map_msgs_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<ros::SerializedMessage> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case OccupancyGridUpdate::ID:
        case PointCloud2Update::ID:
        case ProjectedMap::ID:
        case ProjectedMapInfo::ID:
        case GetMapROIRequest::ID:
        case GetMapROIResponse::ID:
        case GetMapROI::ID:
        case GetPointMapRequest::ID:
        case GetPointMapResponse::ID:
        case GetPointMap::ID:
        case GetPointMapROIRequest::ID:
        case GetPointMapROIResponse::ID:
        case GetPointMapROI::ID:
        case ProjectedMapsInfo::ID:
        case SaveMap::ID:
        case SetMapProjectionsRequest::ID:
        case SetMapProjectionsResponse::ID:
        case SetMapProjections::ID:
        {
            break;
        } 
        default:
	    {
            retval = rframe::Error::PARAM_RANGE;
            break;
	    }
    }

    if (retval == rframe::Error::SUCCESS)
	{
        std::shared_ptr<ros::SerializedMessage> newmsg(new ros::SerializedMessage);

        if (newmsg.get() == NULL)
	    {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else
	    {
            newmsg->message_type = id;
            msg.swap(newmsg);
        }
    }

    return retval;
}

int map_msgs_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case OccupancyGridUpdate::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<OccupancyGridUpdate>(),std::bind(&map_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case PointCloud2Update::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<PointCloud2Update>(),std::bind(&map_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case ProjectedMap::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<ProjectedMap>(),std::bind(&map_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case ProjectedMapInfo::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<ProjectedMapInfo>(),std::bind(&map_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetMapROIRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetMapROIRequest>(),std::bind(&map_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetMapROIResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetMapROIResponse>(),std::bind(&map_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetMapROI::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetMapROI>(),std::bind(&map_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetPointMapRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetPointMapRequest>(),std::bind(&map_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetPointMapResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetPointMapResponse>(),std::bind(&map_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetPointMap::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetPointMap>(),std::bind(&map_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetPointMapROIRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetPointMapROIRequest>(),std::bind(&map_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetPointMapROIResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetPointMapROIResponse>(),std::bind(&map_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetPointMapROI::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetPointMapROI>(),std::bind(&map_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case ProjectedMapsInfo::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<ProjectedMapsInfo>(),std::bind(&map_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SaveMap::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SaveMap>(),std::bind(&map_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetMapProjectionsRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetMapProjectionsRequest>(),std::bind(&map_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetMapProjectionsResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetMapProjectionsResponse>(),std::bind(&map_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetMapProjections::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetMapProjections>(),std::bind(&map_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            retval = rframe::Error::PARAM_RANGE;
        }
    }

    return retval;
}

int map_msgs_gencppROSMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
	{
        delete msg;
    }

    return retval;
}

int map_msgs_gencppROSMessageFactory::deallocateTransport(ros::SerializedMessage * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        delete msg;
    }

    return retval;
}

int map_msgs_gencppROSMessageFactory::toTransport(MessageBase & src, ros::SerializedMessage & dst)
{
    int retval = rframe::Error::SUCCESS;

    if (dst.message_type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.message_type)
        { 
            case OccupancyGridUpdate::ID:
            {
                Message<OccupancyGridUpdate > & tempSrc = static_cast<Message<OccupancyGridUpdate>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: map_msgs_gencpp::OccupancyGridUpdate buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case PointCloud2Update::ID:
            {
                Message<PointCloud2Update > & tempSrc = static_cast<Message<PointCloud2Update>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: map_msgs_gencpp::PointCloud2Update buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case ProjectedMap::ID:
            {
                Message<ProjectedMap > & tempSrc = static_cast<Message<ProjectedMap>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: map_msgs_gencpp::ProjectedMap buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case ProjectedMapInfo::ID:
            {
                Message<ProjectedMapInfo > & tempSrc = static_cast<Message<ProjectedMapInfo>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: map_msgs_gencpp::ProjectedMapInfo buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetMapROIRequest::ID:
            {
                Message<GetMapROIRequest > & tempSrc = static_cast<Message<GetMapROIRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: map_msgs_gencpp::GetMapROIRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetMapROIResponse::ID:
            {
                Message<GetMapROIResponse > & tempSrc = static_cast<Message<GetMapROIResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: map_msgs_gencpp::GetMapROIResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetMapROI::ID:
            {
                Message<GetMapROI > & tempSrc = static_cast<Message<GetMapROI>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: map_msgs_gencpp::GetMapROI buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetPointMapRequest::ID:
            {
                Message<GetPointMapRequest > & tempSrc = static_cast<Message<GetPointMapRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: map_msgs_gencpp::GetPointMapRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetPointMapResponse::ID:
            {
                Message<GetPointMapResponse > & tempSrc = static_cast<Message<GetPointMapResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: map_msgs_gencpp::GetPointMapResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetPointMap::ID:
            {
                Message<GetPointMap > & tempSrc = static_cast<Message<GetPointMap>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: map_msgs_gencpp::GetPointMap buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetPointMapROIRequest::ID:
            {
                Message<GetPointMapROIRequest > & tempSrc = static_cast<Message<GetPointMapROIRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: map_msgs_gencpp::GetPointMapROIRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetPointMapROIResponse::ID:
            {
                Message<GetPointMapROIResponse > & tempSrc = static_cast<Message<GetPointMapROIResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: map_msgs_gencpp::GetPointMapROIResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetPointMapROI::ID:
            {
                Message<GetPointMapROI > & tempSrc = static_cast<Message<GetPointMapROI>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: map_msgs_gencpp::GetPointMapROI buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case ProjectedMapsInfo::ID:
            {
                Message<ProjectedMapsInfo > & tempSrc = static_cast<Message<ProjectedMapsInfo>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: map_msgs_gencpp::ProjectedMapsInfo buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case SaveMap::ID:
            {
                Message<SaveMap > & tempSrc = static_cast<Message<SaveMap>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: map_msgs_gencpp::SaveMap buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case SetMapProjectionsRequest::ID:
            {
                Message<SetMapProjectionsRequest > & tempSrc = static_cast<Message<SetMapProjectionsRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: map_msgs_gencpp::SetMapProjectionsRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case SetMapProjectionsResponse::ID:
            {
                Message<SetMapProjectionsResponse > & tempSrc = static_cast<Message<SetMapProjectionsResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: map_msgs_gencpp::SetMapProjectionsResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case SetMapProjections::ID:
            {
                Message<SetMapProjections > & tempSrc = static_cast<Message<SetMapProjections>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: map_msgs_gencpp::SetMapProjections buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int map_msgs_gencppROSMessageFactory::fromTransport(ros::SerializedMessage & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.message_type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.message_type)
        { 
            case OccupancyGridUpdate::ID:
            {
                Message<OccupancyGridUpdate > & tempDst = static_cast<Message<OccupancyGridUpdate>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case PointCloud2Update::ID:
            {
                Message<PointCloud2Update > & tempDst = static_cast<Message<PointCloud2Update>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case ProjectedMap::ID:
            {
                Message<ProjectedMap > & tempDst = static_cast<Message<ProjectedMap>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case ProjectedMapInfo::ID:
            {
                Message<ProjectedMapInfo > & tempDst = static_cast<Message<ProjectedMapInfo>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetMapROIRequest::ID:
            {
                Message<GetMapROIRequest > & tempDst = static_cast<Message<GetMapROIRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetMapROIResponse::ID:
            {
                Message<GetMapROIResponse > & tempDst = static_cast<Message<GetMapROIResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetMapROI::ID:
            {
                Message<GetMapROI > & tempDst = static_cast<Message<GetMapROI>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetPointMapRequest::ID:
            {
                Message<GetPointMapRequest > & tempDst = static_cast<Message<GetPointMapRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetPointMapResponse::ID:
            {
                Message<GetPointMapResponse > & tempDst = static_cast<Message<GetPointMapResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetPointMap::ID:
            {
                Message<GetPointMap > & tempDst = static_cast<Message<GetPointMap>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetPointMapROIRequest::ID:
            {
                Message<GetPointMapROIRequest > & tempDst = static_cast<Message<GetPointMapROIRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetPointMapROIResponse::ID:
            {
                Message<GetPointMapROIResponse > & tempDst = static_cast<Message<GetPointMapROIResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetPointMapROI::ID:
            {
                Message<GetPointMapROI > & tempDst = static_cast<Message<GetPointMapROI>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case ProjectedMapsInfo::ID:
            {
                Message<ProjectedMapsInfo > & tempDst = static_cast<Message<ProjectedMapsInfo>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case SaveMap::ID:
            {
                Message<SaveMap > & tempDst = static_cast<Message<SaveMap>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case SetMapProjectionsRequest::ID:
            {
                Message<SetMapProjectionsRequest > & tempDst = static_cast<Message<SetMapProjectionsRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case SetMapProjectionsResponse::ID:
            {
                Message<SetMapProjectionsResponse > & tempDst = static_cast<Message<SetMapProjectionsResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case SetMapProjections::ID:
            {
                Message<SetMapProjections > & tempDst = static_cast<Message<SetMapProjections>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int map_msgs_gencppROSMessageFactory::updateHeader(rframe::MessageBase &msg, unsigned int seqNo)
{
    int retval = rframe::Error::SUCCESS;

    switch (msg.id())
    {   
        case OccupancyGridUpdate::ID:
        {
            Message<OccupancyGridUpdate > & tempMsg = static_cast<Message<OccupancyGridUpdate>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        case PointCloud2Update::ID:
        {
            Message<PointCloud2Update > & tempMsg = static_cast<Message<PointCloud2Update>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        // ProjectedMap does not have a Header as its first member 
        // ProjectedMapInfo does not have a Header as its first member 
        // GetMapROIRequest does not have a Header as its first member 
        // GetMapROIResponse does not have a Header as its first member 
        // GetMapROI does not have a Header as its first member 
        // GetPointMapResponse does not have a Header as its first member 
        // GetPointMap does not have a Header as its first member 
        // GetPointMapROIRequest does not have a Header as its first member 
        // GetPointMapROIResponse does not have a Header as its first member 
        // GetPointMapROI does not have a Header as its first member 
        // ProjectedMapsInfo does not have a Header as its first member 
        // SaveMap does not have a Header as its first member 
        // SetMapProjectionsResponse does not have a Header as its first member 
        // SetMapProjections does not have a Header as its first member 
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

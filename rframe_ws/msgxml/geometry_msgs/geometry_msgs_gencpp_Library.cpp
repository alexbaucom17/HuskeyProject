// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:05 -0500
//  From Template/Script: data_templates/DataLibraryTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "geometry_msgs_gencpp_Library.h"
#include <common/Log.h>
#include <common/TypeRegistry.h>
#include <messaging/Message.h>

#include <geometry_msgs/Accel.h>
#include <geometry_msgs/AccelStamped.h>
#include <geometry_msgs/AccelWithCovariance.h>
#include <geometry_msgs/AccelWithCovarianceStamped.h>
#include <geometry_msgs/Inertia.h>
#include <geometry_msgs/InertiaStamped.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/PointStamped.h>
#include <geometry_msgs/Polygon.h>
#include <geometry_msgs/PolygonStamped.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose2D.h>
#include <geometry_msgs/PoseArray.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseWithCovariance.h>
#include <geometry_msgs/PoseWithCovarianceStamped.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/QuaternionStamped.h>
#include <geometry_msgs/Transform.h>
#include <geometry_msgs/TransformStamped.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/TwistStamped.h>
#include <geometry_msgs/TwistWithCovariance.h>
#include <geometry_msgs/TwistWithCovarianceStamped.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3Stamped.h>
#include <geometry_msgs/Wrench.h>
#include <geometry_msgs/WrenchStamped.h>

extern "C"
{
    /** library access method */
    int rframeRegisterDataLibrary()
    {
        return geometry_msgs::registerLibrary();
    };
}

namespace geometry_msgs
{

    static void deallocateMessage(MessageBase * msg)
    {
        delete msg;
    }

    static int allocateMessage(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
    {
        int retval = rframe::Error::SUCCESS;
        bool found = true;
        switch (id)
        { 
            case Accel::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Accel>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case AccelStamped::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<AccelStamped>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case AccelWithCovariance::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<AccelWithCovariance>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case AccelWithCovarianceStamped::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<AccelWithCovarianceStamped>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Inertia::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Inertia>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case InertiaStamped::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<InertiaStamped>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Point::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Point>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Point32::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Point32>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case PointStamped::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<PointStamped>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Polygon::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Polygon>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case PolygonStamped::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<PolygonStamped>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Pose::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Pose>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Pose2D::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Pose2D>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case PoseArray::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<PoseArray>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case PoseStamped::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<PoseStamped>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case PoseWithCovariance::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<PoseWithCovariance>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case PoseWithCovarianceStamped::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<PoseWithCovarianceStamped>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Quaternion::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Quaternion>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case QuaternionStamped::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<QuaternionStamped>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Transform::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Transform>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case TransformStamped::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<TransformStamped>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Twist::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Twist>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case TwistStamped::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<TwistStamped>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case TwistWithCovariance::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<TwistWithCovariance>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case TwistWithCovarianceStamped::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<TwistWithCovarianceStamped>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Vector3::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Vector3>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Vector3Stamped::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Vector3Stamped>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case Wrench::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Wrench>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case WrenchStamped::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<WrenchStamped>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            default:
            {
                found = false;
            }
        }

        if (found == false)
        {
            retval = rframe::Error::PARAM_RANGE;
        }
        else if (msg.get() == NULL)
        {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else if (msg.get() != NULL)
        {
            retval = rframe::Error::SUCCESS;
        }

        return retval;
    }

    /** registry this data set with the system */
    //int register_geometry_msgs_gencpp()
    int registerLibrary()
    {
        int retval = rframe::Error::SUCCESS;
        static bool registered = false;
        rframe::TypeRegistry & reg = rframe::TypeRegistry::instance();

        LOG_INFO("registering data for library: geometry_msgs_gencpp");

        if (registered == false)
        {
            registered = true;

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Accel::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::Accel>(
                    // boost::lambda::new_ptr<geometry_msgs::Accel>(),
                    [](){ return new geometry_msgs::Accel(); },
                                std::bind(allocateMessage,geometry_msgs::Accel::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Accel");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Accel::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::Accel::DATA_TYPE_NAME,geometry_msgs::Accel::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Accel");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::AccelStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::AccelStamped>(
                    // boost::lambda::new_ptr<geometry_msgs::AccelStamped>(),
                    [](){ return new geometry_msgs::AccelStamped(); },
                                std::bind(allocateMessage,geometry_msgs::AccelStamped::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: AccelStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::AccelStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::AccelStamped::DATA_TYPE_NAME,geometry_msgs::AccelStamped::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: AccelStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::AccelWithCovariance::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::AccelWithCovariance>(
                    // boost::lambda::new_ptr<geometry_msgs::AccelWithCovariance>(),
                    [](){ return new geometry_msgs::AccelWithCovariance(); },
                                std::bind(allocateMessage,geometry_msgs::AccelWithCovariance::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: AccelWithCovariance");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::AccelWithCovariance::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::AccelWithCovariance::DATA_TYPE_NAME,geometry_msgs::AccelWithCovariance::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: AccelWithCovariance");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::AccelWithCovarianceStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::AccelWithCovarianceStamped>(
                    // boost::lambda::new_ptr<geometry_msgs::AccelWithCovarianceStamped>(),
                    [](){ return new geometry_msgs::AccelWithCovarianceStamped(); },
                                std::bind(allocateMessage,geometry_msgs::AccelWithCovarianceStamped::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: AccelWithCovarianceStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::AccelWithCovarianceStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::AccelWithCovarianceStamped::DATA_TYPE_NAME,geometry_msgs::AccelWithCovarianceStamped::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: AccelWithCovarianceStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Inertia::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::Inertia>(
                    // boost::lambda::new_ptr<geometry_msgs::Inertia>(),
                    [](){ return new geometry_msgs::Inertia(); },
                                std::bind(allocateMessage,geometry_msgs::Inertia::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Inertia");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Inertia::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::Inertia::DATA_TYPE_NAME,geometry_msgs::Inertia::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Inertia");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::InertiaStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::InertiaStamped>(
                    // boost::lambda::new_ptr<geometry_msgs::InertiaStamped>(),
                    [](){ return new geometry_msgs::InertiaStamped(); },
                                std::bind(allocateMessage,geometry_msgs::InertiaStamped::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: InertiaStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::InertiaStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::InertiaStamped::DATA_TYPE_NAME,geometry_msgs::InertiaStamped::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: InertiaStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Point::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::Point>(
                    // boost::lambda::new_ptr<geometry_msgs::Point>(),
                    [](){ return new geometry_msgs::Point(); },
                                std::bind(allocateMessage,geometry_msgs::Point::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Point");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Point::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::Point::DATA_TYPE_NAME,geometry_msgs::Point::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Point");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Point32::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::Point32>(
                    // boost::lambda::new_ptr<geometry_msgs::Point32>(),
                    [](){ return new geometry_msgs::Point32(); },
                                std::bind(allocateMessage,geometry_msgs::Point32::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Point32");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Point32::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::Point32::DATA_TYPE_NAME,geometry_msgs::Point32::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Point32");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::PointStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::PointStamped>(
                    // boost::lambda::new_ptr<geometry_msgs::PointStamped>(),
                    [](){ return new geometry_msgs::PointStamped(); },
                                std::bind(allocateMessage,geometry_msgs::PointStamped::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: PointStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::PointStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::PointStamped::DATA_TYPE_NAME,geometry_msgs::PointStamped::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: PointStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Polygon::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::Polygon>(
                    // boost::lambda::new_ptr<geometry_msgs::Polygon>(),
                    [](){ return new geometry_msgs::Polygon(); },
                                std::bind(allocateMessage,geometry_msgs::Polygon::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Polygon");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Polygon::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::Polygon::DATA_TYPE_NAME,geometry_msgs::Polygon::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Polygon");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::PolygonStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::PolygonStamped>(
                    // boost::lambda::new_ptr<geometry_msgs::PolygonStamped>(),
                    [](){ return new geometry_msgs::PolygonStamped(); },
                                std::bind(allocateMessage,geometry_msgs::PolygonStamped::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: PolygonStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::PolygonStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::PolygonStamped::DATA_TYPE_NAME,geometry_msgs::PolygonStamped::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: PolygonStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Pose::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::Pose>(
                    // boost::lambda::new_ptr<geometry_msgs::Pose>(),
                    [](){ return new geometry_msgs::Pose(); },
                                std::bind(allocateMessage,geometry_msgs::Pose::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Pose");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Pose::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::Pose::DATA_TYPE_NAME,geometry_msgs::Pose::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Pose");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Pose2D::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::Pose2D>(
                    // boost::lambda::new_ptr<geometry_msgs::Pose2D>(),
                    [](){ return new geometry_msgs::Pose2D(); },
                                std::bind(allocateMessage,geometry_msgs::Pose2D::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Pose2D");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Pose2D::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::Pose2D::DATA_TYPE_NAME,geometry_msgs::Pose2D::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Pose2D");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::PoseArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::PoseArray>(
                    // boost::lambda::new_ptr<geometry_msgs::PoseArray>(),
                    [](){ return new geometry_msgs::PoseArray(); },
                                std::bind(allocateMessage,geometry_msgs::PoseArray::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: PoseArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::PoseArray::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::PoseArray::DATA_TYPE_NAME,geometry_msgs::PoseArray::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: PoseArray");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::PoseStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::PoseStamped>(
                    // boost::lambda::new_ptr<geometry_msgs::PoseStamped>(),
                    [](){ return new geometry_msgs::PoseStamped(); },
                                std::bind(allocateMessage,geometry_msgs::PoseStamped::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: PoseStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::PoseStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::PoseStamped::DATA_TYPE_NAME,geometry_msgs::PoseStamped::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: PoseStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::PoseWithCovariance::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::PoseWithCovariance>(
                    // boost::lambda::new_ptr<geometry_msgs::PoseWithCovariance>(),
                    [](){ return new geometry_msgs::PoseWithCovariance(); },
                                std::bind(allocateMessage,geometry_msgs::PoseWithCovariance::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: PoseWithCovariance");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::PoseWithCovariance::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::PoseWithCovariance::DATA_TYPE_NAME,geometry_msgs::PoseWithCovariance::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: PoseWithCovariance");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::PoseWithCovarianceStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::PoseWithCovarianceStamped>(
                    // boost::lambda::new_ptr<geometry_msgs::PoseWithCovarianceStamped>(),
                    [](){ return new geometry_msgs::PoseWithCovarianceStamped(); },
                                std::bind(allocateMessage,geometry_msgs::PoseWithCovarianceStamped::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: PoseWithCovarianceStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::PoseWithCovarianceStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::PoseWithCovarianceStamped::DATA_TYPE_NAME,geometry_msgs::PoseWithCovarianceStamped::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: PoseWithCovarianceStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Quaternion::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::Quaternion>(
                    // boost::lambda::new_ptr<geometry_msgs::Quaternion>(),
                    [](){ return new geometry_msgs::Quaternion(); },
                                std::bind(allocateMessage,geometry_msgs::Quaternion::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Quaternion");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Quaternion::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::Quaternion::DATA_TYPE_NAME,geometry_msgs::Quaternion::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Quaternion");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::QuaternionStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::QuaternionStamped>(
                    // boost::lambda::new_ptr<geometry_msgs::QuaternionStamped>(),
                    [](){ return new geometry_msgs::QuaternionStamped(); },
                                std::bind(allocateMessage,geometry_msgs::QuaternionStamped::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: QuaternionStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::QuaternionStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::QuaternionStamped::DATA_TYPE_NAME,geometry_msgs::QuaternionStamped::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: QuaternionStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Transform::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::Transform>(
                    // boost::lambda::new_ptr<geometry_msgs::Transform>(),
                    [](){ return new geometry_msgs::Transform(); },
                                std::bind(allocateMessage,geometry_msgs::Transform::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Transform");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Transform::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::Transform::DATA_TYPE_NAME,geometry_msgs::Transform::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Transform");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::TransformStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::TransformStamped>(
                    // boost::lambda::new_ptr<geometry_msgs::TransformStamped>(),
                    [](){ return new geometry_msgs::TransformStamped(); },
                                std::bind(allocateMessage,geometry_msgs::TransformStamped::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: TransformStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::TransformStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::TransformStamped::DATA_TYPE_NAME,geometry_msgs::TransformStamped::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: TransformStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Twist::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::Twist>(
                    // boost::lambda::new_ptr<geometry_msgs::Twist>(),
                    [](){ return new geometry_msgs::Twist(); },
                                std::bind(allocateMessage,geometry_msgs::Twist::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Twist");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Twist::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::Twist::DATA_TYPE_NAME,geometry_msgs::Twist::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Twist");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::TwistStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::TwistStamped>(
                    // boost::lambda::new_ptr<geometry_msgs::TwistStamped>(),
                    [](){ return new geometry_msgs::TwistStamped(); },
                                std::bind(allocateMessage,geometry_msgs::TwistStamped::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: TwistStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::TwistStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::TwistStamped::DATA_TYPE_NAME,geometry_msgs::TwistStamped::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: TwistStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::TwistWithCovariance::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::TwistWithCovariance>(
                    // boost::lambda::new_ptr<geometry_msgs::TwistWithCovariance>(),
                    [](){ return new geometry_msgs::TwistWithCovariance(); },
                                std::bind(allocateMessage,geometry_msgs::TwistWithCovariance::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: TwistWithCovariance");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::TwistWithCovariance::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::TwistWithCovariance::DATA_TYPE_NAME,geometry_msgs::TwistWithCovariance::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: TwistWithCovariance");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::TwistWithCovarianceStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::TwistWithCovarianceStamped>(
                    // boost::lambda::new_ptr<geometry_msgs::TwistWithCovarianceStamped>(),
                    [](){ return new geometry_msgs::TwistWithCovarianceStamped(); },
                                std::bind(allocateMessage,geometry_msgs::TwistWithCovarianceStamped::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: TwistWithCovarianceStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::TwistWithCovarianceStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::TwistWithCovarianceStamped::DATA_TYPE_NAME,geometry_msgs::TwistWithCovarianceStamped::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: TwistWithCovarianceStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Vector3::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::Vector3>(
                    // boost::lambda::new_ptr<geometry_msgs::Vector3>(),
                    [](){ return new geometry_msgs::Vector3(); },
                                std::bind(allocateMessage,geometry_msgs::Vector3::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Vector3");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Vector3::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::Vector3::DATA_TYPE_NAME,geometry_msgs::Vector3::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Vector3");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Vector3Stamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::Vector3Stamped>(
                    // boost::lambda::new_ptr<geometry_msgs::Vector3Stamped>(),
                    [](){ return new geometry_msgs::Vector3Stamped(); },
                                std::bind(allocateMessage,geometry_msgs::Vector3Stamped::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Vector3Stamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Vector3Stamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::Vector3Stamped::DATA_TYPE_NAME,geometry_msgs::Vector3Stamped::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Vector3Stamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Wrench::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::Wrench>(
                    // boost::lambda::new_ptr<geometry_msgs::Wrench>(),
                    [](){ return new geometry_msgs::Wrench(); },
                                std::bind(allocateMessage,geometry_msgs::Wrench::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Wrench");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::Wrench::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::Wrench::DATA_TYPE_NAME,geometry_msgs::Wrench::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Wrench");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::WrenchStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<geometry_msgs::WrenchStamped>(
                    // boost::lambda::new_ptr<geometry_msgs::WrenchStamped>(),
                    [](){ return new geometry_msgs::WrenchStamped(); },
                                std::bind(allocateMessage,geometry_msgs::WrenchStamped::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: WrenchStamped");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = geometry_msgs::WrenchStamped::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(geometry_msgs::WrenchStamped::DATA_TYPE_NAME,geometry_msgs::WrenchStamped::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: WrenchStamped");
            }

        }

        return retval;
    };

    std::string xmlSource()
    {
        return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\
<!--\
 \
  AUTOGENERATED FILE:   do not edit\
\
  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:56:58 -0500\
  From Template/Script: rosToXML.rb\
 \
\
-->\
<classes library_name=\"geometry_msgs_gencpp\" namespace=\"geometry_msgs\">\
\
<class name=\"Accel\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"9f195f881246fdfa2798d1d3eebca84a\" rosDesc=\"# This expresses acceleration in free space broken into its linear and angular parts.\\nVector3  linear\\nVector3  angular\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\n\" comment=\"This expresses acceleration in free space broken into its linear and angular parts.\">\
  <field name=\"linear\" type=\"Vector3\" sourceType=\"Vector3\" comment=\"\"/>\
  <field name=\"angular\" type=\"Vector3\" sourceType=\"Vector3\" comment=\"\"/>\
</class>\
\
<class name=\"AccelStamped\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"d8a98a5d81351b6eb0578c78557e7659\" rosDesc=\"# An accel with reference coordinate frame and timestamp\\nHeader header\\nAccel accel\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/Accel\\n# This expresses acceleration in free space broken into its linear and angular parts.\\nVector3  linear\\nVector3  angular\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\n\" comment=\"An accel with reference coordinate frame and timestamp\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"accel\" type=\"Accel\" sourceType=\"Accel\" comment=\"\"/>\
</class>\
\
<class name=\"AccelWithCovariance\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"ad5a718d699c6be72a02b8d6a139f334\" rosDesc=\"# This expresses acceleration in free space with uncertainty.\\n\\nAccel accel\\n\\n# Row-major representation of the 6x6 covariance matrix\\n# The orientation parameters use a fixed-axis representation.\\n# In order, the parameters are:\\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\\nfloat64[36] covariance\\n\\n================================================================================\\nMSG: geometry_msgs/Accel\\n# This expresses acceleration in free space broken into its linear and angular parts.\\nVector3  linear\\nVector3  angular\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\n\" comment=\"This expresses acceleration in free space with uncertainty.\">\
  <field name=\"accel\" type=\"Accel\" sourceType=\"Accel\" comment=\"Row-major representation of the 6x6 covariance matrix  The orientation parameters use a fixed-axis representation.  In order, the parameters are:  (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\"/>\
  <field name=\"covariance\" type=\"double\" size=\"36\" sourceType=\"float64\" comment=\"\"/>\
</class>\
\
<class name=\"AccelWithCovarianceStamped\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"96adb295225031ec8d57fb4251b0a886\" rosDesc=\"# This represents an estimated accel with reference coordinate frame and timestamp.\\nHeader header\\nAccelWithCovariance accel\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/AccelWithCovariance\\n# This expresses acceleration in free space with uncertainty.\\n\\nAccel accel\\n\\n# Row-major representation of the 6x6 covariance matrix\\n# The orientation parameters use a fixed-axis representation.\\n# In order, the parameters are:\\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\\nfloat64[36] covariance\\n\\n================================================================================\\nMSG: geometry_msgs/Accel\\n# This expresses acceleration in free space broken into its linear and angular parts.\\nVector3  linear\\nVector3  angular\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\n\" comment=\"This represents an estimated accel with reference coordinate frame and timestamp.\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"accel\" type=\"AccelWithCovariance\" sourceType=\"AccelWithCovariance\" comment=\"\"/>\
</class>\
\
<class name=\"Inertia\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"1d26e4bb6c83ff141c5cf0d883c2b0fe\" rosDesc=\"# Mass [kg]\\nfloat64 m\\n\\n# Center of mass [m]\\ngeometry_msgs/Vector3 com\\n\\n# Inertia Tensor [kg-m^2]\\n#     | ixx ixy ixz |\\n# I = | ixy iyy iyz |\\n#     | ixz iyz izz |\\nfloat64 ixx\\nfloat64 ixy\\nfloat64 ixz\\nfloat64 iyy\\nfloat64 iyz\\nfloat64 izz\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\n\" comment=\"Mass [kg]\">\
  <field name=\"m\" type=\"double\" sourceType=\"float64\" comment=\"Center of mass [m]\"/>\
  <field name=\"com\" type=\"geometry_msgs::Vector3\" sourceType=\"geometry_msgs::Vector3\" comment=\"Inertia Tensor [kg-m^2]      | ixx ixy ixz |  I = | ixy iyy iyz |      | ixz iyz izz |\"/>\
  <field name=\"ixx\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
  <field name=\"ixy\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
  <field name=\"ixz\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
  <field name=\"iyy\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
  <field name=\"iyz\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
  <field name=\"izz\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
</class>\
\
<class name=\"InertiaStamped\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"ddee48caeab5a966c5e8d166654a9ac7\" rosDesc=\"Header header\\nInertia inertia\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/Inertia\\n# Mass [kg]\\nfloat64 m\\n\\n# Center of mass [m]\\ngeometry_msgs/Vector3 com\\n\\n# Inertia Tensor [kg-m^2]\\n#     | ixx ixy ixz |\\n# I = | ixy iyy iyz |\\n#     | ixz iyz izz |\\nfloat64 ixx\\nfloat64 ixy\\nfloat64 ixz\\nfloat64 iyy\\nfloat64 iyz\\nfloat64 izz\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\n\" comment=\"\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"inertia\" type=\"Inertia\" sourceType=\"Inertia\" comment=\"\"/>\
</class>\
\
<class name=\"Point\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"4a842b65f413084dc2b10fb484ea7f17\" rosDesc=\"# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\" comment=\"This contains the position of a point in free space\">\
  <field name=\"x\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
  <field name=\"y\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
  <field name=\"z\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
</class>\
\
<class name=\"Point32\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"cc153912f1453b708d221682bc23d9ac\" rosDesc=\"# This contains the position of a point in free space(with 32 bits of precision).\\n# It is recommeded to use Point wherever possible instead of Point32.  \\n# \\n# This recommendation is to promote interoperability.  \\n#\\n# This message is designed to take up less space when sending\\n# lots of points at once, as in the case of a PointCloud.  \\n\\nfloat32 x\\nfloat32 y\\n\" comment=\"This contains the position of a point in free space(with 32 bits of precision).  It is recommeded to use Point wherever possible instead of Point32.      This recommendation is to promote interoperability.     This message is designed to take up less space when sending  lots of points at once, as in the case of a PointCloud.\">\
  <field name=\"x\" type=\"float\" sourceType=\"float32\" comment=\"\"/>\
  <field name=\"y\" type=\"float\" sourceType=\"float32\" comment=\"\"/>\
  <field name=\"z\" type=\"float\" sourceType=\"float32\" comment=\"\"/>\
</class>\
\
<class name=\"PointStamped\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"c63aecb41bfdfd6b7e1fac37c7cbe7bf\" rosDesc=\"# This represents a Point with reference coordinate frame and timestamp\\nHeader header\\nPoint point\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\" comment=\"This represents a Point with reference coordinate frame and timestamp\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"point\" type=\"Point\" sourceType=\"Point\" comment=\"\"/>\
</class>\
\
<class name=\"Polygon\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"cd60a26494a087f577976f0329fa120e\" rosDesc=\"#A specification of a polygon where the first and last points are assumed to be connected\\nPoint32[] points\\n\\n================================================================================\\nMSG: geometry_msgs/Point32\\n# This contains the position of a point in free space(with 32 bits of precision).\\n# It is recommeded to use Point wherever possible instead of Point32.  \\n# \\n# This recommendation is to promote interoperability.  \\n#\\n# This message is designed to take up less space when sending\\n# lots of points at once, as in the case of a PointCloud.  \\n\\nfloat32 x\\nfloat32 y\\n\" comment=\"A specification of a polygon where the first and last points are assumed to be connected\">\
  <field name=\"points\" type=\"vector(Point32)\" sourceType=\"Point32\" comment=\"\"/>\
</class>\
\
<class name=\"PolygonStamped\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"c6be8f7dc3bee7fe9e8d296070f53340\" rosDesc=\"# This represents a Polygon with reference coordinate frame and timestamp\\nHeader header\\nPolygon polygon\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/Polygon\\n#A specification of a polygon where the first and last points are assumed to be connected\\nPoint32[] points\\n\\n================================================================================\\nMSG: geometry_msgs/Point32\\n# This contains the position of a point in free space(with 32 bits of precision).\\n# It is recommeded to use Point wherever possible instead of Point32.  \\n# \\n# This recommendation is to promote interoperability.  \\n#\\n# This message is designed to take up less space when sending\\n# lots of points at once, as in the case of a PointCloud.  \\n\\nfloat32 x\\nfloat32 y\\n\" comment=\"This represents a Polygon with reference coordinate frame and timestamp\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"polygon\" type=\"Polygon\" sourceType=\"Polygon\" comment=\"\"/>\
</class>\
\
<class name=\"Pose\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"863b248d5016ca62ea2e895ae5265cf9\" rosDesc=\"float32 x\\nfloat32 y\\nfloat32 theta\\n\\nfloat32 linear_velocity\\n\" comment=\"A representation of pose in free space, composed of postion and orientation.\">\
  <field name=\"position\" type=\"Point\" sourceType=\"Point\" comment=\"\"/>\
  <field name=\"orientation\" type=\"Quaternion\" sourceType=\"Quaternion\" comment=\"\"/>\
</class>\
\
<class name=\"Pose2D\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"938fa65709584ad8e77d238529be13b8\" rosDesc=\"# This expresses a position and orientation on a 2D manifold.\\n\\nfloat64 x\\nfloat64 y\\n\" comment=\"This expresses a position and orientation on a 2D manifold.\">\
  <field name=\"x\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
  <field name=\"y\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
  <field name=\"theta\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
</class>\
\
<class name=\"PoseArray\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"916c28c5764443f268b296bb671b9d97\" rosDesc=\"# An array of poses with a header for global reference.\\n\\nHeader header\\n\\nPose[] poses\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/Pose\\n# A representation of pose in free space, composed of postion and orientation. \\nPoint position\\nQuaternion orientation\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\" comment=\"An array of poses with a header for global reference.\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"poses\" type=\"vector(Pose)\" sourceType=\"Pose\" comment=\"\"/>\
</class>\
\
<class name=\"PoseStamped\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"d3812c3cbc69362b77dc0b19b345f8f5\" rosDesc=\"# A Pose with reference coordinate frame and timestamp\\nHeader header\\nPose pose\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/Pose\\n# A representation of pose in free space, composed of postion and orientation. \\nPoint position\\nQuaternion orientation\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\" comment=\"A Pose with reference coordinate frame and timestamp\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"pose\" type=\"Pose\" sourceType=\"Pose\" comment=\"\"/>\
</class>\
\
<class name=\"PoseWithCovariance\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"c23e848cf1b7533a8d7c259073a97e6f\" rosDesc=\"# This represents a pose in free space with uncertainty.\\n\\nPose pose\\n\\n# Row-major representation of the 6x6 covariance matrix\\n# The orientation parameters use a fixed-axis representation.\\n# In order, the parameters are:\\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\\nfloat64[36] covariance\\n\\n================================================================================\\nMSG: geometry_msgs/Pose\\n# A representation of pose in free space, composed of postion and orientation. \\nPoint position\\nQuaternion orientation\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\" comment=\"This represents a pose in free space with uncertainty.\">\
  <field name=\"pose\" type=\"Pose\" sourceType=\"Pose\" comment=\"Row-major representation of the 6x6 covariance matrix  The orientation parameters use a fixed-axis representation.  In order, the parameters are:  (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\"/>\
  <field name=\"covariance\" type=\"double\" size=\"36\" sourceType=\"float64\" comment=\"\"/>\
</class>\
\
<class name=\"PoseWithCovarianceStamped\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"953b798c0f514ff060a53a3498ce6246\" rosDesc=\"# This expresses an estimated pose with a reference coordinate frame and timestamp\\n\\nHeader header\\nPoseWithCovariance pose\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/PoseWithCovariance\\n# This represents a pose in free space with uncertainty.\\n\\nPose pose\\n\\n# Row-major representation of the 6x6 covariance matrix\\n# The orientation parameters use a fixed-axis representation.\\n# In order, the parameters are:\\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\\nfloat64[36] covariance\\n\\n================================================================================\\nMSG: geometry_msgs/Pose\\n# A representation of pose in free space, composed of postion and orientation. \\nPoint position\\nQuaternion orientation\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\" comment=\"This expresses an estimated pose with a reference coordinate frame and timestamp\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"pose\" type=\"PoseWithCovariance\" sourceType=\"PoseWithCovariance\" comment=\"\"/>\
</class>\
\
<class name=\"Quaternion\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"a779879fadf0160734f906b8c19c7004\" rosDesc=\"# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\" comment=\"This represents an orientation in free space in quaternion form.\">\
  <field name=\"x\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
  <field name=\"y\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
  <field name=\"z\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
  <field name=\"w\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
</class>\
\
<class name=\"QuaternionStamped\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"e57f1e547e0e1fd13504588ffc8334e2\" rosDesc=\"# This represents an orientation with reference coordinate frame and timestamp.\\n\\nHeader header\\nQuaternion quaternion\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\" comment=\"This represents an orientation with reference coordinate frame and timestamp.\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"quaternion\" type=\"Quaternion\" sourceType=\"Quaternion\" comment=\"\"/>\
</class>\
\
<class name=\"Transform\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"ac9eff44abf714214112b05d54a3cf9b\" rosDesc=\"# This represents the transform between two coordinate frames in free space.\\n\\nVector3 translation\\nQuaternion rotation\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\" comment=\"This represents the transform between two coordinate frames in free space.\">\
  <field name=\"translation\" type=\"Vector3\" sourceType=\"Vector3\" comment=\"\"/>\
  <field name=\"rotation\" type=\"Quaternion\" sourceType=\"Quaternion\" comment=\"\"/>\
</class>\
\
<class name=\"TransformStamped\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"b5764a33bfeb3588febc2682852579b0\" rosDesc=\"# This expresses a transform from coordinate frame header.frame_id\\n# to the coordinate frame child_frame_id\\n#\\n# This message is mostly used by the \\n# &lt;a href=\\&quot;http://wiki.ros.org/tf\\&quot;&gt;tf&lt;/a&gt; package. \\n# See its documentation for more information.\\n\\nHeader header\\nstring child_frame_id # the frame id of the child frame\\nTransform transform\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/Transform\\n# This represents the transform between two coordinate frames in free space.\\n\\nVector3 translation\\nQuaternion rotation\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\" comment=\"This expresses a transform from coordinate frame header.frame_id  to the coordinate frame child_frame_id   This message is mostly used by the   &lt;a href=&quot;http://wiki.ros.org/tf&quot;&gt;tf&lt;/a&gt; package.   See its documentation for more information.\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"child_frame_id\" type=\"string\" sourceType=\"string\" comment=\"the frame id of the child frame\"/>\
  <field name=\"transform\" type=\"Transform\" sourceType=\"Transform\" comment=\"\"/>\
</class>\
\
<class name=\"Twist\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"9f195f881246fdfa2798d1d3eebca84a\" rosDesc=\"# This expresses velocity in free space broken into its linear and angular parts.\\nVector3  linear\\nVector3  angular\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\n\" comment=\"This expresses velocity in free space broken into its linear and angular parts.\">\
  <field name=\"linear\" type=\"Vector3\" sourceType=\"Vector3\" comment=\"\"/>\
  <field name=\"angular\" type=\"Vector3\" sourceType=\"Vector3\" comment=\"\"/>\
</class>\
\
<class name=\"TwistStamped\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"98d34b0043a2093cf9d9345ab6eef12e\" rosDesc=\"# A twist with reference coordinate frame and timestamp\\nHeader header\\nTwist twist\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/Twist\\n# This expresses velocity in free space broken into its linear and angular parts.\\nVector3  linear\\nVector3  angular\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\n\" comment=\"A twist with reference coordinate frame and timestamp\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"twist\" type=\"Twist\" sourceType=\"Twist\" comment=\"\"/>\
</class>\
\
<class name=\"TwistWithCovariance\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"1fe8a28e6890a4cc3ae4c3ca5c7d82e6\" rosDesc=\"# This expresses velocity in free space with uncertainty.\\n\\nTwist twist\\n\\n# Row-major representation of the 6x6 covariance matrix\\n# The orientation parameters use a fixed-axis representation.\\n# In order, the parameters are:\\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\\nfloat64[36] covariance\\n\\n================================================================================\\nMSG: geometry_msgs/Twist\\n# This expresses velocity in free space broken into its linear and angular parts.\\nVector3  linear\\nVector3  angular\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\n\" comment=\"This expresses velocity in free space with uncertainty.\">\
  <field name=\"twist\" type=\"Twist\" sourceType=\"Twist\" comment=\"Row-major representation of the 6x6 covariance matrix  The orientation parameters use a fixed-axis representation.  In order, the parameters are:  (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\"/>\
  <field name=\"covariance\" type=\"double\" size=\"36\" sourceType=\"float64\" comment=\"\"/>\
</class>\
\
<class name=\"TwistWithCovarianceStamped\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"8927a1a12fb2607ceea095b2dc440a96\" rosDesc=\"# This represents an estimated twist with reference coordinate frame and timestamp.\\nHeader header\\nTwistWithCovariance twist\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/TwistWithCovariance\\n# This expresses velocity in free space with uncertainty.\\n\\nTwist twist\\n\\n# Row-major representation of the 6x6 covariance matrix\\n# The orientation parameters use a fixed-axis representation.\\n# In order, the parameters are:\\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\\nfloat64[36] covariance\\n\\n================================================================================\\nMSG: geometry_msgs/Twist\\n# This expresses velocity in free space broken into its linear and angular parts.\\nVector3  linear\\nVector3  angular\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\n\" comment=\"This represents an estimated twist with reference coordinate frame and timestamp.\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"twist\" type=\"TwistWithCovariance\" sourceType=\"TwistWithCovariance\" comment=\"\"/>\
</class>\
\
<class name=\"Vector3\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"4a842b65f413084dc2b10fb484ea7f17\" rosDesc=\"# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\n\" comment=\"This represents a vector in free space.   It is only meant to represent a direction. Therefore, it does not  make sense to apply a translation to it (e.g., when applying a   generic rigid transformation to a Vector3, tf2 will only apply the  rotation). If you want your data to be translatable too, use the  geometry_msgs/Point message instead.\">\
  <field name=\"x\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
  <field name=\"y\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
  <field name=\"z\" type=\"double\" sourceType=\"float64\" comment=\"\"/>\
</class>\
\
<class name=\"Vector3Stamped\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"7b324c7325e683bf02a9b14b01090ec7\" rosDesc=\"# This represents a Vector3 with reference coordinate frame and timestamp\\nHeader header\\nVector3 vector\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\n\" comment=\"This represents a Vector3 with reference coordinate frame and timestamp\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"vector\" type=\"Vector3\" sourceType=\"Vector3\" comment=\"\"/>\
</class>\
\
<class name=\"Wrench\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"4f539cf138b23283b520fd271b567936\" rosDesc=\"# This represents force in free space, separated into\\n# its linear and angular parts.\\nVector3  force\\nVector3  torque\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\n\" comment=\"This represents force in free space, separated into  its linear and angular parts.\">\
  <field name=\"force\" type=\"Vector3\" sourceType=\"Vector3\" comment=\"\"/>\
  <field name=\"torque\" type=\"Vector3\" sourceType=\"Vector3\" comment=\"\"/>\
</class>\
\
<class name=\"WrenchStamped\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"d78d3cb249ce23087ade7e7d0c40cfa7\" rosDesc=\"# A wrench with reference coordinate frame and timestamp\\nHeader header\\nWrench wrench\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/Wrench\\n# This represents force in free space, separated into\\n# its linear and angular parts.\\nVector3  force\\nVector3  torque\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\n\" comment=\"A wrench with reference coordinate frame and timestamp\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"wrench\" type=\"Wrench\" sourceType=\"Wrench\" comment=\"\"/>\
</class>\
\
<dependency name=\"std_msgs_gencpp\"/>\
<dependency name=\"std_srvs_gencpp\"/>\
\
</classes>\
";
    }

}; // end namespace geometry_msgs


// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:49 -0500
//  From Template/Script: data_templates/NMLHeaderTemplate.h
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#ifndef _CODEGEN_GEOMETRY_MSGS_GENCPPNML_H_
#define _CODEGEN_GEOMETRY_MSGS_GENCPPNML_H_

#include <messaging/nml/NMLMessageFactory.h>
//#include <DataTypeInfo.h>
#include <messaging/Message.h>

#include "geometry_msgs_gencpp_NMLSupport.h"

namespace rframe { class DataTypeInfo; };

#include "Accel.h"
#include "AccelStamped.h"
#include "AccelWithCovariance.h"
#include "AccelWithCovarianceStamped.h"
#include "Inertia.h"
#include "InertiaStamped.h"
#include "Point.h"
#include "Point32.h"
#include "PointStamped.h"
#include "Polygon.h"
#include "PolygonStamped.h"
#include "Pose.h"
#include "Pose2D.h"
#include "PoseArray.h"
#include "PoseStamped.h"
#include "PoseWithCovariance.h"
#include "PoseWithCovarianceStamped.h"
#include "Quaternion.h"
#include "QuaternionStamped.h"
#include "Transform.h"
#include "TransformStamped.h"
#include "Twist.h"
#include "TwistStamped.h"
#include "TwistWithCovariance.h"
#include "TwistWithCovarianceStamped.h"
#include "Vector3.h"
#include "Vector3Stamped.h"
#include "Wrench.h"
#include "WrenchStamped.h"

namespace geometry_msgs {

    /** definition of message factory for geometry_msgs_gencpp */
    class geometry_msgs_gencppNMLMessageFactory : public NMLMessageFactory
    {
    public:
        /** constructor */
        geometry_msgs_gencppNMLMessageFactory();
        /** destructor */
        virtual ~geometry_msgs_gencppNMLMessageFactory();

        /** see  rframe::MessageFactoryInterface */
        virtual void dataTypes(std::vector<DataTypeInfo> & ids);
        /** see  rframe::MessageFactoryInterface */
        virtual int dataType(NMLmsg & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<NMLmsg> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateTransport(NMLmsg * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateMessage(MessageBase * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int toTransport( MessageBase & src, NMLmsg & dst);
        /** see  rframe::MessageFactoryInterface */
        virtual int fromTransport( NMLmsg & src, MessageBase & dst);

        /** \return poitner to nml format function */
        virtual NML_FORMAT_PTR FormatPointer();
        /** run constructor for class of type id in the provided buffer */
        virtual int constructBuffer(rframe::ID_TYPE id, void * buffer);
        /** run destructor for class of type id in the buffer */
        virtual int destructBuffer(rframe::ID_TYPE id, void * buffer);
    };

    /** factory allocation function for use when not dynamically loading the factory library  */
    NMLMessageFactory * allocate_geometry_msgs_gencpp();

    /** NML interface for Accel 

    */
    class AccelNML : public NMLmsg
    {
    public:

        /** constructor */
        AccelNML();
        /** destructor */
        ~AccelNML();

        /** assignment operator */
        AccelNML & operator=(const AccelNML &inobj);
        /** assignment operator for base data class */
        AccelNML & operator=(const Accel &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Accel nmlPayload;

        /** set payload */
        void payload(const Accel &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Accel> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Accel * payload() { return & nmlPayload; };

    //     std::shared_ptr<Accel> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for AccelStamped 

    */
    class AccelStampedNML : public NMLmsg
    {
    public:

        /** constructor */
        AccelStampedNML();
        /** destructor */
        ~AccelStampedNML();

        /** assignment operator */
        AccelStampedNML & operator=(const AccelStampedNML &inobj);
        /** assignment operator for base data class */
        AccelStampedNML & operator=(const AccelStamped &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        AccelStamped nmlPayload;

        /** set payload */
        void payload(const AccelStamped &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<AccelStamped> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        AccelStamped * payload() { return & nmlPayload; };

    //     std::shared_ptr<AccelStamped> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for AccelWithCovariance 

    */
    class AccelWithCovarianceNML : public NMLmsg
    {
    public:

        /** constructor */
        AccelWithCovarianceNML();
        /** destructor */
        ~AccelWithCovarianceNML();

        /** assignment operator */
        AccelWithCovarianceNML & operator=(const AccelWithCovarianceNML &inobj);
        /** assignment operator for base data class */
        AccelWithCovarianceNML & operator=(const AccelWithCovariance &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        AccelWithCovariance nmlPayload;

        /** set payload */
        void payload(const AccelWithCovariance &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<AccelWithCovariance> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        AccelWithCovariance * payload() { return & nmlPayload; };

    //     std::shared_ptr<AccelWithCovariance> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for AccelWithCovarianceStamped 

    */
    class AccelWithCovarianceStampedNML : public NMLmsg
    {
    public:

        /** constructor */
        AccelWithCovarianceStampedNML();
        /** destructor */
        ~AccelWithCovarianceStampedNML();

        /** assignment operator */
        AccelWithCovarianceStampedNML & operator=(const AccelWithCovarianceStampedNML &inobj);
        /** assignment operator for base data class */
        AccelWithCovarianceStampedNML & operator=(const AccelWithCovarianceStamped &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        AccelWithCovarianceStamped nmlPayload;

        /** set payload */
        void payload(const AccelWithCovarianceStamped &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<AccelWithCovarianceStamped> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        AccelWithCovarianceStamped * payload() { return & nmlPayload; };

    //     std::shared_ptr<AccelWithCovarianceStamped> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Inertia 

    */
    class InertiaNML : public NMLmsg
    {
    public:

        /** constructor */
        InertiaNML();
        /** destructor */
        ~InertiaNML();

        /** assignment operator */
        InertiaNML & operator=(const InertiaNML &inobj);
        /** assignment operator for base data class */
        InertiaNML & operator=(const Inertia &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Inertia nmlPayload;

        /** set payload */
        void payload(const Inertia &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Inertia> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Inertia * payload() { return & nmlPayload; };

    //     std::shared_ptr<Inertia> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for InertiaStamped 

    */
    class InertiaStampedNML : public NMLmsg
    {
    public:

        /** constructor */
        InertiaStampedNML();
        /** destructor */
        ~InertiaStampedNML();

        /** assignment operator */
        InertiaStampedNML & operator=(const InertiaStampedNML &inobj);
        /** assignment operator for base data class */
        InertiaStampedNML & operator=(const InertiaStamped &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        InertiaStamped nmlPayload;

        /** set payload */
        void payload(const InertiaStamped &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<InertiaStamped> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        InertiaStamped * payload() { return & nmlPayload; };

    //     std::shared_ptr<InertiaStamped> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Point 

    */
    class PointNML : public NMLmsg
    {
    public:

        /** constructor */
        PointNML();
        /** destructor */
        ~PointNML();

        /** assignment operator */
        PointNML & operator=(const PointNML &inobj);
        /** assignment operator for base data class */
        PointNML & operator=(const Point &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Point nmlPayload;

        /** set payload */
        void payload(const Point &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Point> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Point * payload() { return & nmlPayload; };

    //     std::shared_ptr<Point> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Point32 

    */
    class Point32NML : public NMLmsg
    {
    public:

        /** constructor */
        Point32NML();
        /** destructor */
        ~Point32NML();

        /** assignment operator */
        Point32NML & operator=(const Point32NML &inobj);
        /** assignment operator for base data class */
        Point32NML & operator=(const Point32 &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Point32 nmlPayload;

        /** set payload */
        void payload(const Point32 &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Point32> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Point32 * payload() { return & nmlPayload; };

    //     std::shared_ptr<Point32> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for PointStamped 

    */
    class PointStampedNML : public NMLmsg
    {
    public:

        /** constructor */
        PointStampedNML();
        /** destructor */
        ~PointStampedNML();

        /** assignment operator */
        PointStampedNML & operator=(const PointStampedNML &inobj);
        /** assignment operator for base data class */
        PointStampedNML & operator=(const PointStamped &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        PointStamped nmlPayload;

        /** set payload */
        void payload(const PointStamped &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<PointStamped> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        PointStamped * payload() { return & nmlPayload; };

    //     std::shared_ptr<PointStamped> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Polygon 

    */
    class PolygonNML : public NMLmsg
    {
    public:

        /** constructor */
        PolygonNML();
        /** destructor */
        ~PolygonNML();

        /** assignment operator */
        PolygonNML & operator=(const PolygonNML &inobj);
        /** assignment operator for base data class */
        PolygonNML & operator=(const Polygon &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Polygon nmlPayload;

        /** set payload */
        void payload(const Polygon &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Polygon> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Polygon * payload() { return & nmlPayload; };

    //     std::shared_ptr<Polygon> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for PolygonStamped 

    */
    class PolygonStampedNML : public NMLmsg
    {
    public:

        /** constructor */
        PolygonStampedNML();
        /** destructor */
        ~PolygonStampedNML();

        /** assignment operator */
        PolygonStampedNML & operator=(const PolygonStampedNML &inobj);
        /** assignment operator for base data class */
        PolygonStampedNML & operator=(const PolygonStamped &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        PolygonStamped nmlPayload;

        /** set payload */
        void payload(const PolygonStamped &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<PolygonStamped> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        PolygonStamped * payload() { return & nmlPayload; };

    //     std::shared_ptr<PolygonStamped> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Pose 

    */
    class PoseNML : public NMLmsg
    {
    public:

        /** constructor */
        PoseNML();
        /** destructor */
        ~PoseNML();

        /** assignment operator */
        PoseNML & operator=(const PoseNML &inobj);
        /** assignment operator for base data class */
        PoseNML & operator=(const Pose &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Pose nmlPayload;

        /** set payload */
        void payload(const Pose &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Pose> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Pose * payload() { return & nmlPayload; };

    //     std::shared_ptr<Pose> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Pose2D 

    */
    class Pose2DNML : public NMLmsg
    {
    public:

        /** constructor */
        Pose2DNML();
        /** destructor */
        ~Pose2DNML();

        /** assignment operator */
        Pose2DNML & operator=(const Pose2DNML &inobj);
        /** assignment operator for base data class */
        Pose2DNML & operator=(const Pose2D &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Pose2D nmlPayload;

        /** set payload */
        void payload(const Pose2D &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Pose2D> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Pose2D * payload() { return & nmlPayload; };

    //     std::shared_ptr<Pose2D> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for PoseArray 

    */
    class PoseArrayNML : public NMLmsg
    {
    public:

        /** constructor */
        PoseArrayNML();
        /** destructor */
        ~PoseArrayNML();

        /** assignment operator */
        PoseArrayNML & operator=(const PoseArrayNML &inobj);
        /** assignment operator for base data class */
        PoseArrayNML & operator=(const PoseArray &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        PoseArray nmlPayload;

        /** set payload */
        void payload(const PoseArray &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<PoseArray> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        PoseArray * payload() { return & nmlPayload; };

    //     std::shared_ptr<PoseArray> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for PoseStamped 

    */
    class PoseStampedNML : public NMLmsg
    {
    public:

        /** constructor */
        PoseStampedNML();
        /** destructor */
        ~PoseStampedNML();

        /** assignment operator */
        PoseStampedNML & operator=(const PoseStampedNML &inobj);
        /** assignment operator for base data class */
        PoseStampedNML & operator=(const PoseStamped &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        PoseStamped nmlPayload;

        /** set payload */
        void payload(const PoseStamped &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<PoseStamped> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        PoseStamped * payload() { return & nmlPayload; };

    //     std::shared_ptr<PoseStamped> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for PoseWithCovariance 

    */
    class PoseWithCovarianceNML : public NMLmsg
    {
    public:

        /** constructor */
        PoseWithCovarianceNML();
        /** destructor */
        ~PoseWithCovarianceNML();

        /** assignment operator */
        PoseWithCovarianceNML & operator=(const PoseWithCovarianceNML &inobj);
        /** assignment operator for base data class */
        PoseWithCovarianceNML & operator=(const PoseWithCovariance &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        PoseWithCovariance nmlPayload;

        /** set payload */
        void payload(const PoseWithCovariance &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<PoseWithCovariance> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        PoseWithCovariance * payload() { return & nmlPayload; };

    //     std::shared_ptr<PoseWithCovariance> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for PoseWithCovarianceStamped 

    */
    class PoseWithCovarianceStampedNML : public NMLmsg
    {
    public:

        /** constructor */
        PoseWithCovarianceStampedNML();
        /** destructor */
        ~PoseWithCovarianceStampedNML();

        /** assignment operator */
        PoseWithCovarianceStampedNML & operator=(const PoseWithCovarianceStampedNML &inobj);
        /** assignment operator for base data class */
        PoseWithCovarianceStampedNML & operator=(const PoseWithCovarianceStamped &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        PoseWithCovarianceStamped nmlPayload;

        /** set payload */
        void payload(const PoseWithCovarianceStamped &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<PoseWithCovarianceStamped> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        PoseWithCovarianceStamped * payload() { return & nmlPayload; };

    //     std::shared_ptr<PoseWithCovarianceStamped> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Quaternion 

    */
    class QuaternionNML : public NMLmsg
    {
    public:

        /** constructor */
        QuaternionNML();
        /** destructor */
        ~QuaternionNML();

        /** assignment operator */
        QuaternionNML & operator=(const QuaternionNML &inobj);
        /** assignment operator for base data class */
        QuaternionNML & operator=(const Quaternion &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Quaternion nmlPayload;

        /** set payload */
        void payload(const Quaternion &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Quaternion> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Quaternion * payload() { return & nmlPayload; };

    //     std::shared_ptr<Quaternion> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for QuaternionStamped 

    */
    class QuaternionStampedNML : public NMLmsg
    {
    public:

        /** constructor */
        QuaternionStampedNML();
        /** destructor */
        ~QuaternionStampedNML();

        /** assignment operator */
        QuaternionStampedNML & operator=(const QuaternionStampedNML &inobj);
        /** assignment operator for base data class */
        QuaternionStampedNML & operator=(const QuaternionStamped &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        QuaternionStamped nmlPayload;

        /** set payload */
        void payload(const QuaternionStamped &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<QuaternionStamped> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        QuaternionStamped * payload() { return & nmlPayload; };

    //     std::shared_ptr<QuaternionStamped> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Transform 

    */
    class TransformNML : public NMLmsg
    {
    public:

        /** constructor */
        TransformNML();
        /** destructor */
        ~TransformNML();

        /** assignment operator */
        TransformNML & operator=(const TransformNML &inobj);
        /** assignment operator for base data class */
        TransformNML & operator=(const Transform &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Transform nmlPayload;

        /** set payload */
        void payload(const Transform &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Transform> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Transform * payload() { return & nmlPayload; };

    //     std::shared_ptr<Transform> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for TransformStamped 

    */
    class TransformStampedNML : public NMLmsg
    {
    public:

        /** constructor */
        TransformStampedNML();
        /** destructor */
        ~TransformStampedNML();

        /** assignment operator */
        TransformStampedNML & operator=(const TransformStampedNML &inobj);
        /** assignment operator for base data class */
        TransformStampedNML & operator=(const TransformStamped &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        TransformStamped nmlPayload;

        /** set payload */
        void payload(const TransformStamped &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<TransformStamped> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        TransformStamped * payload() { return & nmlPayload; };

    //     std::shared_ptr<TransformStamped> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Twist 

    */
    class TwistNML : public NMLmsg
    {
    public:

        /** constructor */
        TwistNML();
        /** destructor */
        ~TwistNML();

        /** assignment operator */
        TwistNML & operator=(const TwistNML &inobj);
        /** assignment operator for base data class */
        TwistNML & operator=(const Twist &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Twist nmlPayload;

        /** set payload */
        void payload(const Twist &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Twist> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Twist * payload() { return & nmlPayload; };

    //     std::shared_ptr<Twist> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for TwistStamped 

    */
    class TwistStampedNML : public NMLmsg
    {
    public:

        /** constructor */
        TwistStampedNML();
        /** destructor */
        ~TwistStampedNML();

        /** assignment operator */
        TwistStampedNML & operator=(const TwistStampedNML &inobj);
        /** assignment operator for base data class */
        TwistStampedNML & operator=(const TwistStamped &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        TwistStamped nmlPayload;

        /** set payload */
        void payload(const TwistStamped &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<TwistStamped> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        TwistStamped * payload() { return & nmlPayload; };

    //     std::shared_ptr<TwistStamped> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for TwistWithCovariance 

    */
    class TwistWithCovarianceNML : public NMLmsg
    {
    public:

        /** constructor */
        TwistWithCovarianceNML();
        /** destructor */
        ~TwistWithCovarianceNML();

        /** assignment operator */
        TwistWithCovarianceNML & operator=(const TwistWithCovarianceNML &inobj);
        /** assignment operator for base data class */
        TwistWithCovarianceNML & operator=(const TwistWithCovariance &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        TwistWithCovariance nmlPayload;

        /** set payload */
        void payload(const TwistWithCovariance &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<TwistWithCovariance> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        TwistWithCovariance * payload() { return & nmlPayload; };

    //     std::shared_ptr<TwistWithCovariance> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for TwistWithCovarianceStamped 

    */
    class TwistWithCovarianceStampedNML : public NMLmsg
    {
    public:

        /** constructor */
        TwistWithCovarianceStampedNML();
        /** destructor */
        ~TwistWithCovarianceStampedNML();

        /** assignment operator */
        TwistWithCovarianceStampedNML & operator=(const TwistWithCovarianceStampedNML &inobj);
        /** assignment operator for base data class */
        TwistWithCovarianceStampedNML & operator=(const TwistWithCovarianceStamped &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        TwistWithCovarianceStamped nmlPayload;

        /** set payload */
        void payload(const TwistWithCovarianceStamped &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<TwistWithCovarianceStamped> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        TwistWithCovarianceStamped * payload() { return & nmlPayload; };

    //     std::shared_ptr<TwistWithCovarianceStamped> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Vector3 

    */
    class Vector3NML : public NMLmsg
    {
    public:

        /** constructor */
        Vector3NML();
        /** destructor */
        ~Vector3NML();

        /** assignment operator */
        Vector3NML & operator=(const Vector3NML &inobj);
        /** assignment operator for base data class */
        Vector3NML & operator=(const Vector3 &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Vector3 nmlPayload;

        /** set payload */
        void payload(const Vector3 &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Vector3> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Vector3 * payload() { return & nmlPayload; };

    //     std::shared_ptr<Vector3> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Vector3Stamped 

    */
    class Vector3StampedNML : public NMLmsg
    {
    public:

        /** constructor */
        Vector3StampedNML();
        /** destructor */
        ~Vector3StampedNML();

        /** assignment operator */
        Vector3StampedNML & operator=(const Vector3StampedNML &inobj);
        /** assignment operator for base data class */
        Vector3StampedNML & operator=(const Vector3Stamped &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Vector3Stamped nmlPayload;

        /** set payload */
        void payload(const Vector3Stamped &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Vector3Stamped> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Vector3Stamped * payload() { return & nmlPayload; };

    //     std::shared_ptr<Vector3Stamped> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Wrench 

    */
    class WrenchNML : public NMLmsg
    {
    public:

        /** constructor */
        WrenchNML();
        /** destructor */
        ~WrenchNML();

        /** assignment operator */
        WrenchNML & operator=(const WrenchNML &inobj);
        /** assignment operator for base data class */
        WrenchNML & operator=(const Wrench &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Wrench nmlPayload;

        /** set payload */
        void payload(const Wrench &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Wrench> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Wrench * payload() { return & nmlPayload; };

    //     std::shared_ptr<Wrench> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for WrenchStamped 

    */
    class WrenchStampedNML : public NMLmsg
    {
    public:

        /** constructor */
        WrenchStampedNML();
        /** destructor */
        ~WrenchStampedNML();

        /** assignment operator */
        WrenchStampedNML & operator=(const WrenchStampedNML &inobj);
        /** assignment operator for base data class */
        WrenchStampedNML & operator=(const WrenchStamped &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        WrenchStamped nmlPayload;

        /** set payload */
        void payload(const WrenchStamped &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<WrenchStamped> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        WrenchStamped * payload() { return & nmlPayload; };

    //     std::shared_ptr<WrenchStamped> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    // predeclaration of nmlupdate functions (necessary due to namespaces )

    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::Accel & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::AccelStamped & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::AccelWithCovariance & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::AccelWithCovarianceStamped & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::Inertia & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::InertiaStamped & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::Point & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::Point32 & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::PointStamped & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::Polygon & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::PolygonStamped & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::Pose & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::Pose2D & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::PoseArray & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::PoseStamped & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::PoseWithCovariance & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::PoseWithCovarianceStamped & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::Quaternion & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::QuaternionStamped & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::Transform & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::TransformStamped & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::Twist & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::TwistStamped & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::TwistWithCovariance & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::TwistWithCovarianceStamped & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::Vector3 & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::Vector3Stamped & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::Wrench & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, geometry_msgs::WrenchStamped & inobj);

    /** nml format function */
    int geometry_msgs_gencpp_format(NMLTYPE type, void * buffer, CMS* cms);

}; // end namespace geometry_msgs

#endif // _GEOMETRY_MSGS_GENCPPNML_H_

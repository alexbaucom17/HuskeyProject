// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:07 -0500
//  From Template/Script: data_templates/NMLClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <stdio.h>
// main rcslib header
#include <nml.hh>
// cms updater header
#include <cms_up.hh>
#include <cms_pup.hh>

#include <common/Error.h>
#include <common/Log.h>
#include <common/Common.h>
#include <common/DataTypeInfo.h>

#include "roscpp_gencpp_NML.h"
#include "roscpp_gencpp_Library.h"
#include <messaging/nml/NMLSupport.h>
#include <interfaces/MessageFactoryInterface.h>

#include <Logger.h>
#include <EmptyRequest.h>
#include <EmptyResponse.h>
#include <Empty.h>
#include <GetLoggersRequest.h>
#include <GetLoggersResponse.h>
#include <GetLoggers.h>
#include <SetLoggerLevelRequest.h>
#include <SetLoggerLevelResponse.h>
#include <SetLoggerLevel.h>

#include <boost/iostreams/stream_buffer.hpp>
#include <boost/iostreams/stream.hpp>

#include <boost/serialization/serialization.hpp>
#include <opensource/eos/archive/portable_iarchive.hpp>
#include <opensource/eos/archive/portable_oarchive.hpp>

using namespace std;
using namespace roscpp;

rframe::NMLMessageFactory * NML_roscpp_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        NML_roscpp_gencppfactory = new roscpp_gencppNMLMessageFactory();
        return NML_roscpp_gencppfactory;
    };
}

rframe::NMLMessageFactory * roscpp::allocate_roscpp_gencpp()
{
    NML_roscpp_gencppfactory = new roscpp_gencppNMLMessageFactory();
    return NML_roscpp_gencppfactory;
};

roscpp_gencppNMLMessageFactory::roscpp_gencppNMLMessageFactory()
{
    name("roscpp_gencpp");
    // use constructor to register data types
    roscpp::registerLibrary();
}

roscpp_gencppNMLMessageFactory::~roscpp_gencppNMLMessageFactory()
{
}

NML_FORMAT_PTR roscpp_gencppNMLMessageFactory::FormatPointer()
{
    return roscpp_gencpp_format;
}

int roscpp_gencppNMLMessageFactory::dataType(NMLmsg & msg)
{
    return msg.type;
}

void roscpp_gencppNMLMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(Logger::ID);
    info.name(Logger::DATA_TYPE_FULL_NAME);
    info.hashKey(Logger::DATA_VERSION);
    info.md5Key(Logger::VERSION_MD5);
    info.xmlSource(Logger::XML_SOURCE);
    info.flat(Logger::dataTypeFlat());
    ids.push_back(info);

    info.id(EmptyRequest::ID);
    info.name(EmptyRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(EmptyRequest::DATA_VERSION);
    info.md5Key(EmptyRequest::VERSION_MD5);
    info.xmlSource(EmptyRequest::XML_SOURCE);
    info.flat(EmptyRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(EmptyResponse::ID);
    info.name(EmptyResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(EmptyResponse::DATA_VERSION);
    info.md5Key(EmptyResponse::VERSION_MD5);
    info.xmlSource(EmptyResponse::XML_SOURCE);
    info.flat(EmptyResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(Empty::ID);
    info.name(Empty::DATA_TYPE_FULL_NAME);
    info.hashKey(Empty::DATA_VERSION);
    info.md5Key(Empty::VERSION_MD5);
    info.xmlSource(Empty::XML_SOURCE);
    info.flat(Empty::dataTypeFlat());
    ids.push_back(info);

    info.id(GetLoggersRequest::ID);
    info.name(GetLoggersRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(GetLoggersRequest::DATA_VERSION);
    info.md5Key(GetLoggersRequest::VERSION_MD5);
    info.xmlSource(GetLoggersRequest::XML_SOURCE);
    info.flat(GetLoggersRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(GetLoggersResponse::ID);
    info.name(GetLoggersResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(GetLoggersResponse::DATA_VERSION);
    info.md5Key(GetLoggersResponse::VERSION_MD5);
    info.xmlSource(GetLoggersResponse::XML_SOURCE);
    info.flat(GetLoggersResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(GetLoggers::ID);
    info.name(GetLoggers::DATA_TYPE_FULL_NAME);
    info.hashKey(GetLoggers::DATA_VERSION);
    info.md5Key(GetLoggers::VERSION_MD5);
    info.xmlSource(GetLoggers::XML_SOURCE);
    info.flat(GetLoggers::dataTypeFlat());
    ids.push_back(info);

    info.id(SetLoggerLevelRequest::ID);
    info.name(SetLoggerLevelRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(SetLoggerLevelRequest::DATA_VERSION);
    info.md5Key(SetLoggerLevelRequest::VERSION_MD5);
    info.xmlSource(SetLoggerLevelRequest::XML_SOURCE);
    info.flat(SetLoggerLevelRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(SetLoggerLevelResponse::ID);
    info.name(SetLoggerLevelResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(SetLoggerLevelResponse::DATA_VERSION);
    info.md5Key(SetLoggerLevelResponse::VERSION_MD5);
    info.xmlSource(SetLoggerLevelResponse::XML_SOURCE);
    info.flat(SetLoggerLevelResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(SetLoggerLevel::ID);
    info.name(SetLoggerLevel::DATA_TYPE_FULL_NAME);
    info.hashKey(SetLoggerLevel::DATA_VERSION);
    info.md5Key(SetLoggerLevel::VERSION_MD5);
    info.xmlSource(SetLoggerLevel::XML_SOURCE);
    info.flat(SetLoggerLevel::dataTypeFlat());
    ids.push_back(info);

}

int roscpp_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<NMLmsg> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case Logger::ID:
        {
            //LoggerNML * newmsg = new LoggerNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new LoggerNML(),std::bind(&roscpp_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case EmptyRequest::ID:
        {
            //EmptyRequestNML * newmsg = new EmptyRequestNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new EmptyRequestNML(),std::bind(&roscpp_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case EmptyResponse::ID:
        {
            //EmptyResponseNML * newmsg = new EmptyResponseNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new EmptyResponseNML(),std::bind(&roscpp_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case Empty::ID:
        {
            //EmptyNML * newmsg = new EmptyNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new EmptyNML(),std::bind(&roscpp_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case GetLoggersRequest::ID:
        {
            //GetLoggersRequestNML * newmsg = new GetLoggersRequestNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new GetLoggersRequestNML(),std::bind(&roscpp_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case GetLoggersResponse::ID:
        {
            //GetLoggersResponseNML * newmsg = new GetLoggersResponseNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new GetLoggersResponseNML(),std::bind(&roscpp_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case GetLoggers::ID:
        {
            //GetLoggersNML * newmsg = new GetLoggersNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new GetLoggersNML(),std::bind(&roscpp_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case SetLoggerLevelRequest::ID:
        {
            //SetLoggerLevelRequestNML * newmsg = new SetLoggerLevelRequestNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new SetLoggerLevelRequestNML(),std::bind(&roscpp_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case SetLoggerLevelResponse::ID:
        {
            //SetLoggerLevelResponseNML * newmsg = new SetLoggerLevelResponseNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new SetLoggerLevelResponseNML(),std::bind(&roscpp_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case SetLoggerLevel::ID:
        {
            //SetLoggerLevelNML * newmsg = new SetLoggerLevelNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new SetLoggerLevelNML(),std::bind(&roscpp_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int roscpp_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case Logger::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<Logger>(),std::bind(&roscpp_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case EmptyRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<EmptyRequest>(),std::bind(&roscpp_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case EmptyResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<EmptyResponse>(),std::bind(&roscpp_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case Empty::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<Empty>(),std::bind(&roscpp_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetLoggersRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetLoggersRequest>(),std::bind(&roscpp_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetLoggersResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetLoggersResponse>(),std::bind(&roscpp_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetLoggers::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetLoggers>(),std::bind(&roscpp_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetLoggerLevelRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetLoggerLevelRequest>(),std::bind(&roscpp_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetLoggerLevelResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetLoggerLevelResponse>(),std::bind(&roscpp_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetLoggerLevel::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetLoggerLevel>(),std::bind(&roscpp_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int roscpp_gencppNMLMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    delete msg;

    return retval;
}

int roscpp_gencppNMLMessageFactory::deallocateTransport(NMLmsg * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        switch (msg->type)
        { 
            case Logger::ID:
            {
                LoggerNML * tempmsg = static_cast<LoggerNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case EmptyRequest::ID:
            {
                EmptyRequestNML * tempmsg = static_cast<EmptyRequestNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case EmptyResponse::ID:
            {
                EmptyResponseNML * tempmsg = static_cast<EmptyResponseNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case Empty::ID:
            {
                EmptyNML * tempmsg = static_cast<EmptyNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case GetLoggersRequest::ID:
            {
                GetLoggersRequestNML * tempmsg = static_cast<GetLoggersRequestNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case GetLoggersResponse::ID:
            {
                GetLoggersResponseNML * tempmsg = static_cast<GetLoggersResponseNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case GetLoggers::ID:
            {
                GetLoggersNML * tempmsg = static_cast<GetLoggersNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case SetLoggerLevelRequest::ID:
            {
                SetLoggerLevelRequestNML * tempmsg = static_cast<SetLoggerLevelRequestNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case SetLoggerLevelResponse::ID:
            {
                SetLoggerLevelResponseNML * tempmsg = static_cast<SetLoggerLevelResponseNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case SetLoggerLevel::ID:
            {
                SetLoggerLevelNML * tempmsg = static_cast<SetLoggerLevelNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            default:
            {
                retval = Error::NOT_FOUND;
                break;
            }
        }
    }

    return retval;
}

int roscpp_gencppNMLMessageFactory::toTransport(MessageBase & src, NMLmsg & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)dst.type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.type)
        { 
            case Logger::ID:
            {
                LoggerNML & tempDst = static_cast<LoggerNML&>(dst);
                Message<Logger > & tempSrc = static_cast<Message<Logger>&>(src);

                if (tempSrc.version() != Logger::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of Logger: " << __FILE__ << " expected: " 
                             << Logger::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of Logger: " << __FILE__ << " expected: " 
                         << Logger::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case EmptyRequest::ID:
            {
                EmptyRequestNML & tempDst = static_cast<EmptyRequestNML&>(dst);
                Message<EmptyRequest > & tempSrc = static_cast<Message<EmptyRequest>&>(src);

                if (tempSrc.version() != EmptyRequest::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of EmptyRequest: " << __FILE__ << " expected: " 
                             << EmptyRequest::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of EmptyRequest: " << __FILE__ << " expected: " 
                         << EmptyRequest::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case EmptyResponse::ID:
            {
                EmptyResponseNML & tempDst = static_cast<EmptyResponseNML&>(dst);
                Message<EmptyResponse > & tempSrc = static_cast<Message<EmptyResponse>&>(src);

                if (tempSrc.version() != EmptyResponse::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of EmptyResponse: " << __FILE__ << " expected: " 
                             << EmptyResponse::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of EmptyResponse: " << __FILE__ << " expected: " 
                         << EmptyResponse::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case Empty::ID:
            {
                EmptyNML & tempDst = static_cast<EmptyNML&>(dst);
                Message<Empty > & tempSrc = static_cast<Message<Empty>&>(src);

                if (tempSrc.version() != Empty::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of Empty: " << __FILE__ << " expected: " 
                             << Empty::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of Empty: " << __FILE__ << " expected: " 
                         << Empty::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case GetLoggersRequest::ID:
            {
                GetLoggersRequestNML & tempDst = static_cast<GetLoggersRequestNML&>(dst);
                Message<GetLoggersRequest > & tempSrc = static_cast<Message<GetLoggersRequest>&>(src);

                if (tempSrc.version() != GetLoggersRequest::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of GetLoggersRequest: " << __FILE__ << " expected: " 
                             << GetLoggersRequest::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of GetLoggersRequest: " << __FILE__ << " expected: " 
                         << GetLoggersRequest::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case GetLoggersResponse::ID:
            {
                GetLoggersResponseNML & tempDst = static_cast<GetLoggersResponseNML&>(dst);
                Message<GetLoggersResponse > & tempSrc = static_cast<Message<GetLoggersResponse>&>(src);

                if (tempSrc.version() != GetLoggersResponse::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of GetLoggersResponse: " << __FILE__ << " expected: " 
                             << GetLoggersResponse::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of GetLoggersResponse: " << __FILE__ << " expected: " 
                         << GetLoggersResponse::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case GetLoggers::ID:
            {
                GetLoggersNML & tempDst = static_cast<GetLoggersNML&>(dst);
                Message<GetLoggers > & tempSrc = static_cast<Message<GetLoggers>&>(src);

                if (tempSrc.version() != GetLoggers::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of GetLoggers: " << __FILE__ << " expected: " 
                             << GetLoggers::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of GetLoggers: " << __FILE__ << " expected: " 
                         << GetLoggers::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case SetLoggerLevelRequest::ID:
            {
                SetLoggerLevelRequestNML & tempDst = static_cast<SetLoggerLevelRequestNML&>(dst);
                Message<SetLoggerLevelRequest > & tempSrc = static_cast<Message<SetLoggerLevelRequest>&>(src);

                if (tempSrc.version() != SetLoggerLevelRequest::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of SetLoggerLevelRequest: " << __FILE__ << " expected: " 
                             << SetLoggerLevelRequest::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of SetLoggerLevelRequest: " << __FILE__ << " expected: " 
                         << SetLoggerLevelRequest::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case SetLoggerLevelResponse::ID:
            {
                SetLoggerLevelResponseNML & tempDst = static_cast<SetLoggerLevelResponseNML&>(dst);
                Message<SetLoggerLevelResponse > & tempSrc = static_cast<Message<SetLoggerLevelResponse>&>(src);

                if (tempSrc.version() != SetLoggerLevelResponse::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of SetLoggerLevelResponse: " << __FILE__ << " expected: " 
                             << SetLoggerLevelResponse::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of SetLoggerLevelResponse: " << __FILE__ << " expected: " 
                         << SetLoggerLevelResponse::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case SetLoggerLevel::ID:
            {
                SetLoggerLevelNML & tempDst = static_cast<SetLoggerLevelNML&>(dst);
                Message<SetLoggerLevel > & tempSrc = static_cast<Message<SetLoggerLevel>&>(src);

                if (tempSrc.version() != SetLoggerLevel::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of SetLoggerLevel: " << __FILE__ << " expected: " 
                             << SetLoggerLevel::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of SetLoggerLevel: " << __FILE__ << " expected: " 
                         << SetLoggerLevel::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int roscpp_gencppNMLMessageFactory::fromTransport(NMLmsg & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.type)
        { 
            case Logger::ID:
            {
                LoggerNML & tempSrc = static_cast<LoggerNML&>(src);
                Message<Logger > & tempDst = static_cast<Message<Logger>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (Logger::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case EmptyRequest::ID:
            {
                EmptyRequestNML & tempSrc = static_cast<EmptyRequestNML&>(src);
                Message<EmptyRequest > & tempDst = static_cast<Message<EmptyRequest>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (EmptyRequest::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case EmptyResponse::ID:
            {
                EmptyResponseNML & tempSrc = static_cast<EmptyResponseNML&>(src);
                Message<EmptyResponse > & tempDst = static_cast<Message<EmptyResponse>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (EmptyResponse::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case Empty::ID:
            {
                EmptyNML & tempSrc = static_cast<EmptyNML&>(src);
                Message<Empty > & tempDst = static_cast<Message<Empty>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (Empty::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case GetLoggersRequest::ID:
            {
                GetLoggersRequestNML & tempSrc = static_cast<GetLoggersRequestNML&>(src);
                Message<GetLoggersRequest > & tempDst = static_cast<Message<GetLoggersRequest>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (GetLoggersRequest::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case GetLoggersResponse::ID:
            {
                GetLoggersResponseNML & tempSrc = static_cast<GetLoggersResponseNML&>(src);
                Message<GetLoggersResponse > & tempDst = static_cast<Message<GetLoggersResponse>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (GetLoggersResponse::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case GetLoggers::ID:
            {
                GetLoggersNML & tempSrc = static_cast<GetLoggersNML&>(src);
                Message<GetLoggers > & tempDst = static_cast<Message<GetLoggers>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (GetLoggers::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case SetLoggerLevelRequest::ID:
            {
                SetLoggerLevelRequestNML & tempSrc = static_cast<SetLoggerLevelRequestNML&>(src);
                Message<SetLoggerLevelRequest > & tempDst = static_cast<Message<SetLoggerLevelRequest>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (SetLoggerLevelRequest::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case SetLoggerLevelResponse::ID:
            {
                SetLoggerLevelResponseNML & tempSrc = static_cast<SetLoggerLevelResponseNML&>(src);
                Message<SetLoggerLevelResponse > & tempDst = static_cast<Message<SetLoggerLevelResponse>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (SetLoggerLevelResponse::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case SetLoggerLevel::ID:
            {
                SetLoggerLevelNML & tempSrc = static_cast<SetLoggerLevelNML&>(src);
                Message<SetLoggerLevel > & tempDst = static_cast<Message<SetLoggerLevel>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (SetLoggerLevel::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int roscpp_gencppNMLMessageFactory::constructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    switch (id)
    { 
        case Logger::ID:
        {
            // only need to construct if data type is not flat
            if (Logger::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing Logger at %p\n",buffer);
                LoggerNML * p = static_cast<LoggerNML*>(buffer);
                // construct the type at pointer p
                new (p) LoggerNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing Logger at %p,, is flat\n",buffer);
            }
            break;
        } 
        case EmptyRequest::ID:
        {
            // only need to construct if data type is not flat
            if (EmptyRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing EmptyRequest at %p\n",buffer);
                EmptyRequestNML * p = static_cast<EmptyRequestNML*>(buffer);
                // construct the type at pointer p
                new (p) EmptyRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing EmptyRequest at %p,, is flat\n",buffer);
            }
            break;
        } 
        case EmptyResponse::ID:
        {
            // only need to construct if data type is not flat
            if (EmptyResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing EmptyResponse at %p\n",buffer);
                EmptyResponseNML * p = static_cast<EmptyResponseNML*>(buffer);
                // construct the type at pointer p
                new (p) EmptyResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing EmptyResponse at %p,, is flat\n",buffer);
            }
            break;
        } 
        case Empty::ID:
        {
            // only need to construct if data type is not flat
            if (Empty::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing Empty at %p\n",buffer);
                EmptyNML * p = static_cast<EmptyNML*>(buffer);
                // construct the type at pointer p
                new (p) EmptyNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing Empty at %p,, is flat\n",buffer);
            }
            break;
        } 
        case GetLoggersRequest::ID:
        {
            // only need to construct if data type is not flat
            if (GetLoggersRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing GetLoggersRequest at %p\n",buffer);
                GetLoggersRequestNML * p = static_cast<GetLoggersRequestNML*>(buffer);
                // construct the type at pointer p
                new (p) GetLoggersRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing GetLoggersRequest at %p,, is flat\n",buffer);
            }
            break;
        } 
        case GetLoggersResponse::ID:
        {
            // only need to construct if data type is not flat
            if (GetLoggersResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing GetLoggersResponse at %p\n",buffer);
                GetLoggersResponseNML * p = static_cast<GetLoggersResponseNML*>(buffer);
                // construct the type at pointer p
                new (p) GetLoggersResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing GetLoggersResponse at %p,, is flat\n",buffer);
            }
            break;
        } 
        case GetLoggers::ID:
        {
            // only need to construct if data type is not flat
            if (GetLoggers::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing GetLoggers at %p\n",buffer);
                GetLoggersNML * p = static_cast<GetLoggersNML*>(buffer);
                // construct the type at pointer p
                new (p) GetLoggersNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing GetLoggers at %p,, is flat\n",buffer);
            }
            break;
        } 
        case SetLoggerLevelRequest::ID:
        {
            // only need to construct if data type is not flat
            if (SetLoggerLevelRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing SetLoggerLevelRequest at %p\n",buffer);
                SetLoggerLevelRequestNML * p = static_cast<SetLoggerLevelRequestNML*>(buffer);
                // construct the type at pointer p
                new (p) SetLoggerLevelRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing SetLoggerLevelRequest at %p,, is flat\n",buffer);
            }
            break;
        } 
        case SetLoggerLevelResponse::ID:
        {
            // only need to construct if data type is not flat
            if (SetLoggerLevelResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing SetLoggerLevelResponse at %p\n",buffer);
                SetLoggerLevelResponseNML * p = static_cast<SetLoggerLevelResponseNML*>(buffer);
                // construct the type at pointer p
                new (p) SetLoggerLevelResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing SetLoggerLevelResponse at %p,, is flat\n",buffer);
            }
            break;
        } 
        case SetLoggerLevel::ID:
        {
            // only need to construct if data type is not flat
            if (SetLoggerLevel::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing SetLoggerLevel at %p\n",buffer);
                SetLoggerLevelNML * p = static_cast<SetLoggerLevelNML*>(buffer);
                // construct the type at pointer p
                new (p) SetLoggerLevelNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing SetLoggerLevel at %p,, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

int roscpp_gencppNMLMessageFactory::destructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    if (buffer == nullptr) return retval;

    switch (id)
    { 
        case Logger::ID:
        {
            // only need to destruct if data type is not flat
            if (Logger::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing Logger at %p\n",buffer);
                LoggerNML * p = static_cast<LoggerNML*>(buffer);
                p->~LoggerNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction Logger at %p, is flat\n",buffer);
            }
            break;
        } 
        case EmptyRequest::ID:
        {
            // only need to destruct if data type is not flat
            if (EmptyRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing EmptyRequest at %p\n",buffer);
                EmptyRequestNML * p = static_cast<EmptyRequestNML*>(buffer);
                p->~EmptyRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction EmptyRequest at %p, is flat\n",buffer);
            }
            break;
        } 
        case EmptyResponse::ID:
        {
            // only need to destruct if data type is not flat
            if (EmptyResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing EmptyResponse at %p\n",buffer);
                EmptyResponseNML * p = static_cast<EmptyResponseNML*>(buffer);
                p->~EmptyResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction EmptyResponse at %p, is flat\n",buffer);
            }
            break;
        } 
        case Empty::ID:
        {
            // only need to destruct if data type is not flat
            if (Empty::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing Empty at %p\n",buffer);
                EmptyNML * p = static_cast<EmptyNML*>(buffer);
                p->~EmptyNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction Empty at %p, is flat\n",buffer);
            }
            break;
        } 
        case GetLoggersRequest::ID:
        {
            // only need to destruct if data type is not flat
            if (GetLoggersRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing GetLoggersRequest at %p\n",buffer);
                GetLoggersRequestNML * p = static_cast<GetLoggersRequestNML*>(buffer);
                p->~GetLoggersRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction GetLoggersRequest at %p, is flat\n",buffer);
            }
            break;
        } 
        case GetLoggersResponse::ID:
        {
            // only need to destruct if data type is not flat
            if (GetLoggersResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing GetLoggersResponse at %p\n",buffer);
                GetLoggersResponseNML * p = static_cast<GetLoggersResponseNML*>(buffer);
                p->~GetLoggersResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction GetLoggersResponse at %p, is flat\n",buffer);
            }
            break;
        } 
        case GetLoggers::ID:
        {
            // only need to destruct if data type is not flat
            if (GetLoggers::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing GetLoggers at %p\n",buffer);
                GetLoggersNML * p = static_cast<GetLoggersNML*>(buffer);
                p->~GetLoggersNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction GetLoggers at %p, is flat\n",buffer);
            }
            break;
        } 
        case SetLoggerLevelRequest::ID:
        {
            // only need to destruct if data type is not flat
            if (SetLoggerLevelRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing SetLoggerLevelRequest at %p\n",buffer);
                SetLoggerLevelRequestNML * p = static_cast<SetLoggerLevelRequestNML*>(buffer);
                p->~SetLoggerLevelRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction SetLoggerLevelRequest at %p, is flat\n",buffer);
            }
            break;
        } 
        case SetLoggerLevelResponse::ID:
        {
            // only need to destruct if data type is not flat
            if (SetLoggerLevelResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing SetLoggerLevelResponse at %p\n",buffer);
                SetLoggerLevelResponseNML * p = static_cast<SetLoggerLevelResponseNML*>(buffer);
                p->~SetLoggerLevelResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction SetLoggerLevelResponse at %p, is flat\n",buffer);
            }
            break;
        } 
        case SetLoggerLevel::ID:
        {
            // only need to destruct if data type is not flat
            if (SetLoggerLevel::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing SetLoggerLevel at %p\n",buffer);
                SetLoggerLevelNML * p = static_cast<SetLoggerLevelNML*>(buffer);
                p->~SetLoggerLevelNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction SetLoggerLevel at %p, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

void roscpp::nmlupdate(CMS * cms, Logger & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate Logger, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.name);
        nmlupdate(cms,inobj.level);

    }  
 }

LoggerNML::LoggerNML() : NMLmsg((NMLTYPE)Logger::ID,sizeof(LoggerNML)), nmlVersion(Logger::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new Logger()*/)
{
};

LoggerNML::~LoggerNML()
{
};

LoggerNML & LoggerNML::operator=(const LoggerNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

LoggerNML & LoggerNML::operator=(const Logger & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(Logger);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void LoggerNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<Logger&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: LoggerNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<Logger> temp(new Logger());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: roscpp_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (Logger::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: Logger Message version mismatch, expected " << Logger::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: Logger Message version mismatch, expected " << Logger::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void roscpp::nmlupdate(CMS * cms, EmptyRequest & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate EmptyRequest, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

    }  
 }

EmptyRequestNML::EmptyRequestNML() : NMLmsg((NMLTYPE)EmptyRequest::ID,sizeof(EmptyRequestNML)), nmlVersion(EmptyRequest::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new EmptyRequest()*/)
{
};

EmptyRequestNML::~EmptyRequestNML()
{
};

EmptyRequestNML & EmptyRequestNML::operator=(const EmptyRequestNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

EmptyRequestNML & EmptyRequestNML::operator=(const EmptyRequest & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(EmptyRequest);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void EmptyRequestNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<EmptyRequest&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: EmptyRequestNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<EmptyRequest> temp(new EmptyRequest());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: roscpp_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (EmptyRequest::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: EmptyRequest Message version mismatch, expected " << EmptyRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: EmptyRequest Message version mismatch, expected " << EmptyRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void roscpp::nmlupdate(CMS * cms, EmptyResponse & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate EmptyResponse, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

    }  
 }

EmptyResponseNML::EmptyResponseNML() : NMLmsg((NMLTYPE)EmptyResponse::ID,sizeof(EmptyResponseNML)), nmlVersion(EmptyResponse::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new EmptyResponse()*/)
{
};

EmptyResponseNML::~EmptyResponseNML()
{
};

EmptyResponseNML & EmptyResponseNML::operator=(const EmptyResponseNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

EmptyResponseNML & EmptyResponseNML::operator=(const EmptyResponse & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(EmptyResponse);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void EmptyResponseNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<EmptyResponse&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: EmptyResponseNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<EmptyResponse> temp(new EmptyResponse());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: roscpp_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (EmptyResponse::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: EmptyResponse Message version mismatch, expected " << EmptyResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: EmptyResponse Message version mismatch, expected " << EmptyResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void roscpp::nmlupdate(CMS * cms, Empty & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate Empty, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.request);
        nmlupdate(cms,inobj.response);

    }  
 }

EmptyNML::EmptyNML() : NMLmsg((NMLTYPE)Empty::ID,sizeof(EmptyNML)), nmlVersion(Empty::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new Empty()*/)
{
};

EmptyNML::~EmptyNML()
{
};

EmptyNML & EmptyNML::operator=(const EmptyNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

EmptyNML & EmptyNML::operator=(const Empty & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(Empty);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void EmptyNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<Empty&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: EmptyNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<Empty> temp(new Empty());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: roscpp_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (Empty::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: Empty Message version mismatch, expected " << Empty::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: Empty Message version mismatch, expected " << Empty::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void roscpp::nmlupdate(CMS * cms, GetLoggersRequest & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate GetLoggersRequest, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

    }  
 }

GetLoggersRequestNML::GetLoggersRequestNML() : NMLmsg((NMLTYPE)GetLoggersRequest::ID,sizeof(GetLoggersRequestNML)), nmlVersion(GetLoggersRequest::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new GetLoggersRequest()*/)
{
};

GetLoggersRequestNML::~GetLoggersRequestNML()
{
};

GetLoggersRequestNML & GetLoggersRequestNML::operator=(const GetLoggersRequestNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

GetLoggersRequestNML & GetLoggersRequestNML::operator=(const GetLoggersRequest & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(GetLoggersRequest);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void GetLoggersRequestNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<GetLoggersRequest&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: GetLoggersRequestNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<GetLoggersRequest> temp(new GetLoggersRequest());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: roscpp_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (GetLoggersRequest::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: GetLoggersRequest Message version mismatch, expected " << GetLoggersRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: GetLoggersRequest Message version mismatch, expected " << GetLoggersRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void roscpp::nmlupdate(CMS * cms, GetLoggersResponse & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate GetLoggersResponse, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.loggers);

    }  
 }

GetLoggersResponseNML::GetLoggersResponseNML() : NMLmsg((NMLTYPE)GetLoggersResponse::ID,sizeof(GetLoggersResponseNML)), nmlVersion(GetLoggersResponse::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new GetLoggersResponse()*/)
{
};

GetLoggersResponseNML::~GetLoggersResponseNML()
{
};

GetLoggersResponseNML & GetLoggersResponseNML::operator=(const GetLoggersResponseNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

GetLoggersResponseNML & GetLoggersResponseNML::operator=(const GetLoggersResponse & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(GetLoggersResponse);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void GetLoggersResponseNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<GetLoggersResponse&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: GetLoggersResponseNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<GetLoggersResponse> temp(new GetLoggersResponse());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: roscpp_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (GetLoggersResponse::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: GetLoggersResponse Message version mismatch, expected " << GetLoggersResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: GetLoggersResponse Message version mismatch, expected " << GetLoggersResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void roscpp::nmlupdate(CMS * cms, GetLoggers & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate GetLoggers, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.request);
        nmlupdate(cms,inobj.response);

    }  
 }

GetLoggersNML::GetLoggersNML() : NMLmsg((NMLTYPE)GetLoggers::ID,sizeof(GetLoggersNML)), nmlVersion(GetLoggers::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new GetLoggers()*/)
{
};

GetLoggersNML::~GetLoggersNML()
{
};

GetLoggersNML & GetLoggersNML::operator=(const GetLoggersNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

GetLoggersNML & GetLoggersNML::operator=(const GetLoggers & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(GetLoggers);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void GetLoggersNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<GetLoggers&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: GetLoggersNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<GetLoggers> temp(new GetLoggers());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: roscpp_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (GetLoggers::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: GetLoggers Message version mismatch, expected " << GetLoggers::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: GetLoggers Message version mismatch, expected " << GetLoggers::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void roscpp::nmlupdate(CMS * cms, SetLoggerLevelRequest & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate SetLoggerLevelRequest, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.logger);
        nmlupdate(cms,inobj.level);

    }  
 }

SetLoggerLevelRequestNML::SetLoggerLevelRequestNML() : NMLmsg((NMLTYPE)SetLoggerLevelRequest::ID,sizeof(SetLoggerLevelRequestNML)), nmlVersion(SetLoggerLevelRequest::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new SetLoggerLevelRequest()*/)
{
};

SetLoggerLevelRequestNML::~SetLoggerLevelRequestNML()
{
};

SetLoggerLevelRequestNML & SetLoggerLevelRequestNML::operator=(const SetLoggerLevelRequestNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

SetLoggerLevelRequestNML & SetLoggerLevelRequestNML::operator=(const SetLoggerLevelRequest & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(SetLoggerLevelRequest);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void SetLoggerLevelRequestNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<SetLoggerLevelRequest&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: SetLoggerLevelRequestNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<SetLoggerLevelRequest> temp(new SetLoggerLevelRequest());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: roscpp_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (SetLoggerLevelRequest::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: SetLoggerLevelRequest Message version mismatch, expected " << SetLoggerLevelRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: SetLoggerLevelRequest Message version mismatch, expected " << SetLoggerLevelRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void roscpp::nmlupdate(CMS * cms, SetLoggerLevelResponse & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate SetLoggerLevelResponse, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

    }  
 }

SetLoggerLevelResponseNML::SetLoggerLevelResponseNML() : NMLmsg((NMLTYPE)SetLoggerLevelResponse::ID,sizeof(SetLoggerLevelResponseNML)), nmlVersion(SetLoggerLevelResponse::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new SetLoggerLevelResponse()*/)
{
};

SetLoggerLevelResponseNML::~SetLoggerLevelResponseNML()
{
};

SetLoggerLevelResponseNML & SetLoggerLevelResponseNML::operator=(const SetLoggerLevelResponseNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

SetLoggerLevelResponseNML & SetLoggerLevelResponseNML::operator=(const SetLoggerLevelResponse & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(SetLoggerLevelResponse);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void SetLoggerLevelResponseNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<SetLoggerLevelResponse&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: SetLoggerLevelResponseNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<SetLoggerLevelResponse> temp(new SetLoggerLevelResponse());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: roscpp_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (SetLoggerLevelResponse::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: SetLoggerLevelResponse Message version mismatch, expected " << SetLoggerLevelResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: SetLoggerLevelResponse Message version mismatch, expected " << SetLoggerLevelResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void roscpp::nmlupdate(CMS * cms, SetLoggerLevel & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate SetLoggerLevel, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.request);
        nmlupdate(cms,inobj.response);

    }  
 }

SetLoggerLevelNML::SetLoggerLevelNML() : NMLmsg((NMLTYPE)SetLoggerLevel::ID,sizeof(SetLoggerLevelNML)), nmlVersion(SetLoggerLevel::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new SetLoggerLevel()*/)
{
};

SetLoggerLevelNML::~SetLoggerLevelNML()
{
};

SetLoggerLevelNML & SetLoggerLevelNML::operator=(const SetLoggerLevelNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

SetLoggerLevelNML & SetLoggerLevelNML::operator=(const SetLoggerLevel & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(SetLoggerLevel);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void SetLoggerLevelNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<SetLoggerLevel&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: SetLoggerLevelNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<SetLoggerLevel> temp(new SetLoggerLevel());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: roscpp_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (SetLoggerLevel::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: SetLoggerLevel Message version mismatch, expected " << SetLoggerLevel::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: SetLoggerLevel Message version mismatch, expected " << SetLoggerLevel::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

int roscpp::roscpp_gencpp_format(NMLTYPE type, void * buffer, CMS* cms)
{
    int retval = 1;
    int retval2 = rframe::Error::SUCCESS;

          //printf("roscpp_gencpp_format: buffer parameters: type: %d, %p, encode: %d\n",(int)type, buffer,cms->mode);

    switch (type)
    { 
        case 0:
        {
            // do nothing, 0 is passed in on buffer creation
            break;
        }
        case Logger::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for Logger, id " << Logger::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_roscpp_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"roscpp_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((LoggerNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case EmptyRequest::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for EmptyRequest, id " << EmptyRequest::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_roscpp_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"roscpp_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((EmptyRequestNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case EmptyResponse::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for EmptyResponse, id " << EmptyResponse::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_roscpp_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"roscpp_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((EmptyResponseNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case Empty::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for Empty, id " << Empty::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_roscpp_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"roscpp_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((EmptyNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case GetLoggersRequest::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for GetLoggersRequest, id " << GetLoggersRequest::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_roscpp_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"roscpp_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((GetLoggersRequestNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case GetLoggersResponse::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for GetLoggersResponse, id " << GetLoggersResponse::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_roscpp_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"roscpp_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((GetLoggersResponseNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case GetLoggers::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for GetLoggers, id " << GetLoggers::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_roscpp_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"roscpp_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((GetLoggersNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case SetLoggerLevelRequest::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for SetLoggerLevelRequest, id " << SetLoggerLevelRequest::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_roscpp_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"roscpp_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((SetLoggerLevelRequestNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case SetLoggerLevelResponse::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for SetLoggerLevelResponse, id " << SetLoggerLevelResponse::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_roscpp_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"roscpp_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((SetLoggerLevelResponseNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case SetLoggerLevel::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for SetLoggerLevel, id " << SetLoggerLevel::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_roscpp_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"roscpp_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((SetLoggerLevelNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        }                   
        default:
        {

            retval = 0;
            break;
        }
    }

          //   printf("format done\n");
    return retval;
}


// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:52 -0500
//  From Template/Script: data_templates/ROSTemplate.cpp.rb
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "roscpp_gencpp_ROS.h"
#include <common/Log.h>
#include <common/DataTypeInfo.h>

using namespace std;
using namespace roscpp;

rframe::ROSMessageFactory * ROS_roscpp_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        ROS_roscpp_gencppfactory = new roscpp_gencppROSMessageFactory();

        return ROS_roscpp_gencppfactory;
    };
}

rframe::ROSMessageFactory * roscpp::allocate_roscpp_gencpp()
{
    ROS_roscpp_gencppfactory = new roscpp_gencppROSMessageFactory();
    return ROS_roscpp_gencppfactory;
};

roscpp_gencppROSMessageFactory::roscpp_gencppROSMessageFactory()
{
    name("roscpp_gencpp");
    // use constructor to register data types
    roscpp::registerLibrary();
}

roscpp_gencppROSMessageFactory::~roscpp_gencppROSMessageFactory()
{
}

int roscpp_gencppROSMessageFactory::dataType(ros::SerializedMessage & msg)
{
    return msg.message_type;
}

void roscpp_gencppROSMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(Logger::ID);
    info.name(Logger::DATA_TYPE_FULL_NAME);
    info.hashKey(Logger::DATA_VERSION);
    info.md5Key(Logger::VERSION_MD5);
    info.xmlSource(Logger::XML_SOURCE);
    info.flat(Logger::dataTypeFlat());
    ids.push_back(info);

    info.id(EmptyRequest::ID);
    info.name(EmptyRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(EmptyRequest::DATA_VERSION);
    info.md5Key(EmptyRequest::VERSION_MD5);
    info.xmlSource(EmptyRequest::XML_SOURCE);
    info.flat(EmptyRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(EmptyResponse::ID);
    info.name(EmptyResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(EmptyResponse::DATA_VERSION);
    info.md5Key(EmptyResponse::VERSION_MD5);
    info.xmlSource(EmptyResponse::XML_SOURCE);
    info.flat(EmptyResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(Empty::ID);
    info.name(Empty::DATA_TYPE_FULL_NAME);
    info.hashKey(Empty::DATA_VERSION);
    info.md5Key(Empty::VERSION_MD5);
    info.xmlSource(Empty::XML_SOURCE);
    info.flat(Empty::dataTypeFlat());
    ids.push_back(info);

    info.id(GetLoggersRequest::ID);
    info.name(GetLoggersRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(GetLoggersRequest::DATA_VERSION);
    info.md5Key(GetLoggersRequest::VERSION_MD5);
    info.xmlSource(GetLoggersRequest::XML_SOURCE);
    info.flat(GetLoggersRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(GetLoggersResponse::ID);
    info.name(GetLoggersResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(GetLoggersResponse::DATA_VERSION);
    info.md5Key(GetLoggersResponse::VERSION_MD5);
    info.xmlSource(GetLoggersResponse::XML_SOURCE);
    info.flat(GetLoggersResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(GetLoggers::ID);
    info.name(GetLoggers::DATA_TYPE_FULL_NAME);
    info.hashKey(GetLoggers::DATA_VERSION);
    info.md5Key(GetLoggers::VERSION_MD5);
    info.xmlSource(GetLoggers::XML_SOURCE);
    info.flat(GetLoggers::dataTypeFlat());
    ids.push_back(info);

    info.id(SetLoggerLevelRequest::ID);
    info.name(SetLoggerLevelRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(SetLoggerLevelRequest::DATA_VERSION);
    info.md5Key(SetLoggerLevelRequest::VERSION_MD5);
    info.xmlSource(SetLoggerLevelRequest::XML_SOURCE);
    info.flat(SetLoggerLevelRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(SetLoggerLevelResponse::ID);
    info.name(SetLoggerLevelResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(SetLoggerLevelResponse::DATA_VERSION);
    info.md5Key(SetLoggerLevelResponse::VERSION_MD5);
    info.xmlSource(SetLoggerLevelResponse::XML_SOURCE);
    info.flat(SetLoggerLevelResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(SetLoggerLevel::ID);
    info.name(SetLoggerLevel::DATA_TYPE_FULL_NAME);
    info.hashKey(SetLoggerLevel::DATA_VERSION);
    info.md5Key(SetLoggerLevel::VERSION_MD5);
    info.xmlSource(SetLoggerLevel::XML_SOURCE);
    info.flat(SetLoggerLevel::dataTypeFlat());
    ids.push_back(info);

}

int roscpp_gencppROSMessageFactory::typeName(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case Logger::ID:
        {
            str = "roscpp/Logger";
            break;
        }
        case EmptyRequest::ID:
        {
            str = "roscpp/EmptyRequest";
            break;
        }
        case EmptyResponse::ID:
        {
            str = "roscpp/EmptyResponse";
            break;
        }
        case Empty::ID:
        {
            str = "roscpp/Empty";
            break;
        }
        case GetLoggersRequest::ID:
        {
            str = "roscpp/GetLoggersRequest";
            break;
        }
        case GetLoggersResponse::ID:
        {
            str = "roscpp/GetLoggersResponse";
            break;
        }
        case GetLoggers::ID:
        {
            str = "roscpp/GetLoggers";
            break;
        }
        case SetLoggerLevelRequest::ID:
        {
            str = "roscpp/SetLoggerLevelRequest";
            break;
        }
        case SetLoggerLevelResponse::ID:
        {
            str = "roscpp/SetLoggerLevelResponse";
            break;
        }
        case SetLoggerLevel::ID:
        {
            str = "roscpp/SetLoggerLevel";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int roscpp_gencppROSMessageFactory::desc(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case Logger::ID:
        {
            str = "string name\nstring level\n";
            break;
        }
        case EmptyRequest::ID:
        {
            str = EmptyRequest::XML_SOURCE;
            break;
        }
        case EmptyResponse::ID:
        {
            str = EmptyResponse::XML_SOURCE;
            break;
        }
        case Empty::ID:
        {
            str = Empty::XML_SOURCE;
            break;
        }
        case GetLoggersRequest::ID:
        {
            str = GetLoggersRequest::XML_SOURCE;
            break;
        }
        case GetLoggersResponse::ID:
        {
            str = GetLoggersResponse::XML_SOURCE;
            break;
        }
        case GetLoggers::ID:
        {
            str = GetLoggers::XML_SOURCE;
            break;
        }
        case SetLoggerLevelRequest::ID:
        {
            str = SetLoggerLevelRequest::XML_SOURCE;
            break;
        }
        case SetLoggerLevelResponse::ID:
        {
            str = SetLoggerLevelResponse::XML_SOURCE;
            break;
        }
        case SetLoggerLevel::ID:
        {
            str = SetLoggerLevel::XML_SOURCE;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int roscpp_gencppROSMessageFactory::md5String(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case Logger::ID:
        {
            str = "a6069a2ff40db7bd32143dd66e1f408e";
            break;
        }
        case EmptyRequest::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case EmptyResponse::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case Empty::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case GetLoggersRequest::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case GetLoggersResponse::ID:
        {
            str = "32e97e85527d4678a8f9279894bb64b0";
            break;
        }
        case GetLoggers::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case SetLoggerLevelRequest::ID:
        {
            str = "51da076440d78ca1684d36c868df61ea";
            break;
        }
        case SetLoggerLevelResponse::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case SetLoggerLevel::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int roscpp_gencppROSMessageFactory::md5(unsigned long long & highOrder, unsigned long long & lowOrder, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case Logger::ID:
        {   
		    highOrder = 0xa6069a2ff40db7bdULL;
            lowOrder = 0x32143dd66e1f408eULL;
            break;
        }
        case EmptyRequest::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case EmptyResponse::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case Empty::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case GetLoggersRequest::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case GetLoggersResponse::ID:
        {   
		    highOrder = 0x32e97e85527d4678ULL;
            lowOrder = 0xa8f9279894bb64b0ULL;
            break;
        }
        case GetLoggers::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case SetLoggerLevelRequest::ID:
        {   
		    highOrder = 0x51da076440d78ca1ULL;
            lowOrder = 0x684d36c868df61eaULL;
            break;
        }
        case SetLoggerLevelResponse::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case SetLoggerLevel::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int roscpp_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<ros::SerializedMessage> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case Logger::ID:
        case EmptyRequest::ID:
        case EmptyResponse::ID:
        case Empty::ID:
        case GetLoggersRequest::ID:
        case GetLoggersResponse::ID:
        case GetLoggers::ID:
        case SetLoggerLevelRequest::ID:
        case SetLoggerLevelResponse::ID:
        case SetLoggerLevel::ID:
        {
            break;
        } 
        default:
	    {
            retval = rframe::Error::PARAM_RANGE;
            break;
	    }
    }

    if (retval == rframe::Error::SUCCESS)
	{
        std::shared_ptr<ros::SerializedMessage> newmsg(new ros::SerializedMessage);

        if (newmsg.get() == NULL)
	    {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else
	    {
            newmsg->message_type = id;
            msg.swap(newmsg);
        }
    }

    return retval;
}

int roscpp_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case Logger::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<Logger>(),std::bind(&roscpp_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case EmptyRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<EmptyRequest>(),std::bind(&roscpp_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case EmptyResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<EmptyResponse>(),std::bind(&roscpp_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case Empty::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<Empty>(),std::bind(&roscpp_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetLoggersRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetLoggersRequest>(),std::bind(&roscpp_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetLoggersResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetLoggersResponse>(),std::bind(&roscpp_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetLoggers::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetLoggers>(),std::bind(&roscpp_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetLoggerLevelRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetLoggerLevelRequest>(),std::bind(&roscpp_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetLoggerLevelResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetLoggerLevelResponse>(),std::bind(&roscpp_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetLoggerLevel::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetLoggerLevel>(),std::bind(&roscpp_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            retval = rframe::Error::PARAM_RANGE;
        }
    }

    return retval;
}

int roscpp_gencppROSMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
	{
        delete msg;
    }

    return retval;
}

int roscpp_gencppROSMessageFactory::deallocateTransport(ros::SerializedMessage * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        delete msg;
    }

    return retval;
}

int roscpp_gencppROSMessageFactory::toTransport(MessageBase & src, ros::SerializedMessage & dst)
{
    int retval = rframe::Error::SUCCESS;

    if (dst.message_type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.message_type)
        { 
            case Logger::ID:
            {
                Message<Logger > & tempSrc = static_cast<Message<Logger>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: roscpp_gencpp::Logger buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case EmptyRequest::ID:
            {
                Message<EmptyRequest > & tempSrc = static_cast<Message<EmptyRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: roscpp_gencpp::EmptyRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case EmptyResponse::ID:
            {
                Message<EmptyResponse > & tempSrc = static_cast<Message<EmptyResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: roscpp_gencpp::EmptyResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case Empty::ID:
            {
                Message<Empty > & tempSrc = static_cast<Message<Empty>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: roscpp_gencpp::Empty buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetLoggersRequest::ID:
            {
                Message<GetLoggersRequest > & tempSrc = static_cast<Message<GetLoggersRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: roscpp_gencpp::GetLoggersRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetLoggersResponse::ID:
            {
                Message<GetLoggersResponse > & tempSrc = static_cast<Message<GetLoggersResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: roscpp_gencpp::GetLoggersResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetLoggers::ID:
            {
                Message<GetLoggers > & tempSrc = static_cast<Message<GetLoggers>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: roscpp_gencpp::GetLoggers buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case SetLoggerLevelRequest::ID:
            {
                Message<SetLoggerLevelRequest > & tempSrc = static_cast<Message<SetLoggerLevelRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: roscpp_gencpp::SetLoggerLevelRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case SetLoggerLevelResponse::ID:
            {
                Message<SetLoggerLevelResponse > & tempSrc = static_cast<Message<SetLoggerLevelResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: roscpp_gencpp::SetLoggerLevelResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case SetLoggerLevel::ID:
            {
                Message<SetLoggerLevel > & tempSrc = static_cast<Message<SetLoggerLevel>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: roscpp_gencpp::SetLoggerLevel buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int roscpp_gencppROSMessageFactory::fromTransport(ros::SerializedMessage & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.message_type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.message_type)
        { 
            case Logger::ID:
            {
                Message<Logger > & tempDst = static_cast<Message<Logger>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case EmptyRequest::ID:
            {
                Message<EmptyRequest > & tempDst = static_cast<Message<EmptyRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case EmptyResponse::ID:
            {
                Message<EmptyResponse > & tempDst = static_cast<Message<EmptyResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case Empty::ID:
            {
                Message<Empty > & tempDst = static_cast<Message<Empty>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetLoggersRequest::ID:
            {
                Message<GetLoggersRequest > & tempDst = static_cast<Message<GetLoggersRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetLoggersResponse::ID:
            {
                Message<GetLoggersResponse > & tempDst = static_cast<Message<GetLoggersResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetLoggers::ID:
            {
                Message<GetLoggers > & tempDst = static_cast<Message<GetLoggers>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case SetLoggerLevelRequest::ID:
            {
                Message<SetLoggerLevelRequest > & tempDst = static_cast<Message<SetLoggerLevelRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case SetLoggerLevelResponse::ID:
            {
                Message<SetLoggerLevelResponse > & tempDst = static_cast<Message<SetLoggerLevelResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case SetLoggerLevel::ID:
            {
                Message<SetLoggerLevel > & tempDst = static_cast<Message<SetLoggerLevel>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int roscpp_gencppROSMessageFactory::updateHeader(rframe::MessageBase &msg, unsigned int seqNo)
{
    int retval = rframe::Error::SUCCESS;

    switch (msg.id())
    {   
        // Logger does not have a Header as its first member 
        // Empty does not have a Header as its first member 
        // GetLoggersResponse does not have a Header as its first member 
        // GetLoggers does not have a Header as its first member 
        // SetLoggerLevelRequest does not have a Header as its first member 
        // SetLoggerLevel does not have a Header as its first member 
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:08 -0500
//  From Template/Script: data_templates/NMLClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <stdio.h>
// main rcslib header
#include <nml.hh>
// cms updater header
#include <cms_up.hh>
#include <cms_pup.hh>

#include <common/Error.h>
#include <common/Log.h>
#include <common/Common.h>
#include <common/DataTypeInfo.h>

#include "std_srvs_gencpp_NML.h"
#include "std_srvs_gencpp_Library.h"
#include <messaging/nml/NMLSupport.h>
#include <interfaces/MessageFactoryInterface.h>

#include <EmptyRequest.h>
#include <EmptyResponse.h>
#include <Empty.h>
#include <SetBoolRequest.h>
#include <SetBoolResponse.h>
#include <SetBool.h>
#include <TriggerRequest.h>
#include <TriggerResponse.h>
#include <Trigger.h>

#include <boost/iostreams/stream_buffer.hpp>
#include <boost/iostreams/stream.hpp>

#include <boost/serialization/serialization.hpp>
#include <opensource/eos/archive/portable_iarchive.hpp>
#include <opensource/eos/archive/portable_oarchive.hpp>

using namespace std;
using namespace std_srvs;

rframe::NMLMessageFactory * NML_std_srvs_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        NML_std_srvs_gencppfactory = new std_srvs_gencppNMLMessageFactory();
        return NML_std_srvs_gencppfactory;
    };
}

rframe::NMLMessageFactory * std_srvs::allocate_std_srvs_gencpp()
{
    NML_std_srvs_gencppfactory = new std_srvs_gencppNMLMessageFactory();
    return NML_std_srvs_gencppfactory;
};

std_srvs_gencppNMLMessageFactory::std_srvs_gencppNMLMessageFactory()
{
    name("std_srvs_gencpp");
    // use constructor to register data types
    std_srvs::registerLibrary();
}

std_srvs_gencppNMLMessageFactory::~std_srvs_gencppNMLMessageFactory()
{
}

NML_FORMAT_PTR std_srvs_gencppNMLMessageFactory::FormatPointer()
{
    return std_srvs_gencpp_format;
}

int std_srvs_gencppNMLMessageFactory::dataType(NMLmsg & msg)
{
    return msg.type;
}

void std_srvs_gencppNMLMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(EmptyRequest::ID);
    info.name(EmptyRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(EmptyRequest::DATA_VERSION);
    info.md5Key(EmptyRequest::VERSION_MD5);
    info.xmlSource(EmptyRequest::XML_SOURCE);
    info.flat(EmptyRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(EmptyResponse::ID);
    info.name(EmptyResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(EmptyResponse::DATA_VERSION);
    info.md5Key(EmptyResponse::VERSION_MD5);
    info.xmlSource(EmptyResponse::XML_SOURCE);
    info.flat(EmptyResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(Empty::ID);
    info.name(Empty::DATA_TYPE_FULL_NAME);
    info.hashKey(Empty::DATA_VERSION);
    info.md5Key(Empty::VERSION_MD5);
    info.xmlSource(Empty::XML_SOURCE);
    info.flat(Empty::dataTypeFlat());
    ids.push_back(info);

    info.id(SetBoolRequest::ID);
    info.name(SetBoolRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(SetBoolRequest::DATA_VERSION);
    info.md5Key(SetBoolRequest::VERSION_MD5);
    info.xmlSource(SetBoolRequest::XML_SOURCE);
    info.flat(SetBoolRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(SetBoolResponse::ID);
    info.name(SetBoolResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(SetBoolResponse::DATA_VERSION);
    info.md5Key(SetBoolResponse::VERSION_MD5);
    info.xmlSource(SetBoolResponse::XML_SOURCE);
    info.flat(SetBoolResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(SetBool::ID);
    info.name(SetBool::DATA_TYPE_FULL_NAME);
    info.hashKey(SetBool::DATA_VERSION);
    info.md5Key(SetBool::VERSION_MD5);
    info.xmlSource(SetBool::XML_SOURCE);
    info.flat(SetBool::dataTypeFlat());
    ids.push_back(info);

    info.id(TriggerRequest::ID);
    info.name(TriggerRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(TriggerRequest::DATA_VERSION);
    info.md5Key(TriggerRequest::VERSION_MD5);
    info.xmlSource(TriggerRequest::XML_SOURCE);
    info.flat(TriggerRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(TriggerResponse::ID);
    info.name(TriggerResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(TriggerResponse::DATA_VERSION);
    info.md5Key(TriggerResponse::VERSION_MD5);
    info.xmlSource(TriggerResponse::XML_SOURCE);
    info.flat(TriggerResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(Trigger::ID);
    info.name(Trigger::DATA_TYPE_FULL_NAME);
    info.hashKey(Trigger::DATA_VERSION);
    info.md5Key(Trigger::VERSION_MD5);
    info.xmlSource(Trigger::XML_SOURCE);
    info.flat(Trigger::dataTypeFlat());
    ids.push_back(info);

}

int std_srvs_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<NMLmsg> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case EmptyRequest::ID:
        {
            //EmptyRequestNML * newmsg = new EmptyRequestNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new EmptyRequestNML(),std::bind(&std_srvs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case EmptyResponse::ID:
        {
            //EmptyResponseNML * newmsg = new EmptyResponseNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new EmptyResponseNML(),std::bind(&std_srvs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case Empty::ID:
        {
            //EmptyNML * newmsg = new EmptyNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new EmptyNML(),std::bind(&std_srvs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case SetBoolRequest::ID:
        {
            //SetBoolRequestNML * newmsg = new SetBoolRequestNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new SetBoolRequestNML(),std::bind(&std_srvs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case SetBoolResponse::ID:
        {
            //SetBoolResponseNML * newmsg = new SetBoolResponseNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new SetBoolResponseNML(),std::bind(&std_srvs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case SetBool::ID:
        {
            //SetBoolNML * newmsg = new SetBoolNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new SetBoolNML(),std::bind(&std_srvs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case TriggerRequest::ID:
        {
            //TriggerRequestNML * newmsg = new TriggerRequestNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new TriggerRequestNML(),std::bind(&std_srvs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case TriggerResponse::ID:
        {
            //TriggerResponseNML * newmsg = new TriggerResponseNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new TriggerResponseNML(),std::bind(&std_srvs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case Trigger::ID:
        {
            //TriggerNML * newmsg = new TriggerNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new TriggerNML(),std::bind(&std_srvs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int std_srvs_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case EmptyRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<EmptyRequest>(),std::bind(&std_srvs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case EmptyResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<EmptyResponse>(),std::bind(&std_srvs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case Empty::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<Empty>(),std::bind(&std_srvs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetBoolRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetBoolRequest>(),std::bind(&std_srvs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetBoolResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetBoolResponse>(),std::bind(&std_srvs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetBool::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetBool>(),std::bind(&std_srvs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case TriggerRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<TriggerRequest>(),std::bind(&std_srvs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case TriggerResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<TriggerResponse>(),std::bind(&std_srvs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case Trigger::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<Trigger>(),std::bind(&std_srvs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int std_srvs_gencppNMLMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    delete msg;

    return retval;
}

int std_srvs_gencppNMLMessageFactory::deallocateTransport(NMLmsg * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        switch (msg->type)
        { 
            case EmptyRequest::ID:
            {
                EmptyRequestNML * tempmsg = static_cast<EmptyRequestNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case EmptyResponse::ID:
            {
                EmptyResponseNML * tempmsg = static_cast<EmptyResponseNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case Empty::ID:
            {
                EmptyNML * tempmsg = static_cast<EmptyNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case SetBoolRequest::ID:
            {
                SetBoolRequestNML * tempmsg = static_cast<SetBoolRequestNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case SetBoolResponse::ID:
            {
                SetBoolResponseNML * tempmsg = static_cast<SetBoolResponseNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case SetBool::ID:
            {
                SetBoolNML * tempmsg = static_cast<SetBoolNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case TriggerRequest::ID:
            {
                TriggerRequestNML * tempmsg = static_cast<TriggerRequestNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case TriggerResponse::ID:
            {
                TriggerResponseNML * tempmsg = static_cast<TriggerResponseNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case Trigger::ID:
            {
                TriggerNML * tempmsg = static_cast<TriggerNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            default:
            {
                retval = Error::NOT_FOUND;
                break;
            }
        }
    }

    return retval;
}

int std_srvs_gencppNMLMessageFactory::toTransport(MessageBase & src, NMLmsg & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)dst.type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.type)
        { 
            case EmptyRequest::ID:
            {
                EmptyRequestNML & tempDst = static_cast<EmptyRequestNML&>(dst);
                Message<EmptyRequest > & tempSrc = static_cast<Message<EmptyRequest>&>(src);

                if (tempSrc.version() != EmptyRequest::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of EmptyRequest: " << __FILE__ << " expected: " 
                             << EmptyRequest::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of EmptyRequest: " << __FILE__ << " expected: " 
                         << EmptyRequest::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case EmptyResponse::ID:
            {
                EmptyResponseNML & tempDst = static_cast<EmptyResponseNML&>(dst);
                Message<EmptyResponse > & tempSrc = static_cast<Message<EmptyResponse>&>(src);

                if (tempSrc.version() != EmptyResponse::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of EmptyResponse: " << __FILE__ << " expected: " 
                             << EmptyResponse::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of EmptyResponse: " << __FILE__ << " expected: " 
                         << EmptyResponse::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case Empty::ID:
            {
                EmptyNML & tempDst = static_cast<EmptyNML&>(dst);
                Message<Empty > & tempSrc = static_cast<Message<Empty>&>(src);

                if (tempSrc.version() != Empty::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of Empty: " << __FILE__ << " expected: " 
                             << Empty::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of Empty: " << __FILE__ << " expected: " 
                         << Empty::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case SetBoolRequest::ID:
            {
                SetBoolRequestNML & tempDst = static_cast<SetBoolRequestNML&>(dst);
                Message<SetBoolRequest > & tempSrc = static_cast<Message<SetBoolRequest>&>(src);

                if (tempSrc.version() != SetBoolRequest::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of SetBoolRequest: " << __FILE__ << " expected: " 
                             << SetBoolRequest::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of SetBoolRequest: " << __FILE__ << " expected: " 
                         << SetBoolRequest::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case SetBoolResponse::ID:
            {
                SetBoolResponseNML & tempDst = static_cast<SetBoolResponseNML&>(dst);
                Message<SetBoolResponse > & tempSrc = static_cast<Message<SetBoolResponse>&>(src);

                if (tempSrc.version() != SetBoolResponse::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of SetBoolResponse: " << __FILE__ << " expected: " 
                             << SetBoolResponse::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of SetBoolResponse: " << __FILE__ << " expected: " 
                         << SetBoolResponse::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case SetBool::ID:
            {
                SetBoolNML & tempDst = static_cast<SetBoolNML&>(dst);
                Message<SetBool > & tempSrc = static_cast<Message<SetBool>&>(src);

                if (tempSrc.version() != SetBool::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of SetBool: " << __FILE__ << " expected: " 
                             << SetBool::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of SetBool: " << __FILE__ << " expected: " 
                         << SetBool::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case TriggerRequest::ID:
            {
                TriggerRequestNML & tempDst = static_cast<TriggerRequestNML&>(dst);
                Message<TriggerRequest > & tempSrc = static_cast<Message<TriggerRequest>&>(src);

                if (tempSrc.version() != TriggerRequest::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of TriggerRequest: " << __FILE__ << " expected: " 
                             << TriggerRequest::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of TriggerRequest: " << __FILE__ << " expected: " 
                         << TriggerRequest::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case TriggerResponse::ID:
            {
                TriggerResponseNML & tempDst = static_cast<TriggerResponseNML&>(dst);
                Message<TriggerResponse > & tempSrc = static_cast<Message<TriggerResponse>&>(src);

                if (tempSrc.version() != TriggerResponse::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of TriggerResponse: " << __FILE__ << " expected: " 
                             << TriggerResponse::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of TriggerResponse: " << __FILE__ << " expected: " 
                         << TriggerResponse::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case Trigger::ID:
            {
                TriggerNML & tempDst = static_cast<TriggerNML&>(dst);
                Message<Trigger > & tempSrc = static_cast<Message<Trigger>&>(src);

                if (tempSrc.version() != Trigger::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of Trigger: " << __FILE__ << " expected: " 
                             << Trigger::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of Trigger: " << __FILE__ << " expected: " 
                         << Trigger::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int std_srvs_gencppNMLMessageFactory::fromTransport(NMLmsg & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.type)
        { 
            case EmptyRequest::ID:
            {
                EmptyRequestNML & tempSrc = static_cast<EmptyRequestNML&>(src);
                Message<EmptyRequest > & tempDst = static_cast<Message<EmptyRequest>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (EmptyRequest::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case EmptyResponse::ID:
            {
                EmptyResponseNML & tempSrc = static_cast<EmptyResponseNML&>(src);
                Message<EmptyResponse > & tempDst = static_cast<Message<EmptyResponse>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (EmptyResponse::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case Empty::ID:
            {
                EmptyNML & tempSrc = static_cast<EmptyNML&>(src);
                Message<Empty > & tempDst = static_cast<Message<Empty>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (Empty::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case SetBoolRequest::ID:
            {
                SetBoolRequestNML & tempSrc = static_cast<SetBoolRequestNML&>(src);
                Message<SetBoolRequest > & tempDst = static_cast<Message<SetBoolRequest>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (SetBoolRequest::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case SetBoolResponse::ID:
            {
                SetBoolResponseNML & tempSrc = static_cast<SetBoolResponseNML&>(src);
                Message<SetBoolResponse > & tempDst = static_cast<Message<SetBoolResponse>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (SetBoolResponse::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case SetBool::ID:
            {
                SetBoolNML & tempSrc = static_cast<SetBoolNML&>(src);
                Message<SetBool > & tempDst = static_cast<Message<SetBool>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (SetBool::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case TriggerRequest::ID:
            {
                TriggerRequestNML & tempSrc = static_cast<TriggerRequestNML&>(src);
                Message<TriggerRequest > & tempDst = static_cast<Message<TriggerRequest>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (TriggerRequest::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case TriggerResponse::ID:
            {
                TriggerResponseNML & tempSrc = static_cast<TriggerResponseNML&>(src);
                Message<TriggerResponse > & tempDst = static_cast<Message<TriggerResponse>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (TriggerResponse::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case Trigger::ID:
            {
                TriggerNML & tempSrc = static_cast<TriggerNML&>(src);
                Message<Trigger > & tempDst = static_cast<Message<Trigger>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (Trigger::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int std_srvs_gencppNMLMessageFactory::constructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    switch (id)
    { 
        case EmptyRequest::ID:
        {
            // only need to construct if data type is not flat
            if (EmptyRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing EmptyRequest at %p\n",buffer);
                EmptyRequestNML * p = static_cast<EmptyRequestNML*>(buffer);
                // construct the type at pointer p
                new (p) EmptyRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing EmptyRequest at %p,, is flat\n",buffer);
            }
            break;
        } 
        case EmptyResponse::ID:
        {
            // only need to construct if data type is not flat
            if (EmptyResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing EmptyResponse at %p\n",buffer);
                EmptyResponseNML * p = static_cast<EmptyResponseNML*>(buffer);
                // construct the type at pointer p
                new (p) EmptyResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing EmptyResponse at %p,, is flat\n",buffer);
            }
            break;
        } 
        case Empty::ID:
        {
            // only need to construct if data type is not flat
            if (Empty::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing Empty at %p\n",buffer);
                EmptyNML * p = static_cast<EmptyNML*>(buffer);
                // construct the type at pointer p
                new (p) EmptyNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing Empty at %p,, is flat\n",buffer);
            }
            break;
        } 
        case SetBoolRequest::ID:
        {
            // only need to construct if data type is not flat
            if (SetBoolRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing SetBoolRequest at %p\n",buffer);
                SetBoolRequestNML * p = static_cast<SetBoolRequestNML*>(buffer);
                // construct the type at pointer p
                new (p) SetBoolRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing SetBoolRequest at %p,, is flat\n",buffer);
            }
            break;
        } 
        case SetBoolResponse::ID:
        {
            // only need to construct if data type is not flat
            if (SetBoolResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing SetBoolResponse at %p\n",buffer);
                SetBoolResponseNML * p = static_cast<SetBoolResponseNML*>(buffer);
                // construct the type at pointer p
                new (p) SetBoolResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing SetBoolResponse at %p,, is flat\n",buffer);
            }
            break;
        } 
        case SetBool::ID:
        {
            // only need to construct if data type is not flat
            if (SetBool::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing SetBool at %p\n",buffer);
                SetBoolNML * p = static_cast<SetBoolNML*>(buffer);
                // construct the type at pointer p
                new (p) SetBoolNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing SetBool at %p,, is flat\n",buffer);
            }
            break;
        } 
        case TriggerRequest::ID:
        {
            // only need to construct if data type is not flat
            if (TriggerRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing TriggerRequest at %p\n",buffer);
                TriggerRequestNML * p = static_cast<TriggerRequestNML*>(buffer);
                // construct the type at pointer p
                new (p) TriggerRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing TriggerRequest at %p,, is flat\n",buffer);
            }
            break;
        } 
        case TriggerResponse::ID:
        {
            // only need to construct if data type is not flat
            if (TriggerResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing TriggerResponse at %p\n",buffer);
                TriggerResponseNML * p = static_cast<TriggerResponseNML*>(buffer);
                // construct the type at pointer p
                new (p) TriggerResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing TriggerResponse at %p,, is flat\n",buffer);
            }
            break;
        } 
        case Trigger::ID:
        {
            // only need to construct if data type is not flat
            if (Trigger::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing Trigger at %p\n",buffer);
                TriggerNML * p = static_cast<TriggerNML*>(buffer);
                // construct the type at pointer p
                new (p) TriggerNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing Trigger at %p,, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

int std_srvs_gencppNMLMessageFactory::destructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    if (buffer == nullptr) return retval;

    switch (id)
    { 
        case EmptyRequest::ID:
        {
            // only need to destruct if data type is not flat
            if (EmptyRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing EmptyRequest at %p\n",buffer);
                EmptyRequestNML * p = static_cast<EmptyRequestNML*>(buffer);
                p->~EmptyRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction EmptyRequest at %p, is flat\n",buffer);
            }
            break;
        } 
        case EmptyResponse::ID:
        {
            // only need to destruct if data type is not flat
            if (EmptyResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing EmptyResponse at %p\n",buffer);
                EmptyResponseNML * p = static_cast<EmptyResponseNML*>(buffer);
                p->~EmptyResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction EmptyResponse at %p, is flat\n",buffer);
            }
            break;
        } 
        case Empty::ID:
        {
            // only need to destruct if data type is not flat
            if (Empty::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing Empty at %p\n",buffer);
                EmptyNML * p = static_cast<EmptyNML*>(buffer);
                p->~EmptyNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction Empty at %p, is flat\n",buffer);
            }
            break;
        } 
        case SetBoolRequest::ID:
        {
            // only need to destruct if data type is not flat
            if (SetBoolRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing SetBoolRequest at %p\n",buffer);
                SetBoolRequestNML * p = static_cast<SetBoolRequestNML*>(buffer);
                p->~SetBoolRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction SetBoolRequest at %p, is flat\n",buffer);
            }
            break;
        } 
        case SetBoolResponse::ID:
        {
            // only need to destruct if data type is not flat
            if (SetBoolResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing SetBoolResponse at %p\n",buffer);
                SetBoolResponseNML * p = static_cast<SetBoolResponseNML*>(buffer);
                p->~SetBoolResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction SetBoolResponse at %p, is flat\n",buffer);
            }
            break;
        } 
        case SetBool::ID:
        {
            // only need to destruct if data type is not flat
            if (SetBool::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing SetBool at %p\n",buffer);
                SetBoolNML * p = static_cast<SetBoolNML*>(buffer);
                p->~SetBoolNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction SetBool at %p, is flat\n",buffer);
            }
            break;
        } 
        case TriggerRequest::ID:
        {
            // only need to destruct if data type is not flat
            if (TriggerRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing TriggerRequest at %p\n",buffer);
                TriggerRequestNML * p = static_cast<TriggerRequestNML*>(buffer);
                p->~TriggerRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction TriggerRequest at %p, is flat\n",buffer);
            }
            break;
        } 
        case TriggerResponse::ID:
        {
            // only need to destruct if data type is not flat
            if (TriggerResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing TriggerResponse at %p\n",buffer);
                TriggerResponseNML * p = static_cast<TriggerResponseNML*>(buffer);
                p->~TriggerResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction TriggerResponse at %p, is flat\n",buffer);
            }
            break;
        } 
        case Trigger::ID:
        {
            // only need to destruct if data type is not flat
            if (Trigger::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing Trigger at %p\n",buffer);
                TriggerNML * p = static_cast<TriggerNML*>(buffer);
                p->~TriggerNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction Trigger at %p, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

void std_srvs::nmlupdate(CMS * cms, EmptyRequest & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate EmptyRequest, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

    }  
 }

EmptyRequestNML::EmptyRequestNML() : NMLmsg((NMLTYPE)EmptyRequest::ID,sizeof(EmptyRequestNML)), nmlVersion(EmptyRequest::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new EmptyRequest()*/)
{
};

EmptyRequestNML::~EmptyRequestNML()
{
};

EmptyRequestNML & EmptyRequestNML::operator=(const EmptyRequestNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

EmptyRequestNML & EmptyRequestNML::operator=(const EmptyRequest & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(EmptyRequest);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void EmptyRequestNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<EmptyRequest&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: EmptyRequestNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<EmptyRequest> temp(new EmptyRequest());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: std_srvs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (EmptyRequest::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: EmptyRequest Message version mismatch, expected " << EmptyRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: EmptyRequest Message version mismatch, expected " << EmptyRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void std_srvs::nmlupdate(CMS * cms, EmptyResponse & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate EmptyResponse, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

    }  
 }

EmptyResponseNML::EmptyResponseNML() : NMLmsg((NMLTYPE)EmptyResponse::ID,sizeof(EmptyResponseNML)), nmlVersion(EmptyResponse::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new EmptyResponse()*/)
{
};

EmptyResponseNML::~EmptyResponseNML()
{
};

EmptyResponseNML & EmptyResponseNML::operator=(const EmptyResponseNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

EmptyResponseNML & EmptyResponseNML::operator=(const EmptyResponse & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(EmptyResponse);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void EmptyResponseNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<EmptyResponse&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: EmptyResponseNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<EmptyResponse> temp(new EmptyResponse());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: std_srvs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (EmptyResponse::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: EmptyResponse Message version mismatch, expected " << EmptyResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: EmptyResponse Message version mismatch, expected " << EmptyResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void std_srvs::nmlupdate(CMS * cms, Empty & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate Empty, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.request);
        nmlupdate(cms,inobj.response);

    }  
 }

EmptyNML::EmptyNML() : NMLmsg((NMLTYPE)Empty::ID,sizeof(EmptyNML)), nmlVersion(Empty::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new Empty()*/)
{
};

EmptyNML::~EmptyNML()
{
};

EmptyNML & EmptyNML::operator=(const EmptyNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

EmptyNML & EmptyNML::operator=(const Empty & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(Empty);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void EmptyNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<Empty&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: EmptyNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<Empty> temp(new Empty());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: std_srvs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (Empty::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: Empty Message version mismatch, expected " << Empty::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: Empty Message version mismatch, expected " << Empty::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void std_srvs::nmlupdate(CMS * cms, SetBoolRequest & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate SetBoolRequest, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        cms->update(inobj.data);

    }  
 }

SetBoolRequestNML::SetBoolRequestNML() : NMLmsg((NMLTYPE)SetBoolRequest::ID,sizeof(SetBoolRequestNML)), nmlVersion(SetBoolRequest::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new SetBoolRequest()*/)
{
};

SetBoolRequestNML::~SetBoolRequestNML()
{
};

SetBoolRequestNML & SetBoolRequestNML::operator=(const SetBoolRequestNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

SetBoolRequestNML & SetBoolRequestNML::operator=(const SetBoolRequest & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(SetBoolRequest);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void SetBoolRequestNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<SetBoolRequest&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: SetBoolRequestNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<SetBoolRequest> temp(new SetBoolRequest());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: std_srvs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (SetBoolRequest::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: SetBoolRequest Message version mismatch, expected " << SetBoolRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: SetBoolRequest Message version mismatch, expected " << SetBoolRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void std_srvs::nmlupdate(CMS * cms, SetBoolResponse & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate SetBoolResponse, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        cms->update(inobj.success);
        nmlupdate(cms,inobj.message);

    }  
 }

SetBoolResponseNML::SetBoolResponseNML() : NMLmsg((NMLTYPE)SetBoolResponse::ID,sizeof(SetBoolResponseNML)), nmlVersion(SetBoolResponse::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new SetBoolResponse()*/)
{
};

SetBoolResponseNML::~SetBoolResponseNML()
{
};

SetBoolResponseNML & SetBoolResponseNML::operator=(const SetBoolResponseNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

SetBoolResponseNML & SetBoolResponseNML::operator=(const SetBoolResponse & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(SetBoolResponse);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void SetBoolResponseNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<SetBoolResponse&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: SetBoolResponseNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<SetBoolResponse> temp(new SetBoolResponse());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: std_srvs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (SetBoolResponse::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: SetBoolResponse Message version mismatch, expected " << SetBoolResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: SetBoolResponse Message version mismatch, expected " << SetBoolResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void std_srvs::nmlupdate(CMS * cms, SetBool & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate SetBool, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.request);
        nmlupdate(cms,inobj.response);

    }  
 }

SetBoolNML::SetBoolNML() : NMLmsg((NMLTYPE)SetBool::ID,sizeof(SetBoolNML)), nmlVersion(SetBool::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new SetBool()*/)
{
};

SetBoolNML::~SetBoolNML()
{
};

SetBoolNML & SetBoolNML::operator=(const SetBoolNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

SetBoolNML & SetBoolNML::operator=(const SetBool & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(SetBool);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void SetBoolNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<SetBool&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: SetBoolNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<SetBool> temp(new SetBool());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: std_srvs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (SetBool::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: SetBool Message version mismatch, expected " << SetBool::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: SetBool Message version mismatch, expected " << SetBool::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void std_srvs::nmlupdate(CMS * cms, TriggerRequest & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate TriggerRequest, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

    }  
 }

TriggerRequestNML::TriggerRequestNML() : NMLmsg((NMLTYPE)TriggerRequest::ID,sizeof(TriggerRequestNML)), nmlVersion(TriggerRequest::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new TriggerRequest()*/)
{
};

TriggerRequestNML::~TriggerRequestNML()
{
};

TriggerRequestNML & TriggerRequestNML::operator=(const TriggerRequestNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

TriggerRequestNML & TriggerRequestNML::operator=(const TriggerRequest & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(TriggerRequest);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void TriggerRequestNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<TriggerRequest&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: TriggerRequestNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<TriggerRequest> temp(new TriggerRequest());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: std_srvs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (TriggerRequest::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: TriggerRequest Message version mismatch, expected " << TriggerRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: TriggerRequest Message version mismatch, expected " << TriggerRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void std_srvs::nmlupdate(CMS * cms, TriggerResponse & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate TriggerResponse, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        cms->update(inobj.success);
        nmlupdate(cms,inobj.message);

    }  
 }

TriggerResponseNML::TriggerResponseNML() : NMLmsg((NMLTYPE)TriggerResponse::ID,sizeof(TriggerResponseNML)), nmlVersion(TriggerResponse::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new TriggerResponse()*/)
{
};

TriggerResponseNML::~TriggerResponseNML()
{
};

TriggerResponseNML & TriggerResponseNML::operator=(const TriggerResponseNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

TriggerResponseNML & TriggerResponseNML::operator=(const TriggerResponse & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(TriggerResponse);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void TriggerResponseNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<TriggerResponse&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: TriggerResponseNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<TriggerResponse> temp(new TriggerResponse());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: std_srvs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (TriggerResponse::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: TriggerResponse Message version mismatch, expected " << TriggerResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: TriggerResponse Message version mismatch, expected " << TriggerResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void std_srvs::nmlupdate(CMS * cms, Trigger & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate Trigger, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.request);
        nmlupdate(cms,inobj.response);

    }  
 }

TriggerNML::TriggerNML() : NMLmsg((NMLTYPE)Trigger::ID,sizeof(TriggerNML)), nmlVersion(Trigger::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new Trigger()*/)
{
};

TriggerNML::~TriggerNML()
{
};

TriggerNML & TriggerNML::operator=(const TriggerNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

TriggerNML & TriggerNML::operator=(const Trigger & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(Trigger);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void TriggerNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<Trigger&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: TriggerNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<Trigger> temp(new Trigger());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: std_srvs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (Trigger::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: Trigger Message version mismatch, expected " << Trigger::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: Trigger Message version mismatch, expected " << Trigger::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

int std_srvs::std_srvs_gencpp_format(NMLTYPE type, void * buffer, CMS* cms)
{
    int retval = 1;
    int retval2 = rframe::Error::SUCCESS;

          //printf("std_srvs_gencpp_format: buffer parameters: type: %d, %p, encode: %d\n",(int)type, buffer,cms->mode);

    switch (type)
    { 
        case 0:
        {
            // do nothing, 0 is passed in on buffer creation
            break;
        }
        case EmptyRequest::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for EmptyRequest, id " << EmptyRequest::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_std_srvs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"std_srvs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((EmptyRequestNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case EmptyResponse::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for EmptyResponse, id " << EmptyResponse::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_std_srvs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"std_srvs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((EmptyResponseNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case Empty::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for Empty, id " << Empty::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_std_srvs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"std_srvs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((EmptyNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case SetBoolRequest::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for SetBoolRequest, id " << SetBoolRequest::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_std_srvs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"std_srvs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((SetBoolRequestNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case SetBoolResponse::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for SetBoolResponse, id " << SetBoolResponse::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_std_srvs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"std_srvs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((SetBoolResponseNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case SetBool::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for SetBool, id " << SetBool::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_std_srvs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"std_srvs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((SetBoolNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case TriggerRequest::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for TriggerRequest, id " << TriggerRequest::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_std_srvs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"std_srvs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((TriggerRequestNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case TriggerResponse::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for TriggerResponse, id " << TriggerResponse::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_std_srvs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"std_srvs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((TriggerResponseNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case Trigger::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for Trigger, id " << Trigger::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_std_srvs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"std_srvs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((TriggerNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        }                   
        default:
        {

            retval = 0;
            break;
        }
    }

          //   printf("format done\n");
    return retval;
}


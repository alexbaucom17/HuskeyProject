// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:53 -0500
//  From Template/Script: data_templates/DataClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <math.h> // to allow use of common constants...
#include <common/Error.h>
#include "rospy_tutorials/HeaderString.h"

#include <common/JsonIo.h> // include here so container types are included by the class header 

using namespace std;

const unsigned int rospy_tutorials::HeaderString::ID;
const unsigned int rospy_tutorials::HeaderString::DATA_VERSION;
const std::string rospy_tutorials::HeaderString::DATA_TYPE_NAME = "HeaderString";
const std::string rospy_tutorials::HeaderString::DATA_TYPE_FULL_NAME = "rospy_tutorials::HeaderString";
const std::string rospy_tutorials::HeaderString::VERSION_MD5 = "7ce9a8ab3ad26db97360afbbbfac2f55";
/* xml source for this class */
const std::string rospy_tutorials::HeaderString::XML_SOURCE = "<class name=\"HeaderString\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"c99a9440709e4d4a9716d55b8270d5e7\" rosDesc=\"Header header\\nstring data\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\" comment=\"\" id=\"862848160\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"data\" type=\"string\" sourceType=\"string\" comment=\"\"/>\
</class>";

rospy_tutorials::HeaderString::HeaderString() : header(), data()
{  
};

rospy_tutorials::HeaderString::HeaderString(const rospy_tutorials::HeaderString & inobj) : header(inobj.header), data(inobj.data)
{
};

rospy_tutorials::HeaderString::~HeaderString()
{
};

rospy_tutorials::HeaderString * rospy_tutorials::HeaderString::New()
{ 
    return new HeaderString();
};

bool rospy_tutorials::HeaderString::dataTypeFlat() 
{  
    return std_msgs::Header::dataTypeFlat() && rframe::CodeGenTraits<std::string>::flat();

};

rospy_tutorials::HeaderString & rospy_tutorials::HeaderString::operator=(const rospy_tutorials::HeaderString & inobj)
{
    if (this != &inobj)
    {

        // if datatype is flat, optimize with memcpy (complier level optimiation)
              /*  if (dataTypeFlat() == true)
                  REMOVED invalid when assigning from a parent type as this is the pointer to the derived type, thus rospy_tutorials::HeaderString is copied to the wrong location

        {
            memcpy(this,&inobj,sizeof(rospy_tutorials::HeaderString));
        }
        else */ 
        {

            header = inobj.header;
            data = inobj.data;
        }
    }

    return *this;
}

bool rospy_tutorials::HeaderString::operator==(const rospy_tutorials::HeaderString & inobj) const
{
    bool ret = true;

    if (this != &inobj)
    { 
        ret = ret 
             && (header == inobj.header)
             && (data == inobj.data);
    }

    return ret;
}

bool rospy_tutorials::HeaderString::operator!=(const rospy_tutorials::HeaderString & inobj) const
{
    bool ret = false;

    if (this != &inobj)
    {
        ret = !operator==(inobj);
    }

    return ret;
}

bool rospy_tutorials::HeaderString::operator<(const rospy_tutorials::HeaderString & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {  
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (header < inobj.header) return true;
        if (inobj.header <  header) return false; 
        if (data < inobj.data) return true;
        if (inobj.data <  data) return false; ;
    }

    return ret;
}

bool rospy_tutorials::HeaderString::operator>(const rospy_tutorials::HeaderString & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (header > inobj.header) return true;
        if (inobj.header >  header) return false; 
        if (data > inobj.data) return true;
        if (inobj.data >  data) return false; ;
    }

    return ret;
}

template <> void rframe::json_io::encode(std::stringstream & sstr, const char * name, const rospy_tutorials::HeaderString & t, std::string & indent, bool lastItem)
{
    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectStart(sstr,name,indent);

    rframe::json_io::encode(sstr,"header",t.header,indent,false);
    rframe::json_io::encode(sstr,"data",t.data,indent,true);

    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectEnd(sstr,indent,lastItem);
}

std::string rospy_tutorials::HeaderString::toStr(bool pretty) const
{

    stringstream sstr;
    string indent = (pretty == true) ? "\n" : "";

    rframe::json_io::encodeObjectStartMain(sstr,indent);
    rframe::json_io::encode(sstr,"",*this,indent,true);
    rframe::json_io::encodeObjectEnd(sstr,indent,true); // false so as to  not add , at end of string

    return sstr.str();

};

std::basic_ostream<char>& operator<<(std::basic_ostream<char> &s, const rospy_tutorials::HeaderString & value)
{
    return s << value.toStr(false);
}


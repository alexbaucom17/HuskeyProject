// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-26 15:57:07 -0500
//  From Template/Script: data_templates/ROSTemplate.cpp.rb
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "rospy_tutorials_gencpp_ROS.h"
#include <common/Log.h>
#include <common/DataTypeInfo.h>

using namespace std;
using namespace rospy_tutorials;

rframe::ROSMessageFactory * ROS_rospy_tutorials_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        ROS_rospy_tutorials_gencppfactory = new rospy_tutorials_gencppROSMessageFactory();

        return ROS_rospy_tutorials_gencppfactory;
    };
}

rframe::ROSMessageFactory * rospy_tutorials::allocate_rospy_tutorials_gencpp()
{
    ROS_rospy_tutorials_gencppfactory = new rospy_tutorials_gencppROSMessageFactory();
    return ROS_rospy_tutorials_gencppfactory;
};

rospy_tutorials_gencppROSMessageFactory::rospy_tutorials_gencppROSMessageFactory()
{
    name("rospy_tutorials_gencpp");
    // use constructor to register data types
    rospy_tutorials::registerLibrary();
}

rospy_tutorials_gencppROSMessageFactory::~rospy_tutorials_gencppROSMessageFactory()
{
}

int rospy_tutorials_gencppROSMessageFactory::dataType(ros::SerializedMessage & msg)
{
    return msg.message_type;
}

void rospy_tutorials_gencppROSMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(Floats::ID);
    info.name(Floats::DATA_TYPE_FULL_NAME);
    info.hashKey(Floats::DATA_VERSION);
    info.md5Key(Floats::VERSION_MD5);
    info.xmlSource(Floats::XML_SOURCE);
    info.flat(Floats::dataTypeFlat());
    ids.push_back(info);

    info.id(HeaderString::ID);
    info.name(HeaderString::DATA_TYPE_FULL_NAME);
    info.hashKey(HeaderString::DATA_VERSION);
    info.md5Key(HeaderString::VERSION_MD5);
    info.xmlSource(HeaderString::XML_SOURCE);
    info.flat(HeaderString::dataTypeFlat());
    ids.push_back(info);

    info.id(AddTwoIntsRequest::ID);
    info.name(AddTwoIntsRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(AddTwoIntsRequest::DATA_VERSION);
    info.md5Key(AddTwoIntsRequest::VERSION_MD5);
    info.xmlSource(AddTwoIntsRequest::XML_SOURCE);
    info.flat(AddTwoIntsRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(AddTwoIntsResponse::ID);
    info.name(AddTwoIntsResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(AddTwoIntsResponse::DATA_VERSION);
    info.md5Key(AddTwoIntsResponse::VERSION_MD5);
    info.xmlSource(AddTwoIntsResponse::XML_SOURCE);
    info.flat(AddTwoIntsResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(AddTwoInts::ID);
    info.name(AddTwoInts::DATA_TYPE_FULL_NAME);
    info.hashKey(AddTwoInts::DATA_VERSION);
    info.md5Key(AddTwoInts::VERSION_MD5);
    info.xmlSource(AddTwoInts::XML_SOURCE);
    info.flat(AddTwoInts::dataTypeFlat());
    ids.push_back(info);

    info.id(BadTwoIntsRequest::ID);
    info.name(BadTwoIntsRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(BadTwoIntsRequest::DATA_VERSION);
    info.md5Key(BadTwoIntsRequest::VERSION_MD5);
    info.xmlSource(BadTwoIntsRequest::XML_SOURCE);
    info.flat(BadTwoIntsRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(BadTwoIntsResponse::ID);
    info.name(BadTwoIntsResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(BadTwoIntsResponse::DATA_VERSION);
    info.md5Key(BadTwoIntsResponse::VERSION_MD5);
    info.xmlSource(BadTwoIntsResponse::XML_SOURCE);
    info.flat(BadTwoIntsResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(BadTwoInts::ID);
    info.name(BadTwoInts::DATA_TYPE_FULL_NAME);
    info.hashKey(BadTwoInts::DATA_VERSION);
    info.md5Key(BadTwoInts::VERSION_MD5);
    info.xmlSource(BadTwoInts::XML_SOURCE);
    info.flat(BadTwoInts::dataTypeFlat());
    ids.push_back(info);

}

int rospy_tutorials_gencppROSMessageFactory::typeName(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case Floats::ID:
        {
            str = "rospy_tutorials/Floats";
            break;
        }
        case HeaderString::ID:
        {
            str = "rospy_tutorials/HeaderString";
            break;
        }
        case AddTwoIntsRequest::ID:
        {
            str = "rospy_tutorials/AddTwoIntsRequest";
            break;
        }
        case AddTwoIntsResponse::ID:
        {
            str = "rospy_tutorials/AddTwoIntsResponse";
            break;
        }
        case AddTwoInts::ID:
        {
            str = "rospy_tutorials/AddTwoInts";
            break;
        }
        case BadTwoIntsRequest::ID:
        {
            str = "rospy_tutorials/BadTwoIntsRequest";
            break;
        }
        case BadTwoIntsResponse::ID:
        {
            str = "rospy_tutorials/BadTwoIntsResponse";
            break;
        }
        case BadTwoInts::ID:
        {
            str = "rospy_tutorials/BadTwoInts";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int rospy_tutorials_gencppROSMessageFactory::desc(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case Floats::ID:
        {
            str = "float32[] data\n";
            break;
        }
        case HeaderString::ID:
        {
            str = "Header header\nstring data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n";
            break;
        }
        case AddTwoIntsRequest::ID:
        {
            str = AddTwoIntsRequest::XML_SOURCE;
            break;
        }
        case AddTwoIntsResponse::ID:
        {
            str = AddTwoIntsResponse::XML_SOURCE;
            break;
        }
        case AddTwoInts::ID:
        {
            str = AddTwoInts::XML_SOURCE;
            break;
        }
        case BadTwoIntsRequest::ID:
        {
            str = BadTwoIntsRequest::XML_SOURCE;
            break;
        }
        case BadTwoIntsResponse::ID:
        {
            str = BadTwoIntsResponse::XML_SOURCE;
            break;
        }
        case BadTwoInts::ID:
        {
            str = BadTwoInts::XML_SOURCE;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int rospy_tutorials_gencppROSMessageFactory::md5String(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case Floats::ID:
        {
            str = "420cd38b6b071cd49f2970c3e2cee511";
            break;
        }
        case HeaderString::ID:
        {
            str = "c99a9440709e4d4a9716d55b8270d5e7";
            break;
        }
        case AddTwoIntsRequest::ID:
        {
            str = "36d09b846be0b371c5f190354dd3153e";
            break;
        }
        case AddTwoIntsResponse::ID:
        {
            str = "b88405221c77b1878a3cbbfff53428d7";
            break;
        }
        case AddTwoInts::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case BadTwoIntsRequest::ID:
        {
            str = "29bb5c7dea8bf822f53e94b0ee5a3a56";
            break;
        }
        case BadTwoIntsResponse::ID:
        {
            str = "0ba699c25c9418c0366f3595c0c8e8ec";
            break;
        }
        case BadTwoInts::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int rospy_tutorials_gencppROSMessageFactory::md5(unsigned long long & highOrder, unsigned long long & lowOrder, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case Floats::ID:
        {   
		    highOrder = 0x420cd38b6b071cd4ULL;
            lowOrder = 0x9f2970c3e2cee511ULL;
            break;
        }
        case HeaderString::ID:
        {   
		    highOrder = 0xc99a9440709e4d4aULL;
            lowOrder = 0x9716d55b8270d5e7ULL;
            break;
        }
        case AddTwoIntsRequest::ID:
        {   
		    highOrder = 0x36d09b846be0b371ULL;
            lowOrder = 0xc5f190354dd3153eULL;
            break;
        }
        case AddTwoIntsResponse::ID:
        {   
		    highOrder = 0xb88405221c77b187ULL;
            lowOrder = 0x8a3cbbfff53428d7ULL;
            break;
        }
        case AddTwoInts::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case BadTwoIntsRequest::ID:
        {   
		    highOrder = 0x29bb5c7dea8bf822ULL;
            lowOrder = 0xf53e94b0ee5a3a56ULL;
            break;
        }
        case BadTwoIntsResponse::ID:
        {   
		    highOrder = 0x0ba699c25c9418c0ULL;
            lowOrder = 0x366f3595c0c8e8ecULL;
            break;
        }
        case BadTwoInts::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int rospy_tutorials_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<ros::SerializedMessage> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case Floats::ID:
        case HeaderString::ID:
        case AddTwoIntsRequest::ID:
        case AddTwoIntsResponse::ID:
        case AddTwoInts::ID:
        case BadTwoIntsRequest::ID:
        case BadTwoIntsResponse::ID:
        case BadTwoInts::ID:
        {
            break;
        } 
        default:
	    {
            retval = rframe::Error::PARAM_RANGE;
            break;
	    }
    }

    if (retval == rframe::Error::SUCCESS)
	{
        std::shared_ptr<ros::SerializedMessage> newmsg(new ros::SerializedMessage);

        if (newmsg.get() == NULL)
	    {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else
	    {
            newmsg->message_type = id;
            msg.swap(newmsg);
        }
    }

    return retval;
}

int rospy_tutorials_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case Floats::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<Floats>(),std::bind(&rospy_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case HeaderString::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<HeaderString>(),std::bind(&rospy_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AddTwoIntsRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AddTwoIntsRequest>(),std::bind(&rospy_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AddTwoIntsResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AddTwoIntsResponse>(),std::bind(&rospy_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AddTwoInts::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AddTwoInts>(),std::bind(&rospy_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case BadTwoIntsRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<BadTwoIntsRequest>(),std::bind(&rospy_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case BadTwoIntsResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<BadTwoIntsResponse>(),std::bind(&rospy_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case BadTwoInts::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<BadTwoInts>(),std::bind(&rospy_tutorials_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            retval = rframe::Error::PARAM_RANGE;
        }
    }

    return retval;
}

int rospy_tutorials_gencppROSMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
	{
        delete msg;
    }

    return retval;
}

int rospy_tutorials_gencppROSMessageFactory::deallocateTransport(ros::SerializedMessage * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        delete msg;
    }

    return retval;
}

int rospy_tutorials_gencppROSMessageFactory::toTransport(MessageBase & src, ros::SerializedMessage & dst)
{
    int retval = rframe::Error::SUCCESS;

    if (dst.message_type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.message_type)
        { 
            case Floats::ID:
            {
                Message<Floats > & tempSrc = static_cast<Message<Floats>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: rospy_tutorials_gencpp::Floats buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case HeaderString::ID:
            {
                Message<HeaderString > & tempSrc = static_cast<Message<HeaderString>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: rospy_tutorials_gencpp::HeaderString buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case AddTwoIntsRequest::ID:
            {
                Message<AddTwoIntsRequest > & tempSrc = static_cast<Message<AddTwoIntsRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: rospy_tutorials_gencpp::AddTwoIntsRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case AddTwoIntsResponse::ID:
            {
                Message<AddTwoIntsResponse > & tempSrc = static_cast<Message<AddTwoIntsResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: rospy_tutorials_gencpp::AddTwoIntsResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case AddTwoInts::ID:
            {
                Message<AddTwoInts > & tempSrc = static_cast<Message<AddTwoInts>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: rospy_tutorials_gencpp::AddTwoInts buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case BadTwoIntsRequest::ID:
            {
                Message<BadTwoIntsRequest > & tempSrc = static_cast<Message<BadTwoIntsRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: rospy_tutorials_gencpp::BadTwoIntsRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case BadTwoIntsResponse::ID:
            {
                Message<BadTwoIntsResponse > & tempSrc = static_cast<Message<BadTwoIntsResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: rospy_tutorials_gencpp::BadTwoIntsResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case BadTwoInts::ID:
            {
                Message<BadTwoInts > & tempSrc = static_cast<Message<BadTwoInts>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: rospy_tutorials_gencpp::BadTwoInts buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int rospy_tutorials_gencppROSMessageFactory::fromTransport(ros::SerializedMessage & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.message_type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.message_type)
        { 
            case Floats::ID:
            {
                Message<Floats > & tempDst = static_cast<Message<Floats>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case HeaderString::ID:
            {
                Message<HeaderString > & tempDst = static_cast<Message<HeaderString>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case AddTwoIntsRequest::ID:
            {
                Message<AddTwoIntsRequest > & tempDst = static_cast<Message<AddTwoIntsRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case AddTwoIntsResponse::ID:
            {
                Message<AddTwoIntsResponse > & tempDst = static_cast<Message<AddTwoIntsResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case AddTwoInts::ID:
            {
                Message<AddTwoInts > & tempDst = static_cast<Message<AddTwoInts>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case BadTwoIntsRequest::ID:
            {
                Message<BadTwoIntsRequest > & tempDst = static_cast<Message<BadTwoIntsRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case BadTwoIntsResponse::ID:
            {
                Message<BadTwoIntsResponse > & tempDst = static_cast<Message<BadTwoIntsResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case BadTwoInts::ID:
            {
                Message<BadTwoInts > & tempDst = static_cast<Message<BadTwoInts>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int rospy_tutorials_gencppROSMessageFactory::updateHeader(rframe::MessageBase &msg, unsigned int seqNo)
{
    int retval = rframe::Error::SUCCESS;

    switch (msg.id())
    {   
        // Floats does not have a Header as its first member 
        case HeaderString::ID:
        {
            Message<HeaderString > & tempMsg = static_cast<Message<HeaderString>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        // AddTwoIntsRequest does not have a Header as its first member 
        // AddTwoIntsResponse does not have a Header as its first member 
        // AddTwoInts does not have a Header as its first member 
        // BadTwoIntsRequest does not have a Header as its first member 
        // BadTwoIntsResponse does not have a Header as its first member 
        // BadTwoInts does not have a Header as its first member 
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

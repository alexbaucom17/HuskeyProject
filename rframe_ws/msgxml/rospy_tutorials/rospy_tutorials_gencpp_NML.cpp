// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:53 -0500
//  From Template/Script: data_templates/NMLClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <stdio.h>
// main rcslib header
#include <nml.hh>
// cms updater header
#include <cms_up.hh>
#include <cms_pup.hh>

#include <common/Error.h>
#include <common/Log.h>
#include <common/Common.h>
#include <common/DataTypeInfo.h>

#include "rospy_tutorials_gencpp_NML.h"
#include "rospy_tutorials_gencpp_Library.h"
#include <messaging/nml/NMLSupport.h>
#include <interfaces/MessageFactoryInterface.h>

#include <Floats.h>
#include <HeaderString.h>
#include <AddTwoIntsRequest.h>
#include <AddTwoIntsResponse.h>
#include <AddTwoInts.h>
#include <BadTwoIntsRequest.h>
#include <BadTwoIntsResponse.h>
#include <BadTwoInts.h>

#include <boost/iostreams/stream_buffer.hpp>
#include <boost/iostreams/stream.hpp>

#include <boost/serialization/serialization.hpp>
#include <opensource/eos/archive/portable_iarchive.hpp>
#include <opensource/eos/archive/portable_oarchive.hpp>

using namespace std;
using namespace rospy_tutorials;

rframe::NMLMessageFactory * NML_rospy_tutorials_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        NML_rospy_tutorials_gencppfactory = new rospy_tutorials_gencppNMLMessageFactory();
        return NML_rospy_tutorials_gencppfactory;
    };
}

rframe::NMLMessageFactory * rospy_tutorials::allocate_rospy_tutorials_gencpp()
{
    NML_rospy_tutorials_gencppfactory = new rospy_tutorials_gencppNMLMessageFactory();
    return NML_rospy_tutorials_gencppfactory;
};

rospy_tutorials_gencppNMLMessageFactory::rospy_tutorials_gencppNMLMessageFactory()
{
    name("rospy_tutorials_gencpp");
    // use constructor to register data types
    rospy_tutorials::registerLibrary();
}

rospy_tutorials_gencppNMLMessageFactory::~rospy_tutorials_gencppNMLMessageFactory()
{
}

NML_FORMAT_PTR rospy_tutorials_gencppNMLMessageFactory::FormatPointer()
{
    return rospy_tutorials_gencpp_format;
}

int rospy_tutorials_gencppNMLMessageFactory::dataType(NMLmsg & msg)
{
    return msg.type;
}

void rospy_tutorials_gencppNMLMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(Floats::ID);
    info.name(Floats::DATA_TYPE_FULL_NAME);
    info.hashKey(Floats::DATA_VERSION);
    info.md5Key(Floats::VERSION_MD5);
    info.xmlSource(Floats::XML_SOURCE);
    info.flat(Floats::dataTypeFlat());
    ids.push_back(info);

    info.id(HeaderString::ID);
    info.name(HeaderString::DATA_TYPE_FULL_NAME);
    info.hashKey(HeaderString::DATA_VERSION);
    info.md5Key(HeaderString::VERSION_MD5);
    info.xmlSource(HeaderString::XML_SOURCE);
    info.flat(HeaderString::dataTypeFlat());
    ids.push_back(info);

    info.id(AddTwoIntsRequest::ID);
    info.name(AddTwoIntsRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(AddTwoIntsRequest::DATA_VERSION);
    info.md5Key(AddTwoIntsRequest::VERSION_MD5);
    info.xmlSource(AddTwoIntsRequest::XML_SOURCE);
    info.flat(AddTwoIntsRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(AddTwoIntsResponse::ID);
    info.name(AddTwoIntsResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(AddTwoIntsResponse::DATA_VERSION);
    info.md5Key(AddTwoIntsResponse::VERSION_MD5);
    info.xmlSource(AddTwoIntsResponse::XML_SOURCE);
    info.flat(AddTwoIntsResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(AddTwoInts::ID);
    info.name(AddTwoInts::DATA_TYPE_FULL_NAME);
    info.hashKey(AddTwoInts::DATA_VERSION);
    info.md5Key(AddTwoInts::VERSION_MD5);
    info.xmlSource(AddTwoInts::XML_SOURCE);
    info.flat(AddTwoInts::dataTypeFlat());
    ids.push_back(info);

    info.id(BadTwoIntsRequest::ID);
    info.name(BadTwoIntsRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(BadTwoIntsRequest::DATA_VERSION);
    info.md5Key(BadTwoIntsRequest::VERSION_MD5);
    info.xmlSource(BadTwoIntsRequest::XML_SOURCE);
    info.flat(BadTwoIntsRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(BadTwoIntsResponse::ID);
    info.name(BadTwoIntsResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(BadTwoIntsResponse::DATA_VERSION);
    info.md5Key(BadTwoIntsResponse::VERSION_MD5);
    info.xmlSource(BadTwoIntsResponse::XML_SOURCE);
    info.flat(BadTwoIntsResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(BadTwoInts::ID);
    info.name(BadTwoInts::DATA_TYPE_FULL_NAME);
    info.hashKey(BadTwoInts::DATA_VERSION);
    info.md5Key(BadTwoInts::VERSION_MD5);
    info.xmlSource(BadTwoInts::XML_SOURCE);
    info.flat(BadTwoInts::dataTypeFlat());
    ids.push_back(info);

}

int rospy_tutorials_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<NMLmsg> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case Floats::ID:
        {
            //FloatsNML * newmsg = new FloatsNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new FloatsNML(),std::bind(&rospy_tutorials_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case HeaderString::ID:
        {
            //HeaderStringNML * newmsg = new HeaderStringNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new HeaderStringNML(),std::bind(&rospy_tutorials_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case AddTwoIntsRequest::ID:
        {
            //AddTwoIntsRequestNML * newmsg = new AddTwoIntsRequestNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new AddTwoIntsRequestNML(),std::bind(&rospy_tutorials_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case AddTwoIntsResponse::ID:
        {
            //AddTwoIntsResponseNML * newmsg = new AddTwoIntsResponseNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new AddTwoIntsResponseNML(),std::bind(&rospy_tutorials_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case AddTwoInts::ID:
        {
            //AddTwoIntsNML * newmsg = new AddTwoIntsNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new AddTwoIntsNML(),std::bind(&rospy_tutorials_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case BadTwoIntsRequest::ID:
        {
            //BadTwoIntsRequestNML * newmsg = new BadTwoIntsRequestNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new BadTwoIntsRequestNML(),std::bind(&rospy_tutorials_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case BadTwoIntsResponse::ID:
        {
            //BadTwoIntsResponseNML * newmsg = new BadTwoIntsResponseNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new BadTwoIntsResponseNML(),std::bind(&rospy_tutorials_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case BadTwoInts::ID:
        {
            //BadTwoIntsNML * newmsg = new BadTwoIntsNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new BadTwoIntsNML(),std::bind(&rospy_tutorials_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int rospy_tutorials_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case Floats::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<Floats>(),std::bind(&rospy_tutorials_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case HeaderString::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<HeaderString>(),std::bind(&rospy_tutorials_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AddTwoIntsRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AddTwoIntsRequest>(),std::bind(&rospy_tutorials_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AddTwoIntsResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AddTwoIntsResponse>(),std::bind(&rospy_tutorials_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AddTwoInts::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AddTwoInts>(),std::bind(&rospy_tutorials_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case BadTwoIntsRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<BadTwoIntsRequest>(),std::bind(&rospy_tutorials_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case BadTwoIntsResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<BadTwoIntsResponse>(),std::bind(&rospy_tutorials_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case BadTwoInts::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<BadTwoInts>(),std::bind(&rospy_tutorials_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int rospy_tutorials_gencppNMLMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    delete msg;

    return retval;
}

int rospy_tutorials_gencppNMLMessageFactory::deallocateTransport(NMLmsg * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        switch (msg->type)
        { 
            case Floats::ID:
            {
                FloatsNML * tempmsg = static_cast<FloatsNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case HeaderString::ID:
            {
                HeaderStringNML * tempmsg = static_cast<HeaderStringNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case AddTwoIntsRequest::ID:
            {
                AddTwoIntsRequestNML * tempmsg = static_cast<AddTwoIntsRequestNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case AddTwoIntsResponse::ID:
            {
                AddTwoIntsResponseNML * tempmsg = static_cast<AddTwoIntsResponseNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case AddTwoInts::ID:
            {
                AddTwoIntsNML * tempmsg = static_cast<AddTwoIntsNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case BadTwoIntsRequest::ID:
            {
                BadTwoIntsRequestNML * tempmsg = static_cast<BadTwoIntsRequestNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case BadTwoIntsResponse::ID:
            {
                BadTwoIntsResponseNML * tempmsg = static_cast<BadTwoIntsResponseNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case BadTwoInts::ID:
            {
                BadTwoIntsNML * tempmsg = static_cast<BadTwoIntsNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            default:
            {
                retval = Error::NOT_FOUND;
                break;
            }
        }
    }

    return retval;
}

int rospy_tutorials_gencppNMLMessageFactory::toTransport(MessageBase & src, NMLmsg & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)dst.type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.type)
        { 
            case Floats::ID:
            {
                FloatsNML & tempDst = static_cast<FloatsNML&>(dst);
                Message<Floats > & tempSrc = static_cast<Message<Floats>&>(src);

                if (tempSrc.version() != Floats::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of Floats: " << __FILE__ << " expected: " 
                             << Floats::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of Floats: " << __FILE__ << " expected: " 
                         << Floats::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case HeaderString::ID:
            {
                HeaderStringNML & tempDst = static_cast<HeaderStringNML&>(dst);
                Message<HeaderString > & tempSrc = static_cast<Message<HeaderString>&>(src);

                if (tempSrc.version() != HeaderString::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of HeaderString: " << __FILE__ << " expected: " 
                             << HeaderString::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of HeaderString: " << __FILE__ << " expected: " 
                         << HeaderString::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case AddTwoIntsRequest::ID:
            {
                AddTwoIntsRequestNML & tempDst = static_cast<AddTwoIntsRequestNML&>(dst);
                Message<AddTwoIntsRequest > & tempSrc = static_cast<Message<AddTwoIntsRequest>&>(src);

                if (tempSrc.version() != AddTwoIntsRequest::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of AddTwoIntsRequest: " << __FILE__ << " expected: " 
                             << AddTwoIntsRequest::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of AddTwoIntsRequest: " << __FILE__ << " expected: " 
                         << AddTwoIntsRequest::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case AddTwoIntsResponse::ID:
            {
                AddTwoIntsResponseNML & tempDst = static_cast<AddTwoIntsResponseNML&>(dst);
                Message<AddTwoIntsResponse > & tempSrc = static_cast<Message<AddTwoIntsResponse>&>(src);

                if (tempSrc.version() != AddTwoIntsResponse::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of AddTwoIntsResponse: " << __FILE__ << " expected: " 
                             << AddTwoIntsResponse::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of AddTwoIntsResponse: " << __FILE__ << " expected: " 
                         << AddTwoIntsResponse::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case AddTwoInts::ID:
            {
                AddTwoIntsNML & tempDst = static_cast<AddTwoIntsNML&>(dst);
                Message<AddTwoInts > & tempSrc = static_cast<Message<AddTwoInts>&>(src);

                if (tempSrc.version() != AddTwoInts::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of AddTwoInts: " << __FILE__ << " expected: " 
                             << AddTwoInts::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of AddTwoInts: " << __FILE__ << " expected: " 
                         << AddTwoInts::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case BadTwoIntsRequest::ID:
            {
                BadTwoIntsRequestNML & tempDst = static_cast<BadTwoIntsRequestNML&>(dst);
                Message<BadTwoIntsRequest > & tempSrc = static_cast<Message<BadTwoIntsRequest>&>(src);

                if (tempSrc.version() != BadTwoIntsRequest::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of BadTwoIntsRequest: " << __FILE__ << " expected: " 
                             << BadTwoIntsRequest::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of BadTwoIntsRequest: " << __FILE__ << " expected: " 
                         << BadTwoIntsRequest::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case BadTwoIntsResponse::ID:
            {
                BadTwoIntsResponseNML & tempDst = static_cast<BadTwoIntsResponseNML&>(dst);
                Message<BadTwoIntsResponse > & tempSrc = static_cast<Message<BadTwoIntsResponse>&>(src);

                if (tempSrc.version() != BadTwoIntsResponse::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of BadTwoIntsResponse: " << __FILE__ << " expected: " 
                             << BadTwoIntsResponse::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of BadTwoIntsResponse: " << __FILE__ << " expected: " 
                         << BadTwoIntsResponse::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case BadTwoInts::ID:
            {
                BadTwoIntsNML & tempDst = static_cast<BadTwoIntsNML&>(dst);
                Message<BadTwoInts > & tempSrc = static_cast<Message<BadTwoInts>&>(src);

                if (tempSrc.version() != BadTwoInts::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of BadTwoInts: " << __FILE__ << " expected: " 
                             << BadTwoInts::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of BadTwoInts: " << __FILE__ << " expected: " 
                         << BadTwoInts::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int rospy_tutorials_gencppNMLMessageFactory::fromTransport(NMLmsg & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.type)
        { 
            case Floats::ID:
            {
                FloatsNML & tempSrc = static_cast<FloatsNML&>(src);
                Message<Floats > & tempDst = static_cast<Message<Floats>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (Floats::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case HeaderString::ID:
            {
                HeaderStringNML & tempSrc = static_cast<HeaderStringNML&>(src);
                Message<HeaderString > & tempDst = static_cast<Message<HeaderString>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (HeaderString::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case AddTwoIntsRequest::ID:
            {
                AddTwoIntsRequestNML & tempSrc = static_cast<AddTwoIntsRequestNML&>(src);
                Message<AddTwoIntsRequest > & tempDst = static_cast<Message<AddTwoIntsRequest>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (AddTwoIntsRequest::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case AddTwoIntsResponse::ID:
            {
                AddTwoIntsResponseNML & tempSrc = static_cast<AddTwoIntsResponseNML&>(src);
                Message<AddTwoIntsResponse > & tempDst = static_cast<Message<AddTwoIntsResponse>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (AddTwoIntsResponse::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case AddTwoInts::ID:
            {
                AddTwoIntsNML & tempSrc = static_cast<AddTwoIntsNML&>(src);
                Message<AddTwoInts > & tempDst = static_cast<Message<AddTwoInts>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (AddTwoInts::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case BadTwoIntsRequest::ID:
            {
                BadTwoIntsRequestNML & tempSrc = static_cast<BadTwoIntsRequestNML&>(src);
                Message<BadTwoIntsRequest > & tempDst = static_cast<Message<BadTwoIntsRequest>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (BadTwoIntsRequest::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case BadTwoIntsResponse::ID:
            {
                BadTwoIntsResponseNML & tempSrc = static_cast<BadTwoIntsResponseNML&>(src);
                Message<BadTwoIntsResponse > & tempDst = static_cast<Message<BadTwoIntsResponse>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (BadTwoIntsResponse::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case BadTwoInts::ID:
            {
                BadTwoIntsNML & tempSrc = static_cast<BadTwoIntsNML&>(src);
                Message<BadTwoInts > & tempDst = static_cast<Message<BadTwoInts>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (BadTwoInts::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int rospy_tutorials_gencppNMLMessageFactory::constructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    switch (id)
    { 
        case Floats::ID:
        {
            // only need to construct if data type is not flat
            if (Floats::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing Floats at %p\n",buffer);
                FloatsNML * p = static_cast<FloatsNML*>(buffer);
                // construct the type at pointer p
                new (p) FloatsNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing Floats at %p,, is flat\n",buffer);
            }
            break;
        } 
        case HeaderString::ID:
        {
            // only need to construct if data type is not flat
            if (HeaderString::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing HeaderString at %p\n",buffer);
                HeaderStringNML * p = static_cast<HeaderStringNML*>(buffer);
                // construct the type at pointer p
                new (p) HeaderStringNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing HeaderString at %p,, is flat\n",buffer);
            }
            break;
        } 
        case AddTwoIntsRequest::ID:
        {
            // only need to construct if data type is not flat
            if (AddTwoIntsRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing AddTwoIntsRequest at %p\n",buffer);
                AddTwoIntsRequestNML * p = static_cast<AddTwoIntsRequestNML*>(buffer);
                // construct the type at pointer p
                new (p) AddTwoIntsRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing AddTwoIntsRequest at %p,, is flat\n",buffer);
            }
            break;
        } 
        case AddTwoIntsResponse::ID:
        {
            // only need to construct if data type is not flat
            if (AddTwoIntsResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing AddTwoIntsResponse at %p\n",buffer);
                AddTwoIntsResponseNML * p = static_cast<AddTwoIntsResponseNML*>(buffer);
                // construct the type at pointer p
                new (p) AddTwoIntsResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing AddTwoIntsResponse at %p,, is flat\n",buffer);
            }
            break;
        } 
        case AddTwoInts::ID:
        {
            // only need to construct if data type is not flat
            if (AddTwoInts::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing AddTwoInts at %p\n",buffer);
                AddTwoIntsNML * p = static_cast<AddTwoIntsNML*>(buffer);
                // construct the type at pointer p
                new (p) AddTwoIntsNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing AddTwoInts at %p,, is flat\n",buffer);
            }
            break;
        } 
        case BadTwoIntsRequest::ID:
        {
            // only need to construct if data type is not flat
            if (BadTwoIntsRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing BadTwoIntsRequest at %p\n",buffer);
                BadTwoIntsRequestNML * p = static_cast<BadTwoIntsRequestNML*>(buffer);
                // construct the type at pointer p
                new (p) BadTwoIntsRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing BadTwoIntsRequest at %p,, is flat\n",buffer);
            }
            break;
        } 
        case BadTwoIntsResponse::ID:
        {
            // only need to construct if data type is not flat
            if (BadTwoIntsResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing BadTwoIntsResponse at %p\n",buffer);
                BadTwoIntsResponseNML * p = static_cast<BadTwoIntsResponseNML*>(buffer);
                // construct the type at pointer p
                new (p) BadTwoIntsResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing BadTwoIntsResponse at %p,, is flat\n",buffer);
            }
            break;
        } 
        case BadTwoInts::ID:
        {
            // only need to construct if data type is not flat
            if (BadTwoInts::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing BadTwoInts at %p\n",buffer);
                BadTwoIntsNML * p = static_cast<BadTwoIntsNML*>(buffer);
                // construct the type at pointer p
                new (p) BadTwoIntsNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing BadTwoInts at %p,, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

int rospy_tutorials_gencppNMLMessageFactory::destructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    if (buffer == nullptr) return retval;

    switch (id)
    { 
        case Floats::ID:
        {
            // only need to destruct if data type is not flat
            if (Floats::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing Floats at %p\n",buffer);
                FloatsNML * p = static_cast<FloatsNML*>(buffer);
                p->~FloatsNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction Floats at %p, is flat\n",buffer);
            }
            break;
        } 
        case HeaderString::ID:
        {
            // only need to destruct if data type is not flat
            if (HeaderString::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing HeaderString at %p\n",buffer);
                HeaderStringNML * p = static_cast<HeaderStringNML*>(buffer);
                p->~HeaderStringNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction HeaderString at %p, is flat\n",buffer);
            }
            break;
        } 
        case AddTwoIntsRequest::ID:
        {
            // only need to destruct if data type is not flat
            if (AddTwoIntsRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing AddTwoIntsRequest at %p\n",buffer);
                AddTwoIntsRequestNML * p = static_cast<AddTwoIntsRequestNML*>(buffer);
                p->~AddTwoIntsRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction AddTwoIntsRequest at %p, is flat\n",buffer);
            }
            break;
        } 
        case AddTwoIntsResponse::ID:
        {
            // only need to destruct if data type is not flat
            if (AddTwoIntsResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing AddTwoIntsResponse at %p\n",buffer);
                AddTwoIntsResponseNML * p = static_cast<AddTwoIntsResponseNML*>(buffer);
                p->~AddTwoIntsResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction AddTwoIntsResponse at %p, is flat\n",buffer);
            }
            break;
        } 
        case AddTwoInts::ID:
        {
            // only need to destruct if data type is not flat
            if (AddTwoInts::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing AddTwoInts at %p\n",buffer);
                AddTwoIntsNML * p = static_cast<AddTwoIntsNML*>(buffer);
                p->~AddTwoIntsNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction AddTwoInts at %p, is flat\n",buffer);
            }
            break;
        } 
        case BadTwoIntsRequest::ID:
        {
            // only need to destruct if data type is not flat
            if (BadTwoIntsRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing BadTwoIntsRequest at %p\n",buffer);
                BadTwoIntsRequestNML * p = static_cast<BadTwoIntsRequestNML*>(buffer);
                p->~BadTwoIntsRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction BadTwoIntsRequest at %p, is flat\n",buffer);
            }
            break;
        } 
        case BadTwoIntsResponse::ID:
        {
            // only need to destruct if data type is not flat
            if (BadTwoIntsResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing BadTwoIntsResponse at %p\n",buffer);
                BadTwoIntsResponseNML * p = static_cast<BadTwoIntsResponseNML*>(buffer);
                p->~BadTwoIntsResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction BadTwoIntsResponse at %p, is flat\n",buffer);
            }
            break;
        } 
        case BadTwoInts::ID:
        {
            // only need to destruct if data type is not flat
            if (BadTwoInts::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing BadTwoInts at %p\n",buffer);
                BadTwoIntsNML * p = static_cast<BadTwoIntsNML*>(buffer);
                p->~BadTwoIntsNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction BadTwoInts at %p, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

void rospy_tutorials::nmlupdate(CMS * cms, Floats & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate Floats, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.data);

    }  
 }

FloatsNML::FloatsNML() : NMLmsg((NMLTYPE)Floats::ID,sizeof(FloatsNML)), nmlVersion(Floats::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new Floats()*/)
{
};

FloatsNML::~FloatsNML()
{
};

FloatsNML & FloatsNML::operator=(const FloatsNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

FloatsNML & FloatsNML::operator=(const Floats & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(Floats);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void FloatsNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<Floats&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: FloatsNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<Floats> temp(new Floats());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: rospy_tutorials_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (Floats::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: Floats Message version mismatch, expected " << Floats::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: Floats Message version mismatch, expected " << Floats::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void rospy_tutorials::nmlupdate(CMS * cms, HeaderString & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate HeaderString, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.header);
        nmlupdate(cms,inobj.data);

    }  
 }

HeaderStringNML::HeaderStringNML() : NMLmsg((NMLTYPE)HeaderString::ID,sizeof(HeaderStringNML)), nmlVersion(HeaderString::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new HeaderString()*/)
{
};

HeaderStringNML::~HeaderStringNML()
{
};

HeaderStringNML & HeaderStringNML::operator=(const HeaderStringNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

HeaderStringNML & HeaderStringNML::operator=(const HeaderString & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(HeaderString);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void HeaderStringNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<HeaderString&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: HeaderStringNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<HeaderString> temp(new HeaderString());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: rospy_tutorials_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (HeaderString::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: HeaderString Message version mismatch, expected " << HeaderString::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: HeaderString Message version mismatch, expected " << HeaderString::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void rospy_tutorials::nmlupdate(CMS * cms, AddTwoIntsRequest & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate AddTwoIntsRequest, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        cms->update(inobj.a);
        cms->update(inobj.b);

    }  
 }

AddTwoIntsRequestNML::AddTwoIntsRequestNML() : NMLmsg((NMLTYPE)AddTwoIntsRequest::ID,sizeof(AddTwoIntsRequestNML)), nmlVersion(AddTwoIntsRequest::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new AddTwoIntsRequest()*/)
{
};

AddTwoIntsRequestNML::~AddTwoIntsRequestNML()
{
};

AddTwoIntsRequestNML & AddTwoIntsRequestNML::operator=(const AddTwoIntsRequestNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

AddTwoIntsRequestNML & AddTwoIntsRequestNML::operator=(const AddTwoIntsRequest & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(AddTwoIntsRequest);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void AddTwoIntsRequestNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<AddTwoIntsRequest&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: AddTwoIntsRequestNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<AddTwoIntsRequest> temp(new AddTwoIntsRequest());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: rospy_tutorials_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (AddTwoIntsRequest::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: AddTwoIntsRequest Message version mismatch, expected " << AddTwoIntsRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: AddTwoIntsRequest Message version mismatch, expected " << AddTwoIntsRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void rospy_tutorials::nmlupdate(CMS * cms, AddTwoIntsResponse & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate AddTwoIntsResponse, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        cms->update(inobj.sum);

    }  
 }

AddTwoIntsResponseNML::AddTwoIntsResponseNML() : NMLmsg((NMLTYPE)AddTwoIntsResponse::ID,sizeof(AddTwoIntsResponseNML)), nmlVersion(AddTwoIntsResponse::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new AddTwoIntsResponse()*/)
{
};

AddTwoIntsResponseNML::~AddTwoIntsResponseNML()
{
};

AddTwoIntsResponseNML & AddTwoIntsResponseNML::operator=(const AddTwoIntsResponseNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

AddTwoIntsResponseNML & AddTwoIntsResponseNML::operator=(const AddTwoIntsResponse & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(AddTwoIntsResponse);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void AddTwoIntsResponseNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<AddTwoIntsResponse&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: AddTwoIntsResponseNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<AddTwoIntsResponse> temp(new AddTwoIntsResponse());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: rospy_tutorials_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (AddTwoIntsResponse::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: AddTwoIntsResponse Message version mismatch, expected " << AddTwoIntsResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: AddTwoIntsResponse Message version mismatch, expected " << AddTwoIntsResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void rospy_tutorials::nmlupdate(CMS * cms, AddTwoInts & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate AddTwoInts, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.request);
        nmlupdate(cms,inobj.response);

    }  
 }

AddTwoIntsNML::AddTwoIntsNML() : NMLmsg((NMLTYPE)AddTwoInts::ID,sizeof(AddTwoIntsNML)), nmlVersion(AddTwoInts::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new AddTwoInts()*/)
{
};

AddTwoIntsNML::~AddTwoIntsNML()
{
};

AddTwoIntsNML & AddTwoIntsNML::operator=(const AddTwoIntsNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

AddTwoIntsNML & AddTwoIntsNML::operator=(const AddTwoInts & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(AddTwoInts);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void AddTwoIntsNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<AddTwoInts&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: AddTwoIntsNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<AddTwoInts> temp(new AddTwoInts());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: rospy_tutorials_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (AddTwoInts::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: AddTwoInts Message version mismatch, expected " << AddTwoInts::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: AddTwoInts Message version mismatch, expected " << AddTwoInts::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void rospy_tutorials::nmlupdate(CMS * cms, BadTwoIntsRequest & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate BadTwoIntsRequest, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        cms->update(inobj.a);
        cms->update(inobj.b);

    }  
 }

BadTwoIntsRequestNML::BadTwoIntsRequestNML() : NMLmsg((NMLTYPE)BadTwoIntsRequest::ID,sizeof(BadTwoIntsRequestNML)), nmlVersion(BadTwoIntsRequest::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new BadTwoIntsRequest()*/)
{
};

BadTwoIntsRequestNML::~BadTwoIntsRequestNML()
{
};

BadTwoIntsRequestNML & BadTwoIntsRequestNML::operator=(const BadTwoIntsRequestNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

BadTwoIntsRequestNML & BadTwoIntsRequestNML::operator=(const BadTwoIntsRequest & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(BadTwoIntsRequest);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void BadTwoIntsRequestNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<BadTwoIntsRequest&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: BadTwoIntsRequestNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<BadTwoIntsRequest> temp(new BadTwoIntsRequest());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: rospy_tutorials_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (BadTwoIntsRequest::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: BadTwoIntsRequest Message version mismatch, expected " << BadTwoIntsRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: BadTwoIntsRequest Message version mismatch, expected " << BadTwoIntsRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void rospy_tutorials::nmlupdate(CMS * cms, BadTwoIntsResponse & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate BadTwoIntsResponse, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        cms->update(inobj.sum);

    }  
 }

BadTwoIntsResponseNML::BadTwoIntsResponseNML() : NMLmsg((NMLTYPE)BadTwoIntsResponse::ID,sizeof(BadTwoIntsResponseNML)), nmlVersion(BadTwoIntsResponse::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new BadTwoIntsResponse()*/)
{
};

BadTwoIntsResponseNML::~BadTwoIntsResponseNML()
{
};

BadTwoIntsResponseNML & BadTwoIntsResponseNML::operator=(const BadTwoIntsResponseNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

BadTwoIntsResponseNML & BadTwoIntsResponseNML::operator=(const BadTwoIntsResponse & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(BadTwoIntsResponse);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void BadTwoIntsResponseNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<BadTwoIntsResponse&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: BadTwoIntsResponseNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<BadTwoIntsResponse> temp(new BadTwoIntsResponse());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: rospy_tutorials_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (BadTwoIntsResponse::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: BadTwoIntsResponse Message version mismatch, expected " << BadTwoIntsResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: BadTwoIntsResponse Message version mismatch, expected " << BadTwoIntsResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void rospy_tutorials::nmlupdate(CMS * cms, BadTwoInts & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate BadTwoInts, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.request);
        nmlupdate(cms,inobj.response);

    }  
 }

BadTwoIntsNML::BadTwoIntsNML() : NMLmsg((NMLTYPE)BadTwoInts::ID,sizeof(BadTwoIntsNML)), nmlVersion(BadTwoInts::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new BadTwoInts()*/)
{
};

BadTwoIntsNML::~BadTwoIntsNML()
{
};

BadTwoIntsNML & BadTwoIntsNML::operator=(const BadTwoIntsNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

BadTwoIntsNML & BadTwoIntsNML::operator=(const BadTwoInts & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(BadTwoInts);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void BadTwoIntsNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<BadTwoInts&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: BadTwoIntsNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<BadTwoInts> temp(new BadTwoInts());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: rospy_tutorials_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (BadTwoInts::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: BadTwoInts Message version mismatch, expected " << BadTwoInts::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: BadTwoInts Message version mismatch, expected " << BadTwoInts::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

int rospy_tutorials::rospy_tutorials_gencpp_format(NMLTYPE type, void * buffer, CMS* cms)
{
    int retval = 1;
    int retval2 = rframe::Error::SUCCESS;

          //printf("rospy_tutorials_gencpp_format: buffer parameters: type: %d, %p, encode: %d\n",(int)type, buffer,cms->mode);

    switch (type)
    { 
        case 0:
        {
            // do nothing, 0 is passed in on buffer creation
            break;
        }
        case Floats::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for Floats, id " << Floats::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_rospy_tutorials_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"rospy_tutorials_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((FloatsNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case HeaderString::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for HeaderString, id " << HeaderString::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_rospy_tutorials_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"rospy_tutorials_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((HeaderStringNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case AddTwoIntsRequest::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for AddTwoIntsRequest, id " << AddTwoIntsRequest::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_rospy_tutorials_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"rospy_tutorials_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((AddTwoIntsRequestNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case AddTwoIntsResponse::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for AddTwoIntsResponse, id " << AddTwoIntsResponse::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_rospy_tutorials_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"rospy_tutorials_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((AddTwoIntsResponseNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case AddTwoInts::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for AddTwoInts, id " << AddTwoInts::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_rospy_tutorials_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"rospy_tutorials_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((AddTwoIntsNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case BadTwoIntsRequest::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for BadTwoIntsRequest, id " << BadTwoIntsRequest::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_rospy_tutorials_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"rospy_tutorials_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((BadTwoIntsRequestNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case BadTwoIntsResponse::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for BadTwoIntsResponse, id " << BadTwoIntsResponse::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_rospy_tutorials_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"rospy_tutorials_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((BadTwoIntsResponseNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case BadTwoInts::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for BadTwoInts, id " << BadTwoInts::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_rospy_tutorials_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"rospy_tutorials_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((BadTwoIntsNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        }                   
        default:
        {

            retval = 0;
            break;
        }
    }

          //   printf("format done\n");
    return retval;
}


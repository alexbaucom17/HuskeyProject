// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:57 -0500
//  From Template/Script: data_templates/DataClassSerializationTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <stdio.h>

// override the itemName template function used within serialization

#include <common/Log.h>
#include <common/BsonIo.h>
#include <common/SerializationCppHelpers.h>
#include <common/SerializationHelpers.h>

#include <stereo_msgs/DisparityImage.h>

using namespace std;

template<class Archive> void stereo_msgs::DisparityImage::serialize(Archive &ar, const unsigned int fileVersion)
{   

    ar & boost::serialization::make_nvp("header",header);

    ar & boost::serialization::make_nvp("image",image);

    ar & boost::serialization::make_nvp("f",f);

    ar & boost::serialization::make_nvp("T",T);

    ar & boost::serialization::make_nvp("valid_window",valid_window);

    ar & boost::serialization::make_nvp("min_disparity",min_disparity);

    ar & boost::serialization::make_nvp("max_disparity",max_disparity);

    ar & boost::serialization::make_nvp("delta_d",delta_d);
}

string stereo_msgs::DisparityImage::toXML() const
{
    stringstream str;
    std::cout << "toXML commented out" << std::endl;
    /*
    const stereo_msgs::DisparityImage & robj = (*this);

    boost::archive::xml_oarchive oa(str,boost::archive::no_header);
    oa & boost::serialization::make_nvp("DisparityImage",robj);

    */
    string s = str.str();

    return s;
};

bool stereo_msgs::DisparityImage::fromXML(const string &str)
{
    bool retval = true;
        std::cout << "fromXML commented out" << std::endl;
    /*
    stringstream sstr(str);
    stereo_msgs::DisparityImage & robj = (*this);

    try
    {
        boost::archive::xml_iarchive oa(sstr,boost::archive::no_header);
        oa & boost::serialization::make_nvp("DisparityImage",robj);
    }
    catch (exception & e)
    {
        retval = false;
    }

    */
    return retval;
};

GENERIC_SERIALIZATION_ENTRYPOINTS(stereo_msgs::DisparityImage); // defined in common/Common.h

INSTANTIATE_BOOST_SERIALIZATION(stereo_msgs::DisparityImage); // defined in common/SerialzationHelpers.h


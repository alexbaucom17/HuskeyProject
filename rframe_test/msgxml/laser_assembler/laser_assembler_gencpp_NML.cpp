// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2016-11-23 17:33:57 -0500
//  From Template/Script: data_templates/NMLClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <stdio.h>
// main rcslib header
#include <nml.hh>
// cms updater header
#include <cms_up.hh>
#include <cms_pup.hh>

#include <common/Error.h>
#include <common/Log.h>
#include <common/Common.h>
#include <common/DataTypeInfo.h>

#include "laser_assembler_gencpp_NML.h"
#include "laser_assembler_gencpp_Library.h"
#include <messaging/nml/NMLSupport.h>
#include <interfaces/MessageFactoryInterface.h>

#include <AssembleScansRequest.h>
#include <AssembleScansResponse.h>
#include <AssembleScans.h>
#include <AssembleScans2Request.h>
#include <AssembleScans2Response.h>
#include <AssembleScans2.h>

#include <boost/iostreams/stream_buffer.hpp>
#include <boost/iostreams/stream.hpp>

#include <boost/serialization/serialization.hpp>
#include <opensource/eos/archive/portable_iarchive.hpp>
#include <opensource/eos/archive/portable_oarchive.hpp>

using namespace std;
using namespace laser_assembler;

rframe::NMLMessageFactory * NML_laser_assembler_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        NML_laser_assembler_gencppfactory = new laser_assembler_gencppNMLMessageFactory();
        return NML_laser_assembler_gencppfactory;
    };
}

rframe::NMLMessageFactory * laser_assembler::allocate_laser_assembler_gencpp()
{
    NML_laser_assembler_gencppfactory = new laser_assembler_gencppNMLMessageFactory();
    return NML_laser_assembler_gencppfactory;
};

laser_assembler_gencppNMLMessageFactory::laser_assembler_gencppNMLMessageFactory()
{
    name("laser_assembler_gencpp");
    // use constructor to register data types
    laser_assembler::registerLibrary();
}

laser_assembler_gencppNMLMessageFactory::~laser_assembler_gencppNMLMessageFactory()
{
}

NML_FORMAT_PTR laser_assembler_gencppNMLMessageFactory::FormatPointer()
{
    return laser_assembler_gencpp_format;
}

int laser_assembler_gencppNMLMessageFactory::dataType(NMLmsg & msg)
{
    return msg.type;
}

void laser_assembler_gencppNMLMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(AssembleScansRequest::ID);
    info.name(AssembleScansRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(AssembleScansRequest::DATA_VERSION);
    info.md5Key(AssembleScansRequest::VERSION_MD5);
    info.xmlSource(AssembleScansRequest::XML_SOURCE);
    info.flat(AssembleScansRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(AssembleScansResponse::ID);
    info.name(AssembleScansResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(AssembleScansResponse::DATA_VERSION);
    info.md5Key(AssembleScansResponse::VERSION_MD5);
    info.xmlSource(AssembleScansResponse::XML_SOURCE);
    info.flat(AssembleScansResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(AssembleScans::ID);
    info.name(AssembleScans::DATA_TYPE_FULL_NAME);
    info.hashKey(AssembleScans::DATA_VERSION);
    info.md5Key(AssembleScans::VERSION_MD5);
    info.xmlSource(AssembleScans::XML_SOURCE);
    info.flat(AssembleScans::dataTypeFlat());
    ids.push_back(info);

    info.id(AssembleScans2Request::ID);
    info.name(AssembleScans2Request::DATA_TYPE_FULL_NAME);
    info.hashKey(AssembleScans2Request::DATA_VERSION);
    info.md5Key(AssembleScans2Request::VERSION_MD5);
    info.xmlSource(AssembleScans2Request::XML_SOURCE);
    info.flat(AssembleScans2Request::dataTypeFlat());
    ids.push_back(info);

    info.id(AssembleScans2Response::ID);
    info.name(AssembleScans2Response::DATA_TYPE_FULL_NAME);
    info.hashKey(AssembleScans2Response::DATA_VERSION);
    info.md5Key(AssembleScans2Response::VERSION_MD5);
    info.xmlSource(AssembleScans2Response::XML_SOURCE);
    info.flat(AssembleScans2Response::dataTypeFlat());
    ids.push_back(info);

    info.id(AssembleScans2::ID);
    info.name(AssembleScans2::DATA_TYPE_FULL_NAME);
    info.hashKey(AssembleScans2::DATA_VERSION);
    info.md5Key(AssembleScans2::VERSION_MD5);
    info.xmlSource(AssembleScans2::XML_SOURCE);
    info.flat(AssembleScans2::dataTypeFlat());
    ids.push_back(info);

}

int laser_assembler_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<NMLmsg> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case AssembleScansRequest::ID:
        {
            //AssembleScansRequestNML * newmsg = new AssembleScansRequestNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new AssembleScansRequestNML(),std::bind(&laser_assembler_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case AssembleScansResponse::ID:
        {
            //AssembleScansResponseNML * newmsg = new AssembleScansResponseNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new AssembleScansResponseNML(),std::bind(&laser_assembler_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case AssembleScans::ID:
        {
            //AssembleScansNML * newmsg = new AssembleScansNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new AssembleScansNML(),std::bind(&laser_assembler_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case AssembleScans2Request::ID:
        {
            //AssembleScans2RequestNML * newmsg = new AssembleScans2RequestNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new AssembleScans2RequestNML(),std::bind(&laser_assembler_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case AssembleScans2Response::ID:
        {
            //AssembleScans2ResponseNML * newmsg = new AssembleScans2ResponseNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new AssembleScans2ResponseNML(),std::bind(&laser_assembler_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case AssembleScans2::ID:
        {
            //AssembleScans2NML * newmsg = new AssembleScans2NML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new AssembleScans2NML(),std::bind(&laser_assembler_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int laser_assembler_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case AssembleScansRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AssembleScansRequest>(),std::bind(&laser_assembler_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AssembleScansResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AssembleScansResponse>(),std::bind(&laser_assembler_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AssembleScans::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AssembleScans>(),std::bind(&laser_assembler_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AssembleScans2Request::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AssembleScans2Request>(),std::bind(&laser_assembler_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AssembleScans2Response::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AssembleScans2Response>(),std::bind(&laser_assembler_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AssembleScans2::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AssembleScans2>(),std::bind(&laser_assembler_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int laser_assembler_gencppNMLMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    delete msg;

    return retval;
}

int laser_assembler_gencppNMLMessageFactory::deallocateTransport(NMLmsg * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        switch (msg->type)
        { 
            case AssembleScansRequest::ID:
            {
                AssembleScansRequestNML * tempmsg = static_cast<AssembleScansRequestNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case AssembleScansResponse::ID:
            {
                AssembleScansResponseNML * tempmsg = static_cast<AssembleScansResponseNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case AssembleScans::ID:
            {
                AssembleScansNML * tempmsg = static_cast<AssembleScansNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case AssembleScans2Request::ID:
            {
                AssembleScans2RequestNML * tempmsg = static_cast<AssembleScans2RequestNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case AssembleScans2Response::ID:
            {
                AssembleScans2ResponseNML * tempmsg = static_cast<AssembleScans2ResponseNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case AssembleScans2::ID:
            {
                AssembleScans2NML * tempmsg = static_cast<AssembleScans2NML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            default:
            {
                retval = Error::NOT_FOUND;
                break;
            }
        }
    }

    return retval;
}

int laser_assembler_gencppNMLMessageFactory::toTransport(MessageBase & src, NMLmsg & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)dst.type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.type)
        { 
            case AssembleScansRequest::ID:
            {
                AssembleScansRequestNML & tempDst = static_cast<AssembleScansRequestNML&>(dst);
                Message<AssembleScansRequest > & tempSrc = static_cast<Message<AssembleScansRequest>&>(src);

                if (tempSrc.version() != AssembleScansRequest::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of AssembleScansRequest: " << __FILE__ << " expected: " 
                             << AssembleScansRequest::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of AssembleScansRequest: " << __FILE__ << " expected: " 
                         << AssembleScansRequest::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case AssembleScansResponse::ID:
            {
                AssembleScansResponseNML & tempDst = static_cast<AssembleScansResponseNML&>(dst);
                Message<AssembleScansResponse > & tempSrc = static_cast<Message<AssembleScansResponse>&>(src);

                if (tempSrc.version() != AssembleScansResponse::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of AssembleScansResponse: " << __FILE__ << " expected: " 
                             << AssembleScansResponse::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of AssembleScansResponse: " << __FILE__ << " expected: " 
                         << AssembleScansResponse::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case AssembleScans::ID:
            {
                AssembleScansNML & tempDst = static_cast<AssembleScansNML&>(dst);
                Message<AssembleScans > & tempSrc = static_cast<Message<AssembleScans>&>(src);

                if (tempSrc.version() != AssembleScans::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of AssembleScans: " << __FILE__ << " expected: " 
                             << AssembleScans::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of AssembleScans: " << __FILE__ << " expected: " 
                         << AssembleScans::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case AssembleScans2Request::ID:
            {
                AssembleScans2RequestNML & tempDst = static_cast<AssembleScans2RequestNML&>(dst);
                Message<AssembleScans2Request > & tempSrc = static_cast<Message<AssembleScans2Request>&>(src);

                if (tempSrc.version() != AssembleScans2Request::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of AssembleScans2Request: " << __FILE__ << " expected: " 
                             << AssembleScans2Request::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of AssembleScans2Request: " << __FILE__ << " expected: " 
                         << AssembleScans2Request::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case AssembleScans2Response::ID:
            {
                AssembleScans2ResponseNML & tempDst = static_cast<AssembleScans2ResponseNML&>(dst);
                Message<AssembleScans2Response > & tempSrc = static_cast<Message<AssembleScans2Response>&>(src);

                if (tempSrc.version() != AssembleScans2Response::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of AssembleScans2Response: " << __FILE__ << " expected: " 
                             << AssembleScans2Response::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of AssembleScans2Response: " << __FILE__ << " expected: " 
                         << AssembleScans2Response::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case AssembleScans2::ID:
            {
                AssembleScans2NML & tempDst = static_cast<AssembleScans2NML&>(dst);
                Message<AssembleScans2 > & tempSrc = static_cast<Message<AssembleScans2>&>(src);

                if (tempSrc.version() != AssembleScans2::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of AssembleScans2: " << __FILE__ << " expected: " 
                             << AssembleScans2::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of AssembleScans2: " << __FILE__ << " expected: " 
                         << AssembleScans2::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int laser_assembler_gencppNMLMessageFactory::fromTransport(NMLmsg & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.type)
        { 
            case AssembleScansRequest::ID:
            {
                AssembleScansRequestNML & tempSrc = static_cast<AssembleScansRequestNML&>(src);
                Message<AssembleScansRequest > & tempDst = static_cast<Message<AssembleScansRequest>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (AssembleScansRequest::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case AssembleScansResponse::ID:
            {
                AssembleScansResponseNML & tempSrc = static_cast<AssembleScansResponseNML&>(src);
                Message<AssembleScansResponse > & tempDst = static_cast<Message<AssembleScansResponse>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (AssembleScansResponse::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case AssembleScans::ID:
            {
                AssembleScansNML & tempSrc = static_cast<AssembleScansNML&>(src);
                Message<AssembleScans > & tempDst = static_cast<Message<AssembleScans>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (AssembleScans::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case AssembleScans2Request::ID:
            {
                AssembleScans2RequestNML & tempSrc = static_cast<AssembleScans2RequestNML&>(src);
                Message<AssembleScans2Request > & tempDst = static_cast<Message<AssembleScans2Request>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (AssembleScans2Request::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case AssembleScans2Response::ID:
            {
                AssembleScans2ResponseNML & tempSrc = static_cast<AssembleScans2ResponseNML&>(src);
                Message<AssembleScans2Response > & tempDst = static_cast<Message<AssembleScans2Response>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (AssembleScans2Response::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case AssembleScans2::ID:
            {
                AssembleScans2NML & tempSrc = static_cast<AssembleScans2NML&>(src);
                Message<AssembleScans2 > & tempDst = static_cast<Message<AssembleScans2>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (AssembleScans2::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int laser_assembler_gencppNMLMessageFactory::constructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    switch (id)
    { 
        case AssembleScansRequest::ID:
        {
            // only need to construct if data type is not flat
            if (AssembleScansRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing AssembleScansRequest at %p\n",buffer);
                AssembleScansRequestNML * p = static_cast<AssembleScansRequestNML*>(buffer);
                // construct the type at pointer p
                new (p) AssembleScansRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing AssembleScansRequest at %p,, is flat\n",buffer);
            }
            break;
        } 
        case AssembleScansResponse::ID:
        {
            // only need to construct if data type is not flat
            if (AssembleScansResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing AssembleScansResponse at %p\n",buffer);
                AssembleScansResponseNML * p = static_cast<AssembleScansResponseNML*>(buffer);
                // construct the type at pointer p
                new (p) AssembleScansResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing AssembleScansResponse at %p,, is flat\n",buffer);
            }
            break;
        } 
        case AssembleScans::ID:
        {
            // only need to construct if data type is not flat
            if (AssembleScans::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing AssembleScans at %p\n",buffer);
                AssembleScansNML * p = static_cast<AssembleScansNML*>(buffer);
                // construct the type at pointer p
                new (p) AssembleScansNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing AssembleScans at %p,, is flat\n",buffer);
            }
            break;
        } 
        case AssembleScans2Request::ID:
        {
            // only need to construct if data type is not flat
            if (AssembleScans2Request::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing AssembleScans2Request at %p\n",buffer);
                AssembleScans2RequestNML * p = static_cast<AssembleScans2RequestNML*>(buffer);
                // construct the type at pointer p
                new (p) AssembleScans2RequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing AssembleScans2Request at %p,, is flat\n",buffer);
            }
            break;
        } 
        case AssembleScans2Response::ID:
        {
            // only need to construct if data type is not flat
            if (AssembleScans2Response::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing AssembleScans2Response at %p\n",buffer);
                AssembleScans2ResponseNML * p = static_cast<AssembleScans2ResponseNML*>(buffer);
                // construct the type at pointer p
                new (p) AssembleScans2ResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing AssembleScans2Response at %p,, is flat\n",buffer);
            }
            break;
        } 
        case AssembleScans2::ID:
        {
            // only need to construct if data type is not flat
            if (AssembleScans2::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing AssembleScans2 at %p\n",buffer);
                AssembleScans2NML * p = static_cast<AssembleScans2NML*>(buffer);
                // construct the type at pointer p
                new (p) AssembleScans2NML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing AssembleScans2 at %p,, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

int laser_assembler_gencppNMLMessageFactory::destructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    if (buffer == nullptr) return retval;

    switch (id)
    { 
        case AssembleScansRequest::ID:
        {
            // only need to destruct if data type is not flat
            if (AssembleScansRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing AssembleScansRequest at %p\n",buffer);
                AssembleScansRequestNML * p = static_cast<AssembleScansRequestNML*>(buffer);
                p->~AssembleScansRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction AssembleScansRequest at %p, is flat\n",buffer);
            }
            break;
        } 
        case AssembleScansResponse::ID:
        {
            // only need to destruct if data type is not flat
            if (AssembleScansResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing AssembleScansResponse at %p\n",buffer);
                AssembleScansResponseNML * p = static_cast<AssembleScansResponseNML*>(buffer);
                p->~AssembleScansResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction AssembleScansResponse at %p, is flat\n",buffer);
            }
            break;
        } 
        case AssembleScans::ID:
        {
            // only need to destruct if data type is not flat
            if (AssembleScans::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing AssembleScans at %p\n",buffer);
                AssembleScansNML * p = static_cast<AssembleScansNML*>(buffer);
                p->~AssembleScansNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction AssembleScans at %p, is flat\n",buffer);
            }
            break;
        } 
        case AssembleScans2Request::ID:
        {
            // only need to destruct if data type is not flat
            if (AssembleScans2Request::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing AssembleScans2Request at %p\n",buffer);
                AssembleScans2RequestNML * p = static_cast<AssembleScans2RequestNML*>(buffer);
                p->~AssembleScans2RequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction AssembleScans2Request at %p, is flat\n",buffer);
            }
            break;
        } 
        case AssembleScans2Response::ID:
        {
            // only need to destruct if data type is not flat
            if (AssembleScans2Response::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing AssembleScans2Response at %p\n",buffer);
                AssembleScans2ResponseNML * p = static_cast<AssembleScans2ResponseNML*>(buffer);
                p->~AssembleScans2ResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction AssembleScans2Response at %p, is flat\n",buffer);
            }
            break;
        } 
        case AssembleScans2::ID:
        {
            // only need to destruct if data type is not flat
            if (AssembleScans2::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing AssembleScans2 at %p\n",buffer);
                AssembleScans2NML * p = static_cast<AssembleScans2NML*>(buffer);
                p->~AssembleScans2NML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction AssembleScans2 at %p, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

void laser_assembler::nmlupdate(CMS * cms, AssembleScansRequest & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate AssembleScansRequest, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.begin);
        nmlupdate(cms,inobj.end);

    }  
 }

AssembleScansRequestNML::AssembleScansRequestNML() : NMLmsg((NMLTYPE)AssembleScansRequest::ID,sizeof(AssembleScansRequestNML)), nmlVersion(AssembleScansRequest::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new AssembleScansRequest()*/)
{
};

AssembleScansRequestNML::~AssembleScansRequestNML()
{
};

AssembleScansRequestNML & AssembleScansRequestNML::operator=(const AssembleScansRequestNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

AssembleScansRequestNML & AssembleScansRequestNML::operator=(const AssembleScansRequest & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(AssembleScansRequest);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void AssembleScansRequestNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<AssembleScansRequest&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: AssembleScansRequestNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<AssembleScansRequest> temp(new AssembleScansRequest());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: laser_assembler_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (AssembleScansRequest::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: AssembleScansRequest Message version mismatch, expected " << AssembleScansRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: AssembleScansRequest Message version mismatch, expected " << AssembleScansRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void laser_assembler::nmlupdate(CMS * cms, AssembleScansResponse & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate AssembleScansResponse, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.cloud);

    }  
 }

AssembleScansResponseNML::AssembleScansResponseNML() : NMLmsg((NMLTYPE)AssembleScansResponse::ID,sizeof(AssembleScansResponseNML)), nmlVersion(AssembleScansResponse::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new AssembleScansResponse()*/)
{
};

AssembleScansResponseNML::~AssembleScansResponseNML()
{
};

AssembleScansResponseNML & AssembleScansResponseNML::operator=(const AssembleScansResponseNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

AssembleScansResponseNML & AssembleScansResponseNML::operator=(const AssembleScansResponse & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(AssembleScansResponse);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void AssembleScansResponseNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<AssembleScansResponse&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: AssembleScansResponseNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<AssembleScansResponse> temp(new AssembleScansResponse());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: laser_assembler_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (AssembleScansResponse::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: AssembleScansResponse Message version mismatch, expected " << AssembleScansResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: AssembleScansResponse Message version mismatch, expected " << AssembleScansResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void laser_assembler::nmlupdate(CMS * cms, AssembleScans & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate AssembleScans, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.request);
        nmlupdate(cms,inobj.response);

    }  
 }

AssembleScansNML::AssembleScansNML() : NMLmsg((NMLTYPE)AssembleScans::ID,sizeof(AssembleScansNML)), nmlVersion(AssembleScans::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new AssembleScans()*/)
{
};

AssembleScansNML::~AssembleScansNML()
{
};

AssembleScansNML & AssembleScansNML::operator=(const AssembleScansNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

AssembleScansNML & AssembleScansNML::operator=(const AssembleScans & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(AssembleScans);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void AssembleScansNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<AssembleScans&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: AssembleScansNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<AssembleScans> temp(new AssembleScans());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: laser_assembler_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (AssembleScans::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: AssembleScans Message version mismatch, expected " << AssembleScans::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: AssembleScans Message version mismatch, expected " << AssembleScans::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void laser_assembler::nmlupdate(CMS * cms, AssembleScans2Request & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate AssembleScans2Request, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.begin);
        nmlupdate(cms,inobj.end);

    }  
 }

AssembleScans2RequestNML::AssembleScans2RequestNML() : NMLmsg((NMLTYPE)AssembleScans2Request::ID,sizeof(AssembleScans2RequestNML)), nmlVersion(AssembleScans2Request::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new AssembleScans2Request()*/)
{
};

AssembleScans2RequestNML::~AssembleScans2RequestNML()
{
};

AssembleScans2RequestNML & AssembleScans2RequestNML::operator=(const AssembleScans2RequestNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

AssembleScans2RequestNML & AssembleScans2RequestNML::operator=(const AssembleScans2Request & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(AssembleScans2Request);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void AssembleScans2RequestNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<AssembleScans2Request&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: AssembleScans2RequestNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<AssembleScans2Request> temp(new AssembleScans2Request());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: laser_assembler_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (AssembleScans2Request::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: AssembleScans2Request Message version mismatch, expected " << AssembleScans2Request::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: AssembleScans2Request Message version mismatch, expected " << AssembleScans2Request::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void laser_assembler::nmlupdate(CMS * cms, AssembleScans2Response & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate AssembleScans2Response, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.cloud);

    }  
 }

AssembleScans2ResponseNML::AssembleScans2ResponseNML() : NMLmsg((NMLTYPE)AssembleScans2Response::ID,sizeof(AssembleScans2ResponseNML)), nmlVersion(AssembleScans2Response::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new AssembleScans2Response()*/)
{
};

AssembleScans2ResponseNML::~AssembleScans2ResponseNML()
{
};

AssembleScans2ResponseNML & AssembleScans2ResponseNML::operator=(const AssembleScans2ResponseNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

AssembleScans2ResponseNML & AssembleScans2ResponseNML::operator=(const AssembleScans2Response & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(AssembleScans2Response);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void AssembleScans2ResponseNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<AssembleScans2Response&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: AssembleScans2ResponseNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<AssembleScans2Response> temp(new AssembleScans2Response());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: laser_assembler_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (AssembleScans2Response::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: AssembleScans2Response Message version mismatch, expected " << AssembleScans2Response::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: AssembleScans2Response Message version mismatch, expected " << AssembleScans2Response::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void laser_assembler::nmlupdate(CMS * cms, AssembleScans2 & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate AssembleScans2, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.request);
        nmlupdate(cms,inobj.response);

    }  
 }

AssembleScans2NML::AssembleScans2NML() : NMLmsg((NMLTYPE)AssembleScans2::ID,sizeof(AssembleScans2NML)), nmlVersion(AssembleScans2::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new AssembleScans2()*/)
{
};

AssembleScans2NML::~AssembleScans2NML()
{
};

AssembleScans2NML & AssembleScans2NML::operator=(const AssembleScans2NML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

AssembleScans2NML & AssembleScans2NML::operator=(const AssembleScans2 & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(AssembleScans2);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void AssembleScans2NML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<AssembleScans2&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: AssembleScans2NML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<AssembleScans2> temp(new AssembleScans2());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: laser_assembler_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (AssembleScans2::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: AssembleScans2 Message version mismatch, expected " << AssembleScans2::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: AssembleScans2 Message version mismatch, expected " << AssembleScans2::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

int laser_assembler::laser_assembler_gencpp_format(NMLTYPE type, void * buffer, CMS* cms)
{
    int retval = 1;
    int retval2 = rframe::Error::SUCCESS;

          //printf("laser_assembler_gencpp_format: buffer parameters: type: %d, %p, encode: %d\n",(int)type, buffer,cms->mode);

    switch (type)
    { 
        case 0:
        {
            // do nothing, 0 is passed in on buffer creation
            break;
        }
        case AssembleScansRequest::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for AssembleScansRequest, id " << AssembleScansRequest::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_laser_assembler_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"laser_assembler_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((AssembleScansRequestNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case AssembleScansResponse::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for AssembleScansResponse, id " << AssembleScansResponse::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_laser_assembler_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"laser_assembler_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((AssembleScansResponseNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case AssembleScans::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for AssembleScans, id " << AssembleScans::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_laser_assembler_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"laser_assembler_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((AssembleScansNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case AssembleScans2Request::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for AssembleScans2Request, id " << AssembleScans2Request::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_laser_assembler_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"laser_assembler_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((AssembleScans2RequestNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case AssembleScans2Response::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for AssembleScans2Response, id " << AssembleScans2Response::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_laser_assembler_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"laser_assembler_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((AssembleScans2ResponseNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case AssembleScans2::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for AssembleScans2, id " << AssembleScans2::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_laser_assembler_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"laser_assembler_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((AssembleScans2NML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        }                   
        default:
        {

            retval = 0;
            break;
        }
    }

          //   printf("format done\n");
    return retval;
}


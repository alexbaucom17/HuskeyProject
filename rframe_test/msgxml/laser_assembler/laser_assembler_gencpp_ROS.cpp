// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         yongbo on yongbo-XPS-15-9550, 2016-11-23 17:33:57 -0500
//  From Template/Script: data_templates/ROSTemplate.cpp.rb
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "laser_assembler_gencpp_ROS.h"
#include <common/Log.h>
#include <common/DataTypeInfo.h>

using namespace std;
using namespace laser_assembler;

rframe::ROSMessageFactory * ROS_laser_assembler_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        ROS_laser_assembler_gencppfactory = new laser_assembler_gencppROSMessageFactory();

        return ROS_laser_assembler_gencppfactory;
    };
}

rframe::ROSMessageFactory * laser_assembler::allocate_laser_assembler_gencpp()
{
    ROS_laser_assembler_gencppfactory = new laser_assembler_gencppROSMessageFactory();
    return ROS_laser_assembler_gencppfactory;
};

laser_assembler_gencppROSMessageFactory::laser_assembler_gencppROSMessageFactory()
{
    name("laser_assembler_gencpp");
    // use constructor to register data types
    laser_assembler::registerLibrary();
}

laser_assembler_gencppROSMessageFactory::~laser_assembler_gencppROSMessageFactory()
{
}

int laser_assembler_gencppROSMessageFactory::dataType(ros::SerializedMessage & msg)
{
    return msg.message_type;
}

void laser_assembler_gencppROSMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(AssembleScansRequest::ID);
    info.name(AssembleScansRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(AssembleScansRequest::DATA_VERSION);
    info.md5Key(AssembleScansRequest::VERSION_MD5);
    info.xmlSource(AssembleScansRequest::XML_SOURCE);
    info.flat(AssembleScansRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(AssembleScansResponse::ID);
    info.name(AssembleScansResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(AssembleScansResponse::DATA_VERSION);
    info.md5Key(AssembleScansResponse::VERSION_MD5);
    info.xmlSource(AssembleScansResponse::XML_SOURCE);
    info.flat(AssembleScansResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(AssembleScans::ID);
    info.name(AssembleScans::DATA_TYPE_FULL_NAME);
    info.hashKey(AssembleScans::DATA_VERSION);
    info.md5Key(AssembleScans::VERSION_MD5);
    info.xmlSource(AssembleScans::XML_SOURCE);
    info.flat(AssembleScans::dataTypeFlat());
    ids.push_back(info);

    info.id(AssembleScans2Request::ID);
    info.name(AssembleScans2Request::DATA_TYPE_FULL_NAME);
    info.hashKey(AssembleScans2Request::DATA_VERSION);
    info.md5Key(AssembleScans2Request::VERSION_MD5);
    info.xmlSource(AssembleScans2Request::XML_SOURCE);
    info.flat(AssembleScans2Request::dataTypeFlat());
    ids.push_back(info);

    info.id(AssembleScans2Response::ID);
    info.name(AssembleScans2Response::DATA_TYPE_FULL_NAME);
    info.hashKey(AssembleScans2Response::DATA_VERSION);
    info.md5Key(AssembleScans2Response::VERSION_MD5);
    info.xmlSource(AssembleScans2Response::XML_SOURCE);
    info.flat(AssembleScans2Response::dataTypeFlat());
    ids.push_back(info);

    info.id(AssembleScans2::ID);
    info.name(AssembleScans2::DATA_TYPE_FULL_NAME);
    info.hashKey(AssembleScans2::DATA_VERSION);
    info.md5Key(AssembleScans2::VERSION_MD5);
    info.xmlSource(AssembleScans2::XML_SOURCE);
    info.flat(AssembleScans2::dataTypeFlat());
    ids.push_back(info);

}

int laser_assembler_gencppROSMessageFactory::typeName(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case AssembleScansRequest::ID:
        {
            str = "laser_assembler/AssembleScansRequest";
            break;
        }
        case AssembleScansResponse::ID:
        {
            str = "laser_assembler/AssembleScansResponse";
            break;
        }
        case AssembleScans::ID:
        {
            str = "laser_assembler/AssembleScans";
            break;
        }
        case AssembleScans2Request::ID:
        {
            str = "laser_assembler/AssembleScans2Request";
            break;
        }
        case AssembleScans2Response::ID:
        {
            str = "laser_assembler/AssembleScans2Response";
            break;
        }
        case AssembleScans2::ID:
        {
            str = "laser_assembler/AssembleScans2";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int laser_assembler_gencppROSMessageFactory::desc(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case AssembleScansRequest::ID:
        {
            str = AssembleScansRequest::XML_SOURCE;
            break;
        }
        case AssembleScansResponse::ID:
        {
            str = AssembleScansResponse::XML_SOURCE;
            break;
        }
        case AssembleScans::ID:
        {
            str = AssembleScans::XML_SOURCE;
            break;
        }
        case AssembleScans2Request::ID:
        {
            str = AssembleScans2Request::XML_SOURCE;
            break;
        }
        case AssembleScans2Response::ID:
        {
            str = AssembleScans2Response::XML_SOURCE;
            break;
        }
        case AssembleScans2::ID:
        {
            str = AssembleScans2::XML_SOURCE;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int laser_assembler_gencppROSMessageFactory::md5String(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case AssembleScansRequest::ID:
        {
            str = "b341004f74e15bf5e1b2053a9183bdc7";
            break;
        }
        case AssembleScansResponse::ID:
        {
            str = "4217b28a903e4ad7869a83b3653110ff";
            break;
        }
        case AssembleScans::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case AssembleScans2Request::ID:
        {
            str = "b341004f74e15bf5e1b2053a9183bdc7";
            break;
        }
        case AssembleScans2Response::ID:
        {
            str = "96cec5374164b3b3d1d7ef5d7628a7ed";
            break;
        }
        case AssembleScans2::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int laser_assembler_gencppROSMessageFactory::md5(unsigned long long & highOrder, unsigned long long & lowOrder, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case AssembleScansRequest::ID:
        {   
		    highOrder = 0xb341004f74e15bf5ULL;
            lowOrder = 0xe1b2053a9183bdc7ULL;
            break;
        }
        case AssembleScansResponse::ID:
        {   
		    highOrder = 0x4217b28a903e4ad7ULL;
            lowOrder = 0x869a83b3653110ffULL;
            break;
        }
        case AssembleScans::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case AssembleScans2Request::ID:
        {   
		    highOrder = 0xb341004f74e15bf5ULL;
            lowOrder = 0xe1b2053a9183bdc7ULL;
            break;
        }
        case AssembleScans2Response::ID:
        {   
		    highOrder = 0x96cec5374164b3b3ULL;
            lowOrder = 0xd1d7ef5d7628a7edULL;
            break;
        }
        case AssembleScans2::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int laser_assembler_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<ros::SerializedMessage> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case AssembleScansRequest::ID:
        case AssembleScansResponse::ID:
        case AssembleScans::ID:
        case AssembleScans2Request::ID:
        case AssembleScans2Response::ID:
        case AssembleScans2::ID:
        {
            break;
        } 
        default:
	    {
            retval = rframe::Error::PARAM_RANGE;
            break;
	    }
    }

    if (retval == rframe::Error::SUCCESS)
	{
        std::shared_ptr<ros::SerializedMessage> newmsg(new ros::SerializedMessage);

        if (newmsg.get() == NULL)
	    {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else
	    {
            newmsg->message_type = id;
            msg.swap(newmsg);
        }
    }

    return retval;
}

int laser_assembler_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case AssembleScansRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AssembleScansRequest>(),std::bind(&laser_assembler_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AssembleScansResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AssembleScansResponse>(),std::bind(&laser_assembler_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AssembleScans::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AssembleScans>(),std::bind(&laser_assembler_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AssembleScans2Request::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AssembleScans2Request>(),std::bind(&laser_assembler_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AssembleScans2Response::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AssembleScans2Response>(),std::bind(&laser_assembler_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AssembleScans2::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AssembleScans2>(),std::bind(&laser_assembler_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            retval = rframe::Error::PARAM_RANGE;
        }
    }

    return retval;
}

int laser_assembler_gencppROSMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
	{
        delete msg;
    }

    return retval;
}

int laser_assembler_gencppROSMessageFactory::deallocateTransport(ros::SerializedMessage * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        delete msg;
    }

    return retval;
}

int laser_assembler_gencppROSMessageFactory::toTransport(MessageBase & src, ros::SerializedMessage & dst)
{
    int retval = rframe::Error::SUCCESS;

    if (dst.message_type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.message_type)
        { 
            case AssembleScansRequest::ID:
            {
                Message<AssembleScansRequest > & tempSrc = static_cast<Message<AssembleScansRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: laser_assembler_gencpp::AssembleScansRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case AssembleScansResponse::ID:
            {
                Message<AssembleScansResponse > & tempSrc = static_cast<Message<AssembleScansResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: laser_assembler_gencpp::AssembleScansResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case AssembleScans::ID:
            {
                Message<AssembleScans > & tempSrc = static_cast<Message<AssembleScans>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: laser_assembler_gencpp::AssembleScans buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case AssembleScans2Request::ID:
            {
                Message<AssembleScans2Request > & tempSrc = static_cast<Message<AssembleScans2Request>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: laser_assembler_gencpp::AssembleScans2Request buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case AssembleScans2Response::ID:
            {
                Message<AssembleScans2Response > & tempSrc = static_cast<Message<AssembleScans2Response>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: laser_assembler_gencpp::AssembleScans2Response buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case AssembleScans2::ID:
            {
                Message<AssembleScans2 > & tempSrc = static_cast<Message<AssembleScans2>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: laser_assembler_gencpp::AssembleScans2 buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int laser_assembler_gencppROSMessageFactory::fromTransport(ros::SerializedMessage & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.message_type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.message_type)
        { 
            case AssembleScansRequest::ID:
            {
                Message<AssembleScansRequest > & tempDst = static_cast<Message<AssembleScansRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case AssembleScansResponse::ID:
            {
                Message<AssembleScansResponse > & tempDst = static_cast<Message<AssembleScansResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case AssembleScans::ID:
            {
                Message<AssembleScans > & tempDst = static_cast<Message<AssembleScans>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case AssembleScans2Request::ID:
            {
                Message<AssembleScans2Request > & tempDst = static_cast<Message<AssembleScans2Request>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case AssembleScans2Response::ID:
            {
                Message<AssembleScans2Response > & tempDst = static_cast<Message<AssembleScans2Response>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case AssembleScans2::ID:
            {
                Message<AssembleScans2 > & tempDst = static_cast<Message<AssembleScans2>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int laser_assembler_gencppROSMessageFactory::updateHeader(rframe::MessageBase &msg, unsigned int seqNo)
{
    int retval = rframe::Error::SUCCESS;

    switch (msg.id())
    {   
        // AssembleScansRequest does not have a Header as its first member 
        // AssembleScansResponse does not have a Header as its first member 
        // AssembleScans does not have a Header as its first member 
        // AssembleScans2Request does not have a Header as its first member 
        // AssembleScans2Response does not have a Header as its first member 
        // AssembleScans2 does not have a Header as its first member 
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

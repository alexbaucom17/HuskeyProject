// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:53 -0500
//  From Template/Script: data_templates/DataLibraryTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "rospy_tutorials_gencpp_Library.h"
#include <common/Log.h>
#include <common/TypeRegistry.h>
#include <messaging/Message.h>

#include <rospy_tutorials/Floats.h>
#include <rospy_tutorials/HeaderString.h>
#include <rospy_tutorials/AddTwoIntsRequest.h>
#include <rospy_tutorials/AddTwoIntsResponse.h>
#include <rospy_tutorials/AddTwoInts.h>
#include <rospy_tutorials/BadTwoIntsRequest.h>
#include <rospy_tutorials/BadTwoIntsResponse.h>
#include <rospy_tutorials/BadTwoInts.h>

extern "C"
{
    /** library access method */
    int rframeRegisterDataLibrary()
    {
        return rospy_tutorials::registerLibrary();
    };
}

namespace rospy_tutorials
{

    static void deallocateMessage(MessageBase * msg)
    {
        delete msg;
    }

    static int allocateMessage(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
    {
        int retval = rframe::Error::SUCCESS;
        bool found = true;
        switch (id)
        { 
            case Floats::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<Floats>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case HeaderString::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<HeaderString>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case AddTwoIntsRequest::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<AddTwoIntsRequest>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case AddTwoIntsResponse::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<AddTwoIntsResponse>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case AddTwoInts::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<AddTwoInts>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case BadTwoIntsRequest::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<BadTwoIntsRequest>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case BadTwoIntsResponse::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<BadTwoIntsResponse>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            case BadTwoInts::ID:
            {
                std::shared_ptr<MessageBase> tempMsg(new Message<BadTwoInts>(),std::bind(deallocateMessage,std::placeholders::_1));
                if (tempMsg.get() == NULL)
                {
                    retval = rframe::Error::MEMORY_ALLOC;
                } 
                else
                {
                    msg.swap(tempMsg);
                }
                break;
            } 
            default:
            {
                found = false;
            }
        }

        if (found == false)
        {
            retval = rframe::Error::PARAM_RANGE;
        }
        else if (msg.get() == NULL)
        {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else if (msg.get() != NULL)
        {
            retval = rframe::Error::SUCCESS;
        }

        return retval;
    }

    /** registry this data set with the system */
    //int register_rospy_tutorials_gencpp()
    int registerLibrary()
    {
        int retval = rframe::Error::SUCCESS;
        static bool registered = false;
        rframe::TypeRegistry & reg = rframe::TypeRegistry::instance();

        LOG_INFO("registering data for library: rospy_tutorials_gencpp");

        if (registered == false)
        {
            registered = true;

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = rospy_tutorials::Floats::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<rospy_tutorials::Floats>(
                    // boost::lambda::new_ptr<rospy_tutorials::Floats>(),
                    [](){ return new rospy_tutorials::Floats(); },
                                std::bind(allocateMessage,rospy_tutorials::Floats::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: Floats");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = rospy_tutorials::Floats::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(rospy_tutorials::Floats::DATA_TYPE_NAME,rospy_tutorials::Floats::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: Floats");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = rospy_tutorials::HeaderString::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<rospy_tutorials::HeaderString>(
                    // boost::lambda::new_ptr<rospy_tutorials::HeaderString>(),
                    [](){ return new rospy_tutorials::HeaderString(); },
                                std::bind(allocateMessage,rospy_tutorials::HeaderString::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: HeaderString");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = rospy_tutorials::HeaderString::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(rospy_tutorials::HeaderString::DATA_TYPE_NAME,rospy_tutorials::HeaderString::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: HeaderString");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = rospy_tutorials::AddTwoIntsRequest::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<rospy_tutorials::AddTwoIntsRequest>(
                    // boost::lambda::new_ptr<rospy_tutorials::AddTwoIntsRequest>(),
                    [](){ return new rospy_tutorials::AddTwoIntsRequest(); },
                                std::bind(allocateMessage,rospy_tutorials::AddTwoIntsRequest::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: AddTwoIntsRequest");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = rospy_tutorials::AddTwoIntsRequest::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(rospy_tutorials::AddTwoIntsRequest::DATA_TYPE_NAME,rospy_tutorials::AddTwoIntsRequest::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: AddTwoIntsRequest");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = rospy_tutorials::AddTwoIntsResponse::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<rospy_tutorials::AddTwoIntsResponse>(
                    // boost::lambda::new_ptr<rospy_tutorials::AddTwoIntsResponse>(),
                    [](){ return new rospy_tutorials::AddTwoIntsResponse(); },
                                std::bind(allocateMessage,rospy_tutorials::AddTwoIntsResponse::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: AddTwoIntsResponse");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = rospy_tutorials::AddTwoIntsResponse::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(rospy_tutorials::AddTwoIntsResponse::DATA_TYPE_NAME,rospy_tutorials::AddTwoIntsResponse::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: AddTwoIntsResponse");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = rospy_tutorials::AddTwoInts::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<rospy_tutorials::AddTwoInts>(
                    // boost::lambda::new_ptr<rospy_tutorials::AddTwoInts>(),
                    [](){ return new rospy_tutorials::AddTwoInts(); },
                                std::bind(allocateMessage,rospy_tutorials::AddTwoInts::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: AddTwoInts");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = rospy_tutorials::AddTwoInts::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(rospy_tutorials::AddTwoInts::DATA_TYPE_NAME,rospy_tutorials::AddTwoInts::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: AddTwoInts");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = rospy_tutorials::BadTwoIntsRequest::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<rospy_tutorials::BadTwoIntsRequest>(
                    // boost::lambda::new_ptr<rospy_tutorials::BadTwoIntsRequest>(),
                    [](){ return new rospy_tutorials::BadTwoIntsRequest(); },
                                std::bind(allocateMessage,rospy_tutorials::BadTwoIntsRequest::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: BadTwoIntsRequest");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = rospy_tutorials::BadTwoIntsRequest::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(rospy_tutorials::BadTwoIntsRequest::DATA_TYPE_NAME,rospy_tutorials::BadTwoIntsRequest::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: BadTwoIntsRequest");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = rospy_tutorials::BadTwoIntsResponse::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<rospy_tutorials::BadTwoIntsResponse>(
                    // boost::lambda::new_ptr<rospy_tutorials::BadTwoIntsResponse>(),
                    [](){ return new rospy_tutorials::BadTwoIntsResponse(); },
                                std::bind(allocateMessage,rospy_tutorials::BadTwoIntsResponse::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: BadTwoIntsResponse");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = rospy_tutorials::BadTwoIntsResponse::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(rospy_tutorials::BadTwoIntsResponse::DATA_TYPE_NAME,rospy_tutorials::BadTwoIntsResponse::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: BadTwoIntsResponse");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = rospy_tutorials::BadTwoInts::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerType<rospy_tutorials::BadTwoInts>(
                    // boost::lambda::new_ptr<rospy_tutorials::BadTwoInts>(),
                    [](){ return new rospy_tutorials::BadTwoInts(); },
                                std::bind(allocateMessage,rospy_tutorials::BadTwoInts::ID,
                                          std::placeholders::_1))) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class: BadTwoInts");
            }

            if ((retval == rframe::Error::SUCCESS) 
                //  && ((retval = rospy_tutorials::BadTwoInts::registerType()) != rframe::Error::SUCCESS))
                && ((retval = reg.registerAlias(rospy_tutorials::BadTwoInts::DATA_TYPE_NAME,rospy_tutorials::BadTwoInts::DATA_TYPE_FULL_NAME)) != rframe::Error::SUCCESS)
                )
            {
                LOG_CRIT("failed to register class alias to short name: BadTwoInts");
            }

        }

        return retval;
    };

    std::string xmlSource()
    {
        return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\
<!--\
 \
  AUTOGENERATED FILE:   do not edit\
\
  Generated by:         alex on alex-laptop, 2016-11-23 12:44:34 -0500\
  From Template/Script: rosToXML.rb\
 \
\
-->\
<classes library_name=\"rospy_tutorials_gencpp\" namespace=\"rospy_tutorials\">\
\
<class name=\"Floats\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"420cd38b6b071cd49f2970c3e2cee511\" rosDesc=\"float32[] data\\n\" comment=\"\">\
  <field name=\"data\" type=\"vector(float)\" sourceType=\"float32\" comment=\"\"/>\
</class>\
\
<class name=\"HeaderString\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"c99a9440709e4d4a9716d55b8270d5e7\" rosDesc=\"Header header\\nstring data\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\" comment=\"\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"\"/>\
  <field name=\"data\" type=\"string\" sourceType=\"string\" comment=\"\"/>\
</class>\
\
<class name=\"AddTwoIntsRequest\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"\">\
  <field name=\"a\" type=\"long long int\" sourceType=\"int64\" comment=\"\"/>\
  <field name=\"b\" type=\"long long int\" sourceType=\"int64\" comment=\"no comment provided\"/>\
</class>\
\
<class name=\"AddTwoIntsResponse\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"\">\
  <field name=\"sum\" type=\"long long int\" sourceType=\"int64\" comment=\"\"/>\
</class>\
\
<class name=\"AddTwoInts\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"\">\
  <definition name=\"Request\" type=\"AddTwoIntsRequest\"/>\
  <definition name=\"Response\" type=\"AddTwoIntsResponse\"/>\
  <field name=\"request\" type=\"Request\" comment=\"request data type\"/>\
  <field name=\"response\" type=\"Response\" comment=\"response data type\"/>\
</class>\
\
<class name=\"BadTwoIntsRequest\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"Bad version of AddTwoInts for unit testing\">\
  <field name=\"a\" type=\"long long int\" sourceType=\"int64\" comment=\"\"/>\
  <field name=\"b\" type=\"int\" sourceType=\"int32\" comment=\"no comment provided\"/>\
</class>\
\
<class name=\"BadTwoIntsResponse\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"Bad version of AddTwoInts for unit testing\">\
  <field name=\"sum\" type=\"int\" sourceType=\"int32\" comment=\"\"/>\
</class>\
\
<class name=\"BadTwoInts\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"Bad version of AddTwoInts for unit testing\">\
  <definition name=\"Request\" type=\"BadTwoIntsRequest\"/>\
  <definition name=\"Response\" type=\"BadTwoIntsResponse\"/>\
  <field name=\"request\" type=\"Request\" comment=\"request data type\"/>\
  <field name=\"response\" type=\"Response\" comment=\"response data type\"/>\
</class>\
\
<dependency name=\"std_msgs_gencpp\"/>\
<dependency name=\"std_srvs_gencpp\"/>\
\
</classes>\
";
    }

}; // end namespace rospy_tutorials


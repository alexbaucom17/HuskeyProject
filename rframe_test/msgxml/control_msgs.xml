<!--
 
  AUTOGENERATED FILE:   do not edit

  Generated by:         alex on alex-laptop, 2016-12-05 12:07:23 -0500
  From Template/Script: rosToXML.rb
 

-->
<classes library_name="control_msgs_gencpp" namespace="control_msgs" >

<class name="FollowJointTrajectoryAction" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="bc4f9b743838566551c0390c65f1a248" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nFollowJointTrajectoryActionGoal action_goal\nFollowJointTrajectoryActionResult action_result\nFollowJointTrajectoryActionFeedback action_feedback\n\n================================================================================\nMSG: control_msgs/FollowJointTrajectoryActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nFollowJointTrajectoryGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/FollowJointTrajectoryGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n# The joint trajectory to follow\ntrajectory_msgs/JointTrajectory trajectory\n\n# Tolerances for the trajectory.  If the measured joint values fall\n# outside the tolerances the trajectory goal is aborted.  Any\n# tolerances that are not specified (by being omitted or set to 0) are\n# set to the defaults for the action server (often taken from the\n# parameter server).\n\n# Tolerances applied to the joints as the trajectory is executed.  If\n# violated, the goal aborts with error_code set to\n# PATH_TOLERANCE_VIOLATED.\nJointTolerance[] path_tolerance\n\n# To report success, the joints must be within goal_tolerance of the\n# final trajectory value.  The goal must be achieved by time the\n# trajectory ends plus goal_time_tolerance.  (goal_time_tolerance\n# allows some leeway in time, so that the trajectory goal can still\n# succeed even if the joints reach the goal some time after the\n# precise end time of the trajectory).\n#\n# If the joints are not within goal_tolerance after \&quot;trajectory finish\n# time\&quot; + goal_time_tolerance, the goal aborts with error_code set to\n# GOAL_TOLERANCE_VIOLATED\nJointTolerance[] goal_tolerance\nduration goal_time_tolerance\n\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectory\nHeader header\nstring[] joint_names\nJointTrajectoryPoint[] points\n================================================================================\nMSG: trajectory_msgs/JointTrajectoryPoint\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n\n================================================================================\nMSG: control_msgs/JointTolerance\n# The tolerances specify the amount the position, velocity, and\n# accelerations can vary from the setpoints.  For example, in the case\n# of trajectory control, when the actual position varies beyond\n# (desired position + position tolerance), the trajectory goal may\n# abort.\n# \n# There are two special values for tolerances:\n#  * 0 - The tolerance is unspecified and will remain at whatever the default is\n#  * -1 - The tolerance is \&quot;erased\&quot;.  If there was a default, the joint will be\n#         allowed to move without restriction.\n\nstring name\nfloat64 position  # in radians or meters (for a revolute or prismatic joint, respectively)\nfloat64 velocity  # in rad/sec or m/sec\nfloat64 acceleration  # in rad/sec^2 or m/sec^2\n\n================================================================================\nMSG: control_msgs/FollowJointTrajectoryActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nFollowJointTrajectoryResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: control_msgs/FollowJointTrajectoryResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 error_code\nint32 SUCCESSFUL = 0\nint32 INVALID_GOAL = -1\nint32 INVALID_JOINTS = -2\nint32 OLD_HEADER_TIMESTAMP = -3\nint32 PATH_TOLERANCE_VIOLATED = -4\nint32 GOAL_TOLERANCE_VIOLATED = -5\n\n# Human readable description of the error code. Contains complementary\n# information that is especially useful when execution fails, for instance:\n# - INVALID_GOAL: The reason for the invalid goal (e.g., the requested\n#   trajectory is in the past).\n# - INVALID_JOINTS: The mismatch between the expected controller joints\n#   and those provided in the goal.\n# - PATH_TOLERANCE_VIOLATED and GOAL_TOLERANCE_VIOLATED: Which joint\n#   violated which tolerance, and by how much.\nstring error_string\n\n\n================================================================================\nMSG: control_msgs/FollowJointTrajectoryActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nFollowJointTrajectoryFeedback feedback\n\n================================================================================\nMSG: control_msgs/FollowJointTrajectoryFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nHeader header\nstring[] joint_names\ntrajectory_msgs/JointTrajectoryPoint desired\ntrajectory_msgs/JointTrajectoryPoint actual\ntrajectory_msgs/JointTrajectoryPoint error\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="action_goal" type="FollowJointTrajectoryActionGoal"  sourceType="FollowJointTrajectoryActionGoal" comment="" />
  <field name="action_result" type="FollowJointTrajectoryActionResult"  sourceType="FollowJointTrajectoryActionResult" comment="" />
  <field name="action_feedback" type="FollowJointTrajectoryActionFeedback"  sourceType="FollowJointTrajectoryActionFeedback" comment="" />
</class>

<class name="FollowJointTrajectoryActionFeedback" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="d8920dc4eae9fc107e00999cce4be641" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nFollowJointTrajectoryFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/FollowJointTrajectoryFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nHeader header\nstring[] joint_names\ntrajectory_msgs/JointTrajectoryPoint desired\ntrajectory_msgs/JointTrajectoryPoint actual\ntrajectory_msgs/JointTrajectoryPoint error\n\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectoryPoint\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="status" type="actionlib_msgs::GoalStatus"  sourceType="actionlib_msgs::GoalStatus" comment="" />
  <field name="feedback" type="FollowJointTrajectoryFeedback"  sourceType="FollowJointTrajectoryFeedback" comment="" />
</class>

<class name="FollowJointTrajectoryActionGoal" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="cff5c1d533bf2f82dd0138d57f4304bb" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nFollowJointTrajectoryGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/FollowJointTrajectoryGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n# The joint trajectory to follow\ntrajectory_msgs/JointTrajectory trajectory\n\n# Tolerances for the trajectory.  If the measured joint values fall\n# outside the tolerances the trajectory goal is aborted.  Any\n# tolerances that are not specified (by being omitted or set to 0) are\n# set to the defaults for the action server (often taken from the\n# parameter server).\n\n# Tolerances applied to the joints as the trajectory is executed.  If\n# violated, the goal aborts with error_code set to\n# PATH_TOLERANCE_VIOLATED.\nJointTolerance[] path_tolerance\n\n# To report success, the joints must be within goal_tolerance of the\n# final trajectory value.  The goal must be achieved by time the\n# trajectory ends plus goal_time_tolerance.  (goal_time_tolerance\n# allows some leeway in time, so that the trajectory goal can still\n# succeed even if the joints reach the goal some time after the\n# precise end time of the trajectory).\n#\n# If the joints are not within goal_tolerance after \&quot;trajectory finish\n# time\&quot; + goal_time_tolerance, the goal aborts with error_code set to\n# GOAL_TOLERANCE_VIOLATED\nJointTolerance[] goal_tolerance\nduration goal_time_tolerance\n\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectory\nHeader header\nstring[] joint_names\nJointTrajectoryPoint[] points\n================================================================================\nMSG: trajectory_msgs/JointTrajectoryPoint\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n\n================================================================================\nMSG: control_msgs/JointTolerance\n# The tolerances specify the amount the position, velocity, and\n# accelerations can vary from the setpoints.  For example, in the case\n# of trajectory control, when the actual position varies beyond\n# (desired position + position tolerance), the trajectory goal may\n# abort.\n# \n# There are two special values for tolerances:\n#  * 0 - The tolerance is unspecified and will remain at whatever the default is\n#  * -1 - The tolerance is \&quot;erased\&quot;.  If there was a default, the joint will be\n#         allowed to move without restriction.\n\nstring name\nfloat64 position  # in radians or meters (for a revolute or prismatic joint, respectively)\nfloat64 velocity  # in rad/sec or m/sec\nfloat64 acceleration  # in rad/sec^2 or m/sec^2\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="goal_id" type="actionlib_msgs::GoalID"  sourceType="actionlib_msgs::GoalID" comment="" />
  <field name="goal" type="FollowJointTrajectoryGoal"  sourceType="FollowJointTrajectoryGoal" comment="" />
</class>

<class name="FollowJointTrajectoryActionResult" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="c4fb3b000dc9da4fd99699380efcc5d9" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nFollowJointTrajectoryResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/FollowJointTrajectoryResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 error_code\nint32 SUCCESSFUL = 0\nint32 INVALID_GOAL = -1\nint32 INVALID_JOINTS = -2\nint32 OLD_HEADER_TIMESTAMP = -3\nint32 PATH_TOLERANCE_VIOLATED = -4\nint32 GOAL_TOLERANCE_VIOLATED = -5\n\n# Human readable description of the error code. Contains complementary\n# information that is especially useful when execution fails, for instance:\n# - INVALID_GOAL: The reason for the invalid goal (e.g., the requested\n#   trajectory is in the past).\n# - INVALID_JOINTS: The mismatch between the expected controller joints\n#   and those provided in the goal.\n# - PATH_TOLERANCE_VIOLATED and GOAL_TOLERANCE_VIOLATED: Which joint\n#   violated which tolerance, and by how much.\nstring error_string\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="status" type="actionlib_msgs::GoalStatus"  sourceType="actionlib_msgs::GoalStatus" comment="" />
  <field name="result" type="FollowJointTrajectoryResult"  sourceType="FollowJointTrajectoryResult" comment="" />
</class>

<class name="FollowJointTrajectoryFeedback" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="10817c60c2486ef6b33e97dcd87f4474" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nHeader header\nstring[] joint_names\ntrajectory_msgs/JointTrajectoryPoint desired\ntrajectory_msgs/JointTrajectoryPoint actual\ntrajectory_msgs/JointTrajectoryPoint error\n\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectoryPoint\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="joint_names" type="vector(string)"  sourceType="string" comment="" />
  <field name="desired" type="trajectory_msgs::JointTrajectoryPoint"  sourceType="trajectory_msgs::JointTrajectoryPoint" comment="" />
  <field name="actual" type="trajectory_msgs::JointTrajectoryPoint"  sourceType="trajectory_msgs::JointTrajectoryPoint" comment="" />
  <field name="error" type="trajectory_msgs::JointTrajectoryPoint"  sourceType="trajectory_msgs::JointTrajectoryPoint" comment="" />
</class>

<class name="FollowJointTrajectoryGoal" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="69636787b6ecbde4d61d711979bc7ecb" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n# The joint trajectory to follow\ntrajectory_msgs/JointTrajectory trajectory\n\n# Tolerances for the trajectory.  If the measured joint values fall\n# outside the tolerances the trajectory goal is aborted.  Any\n# tolerances that are not specified (by being omitted or set to 0) are\n# set to the defaults for the action server (often taken from the\n# parameter server).\n\n# Tolerances applied to the joints as the trajectory is executed.  If\n# violated, the goal aborts with error_code set to\n# PATH_TOLERANCE_VIOLATED.\nJointTolerance[] path_tolerance\n\n# To report success, the joints must be within goal_tolerance of the\n# final trajectory value.  The goal must be achieved by time the\n# trajectory ends plus goal_time_tolerance.  (goal_time_tolerance\n# allows some leeway in time, so that the trajectory goal can still\n# succeed even if the joints reach the goal some time after the\n# precise end time of the trajectory).\n#\n# If the joints are not within goal_tolerance after \&quot;trajectory finish\n# time\&quot; + goal_time_tolerance, the goal aborts with error_code set to\n# GOAL_TOLERANCE_VIOLATED\nJointTolerance[] goal_tolerance\nduration goal_time_tolerance\n\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectory\nHeader header\nstring[] joint_names\nJointTrajectoryPoint[] points\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectoryPoint\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n\n================================================================================\nMSG: control_msgs/JointTolerance\n# The tolerances specify the amount the position, velocity, and\n# accelerations can vary from the setpoints.  For example, in the case\n# of trajectory control, when the actual position varies beyond\n# (desired position + position tolerance), the trajectory goal may\n# abort.\n# \n# There are two special values for tolerances:\n#  * 0 - The tolerance is unspecified and will remain at whatever the default is\n#  * -1 - The tolerance is \&quot;erased\&quot;.  If there was a default, the joint will be\n#         allowed to move without restriction.\n\nstring name\nfloat64 position  # in radians or meters (for a revolute or prismatic joint, respectively)\nfloat64 velocity  # in rad/sec or m/sec\nfloat64 acceleration  # in rad/sec^2 or m/sec^2\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
 The joint trajectory to follow" >
  <field name="trajectory" type="trajectory_msgs::JointTrajectory"  sourceType="trajectory_msgs::JointTrajectory" comment="Tolerances for the trajectory.  If the measured joint values fall
 outside the tolerances the trajectory goal is aborted.  Any
 tolerances that are not specified (by being omitted or set to 0) are
 set to the defaults for the action server (often taken from the
 parameter server).
 Tolerances applied to the joints as the trajectory is executed.  If
 violated, the goal aborts with error_code set to
 PATH_TOLERANCE_VIOLATED." />
  <field name="path_tolerance" type="vector(JointTolerance)"  sourceType="JointTolerance" comment="To report success, the joints must be within goal_tolerance of the
 final trajectory value.  The goal must be achieved by time the
 trajectory ends plus goal_time_tolerance.  (goal_time_tolerance
 allows some leeway in time, so that the trajectory goal can still
 succeed even if the joints reach the goal some time after the
 precise end time of the trajectory).

 If the joints are not within goal_tolerance after &quot;trajectory finish
 time&quot; + goal_time_tolerance, the goal aborts with error_code set to
 GOAL_TOLERANCE_VIOLATED" />
  <field name="goal_tolerance" type="vector(JointTolerance)"  sourceType="JointTolerance" comment="" />
  <field name="goal_time_tolerance" type="std_msgs::RosDuration"  sourceType="duration" comment="" />
</class>

<class name="FollowJointTrajectoryResult" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="493383b18409bfb604b4e26c676401d2" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 error_code\nint32 SUCCESSFUL = 0\nint32 INVALID_GOAL = -1\nint32 INVALID_JOINTS = -2\nint32 OLD_HEADER_TIMESTAMP = -3\nint32 PATH_TOLERANCE_VIOLATED = -4\nint32 GOAL_TOLERANCE_VIOLATED = -5\n\n# Human readable description of the error code. Contains complementary\n# information that is especially useful when execution fails, for instance:\n# - INVALID_GOAL: The reason for the invalid goal (e.g., the requested\n#   trajectory is in the past).\n# - INVALID_JOINTS: The mismatch between the expected controller joints\n#   and those provided in the goal.\n# - PATH_TOLERANCE_VIOLATED and GOAL_TOLERANCE_VIOLATED: Which joint\n#   violated which tolerance, and by how much.\nstring error_string\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="error_code" type="int"  sourceType="int32" comment="" />
  <constant init="0" name="SUCCESSFUL" type="int"  sourceType="int32" comment="" />
  <constant init="-1" name="INVALID_GOAL" type="int"  sourceType="int32" comment="" />
  <constant init="-2" name="INVALID_JOINTS" type="int"  sourceType="int32" comment="" />
  <constant init="-3" name="OLD_HEADER_TIMESTAMP" type="int"  sourceType="int32" comment="" />
  <constant init="-4" name="PATH_TOLERANCE_VIOLATED" type="int"  sourceType="int32" comment="" />
  <constant init="-5" name="GOAL_TOLERANCE_VIOLATED" type="int"  sourceType="int32" comment="Human readable description of the error code. Contains complementary
 information that is especially useful when execution fails, for instance:
 - INVALID_GOAL: The reason for the invalid goal (e.g., the requested
   trajectory is in the past).
 - INVALID_JOINTS: The mismatch between the expected controller joints
   and those provided in the goal.
 - PATH_TOLERANCE_VIOLATED and GOAL_TOLERANCE_VIOLATED: Which joint
   violated which tolerance, and by how much." />
  <field name="error_string" type="string"  sourceType="string" comment="" />
</class>

<class name="GripperCommand" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="680acaff79486f017132a7f198d40f08" rosDesc="float64 position\nfloat64 max_effort\n" comment="" >
  <field name="position" type="double"  sourceType="float64" comment="" />
  <field name="max_effort" type="double"  sourceType="float64" comment="" />
</class>

<class name="GripperCommandAction" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="950b2a6ebe831f5d4f4ceaba3d8be01e" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nGripperCommandActionGoal action_goal\nGripperCommandActionResult action_result\nGripperCommandActionFeedback action_feedback\n\n================================================================================\nMSG: control_msgs/GripperCommandActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nGripperCommandGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/GripperCommandGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nGripperCommand command\n\n================================================================================\nMSG: control_msgs/GripperCommand\nfloat64 position\nfloat64 max_effort\n\n================================================================================\nMSG: control_msgs/GripperCommandActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nGripperCommandResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: control_msgs/GripperCommandResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 position  # The current gripper gap size (in meters)\nfloat64 effort    # The current effort exerted (in Newtons)\nbool stalled      # True iff the gripper is exerting max effort and not moving\nbool reached_goal # True iff the gripper position has reached the commanded setpoint\n\n================================================================================\nMSG: control_msgs/GripperCommandActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nGripperCommandFeedback feedback\n\n================================================================================\nMSG: control_msgs/GripperCommandFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 position  # The current gripper gap size (in meters)\nfloat64 effort    # The current effort exerted (in Newtons)\nbool stalled      # True iff the gripper is exerting max effort and not moving\nbool reached_goal # True iff the gripper position has reached the commanded setpoint\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="action_goal" type="GripperCommandActionGoal"  sourceType="GripperCommandActionGoal" comment="" />
  <field name="action_result" type="GripperCommandActionResult"  sourceType="GripperCommandActionResult" comment="" />
  <field name="action_feedback" type="GripperCommandActionFeedback"  sourceType="GripperCommandActionFeedback" comment="" />
</class>

<class name="GripperCommandActionFeedback" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="653dff30c045f5e6ff3feb3409f4558d" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nGripperCommandFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/GripperCommandFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 position  # The current gripper gap size (in meters)\nfloat64 effort    # The current effort exerted (in Newtons)\nbool stalled      # True iff the gripper is exerting max effort and not moving\nbool reached_goal # True iff the gripper position has reached the commanded setpoint\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="status" type="actionlib_msgs::GoalStatus"  sourceType="actionlib_msgs::GoalStatus" comment="" />
  <field name="feedback" type="GripperCommandFeedback"  sourceType="GripperCommandFeedback" comment="" />
</class>

<class name="GripperCommandActionGoal" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="aa581f648a35ed681db2ec0bf7a82bea" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nGripperCommandGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/GripperCommandGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nGripperCommand command\n\n================================================================================\nMSG: control_msgs/GripperCommand\nfloat64 position\nfloat64 max_effort\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="goal_id" type="actionlib_msgs::GoalID"  sourceType="actionlib_msgs::GoalID" comment="" />
  <field name="goal" type="GripperCommandGoal"  sourceType="GripperCommandGoal" comment="" />
</class>

<class name="GripperCommandActionResult" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="143702cb2df0f163c5283cedc5efc6b6" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nGripperCommandResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/GripperCommandResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 position  # The current gripper gap size (in meters)\nfloat64 effort    # The current effort exerted (in Newtons)\nbool stalled      # True iff the gripper is exerting max effort and not moving\nbool reached_goal # True iff the gripper position has reached the commanded setpoint\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="status" type="actionlib_msgs::GoalStatus"  sourceType="actionlib_msgs::GoalStatus" comment="" />
  <field name="result" type="GripperCommandResult"  sourceType="GripperCommandResult" comment="" />
</class>

<class name="GripperCommandFeedback" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="e4cbff56d3562bcf113da5a5adeef91f" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 position  # The current gripper gap size (in meters)\nfloat64 effort    # The current effort exerted (in Newtons)\nbool stalled      # True iff the gripper is exerting max effort and not moving\nbool reached_goal # True iff the gripper position has reached the commanded setpoint\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="position" type="double"  sourceType="float64" comment="The current gripper gap size (in meters)" />
  <field name="effort" type="double"  sourceType="float64" comment="The current effort exerted (in Newtons)" />
  <field name="stalled" type="bool"  sourceType="bool" comment="True iff the gripper is exerting max effort and not moving" />
  <field name="reached_goal" type="bool"  sourceType="bool" comment="True iff the gripper position has reached the commanded setpoint" />
</class>

<class name="GripperCommandGoal" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="86fd82f4ddc48a4cb6856cfa69217e43" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nGripperCommand command\n\n================================================================================\nMSG: control_msgs/GripperCommand\nfloat64 position\nfloat64 max_effort\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="command" type="GripperCommand"  sourceType="GripperCommand" comment="" />
</class>

<class name="GripperCommandResult" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="e4cbff56d3562bcf113da5a5adeef91f" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 position  # The current gripper gap size (in meters)\nfloat64 effort    # The current effort exerted (in Newtons)\nbool stalled      # True iff the gripper is exerting max effort and not moving\nbool reached_goal # True iff the gripper position has reached the commanded setpoint\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="position" type="double"  sourceType="float64" comment="The current gripper gap size (in meters)" />
  <field name="effort" type="double"  sourceType="float64" comment="The current effort exerted (in Newtons)" />
  <field name="stalled" type="bool"  sourceType="bool" comment="True iff the gripper is exerting max effort and not moving" />
  <field name="reached_goal" type="bool"  sourceType="bool" comment="True iff the gripper position has reached the commanded setpoint" />
</class>

<class name="JointControllerState" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="c0d034a7bf20aeb1c37f3eccb7992b69" rosDesc="Header header\nfloat64 set_point\nfloat64 process_value\nfloat64 process_value_dot\nfloat64 error\nfloat64 time_step\nfloat64 command\nfloat64 p\nfloat64 i\nfloat64 d\nfloat64 i_clamp\n\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n" comment="" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="set_point" type="double"  sourceType="float64" comment="" />
  <field name="process_value" type="double"  sourceType="float64" comment="" />
  <field name="process_value_dot" type="double"  sourceType="float64" comment="" />
  <field name="error" type="double"  sourceType="float64" comment="" />
  <field name="time_step" type="double"  sourceType="float64" comment="" />
  <field name="command" type="double"  sourceType="float64" comment="" />
  <field name="p" type="double"  sourceType="float64" comment="" />
  <field name="i" type="double"  sourceType="float64" comment="" />
  <field name="d" type="double"  sourceType="float64" comment="" />
  <field name="i_clamp" type="double"  sourceType="float64" comment="" />
</class>

<class name="JointTolerance" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="f544fe9c16cf04547e135dd6063ff5be" rosDesc="# The tolerances specify the amount the position, velocity, and\n# accelerations can vary from the setpoints.  For example, in the case\n# of trajectory control, when the actual position varies beyond\n# (desired position + position tolerance), the trajectory goal may\n# abort.\n# \n# There are two special values for tolerances:\n#  * 0 - The tolerance is unspecified and will remain at whatever the default is\n#  * -1 - The tolerance is \&quot;erased\&quot;.  If there was a default, the joint will be\n#         allowed to move without restriction.\n\nstring name\nfloat64 position  # in radians or meters (for a revolute or prismatic joint, respectively)\nfloat64 velocity  # in rad/sec or m/sec\nfloat64 acceleration  # in rad/sec^2 or m/sec^2\n" comment="The tolerances specify the amount the position, velocity, and
 accelerations can vary from the setpoints.  For example, in the case
 of trajectory control, when the actual position varies beyond
 (desired position + position tolerance), the trajectory goal may
 abort.
 
 There are two special values for tolerances:
  * 0 - The tolerance is unspecified and will remain at whatever the default is
  * -1 - The tolerance is &quot;erased&quot;.  If there was a default, the joint will be
         allowed to move without restriction." >
  <field name="name" type="string"  sourceType="string" comment="" />
  <field name="position" type="double"  sourceType="float64" comment="in radians or meters (for a revolute or prismatic joint, respectively)" />
  <field name="velocity" type="double"  sourceType="float64" comment="in rad/sec or m/sec" />
  <field name="acceleration" type="double"  sourceType="float64" comment="in rad/sec^2 or m/sec^2" />
</class>

<class name="JointTrajectoryAction" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="a04ba3ee8f6a2d0985a6aeaf23d9d7ad" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nJointTrajectoryActionGoal action_goal\nJointTrajectoryActionResult action_result\nJointTrajectoryActionFeedback action_feedback\n\n================================================================================\nMSG: control_msgs/JointTrajectoryActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nJointTrajectoryGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/JointTrajectoryGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ntrajectory_msgs/JointTrajectory trajectory\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectory\nHeader header\nstring[] joint_names\nJointTrajectoryPoint[] points\n================================================================================\nMSG: trajectory_msgs/JointTrajectoryPoint\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n\n================================================================================\nMSG: control_msgs/JointTrajectoryActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nJointTrajectoryResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: control_msgs/JointTrajectoryResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n================================================================================\nMSG: control_msgs/JointTrajectoryActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nJointTrajectoryFeedback feedback\n\n================================================================================\nMSG: control_msgs/JointTrajectoryFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="action_goal" type="JointTrajectoryActionGoal"  sourceType="JointTrajectoryActionGoal" comment="" />
  <field name="action_result" type="JointTrajectoryActionResult"  sourceType="JointTrajectoryActionResult" comment="" />
  <field name="action_feedback" type="JointTrajectoryActionFeedback"  sourceType="JointTrajectoryActionFeedback" comment="" />
</class>

<class name="JointTrajectoryActionFeedback" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="aae20e09065c3809e8a8e87c4c8953fd" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nJointTrajectoryFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/JointTrajectoryFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="status" type="actionlib_msgs::GoalStatus"  sourceType="actionlib_msgs::GoalStatus" comment="" />
  <field name="feedback" type="JointTrajectoryFeedback"  sourceType="JointTrajectoryFeedback" comment="" />
</class>

<class name="JointTrajectoryActionGoal" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="a99e83ef6185f9fdd7693efe99623a86" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nJointTrajectoryGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/JointTrajectoryGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ntrajectory_msgs/JointTrajectory trajectory\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectory\nHeader header\nstring[] joint_names\nJointTrajectoryPoint[] points\n================================================================================\nMSG: trajectory_msgs/JointTrajectoryPoint\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="goal_id" type="actionlib_msgs::GoalID"  sourceType="actionlib_msgs::GoalID" comment="" />
  <field name="goal" type="JointTrajectoryGoal"  sourceType="JointTrajectoryGoal" comment="" />
</class>

<class name="JointTrajectoryActionResult" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="1eb06eeff08fa7ea874431638cb52332" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nJointTrajectoryResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/JointTrajectoryResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="status" type="actionlib_msgs::GoalStatus"  sourceType="actionlib_msgs::GoalStatus" comment="" />
  <field name="result" type="JointTrajectoryResult"  sourceType="JointTrajectoryResult" comment="" />
</class>

<class name="JointTrajectoryControllerState" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="10817c60c2486ef6b33e97dcd87f4474" rosDesc="Header header\nstring[] joint_names\ntrajectory_msgs/JointTrajectoryPoint desired\ntrajectory_msgs/JointTrajectoryPoint actual\ntrajectory_msgs/JointTrajectoryPoint error  # Redundant, but useful\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectoryPoint\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n" comment="" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="joint_names" type="vector(string)"  sourceType="string" comment="" />
  <field name="desired" type="trajectory_msgs::JointTrajectoryPoint"  sourceType="trajectory_msgs::JointTrajectoryPoint" comment="" />
  <field name="actual" type="trajectory_msgs::JointTrajectoryPoint"  sourceType="trajectory_msgs::JointTrajectoryPoint" comment="" />
  <field name="error" type="trajectory_msgs::JointTrajectoryPoint"  sourceType="trajectory_msgs::JointTrajectoryPoint" comment="Redundant, but useful" />
</class>

<class name="JointTrajectoryFeedback" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="d41d8cd98f00b204e9800998ecf8427e" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
</class>

<class name="JointTrajectoryGoal" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="2a0eff76c870e8595636c2a562ca298e" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ntrajectory_msgs/JointTrajectory trajectory\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectory\nHeader header\nstring[] joint_names\nJointTrajectoryPoint[] points\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectoryPoint\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="trajectory" type="trajectory_msgs::JointTrajectory"  sourceType="trajectory_msgs::JointTrajectory" comment="" />
</class>

<class name="JointTrajectoryResult" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="d41d8cd98f00b204e9800998ecf8427e" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n" comment="" >
</class>

<class name="PointHeadAction" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="7252920f1243de1b741f14f214125371" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nPointHeadActionGoal action_goal\nPointHeadActionResult action_result\nPointHeadActionFeedback action_feedback\n\n================================================================================\nMSG: control_msgs/PointHeadActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nPointHeadGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/PointHeadGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ngeometry_msgs/PointStamped target\ngeometry_msgs/Vector3 pointing_axis\nstring pointing_frame\nduration min_duration\nfloat64 max_velocity\n\n================================================================================\nMSG: geometry_msgs/PointStamped\n# This represents a Point with reference coordinate frame and timestamp\nHeader header\nPoint point\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: control_msgs/PointHeadActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nPointHeadResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: control_msgs/PointHeadResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n================================================================================\nMSG: control_msgs/PointHeadActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nPointHeadFeedback feedback\n\n================================================================================\nMSG: control_msgs/PointHeadFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 pointing_angle_error\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="action_goal" type="PointHeadActionGoal"  sourceType="PointHeadActionGoal" comment="" />
  <field name="action_result" type="PointHeadActionResult"  sourceType="PointHeadActionResult" comment="" />
  <field name="action_feedback" type="PointHeadActionFeedback"  sourceType="PointHeadActionFeedback" comment="" />
</class>

<class name="PointHeadActionFeedback" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="33c9244957176bbba97dd641119e8460" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nPointHeadFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/PointHeadFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 pointing_angle_error\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="status" type="actionlib_msgs::GoalStatus"  sourceType="actionlib_msgs::GoalStatus" comment="" />
  <field name="feedback" type="PointHeadFeedback"  sourceType="PointHeadFeedback" comment="" />
</class>

<class name="PointHeadActionGoal" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="b53a8323d0ba7b310ba17a2d3a82a6b8" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nPointHeadGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/PointHeadGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ngeometry_msgs/PointStamped target\ngeometry_msgs/Vector3 pointing_axis\nstring pointing_frame\nduration min_duration\nfloat64 max_velocity\n\n================================================================================\nMSG: geometry_msgs/PointStamped\n# This represents a Point with reference coordinate frame and timestamp\nHeader header\nPoint point\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="goal_id" type="actionlib_msgs::GoalID"  sourceType="actionlib_msgs::GoalID" comment="" />
  <field name="goal" type="PointHeadGoal"  sourceType="PointHeadGoal" comment="" />
</class>

<class name="PointHeadActionResult" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="1eb06eeff08fa7ea874431638cb52332" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nPointHeadResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/PointHeadResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="status" type="actionlib_msgs::GoalStatus"  sourceType="actionlib_msgs::GoalStatus" comment="" />
  <field name="result" type="PointHeadResult"  sourceType="PointHeadResult" comment="" />
</class>

<class name="PointHeadFeedback" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="cce80d27fd763682da8805a73316cab4" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 pointing_angle_error\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="pointing_angle_error" type="double"  sourceType="float64" comment="" />
</class>

<class name="PointHeadGoal" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="8b92b1cd5e06c8a94c917dc3209a4c1d" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ngeometry_msgs/PointStamped target\ngeometry_msgs/Vector3 pointing_axis\nstring pointing_frame\nduration min_duration\nfloat64 max_velocity\n\n================================================================================\nMSG: geometry_msgs/PointStamped\n# This represents a Point with reference coordinate frame and timestamp\nHeader header\nPoint point\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="target" type="geometry_msgs::PointStamped"  sourceType="geometry_msgs::PointStamped" comment="" />
  <field name="pointing_axis" type="geometry_msgs::Vector3"  sourceType="geometry_msgs::Vector3" comment="" />
  <field name="pointing_frame" type="string"  sourceType="string" comment="" />
  <field name="min_duration" type="std_msgs::RosDuration"  sourceType="duration" comment="" />
  <field name="max_velocity" type="double"  sourceType="float64" comment="" />
</class>

<class name="PointHeadResult" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="d41d8cd98f00b204e9800998ecf8427e" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n" comment="" >
</class>

<class name="SingleJointPositionAction" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="c4a786b7d53e5d0983decf967a5a779e" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nSingleJointPositionActionGoal action_goal\nSingleJointPositionActionResult action_result\nSingleJointPositionActionFeedback action_feedback\n\n================================================================================\nMSG: control_msgs/SingleJointPositionActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nSingleJointPositionGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/SingleJointPositionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 position\nduration min_duration\nfloat64 max_velocity\n\n================================================================================\nMSG: control_msgs/SingleJointPositionActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nSingleJointPositionResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: control_msgs/SingleJointPositionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n================================================================================\nMSG: control_msgs/SingleJointPositionActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nSingleJointPositionFeedback feedback\n\n================================================================================\nMSG: control_msgs/SingleJointPositionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nHeader header\nfloat64 position\nfloat64 velocity\nfloat64 error\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="action_goal" type="SingleJointPositionActionGoal"  sourceType="SingleJointPositionActionGoal" comment="" />
  <field name="action_result" type="SingleJointPositionActionResult"  sourceType="SingleJointPositionActionResult" comment="" />
  <field name="action_feedback" type="SingleJointPositionActionFeedback"  sourceType="SingleJointPositionActionFeedback" comment="" />
</class>

<class name="SingleJointPositionActionFeedback" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="3503b7cf8972f90d245850a5d8796cfa" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nSingleJointPositionFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/SingleJointPositionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nHeader header\nfloat64 position\nfloat64 velocity\nfloat64 error\n\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="status" type="actionlib_msgs::GoalStatus"  sourceType="actionlib_msgs::GoalStatus" comment="" />
  <field name="feedback" type="SingleJointPositionFeedback"  sourceType="SingleJointPositionFeedback" comment="" />
</class>

<class name="SingleJointPositionActionGoal" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="4b0d3d091471663e17749c1d0db90f61" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nSingleJointPositionGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/SingleJointPositionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 position\nduration min_duration\nfloat64 max_velocity\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="goal_id" type="actionlib_msgs::GoalID"  sourceType="actionlib_msgs::GoalID" comment="" />
  <field name="goal" type="SingleJointPositionGoal"  sourceType="SingleJointPositionGoal" comment="" />
</class>

<class name="SingleJointPositionActionResult" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="1eb06eeff08fa7ea874431638cb52332" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nSingleJointPositionResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/SingleJointPositionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="status" type="actionlib_msgs::GoalStatus"  sourceType="actionlib_msgs::GoalStatus" comment="" />
  <field name="result" type="SingleJointPositionResult"  sourceType="SingleJointPositionResult" comment="" />
</class>

<class name="SingleJointPositionFeedback" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="8cee65610a3d08e0a1bded82f146f1fd" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nHeader header\nfloat64 position\nfloat64 velocity\nfloat64 error\n\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="position" type="double"  sourceType="float64" comment="" />
  <field name="velocity" type="double"  sourceType="float64" comment="" />
  <field name="error" type="double"  sourceType="float64" comment="" />
</class>

<class name="SingleJointPositionGoal" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="fbaaa562a23a013fd5053e5f72cbb35c" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 position\nduration min_duration\nfloat64 max_velocity\n" comment="====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======" >
  <field name="position" type="double"  sourceType="float64" comment="" />
  <field name="min_duration" type="std_msgs::RosDuration"  sourceType="duration" comment="" />
  <field name="max_velocity" type="double"  sourceType="float64" comment="" />
</class>

<class name="SingleJointPositionResult" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="d41d8cd98f00b204e9800998ecf8427e" rosDesc="# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n" comment="" >
</class>

<class name="QueryCalibrationStateRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
</class>

<class name="QueryCalibrationStateResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="is_calibrated" type="bool"  sourceType="bool" comment="" />
</class>

<class name="QueryCalibrationState" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <definition name="Request" type="QueryCalibrationStateRequest" />
  <definition name="Response" type="QueryCalibrationStateResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<class name="QueryTrajectoryStateRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="time" type="std_msgs::RosTime"  sourceType="time" comment="no comment provided" />
</class>

<class name="QueryTrajectoryStateResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="name" type="vector(string)"  sourceType="string" comment="" />
  <field name="position" type="vector(double)"  sourceType="float64" comment="" />
  <field name="velocity" type="vector(double)"  sourceType="float64" comment="" />
  <field name="acceleration" type="vector(double)"  sourceType="float64" comment="" />
</class>

<class name="QueryTrajectoryState" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <definition name="Request" type="QueryTrajectoryStateRequest" />
  <definition name="Response" type="QueryTrajectoryStateResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<dependency name="actionlib_msgs_gencpp"/>
<dependency name="geometry_msgs_gencpp"/>
<dependency name="std_msgs_gencpp"/>
<dependency name="std_srvs_gencpp"/>
<dependency name="trajectory_msgs_gencpp"/>

</classes>

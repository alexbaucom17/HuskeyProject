// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:57 -0500
//  From Template/Script: data_templates/ROSTemplate.cpp.rb
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "std_srvs_gencpp_ROS.h"
#include <common/Log.h>
#include <common/DataTypeInfo.h>

using namespace std;
using namespace std_srvs;

rframe::ROSMessageFactory * ROS_std_srvs_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        ROS_std_srvs_gencppfactory = new std_srvs_gencppROSMessageFactory();

        return ROS_std_srvs_gencppfactory;
    };
}

rframe::ROSMessageFactory * std_srvs::allocate_std_srvs_gencpp()
{
    ROS_std_srvs_gencppfactory = new std_srvs_gencppROSMessageFactory();
    return ROS_std_srvs_gencppfactory;
};

std_srvs_gencppROSMessageFactory::std_srvs_gencppROSMessageFactory()
{
    name("std_srvs_gencpp");
    // use constructor to register data types
    std_srvs::registerLibrary();
}

std_srvs_gencppROSMessageFactory::~std_srvs_gencppROSMessageFactory()
{
}

int std_srvs_gencppROSMessageFactory::dataType(ros::SerializedMessage & msg)
{
    return msg.message_type;
}

void std_srvs_gencppROSMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(EmptyRequest::ID);
    info.name(EmptyRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(EmptyRequest::DATA_VERSION);
    info.md5Key(EmptyRequest::VERSION_MD5);
    info.xmlSource(EmptyRequest::XML_SOURCE);
    info.flat(EmptyRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(EmptyResponse::ID);
    info.name(EmptyResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(EmptyResponse::DATA_VERSION);
    info.md5Key(EmptyResponse::VERSION_MD5);
    info.xmlSource(EmptyResponse::XML_SOURCE);
    info.flat(EmptyResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(Empty::ID);
    info.name(Empty::DATA_TYPE_FULL_NAME);
    info.hashKey(Empty::DATA_VERSION);
    info.md5Key(Empty::VERSION_MD5);
    info.xmlSource(Empty::XML_SOURCE);
    info.flat(Empty::dataTypeFlat());
    ids.push_back(info);

    info.id(SetBoolRequest::ID);
    info.name(SetBoolRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(SetBoolRequest::DATA_VERSION);
    info.md5Key(SetBoolRequest::VERSION_MD5);
    info.xmlSource(SetBoolRequest::XML_SOURCE);
    info.flat(SetBoolRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(SetBoolResponse::ID);
    info.name(SetBoolResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(SetBoolResponse::DATA_VERSION);
    info.md5Key(SetBoolResponse::VERSION_MD5);
    info.xmlSource(SetBoolResponse::XML_SOURCE);
    info.flat(SetBoolResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(SetBool::ID);
    info.name(SetBool::DATA_TYPE_FULL_NAME);
    info.hashKey(SetBool::DATA_VERSION);
    info.md5Key(SetBool::VERSION_MD5);
    info.xmlSource(SetBool::XML_SOURCE);
    info.flat(SetBool::dataTypeFlat());
    ids.push_back(info);

    info.id(TriggerRequest::ID);
    info.name(TriggerRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(TriggerRequest::DATA_VERSION);
    info.md5Key(TriggerRequest::VERSION_MD5);
    info.xmlSource(TriggerRequest::XML_SOURCE);
    info.flat(TriggerRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(TriggerResponse::ID);
    info.name(TriggerResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(TriggerResponse::DATA_VERSION);
    info.md5Key(TriggerResponse::VERSION_MD5);
    info.xmlSource(TriggerResponse::XML_SOURCE);
    info.flat(TriggerResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(Trigger::ID);
    info.name(Trigger::DATA_TYPE_FULL_NAME);
    info.hashKey(Trigger::DATA_VERSION);
    info.md5Key(Trigger::VERSION_MD5);
    info.xmlSource(Trigger::XML_SOURCE);
    info.flat(Trigger::dataTypeFlat());
    ids.push_back(info);

}

int std_srvs_gencppROSMessageFactory::typeName(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case EmptyRequest::ID:
        {
            str = "std_srvs/EmptyRequest";
            break;
        }
        case EmptyResponse::ID:
        {
            str = "std_srvs/EmptyResponse";
            break;
        }
        case Empty::ID:
        {
            str = "std_srvs/Empty";
            break;
        }
        case SetBoolRequest::ID:
        {
            str = "std_srvs/SetBoolRequest";
            break;
        }
        case SetBoolResponse::ID:
        {
            str = "std_srvs/SetBoolResponse";
            break;
        }
        case SetBool::ID:
        {
            str = "std_srvs/SetBool";
            break;
        }
        case TriggerRequest::ID:
        {
            str = "std_srvs/TriggerRequest";
            break;
        }
        case TriggerResponse::ID:
        {
            str = "std_srvs/TriggerResponse";
            break;
        }
        case Trigger::ID:
        {
            str = "std_srvs/Trigger";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int std_srvs_gencppROSMessageFactory::desc(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case EmptyRequest::ID:
        {
            str = EmptyRequest::XML_SOURCE;
            break;
        }
        case EmptyResponse::ID:
        {
            str = EmptyResponse::XML_SOURCE;
            break;
        }
        case Empty::ID:
        {
            str = Empty::XML_SOURCE;
            break;
        }
        case SetBoolRequest::ID:
        {
            str = SetBoolRequest::XML_SOURCE;
            break;
        }
        case SetBoolResponse::ID:
        {
            str = SetBoolResponse::XML_SOURCE;
            break;
        }
        case SetBool::ID:
        {
            str = SetBool::XML_SOURCE;
            break;
        }
        case TriggerRequest::ID:
        {
            str = TriggerRequest::XML_SOURCE;
            break;
        }
        case TriggerResponse::ID:
        {
            str = TriggerResponse::XML_SOURCE;
            break;
        }
        case Trigger::ID:
        {
            str = Trigger::XML_SOURCE;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int std_srvs_gencppROSMessageFactory::md5String(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case EmptyRequest::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case EmptyResponse::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case Empty::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case SetBoolRequest::ID:
        {
            str = "8b94c1b53db61fb6aed406028ad6332a";
            break;
        }
        case SetBoolResponse::ID:
        {
            str = "937c9679a518e3a18d831e57125ea522";
            break;
        }
        case SetBool::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case TriggerRequest::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case TriggerResponse::ID:
        {
            str = "937c9679a518e3a18d831e57125ea522";
            break;
        }
        case Trigger::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int std_srvs_gencppROSMessageFactory::md5(unsigned long long & highOrder, unsigned long long & lowOrder, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case EmptyRequest::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case EmptyResponse::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case Empty::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case SetBoolRequest::ID:
        {   
		    highOrder = 0x8b94c1b53db61fb6ULL;
            lowOrder = 0xaed406028ad6332aULL;
            break;
        }
        case SetBoolResponse::ID:
        {   
		    highOrder = 0x937c9679a518e3a1ULL;
            lowOrder = 0x8d831e57125ea522ULL;
            break;
        }
        case SetBool::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case TriggerRequest::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case TriggerResponse::ID:
        {   
		    highOrder = 0x937c9679a518e3a1ULL;
            lowOrder = 0x8d831e57125ea522ULL;
            break;
        }
        case Trigger::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int std_srvs_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<ros::SerializedMessage> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case EmptyRequest::ID:
        case EmptyResponse::ID:
        case Empty::ID:
        case SetBoolRequest::ID:
        case SetBoolResponse::ID:
        case SetBool::ID:
        case TriggerRequest::ID:
        case TriggerResponse::ID:
        case Trigger::ID:
        {
            break;
        } 
        default:
	    {
            retval = rframe::Error::PARAM_RANGE;
            break;
	    }
    }

    if (retval == rframe::Error::SUCCESS)
	{
        std::shared_ptr<ros::SerializedMessage> newmsg(new ros::SerializedMessage);

        if (newmsg.get() == NULL)
	    {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else
	    {
            newmsg->message_type = id;
            msg.swap(newmsg);
        }
    }

    return retval;
}

int std_srvs_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case EmptyRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<EmptyRequest>(),std::bind(&std_srvs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case EmptyResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<EmptyResponse>(),std::bind(&std_srvs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case Empty::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<Empty>(),std::bind(&std_srvs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetBoolRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetBoolRequest>(),std::bind(&std_srvs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetBoolResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetBoolResponse>(),std::bind(&std_srvs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetBool::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetBool>(),std::bind(&std_srvs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case TriggerRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<TriggerRequest>(),std::bind(&std_srvs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case TriggerResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<TriggerResponse>(),std::bind(&std_srvs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case Trigger::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<Trigger>(),std::bind(&std_srvs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            retval = rframe::Error::PARAM_RANGE;
        }
    }

    return retval;
}

int std_srvs_gencppROSMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
	{
        delete msg;
    }

    return retval;
}

int std_srvs_gencppROSMessageFactory::deallocateTransport(ros::SerializedMessage * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        delete msg;
    }

    return retval;
}

int std_srvs_gencppROSMessageFactory::toTransport(MessageBase & src, ros::SerializedMessage & dst)
{
    int retval = rframe::Error::SUCCESS;

    if (dst.message_type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.message_type)
        { 
            case EmptyRequest::ID:
            {
                Message<EmptyRequest > & tempSrc = static_cast<Message<EmptyRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: std_srvs_gencpp::EmptyRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case EmptyResponse::ID:
            {
                Message<EmptyResponse > & tempSrc = static_cast<Message<EmptyResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: std_srvs_gencpp::EmptyResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case Empty::ID:
            {
                Message<Empty > & tempSrc = static_cast<Message<Empty>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: std_srvs_gencpp::Empty buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case SetBoolRequest::ID:
            {
                Message<SetBoolRequest > & tempSrc = static_cast<Message<SetBoolRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: std_srvs_gencpp::SetBoolRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case SetBoolResponse::ID:
            {
                Message<SetBoolResponse > & tempSrc = static_cast<Message<SetBoolResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: std_srvs_gencpp::SetBoolResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case SetBool::ID:
            {
                Message<SetBool > & tempSrc = static_cast<Message<SetBool>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: std_srvs_gencpp::SetBool buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case TriggerRequest::ID:
            {
                Message<TriggerRequest > & tempSrc = static_cast<Message<TriggerRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: std_srvs_gencpp::TriggerRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case TriggerResponse::ID:
            {
                Message<TriggerResponse > & tempSrc = static_cast<Message<TriggerResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: std_srvs_gencpp::TriggerResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case Trigger::ID:
            {
                Message<Trigger > & tempSrc = static_cast<Message<Trigger>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: std_srvs_gencpp::Trigger buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int std_srvs_gencppROSMessageFactory::fromTransport(ros::SerializedMessage & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.message_type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.message_type)
        { 
            case EmptyRequest::ID:
            {
                Message<EmptyRequest > & tempDst = static_cast<Message<EmptyRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case EmptyResponse::ID:
            {
                Message<EmptyResponse > & tempDst = static_cast<Message<EmptyResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case Empty::ID:
            {
                Message<Empty > & tempDst = static_cast<Message<Empty>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case SetBoolRequest::ID:
            {
                Message<SetBoolRequest > & tempDst = static_cast<Message<SetBoolRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case SetBoolResponse::ID:
            {
                Message<SetBoolResponse > & tempDst = static_cast<Message<SetBoolResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case SetBool::ID:
            {
                Message<SetBool > & tempDst = static_cast<Message<SetBool>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case TriggerRequest::ID:
            {
                Message<TriggerRequest > & tempDst = static_cast<Message<TriggerRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case TriggerResponse::ID:
            {
                Message<TriggerResponse > & tempDst = static_cast<Message<TriggerResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case Trigger::ID:
            {
                Message<Trigger > & tempDst = static_cast<Message<Trigger>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int std_srvs_gencppROSMessageFactory::updateHeader(rframe::MessageBase &msg, unsigned int seqNo)
{
    int retval = rframe::Error::SUCCESS;

    switch (msg.id())
    {   
        // Empty does not have a Header as its first member 
        // SetBoolRequest does not have a Header as its first member 
        // SetBoolResponse does not have a Header as its first member 
        // SetBool does not have a Header as its first member 
        // TriggerResponse does not have a Header as its first member 
        // Trigger does not have a Header as its first member 
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:48 -0500
//  From Template/Script: data_templates/NMLClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <stdio.h>
// main rcslib header
#include <nml.hh>
// cms updater header
#include <cms_up.hh>
#include <cms_pup.hh>

#include <common/Error.h>
#include <common/Log.h>
#include <common/Common.h>
#include <common/DataTypeInfo.h>

#include "diagnostic_msgs_gencpp_NML.h"
#include "diagnostic_msgs_gencpp_Library.h"
#include <messaging/nml/NMLSupport.h>
#include <interfaces/MessageFactoryInterface.h>

#include <DiagnosticArray.h>
#include <DiagnosticStatus.h>
#include <KeyValue.h>
#include <AddDiagnosticsRequest.h>
#include <AddDiagnosticsResponse.h>
#include <AddDiagnostics.h>
#include <SelfTestRequest.h>
#include <SelfTestResponse.h>
#include <SelfTest.h>

#include <boost/iostreams/stream_buffer.hpp>
#include <boost/iostreams/stream.hpp>

#include <boost/serialization/serialization.hpp>
#include <opensource/eos/archive/portable_iarchive.hpp>
#include <opensource/eos/archive/portable_oarchive.hpp>

using namespace std;
using namespace diagnostic_msgs;

rframe::NMLMessageFactory * NML_diagnostic_msgs_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        NML_diagnostic_msgs_gencppfactory = new diagnostic_msgs_gencppNMLMessageFactory();
        return NML_diagnostic_msgs_gencppfactory;
    };
}

rframe::NMLMessageFactory * diagnostic_msgs::allocate_diagnostic_msgs_gencpp()
{
    NML_diagnostic_msgs_gencppfactory = new diagnostic_msgs_gencppNMLMessageFactory();
    return NML_diagnostic_msgs_gencppfactory;
};

diagnostic_msgs_gencppNMLMessageFactory::diagnostic_msgs_gencppNMLMessageFactory()
{
    name("diagnostic_msgs_gencpp");
    // use constructor to register data types
    diagnostic_msgs::registerLibrary();
}

diagnostic_msgs_gencppNMLMessageFactory::~diagnostic_msgs_gencppNMLMessageFactory()
{
}

NML_FORMAT_PTR diagnostic_msgs_gencppNMLMessageFactory::FormatPointer()
{
    return diagnostic_msgs_gencpp_format;
}

int diagnostic_msgs_gencppNMLMessageFactory::dataType(NMLmsg & msg)
{
    return msg.type;
}

void diagnostic_msgs_gencppNMLMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(DiagnosticArray::ID);
    info.name(DiagnosticArray::DATA_TYPE_FULL_NAME);
    info.hashKey(DiagnosticArray::DATA_VERSION);
    info.md5Key(DiagnosticArray::VERSION_MD5);
    info.xmlSource(DiagnosticArray::XML_SOURCE);
    info.flat(DiagnosticArray::dataTypeFlat());
    ids.push_back(info);

    info.id(DiagnosticStatus::ID);
    info.name(DiagnosticStatus::DATA_TYPE_FULL_NAME);
    info.hashKey(DiagnosticStatus::DATA_VERSION);
    info.md5Key(DiagnosticStatus::VERSION_MD5);
    info.xmlSource(DiagnosticStatus::XML_SOURCE);
    info.flat(DiagnosticStatus::dataTypeFlat());
    ids.push_back(info);

    info.id(KeyValue::ID);
    info.name(KeyValue::DATA_TYPE_FULL_NAME);
    info.hashKey(KeyValue::DATA_VERSION);
    info.md5Key(KeyValue::VERSION_MD5);
    info.xmlSource(KeyValue::XML_SOURCE);
    info.flat(KeyValue::dataTypeFlat());
    ids.push_back(info);

    info.id(AddDiagnosticsRequest::ID);
    info.name(AddDiagnosticsRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(AddDiagnosticsRequest::DATA_VERSION);
    info.md5Key(AddDiagnosticsRequest::VERSION_MD5);
    info.xmlSource(AddDiagnosticsRequest::XML_SOURCE);
    info.flat(AddDiagnosticsRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(AddDiagnosticsResponse::ID);
    info.name(AddDiagnosticsResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(AddDiagnosticsResponse::DATA_VERSION);
    info.md5Key(AddDiagnosticsResponse::VERSION_MD5);
    info.xmlSource(AddDiagnosticsResponse::XML_SOURCE);
    info.flat(AddDiagnosticsResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(AddDiagnostics::ID);
    info.name(AddDiagnostics::DATA_TYPE_FULL_NAME);
    info.hashKey(AddDiagnostics::DATA_VERSION);
    info.md5Key(AddDiagnostics::VERSION_MD5);
    info.xmlSource(AddDiagnostics::XML_SOURCE);
    info.flat(AddDiagnostics::dataTypeFlat());
    ids.push_back(info);

    info.id(SelfTestRequest::ID);
    info.name(SelfTestRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(SelfTestRequest::DATA_VERSION);
    info.md5Key(SelfTestRequest::VERSION_MD5);
    info.xmlSource(SelfTestRequest::XML_SOURCE);
    info.flat(SelfTestRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(SelfTestResponse::ID);
    info.name(SelfTestResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(SelfTestResponse::DATA_VERSION);
    info.md5Key(SelfTestResponse::VERSION_MD5);
    info.xmlSource(SelfTestResponse::XML_SOURCE);
    info.flat(SelfTestResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(SelfTest::ID);
    info.name(SelfTest::DATA_TYPE_FULL_NAME);
    info.hashKey(SelfTest::DATA_VERSION);
    info.md5Key(SelfTest::VERSION_MD5);
    info.xmlSource(SelfTest::XML_SOURCE);
    info.flat(SelfTest::dataTypeFlat());
    ids.push_back(info);

}

int diagnostic_msgs_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<NMLmsg> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case DiagnosticArray::ID:
        {
            //DiagnosticArrayNML * newmsg = new DiagnosticArrayNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new DiagnosticArrayNML(),std::bind(&diagnostic_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case DiagnosticStatus::ID:
        {
            //DiagnosticStatusNML * newmsg = new DiagnosticStatusNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new DiagnosticStatusNML(),std::bind(&diagnostic_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case KeyValue::ID:
        {
            //KeyValueNML * newmsg = new KeyValueNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new KeyValueNML(),std::bind(&diagnostic_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case AddDiagnosticsRequest::ID:
        {
            //AddDiagnosticsRequestNML * newmsg = new AddDiagnosticsRequestNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new AddDiagnosticsRequestNML(),std::bind(&diagnostic_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case AddDiagnosticsResponse::ID:
        {
            //AddDiagnosticsResponseNML * newmsg = new AddDiagnosticsResponseNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new AddDiagnosticsResponseNML(),std::bind(&diagnostic_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case AddDiagnostics::ID:
        {
            //AddDiagnosticsNML * newmsg = new AddDiagnosticsNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new AddDiagnosticsNML(),std::bind(&diagnostic_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case SelfTestRequest::ID:
        {
            //SelfTestRequestNML * newmsg = new SelfTestRequestNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new SelfTestRequestNML(),std::bind(&diagnostic_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case SelfTestResponse::ID:
        {
            //SelfTestResponseNML * newmsg = new SelfTestResponseNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new SelfTestResponseNML(),std::bind(&diagnostic_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case SelfTest::ID:
        {
            //SelfTestNML * newmsg = new SelfTestNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new SelfTestNML(),std::bind(&diagnostic_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int diagnostic_msgs_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case DiagnosticArray::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<DiagnosticArray>(),std::bind(&diagnostic_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case DiagnosticStatus::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<DiagnosticStatus>(),std::bind(&diagnostic_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case KeyValue::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<KeyValue>(),std::bind(&diagnostic_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AddDiagnosticsRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AddDiagnosticsRequest>(),std::bind(&diagnostic_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AddDiagnosticsResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AddDiagnosticsResponse>(),std::bind(&diagnostic_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AddDiagnostics::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AddDiagnostics>(),std::bind(&diagnostic_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SelfTestRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SelfTestRequest>(),std::bind(&diagnostic_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SelfTestResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SelfTestResponse>(),std::bind(&diagnostic_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SelfTest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SelfTest>(),std::bind(&diagnostic_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int diagnostic_msgs_gencppNMLMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    delete msg;

    return retval;
}

int diagnostic_msgs_gencppNMLMessageFactory::deallocateTransport(NMLmsg * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        switch (msg->type)
        { 
            case DiagnosticArray::ID:
            {
                DiagnosticArrayNML * tempmsg = static_cast<DiagnosticArrayNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case DiagnosticStatus::ID:
            {
                DiagnosticStatusNML * tempmsg = static_cast<DiagnosticStatusNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case KeyValue::ID:
            {
                KeyValueNML * tempmsg = static_cast<KeyValueNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case AddDiagnosticsRequest::ID:
            {
                AddDiagnosticsRequestNML * tempmsg = static_cast<AddDiagnosticsRequestNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case AddDiagnosticsResponse::ID:
            {
                AddDiagnosticsResponseNML * tempmsg = static_cast<AddDiagnosticsResponseNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case AddDiagnostics::ID:
            {
                AddDiagnosticsNML * tempmsg = static_cast<AddDiagnosticsNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case SelfTestRequest::ID:
            {
                SelfTestRequestNML * tempmsg = static_cast<SelfTestRequestNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case SelfTestResponse::ID:
            {
                SelfTestResponseNML * tempmsg = static_cast<SelfTestResponseNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case SelfTest::ID:
            {
                SelfTestNML * tempmsg = static_cast<SelfTestNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            default:
            {
                retval = Error::NOT_FOUND;
                break;
            }
        }
    }

    return retval;
}

int diagnostic_msgs_gencppNMLMessageFactory::toTransport(MessageBase & src, NMLmsg & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)dst.type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.type)
        { 
            case DiagnosticArray::ID:
            {
                DiagnosticArrayNML & tempDst = static_cast<DiagnosticArrayNML&>(dst);
                Message<DiagnosticArray > & tempSrc = static_cast<Message<DiagnosticArray>&>(src);

                if (tempSrc.version() != DiagnosticArray::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of DiagnosticArray: " << __FILE__ << " expected: " 
                             << DiagnosticArray::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of DiagnosticArray: " << __FILE__ << " expected: " 
                         << DiagnosticArray::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case DiagnosticStatus::ID:
            {
                DiagnosticStatusNML & tempDst = static_cast<DiagnosticStatusNML&>(dst);
                Message<DiagnosticStatus > & tempSrc = static_cast<Message<DiagnosticStatus>&>(src);

                if (tempSrc.version() != DiagnosticStatus::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of DiagnosticStatus: " << __FILE__ << " expected: " 
                             << DiagnosticStatus::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of DiagnosticStatus: " << __FILE__ << " expected: " 
                         << DiagnosticStatus::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case KeyValue::ID:
            {
                KeyValueNML & tempDst = static_cast<KeyValueNML&>(dst);
                Message<KeyValue > & tempSrc = static_cast<Message<KeyValue>&>(src);

                if (tempSrc.version() != KeyValue::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of KeyValue: " << __FILE__ << " expected: " 
                             << KeyValue::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of KeyValue: " << __FILE__ << " expected: " 
                         << KeyValue::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case AddDiagnosticsRequest::ID:
            {
                AddDiagnosticsRequestNML & tempDst = static_cast<AddDiagnosticsRequestNML&>(dst);
                Message<AddDiagnosticsRequest > & tempSrc = static_cast<Message<AddDiagnosticsRequest>&>(src);

                if (tempSrc.version() != AddDiagnosticsRequest::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of AddDiagnosticsRequest: " << __FILE__ << " expected: " 
                             << AddDiagnosticsRequest::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of AddDiagnosticsRequest: " << __FILE__ << " expected: " 
                         << AddDiagnosticsRequest::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case AddDiagnosticsResponse::ID:
            {
                AddDiagnosticsResponseNML & tempDst = static_cast<AddDiagnosticsResponseNML&>(dst);
                Message<AddDiagnosticsResponse > & tempSrc = static_cast<Message<AddDiagnosticsResponse>&>(src);

                if (tempSrc.version() != AddDiagnosticsResponse::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of AddDiagnosticsResponse: " << __FILE__ << " expected: " 
                             << AddDiagnosticsResponse::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of AddDiagnosticsResponse: " << __FILE__ << " expected: " 
                         << AddDiagnosticsResponse::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case AddDiagnostics::ID:
            {
                AddDiagnosticsNML & tempDst = static_cast<AddDiagnosticsNML&>(dst);
                Message<AddDiagnostics > & tempSrc = static_cast<Message<AddDiagnostics>&>(src);

                if (tempSrc.version() != AddDiagnostics::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of AddDiagnostics: " << __FILE__ << " expected: " 
                             << AddDiagnostics::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of AddDiagnostics: " << __FILE__ << " expected: " 
                         << AddDiagnostics::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case SelfTestRequest::ID:
            {
                SelfTestRequestNML & tempDst = static_cast<SelfTestRequestNML&>(dst);
                Message<SelfTestRequest > & tempSrc = static_cast<Message<SelfTestRequest>&>(src);

                if (tempSrc.version() != SelfTestRequest::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of SelfTestRequest: " << __FILE__ << " expected: " 
                             << SelfTestRequest::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of SelfTestRequest: " << __FILE__ << " expected: " 
                         << SelfTestRequest::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case SelfTestResponse::ID:
            {
                SelfTestResponseNML & tempDst = static_cast<SelfTestResponseNML&>(dst);
                Message<SelfTestResponse > & tempSrc = static_cast<Message<SelfTestResponse>&>(src);

                if (tempSrc.version() != SelfTestResponse::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of SelfTestResponse: " << __FILE__ << " expected: " 
                             << SelfTestResponse::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of SelfTestResponse: " << __FILE__ << " expected: " 
                         << SelfTestResponse::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case SelfTest::ID:
            {
                SelfTestNML & tempDst = static_cast<SelfTestNML&>(dst);
                Message<SelfTest > & tempSrc = static_cast<Message<SelfTest>&>(src);

                if (tempSrc.version() != SelfTest::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of SelfTest: " << __FILE__ << " expected: " 
                             << SelfTest::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of SelfTest: " << __FILE__ << " expected: " 
                         << SelfTest::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int diagnostic_msgs_gencppNMLMessageFactory::fromTransport(NMLmsg & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.type)
        { 
            case DiagnosticArray::ID:
            {
                DiagnosticArrayNML & tempSrc = static_cast<DiagnosticArrayNML&>(src);
                Message<DiagnosticArray > & tempDst = static_cast<Message<DiagnosticArray>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (DiagnosticArray::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case DiagnosticStatus::ID:
            {
                DiagnosticStatusNML & tempSrc = static_cast<DiagnosticStatusNML&>(src);
                Message<DiagnosticStatus > & tempDst = static_cast<Message<DiagnosticStatus>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (DiagnosticStatus::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case KeyValue::ID:
            {
                KeyValueNML & tempSrc = static_cast<KeyValueNML&>(src);
                Message<KeyValue > & tempDst = static_cast<Message<KeyValue>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (KeyValue::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case AddDiagnosticsRequest::ID:
            {
                AddDiagnosticsRequestNML & tempSrc = static_cast<AddDiagnosticsRequestNML&>(src);
                Message<AddDiagnosticsRequest > & tempDst = static_cast<Message<AddDiagnosticsRequest>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (AddDiagnosticsRequest::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case AddDiagnosticsResponse::ID:
            {
                AddDiagnosticsResponseNML & tempSrc = static_cast<AddDiagnosticsResponseNML&>(src);
                Message<AddDiagnosticsResponse > & tempDst = static_cast<Message<AddDiagnosticsResponse>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (AddDiagnosticsResponse::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case AddDiagnostics::ID:
            {
                AddDiagnosticsNML & tempSrc = static_cast<AddDiagnosticsNML&>(src);
                Message<AddDiagnostics > & tempDst = static_cast<Message<AddDiagnostics>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (AddDiagnostics::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case SelfTestRequest::ID:
            {
                SelfTestRequestNML & tempSrc = static_cast<SelfTestRequestNML&>(src);
                Message<SelfTestRequest > & tempDst = static_cast<Message<SelfTestRequest>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (SelfTestRequest::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case SelfTestResponse::ID:
            {
                SelfTestResponseNML & tempSrc = static_cast<SelfTestResponseNML&>(src);
                Message<SelfTestResponse > & tempDst = static_cast<Message<SelfTestResponse>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (SelfTestResponse::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case SelfTest::ID:
            {
                SelfTestNML & tempSrc = static_cast<SelfTestNML&>(src);
                Message<SelfTest > & tempDst = static_cast<Message<SelfTest>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (SelfTest::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int diagnostic_msgs_gencppNMLMessageFactory::constructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    switch (id)
    { 
        case DiagnosticArray::ID:
        {
            // only need to construct if data type is not flat
            if (DiagnosticArray::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing DiagnosticArray at %p\n",buffer);
                DiagnosticArrayNML * p = static_cast<DiagnosticArrayNML*>(buffer);
                // construct the type at pointer p
                new (p) DiagnosticArrayNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing DiagnosticArray at %p,, is flat\n",buffer);
            }
            break;
        } 
        case DiagnosticStatus::ID:
        {
            // only need to construct if data type is not flat
            if (DiagnosticStatus::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing DiagnosticStatus at %p\n",buffer);
                DiagnosticStatusNML * p = static_cast<DiagnosticStatusNML*>(buffer);
                // construct the type at pointer p
                new (p) DiagnosticStatusNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing DiagnosticStatus at %p,, is flat\n",buffer);
            }
            break;
        } 
        case KeyValue::ID:
        {
            // only need to construct if data type is not flat
            if (KeyValue::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing KeyValue at %p\n",buffer);
                KeyValueNML * p = static_cast<KeyValueNML*>(buffer);
                // construct the type at pointer p
                new (p) KeyValueNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing KeyValue at %p,, is flat\n",buffer);
            }
            break;
        } 
        case AddDiagnosticsRequest::ID:
        {
            // only need to construct if data type is not flat
            if (AddDiagnosticsRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing AddDiagnosticsRequest at %p\n",buffer);
                AddDiagnosticsRequestNML * p = static_cast<AddDiagnosticsRequestNML*>(buffer);
                // construct the type at pointer p
                new (p) AddDiagnosticsRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing AddDiagnosticsRequest at %p,, is flat\n",buffer);
            }
            break;
        } 
        case AddDiagnosticsResponse::ID:
        {
            // only need to construct if data type is not flat
            if (AddDiagnosticsResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing AddDiagnosticsResponse at %p\n",buffer);
                AddDiagnosticsResponseNML * p = static_cast<AddDiagnosticsResponseNML*>(buffer);
                // construct the type at pointer p
                new (p) AddDiagnosticsResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing AddDiagnosticsResponse at %p,, is flat\n",buffer);
            }
            break;
        } 
        case AddDiagnostics::ID:
        {
            // only need to construct if data type is not flat
            if (AddDiagnostics::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing AddDiagnostics at %p\n",buffer);
                AddDiagnosticsNML * p = static_cast<AddDiagnosticsNML*>(buffer);
                // construct the type at pointer p
                new (p) AddDiagnosticsNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing AddDiagnostics at %p,, is flat\n",buffer);
            }
            break;
        } 
        case SelfTestRequest::ID:
        {
            // only need to construct if data type is not flat
            if (SelfTestRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing SelfTestRequest at %p\n",buffer);
                SelfTestRequestNML * p = static_cast<SelfTestRequestNML*>(buffer);
                // construct the type at pointer p
                new (p) SelfTestRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing SelfTestRequest at %p,, is flat\n",buffer);
            }
            break;
        } 
        case SelfTestResponse::ID:
        {
            // only need to construct if data type is not flat
            if (SelfTestResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing SelfTestResponse at %p\n",buffer);
                SelfTestResponseNML * p = static_cast<SelfTestResponseNML*>(buffer);
                // construct the type at pointer p
                new (p) SelfTestResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing SelfTestResponse at %p,, is flat\n",buffer);
            }
            break;
        } 
        case SelfTest::ID:
        {
            // only need to construct if data type is not flat
            if (SelfTest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing SelfTest at %p\n",buffer);
                SelfTestNML * p = static_cast<SelfTestNML*>(buffer);
                // construct the type at pointer p
                new (p) SelfTestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing SelfTest at %p,, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

int diagnostic_msgs_gencppNMLMessageFactory::destructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    if (buffer == nullptr) return retval;

    switch (id)
    { 
        case DiagnosticArray::ID:
        {
            // only need to destruct if data type is not flat
            if (DiagnosticArray::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing DiagnosticArray at %p\n",buffer);
                DiagnosticArrayNML * p = static_cast<DiagnosticArrayNML*>(buffer);
                p->~DiagnosticArrayNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction DiagnosticArray at %p, is flat\n",buffer);
            }
            break;
        } 
        case DiagnosticStatus::ID:
        {
            // only need to destruct if data type is not flat
            if (DiagnosticStatus::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing DiagnosticStatus at %p\n",buffer);
                DiagnosticStatusNML * p = static_cast<DiagnosticStatusNML*>(buffer);
                p->~DiagnosticStatusNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction DiagnosticStatus at %p, is flat\n",buffer);
            }
            break;
        } 
        case KeyValue::ID:
        {
            // only need to destruct if data type is not flat
            if (KeyValue::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing KeyValue at %p\n",buffer);
                KeyValueNML * p = static_cast<KeyValueNML*>(buffer);
                p->~KeyValueNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction KeyValue at %p, is flat\n",buffer);
            }
            break;
        } 
        case AddDiagnosticsRequest::ID:
        {
            // only need to destruct if data type is not flat
            if (AddDiagnosticsRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing AddDiagnosticsRequest at %p\n",buffer);
                AddDiagnosticsRequestNML * p = static_cast<AddDiagnosticsRequestNML*>(buffer);
                p->~AddDiagnosticsRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction AddDiagnosticsRequest at %p, is flat\n",buffer);
            }
            break;
        } 
        case AddDiagnosticsResponse::ID:
        {
            // only need to destruct if data type is not flat
            if (AddDiagnosticsResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing AddDiagnosticsResponse at %p\n",buffer);
                AddDiagnosticsResponseNML * p = static_cast<AddDiagnosticsResponseNML*>(buffer);
                p->~AddDiagnosticsResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction AddDiagnosticsResponse at %p, is flat\n",buffer);
            }
            break;
        } 
        case AddDiagnostics::ID:
        {
            // only need to destruct if data type is not flat
            if (AddDiagnostics::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing AddDiagnostics at %p\n",buffer);
                AddDiagnosticsNML * p = static_cast<AddDiagnosticsNML*>(buffer);
                p->~AddDiagnosticsNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction AddDiagnostics at %p, is flat\n",buffer);
            }
            break;
        } 
        case SelfTestRequest::ID:
        {
            // only need to destruct if data type is not flat
            if (SelfTestRequest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing SelfTestRequest at %p\n",buffer);
                SelfTestRequestNML * p = static_cast<SelfTestRequestNML*>(buffer);
                p->~SelfTestRequestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction SelfTestRequest at %p, is flat\n",buffer);
            }
            break;
        } 
        case SelfTestResponse::ID:
        {
            // only need to destruct if data type is not flat
            if (SelfTestResponse::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing SelfTestResponse at %p\n",buffer);
                SelfTestResponseNML * p = static_cast<SelfTestResponseNML*>(buffer);
                p->~SelfTestResponseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction SelfTestResponse at %p, is flat\n",buffer);
            }
            break;
        } 
        case SelfTest::ID:
        {
            // only need to destruct if data type is not flat
            if (SelfTest::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing SelfTest at %p\n",buffer);
                SelfTestNML * p = static_cast<SelfTestNML*>(buffer);
                p->~SelfTestNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction SelfTest at %p, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

void diagnostic_msgs::nmlupdate(CMS * cms, DiagnosticArray & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate DiagnosticArray, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.header);
        nmlupdate(cms,inobj.status);

    }  
 }

DiagnosticArrayNML::DiagnosticArrayNML() : NMLmsg((NMLTYPE)DiagnosticArray::ID,sizeof(DiagnosticArrayNML)), nmlVersion(DiagnosticArray::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new DiagnosticArray()*/)
{
};

DiagnosticArrayNML::~DiagnosticArrayNML()
{
};

DiagnosticArrayNML & DiagnosticArrayNML::operator=(const DiagnosticArrayNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

DiagnosticArrayNML & DiagnosticArrayNML::operator=(const DiagnosticArray & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(DiagnosticArray);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void DiagnosticArrayNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<DiagnosticArray&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: DiagnosticArrayNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<DiagnosticArray> temp(new DiagnosticArray());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: diagnostic_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (DiagnosticArray::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: DiagnosticArray Message version mismatch, expected " << DiagnosticArray::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: DiagnosticArray Message version mismatch, expected " << DiagnosticArray::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void diagnostic_msgs::nmlupdate(CMS * cms, DiagnosticStatus & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate DiagnosticStatus, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        cms->update(inobj.level);
        nmlupdate(cms,inobj.name);
        nmlupdate(cms,inobj.message);
        nmlupdate(cms,inobj.hardware_id);
        nmlupdate(cms,inobj.values);

    }  
 }

DiagnosticStatusNML::DiagnosticStatusNML() : NMLmsg((NMLTYPE)DiagnosticStatus::ID,sizeof(DiagnosticStatusNML)), nmlVersion(DiagnosticStatus::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new DiagnosticStatus()*/)
{
};

DiagnosticStatusNML::~DiagnosticStatusNML()
{
};

DiagnosticStatusNML & DiagnosticStatusNML::operator=(const DiagnosticStatusNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

DiagnosticStatusNML & DiagnosticStatusNML::operator=(const DiagnosticStatus & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(DiagnosticStatus);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void DiagnosticStatusNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<DiagnosticStatus&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: DiagnosticStatusNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<DiagnosticStatus> temp(new DiagnosticStatus());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: diagnostic_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (DiagnosticStatus::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: DiagnosticStatus Message version mismatch, expected " << DiagnosticStatus::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: DiagnosticStatus Message version mismatch, expected " << DiagnosticStatus::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void diagnostic_msgs::nmlupdate(CMS * cms, KeyValue & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate KeyValue, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.key);
        nmlupdate(cms,inobj.value);

    }  
 }

KeyValueNML::KeyValueNML() : NMLmsg((NMLTYPE)KeyValue::ID,sizeof(KeyValueNML)), nmlVersion(KeyValue::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new KeyValue()*/)
{
};

KeyValueNML::~KeyValueNML()
{
};

KeyValueNML & KeyValueNML::operator=(const KeyValueNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

KeyValueNML & KeyValueNML::operator=(const KeyValue & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(KeyValue);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void KeyValueNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<KeyValue&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: KeyValueNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<KeyValue> temp(new KeyValue());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: diagnostic_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (KeyValue::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: KeyValue Message version mismatch, expected " << KeyValue::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: KeyValue Message version mismatch, expected " << KeyValue::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void diagnostic_msgs::nmlupdate(CMS * cms, AddDiagnosticsRequest & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate AddDiagnosticsRequest, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.load_namespace);

    }  
 }

AddDiagnosticsRequestNML::AddDiagnosticsRequestNML() : NMLmsg((NMLTYPE)AddDiagnosticsRequest::ID,sizeof(AddDiagnosticsRequestNML)), nmlVersion(AddDiagnosticsRequest::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new AddDiagnosticsRequest()*/)
{
};

AddDiagnosticsRequestNML::~AddDiagnosticsRequestNML()
{
};

AddDiagnosticsRequestNML & AddDiagnosticsRequestNML::operator=(const AddDiagnosticsRequestNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

AddDiagnosticsRequestNML & AddDiagnosticsRequestNML::operator=(const AddDiagnosticsRequest & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(AddDiagnosticsRequest);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void AddDiagnosticsRequestNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<AddDiagnosticsRequest&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: AddDiagnosticsRequestNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<AddDiagnosticsRequest> temp(new AddDiagnosticsRequest());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: diagnostic_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (AddDiagnosticsRequest::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: AddDiagnosticsRequest Message version mismatch, expected " << AddDiagnosticsRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: AddDiagnosticsRequest Message version mismatch, expected " << AddDiagnosticsRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void diagnostic_msgs::nmlupdate(CMS * cms, AddDiagnosticsResponse & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate AddDiagnosticsResponse, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        cms->update(inobj.success);
        nmlupdate(cms,inobj.message);

    }  
 }

AddDiagnosticsResponseNML::AddDiagnosticsResponseNML() : NMLmsg((NMLTYPE)AddDiagnosticsResponse::ID,sizeof(AddDiagnosticsResponseNML)), nmlVersion(AddDiagnosticsResponse::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new AddDiagnosticsResponse()*/)
{
};

AddDiagnosticsResponseNML::~AddDiagnosticsResponseNML()
{
};

AddDiagnosticsResponseNML & AddDiagnosticsResponseNML::operator=(const AddDiagnosticsResponseNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

AddDiagnosticsResponseNML & AddDiagnosticsResponseNML::operator=(const AddDiagnosticsResponse & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(AddDiagnosticsResponse);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void AddDiagnosticsResponseNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<AddDiagnosticsResponse&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: AddDiagnosticsResponseNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<AddDiagnosticsResponse> temp(new AddDiagnosticsResponse());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: diagnostic_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (AddDiagnosticsResponse::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: AddDiagnosticsResponse Message version mismatch, expected " << AddDiagnosticsResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: AddDiagnosticsResponse Message version mismatch, expected " << AddDiagnosticsResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void diagnostic_msgs::nmlupdate(CMS * cms, AddDiagnostics & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate AddDiagnostics, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.request);
        nmlupdate(cms,inobj.response);

    }  
 }

AddDiagnosticsNML::AddDiagnosticsNML() : NMLmsg((NMLTYPE)AddDiagnostics::ID,sizeof(AddDiagnosticsNML)), nmlVersion(AddDiagnostics::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new AddDiagnostics()*/)
{
};

AddDiagnosticsNML::~AddDiagnosticsNML()
{
};

AddDiagnosticsNML & AddDiagnosticsNML::operator=(const AddDiagnosticsNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

AddDiagnosticsNML & AddDiagnosticsNML::operator=(const AddDiagnostics & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(AddDiagnostics);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void AddDiagnosticsNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<AddDiagnostics&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: AddDiagnosticsNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<AddDiagnostics> temp(new AddDiagnostics());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: diagnostic_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (AddDiagnostics::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: AddDiagnostics Message version mismatch, expected " << AddDiagnostics::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: AddDiagnostics Message version mismatch, expected " << AddDiagnostics::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void diagnostic_msgs::nmlupdate(CMS * cms, SelfTestRequest & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate SelfTestRequest, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

    }  
 }

SelfTestRequestNML::SelfTestRequestNML() : NMLmsg((NMLTYPE)SelfTestRequest::ID,sizeof(SelfTestRequestNML)), nmlVersion(SelfTestRequest::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new SelfTestRequest()*/)
{
};

SelfTestRequestNML::~SelfTestRequestNML()
{
};

SelfTestRequestNML & SelfTestRequestNML::operator=(const SelfTestRequestNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

SelfTestRequestNML & SelfTestRequestNML::operator=(const SelfTestRequest & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(SelfTestRequest);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void SelfTestRequestNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<SelfTestRequest&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: SelfTestRequestNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<SelfTestRequest> temp(new SelfTestRequest());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: diagnostic_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (SelfTestRequest::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: SelfTestRequest Message version mismatch, expected " << SelfTestRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: SelfTestRequest Message version mismatch, expected " << SelfTestRequest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void diagnostic_msgs::nmlupdate(CMS * cms, SelfTestResponse & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate SelfTestResponse, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.id);
        cms->update(inobj.passed);
        nmlupdate(cms,inobj.status);

    }  
 }

SelfTestResponseNML::SelfTestResponseNML() : NMLmsg((NMLTYPE)SelfTestResponse::ID,sizeof(SelfTestResponseNML)), nmlVersion(SelfTestResponse::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new SelfTestResponse()*/)
{
};

SelfTestResponseNML::~SelfTestResponseNML()
{
};

SelfTestResponseNML & SelfTestResponseNML::operator=(const SelfTestResponseNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

SelfTestResponseNML & SelfTestResponseNML::operator=(const SelfTestResponse & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(SelfTestResponse);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void SelfTestResponseNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<SelfTestResponse&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: SelfTestResponseNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<SelfTestResponse> temp(new SelfTestResponse());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: diagnostic_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (SelfTestResponse::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: SelfTestResponse Message version mismatch, expected " << SelfTestResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: SelfTestResponse Message version mismatch, expected " << SelfTestResponse::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void diagnostic_msgs::nmlupdate(CMS * cms, SelfTest & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate SelfTest, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.request);
        nmlupdate(cms,inobj.response);

    }  
 }

SelfTestNML::SelfTestNML() : NMLmsg((NMLTYPE)SelfTest::ID,sizeof(SelfTestNML)), nmlVersion(SelfTest::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new SelfTest()*/)
{
};

SelfTestNML::~SelfTestNML()
{
};

SelfTestNML & SelfTestNML::operator=(const SelfTestNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

SelfTestNML & SelfTestNML::operator=(const SelfTest & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(SelfTest);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void SelfTestNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<SelfTest&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: SelfTestNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<SelfTest> temp(new SelfTest());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: diagnostic_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (SelfTest::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: SelfTest Message version mismatch, expected " << SelfTest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: SelfTest Message version mismatch, expected " << SelfTest::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

int diagnostic_msgs::diagnostic_msgs_gencpp_format(NMLTYPE type, void * buffer, CMS* cms)
{
    int retval = 1;
    int retval2 = rframe::Error::SUCCESS;

          //printf("diagnostic_msgs_gencpp_format: buffer parameters: type: %d, %p, encode: %d\n",(int)type, buffer,cms->mode);

    switch (type)
    { 
        case 0:
        {
            // do nothing, 0 is passed in on buffer creation
            break;
        }
        case DiagnosticArray::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for DiagnosticArray, id " << DiagnosticArray::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_diagnostic_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"diagnostic_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((DiagnosticArrayNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case DiagnosticStatus::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for DiagnosticStatus, id " << DiagnosticStatus::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_diagnostic_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"diagnostic_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((DiagnosticStatusNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case KeyValue::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for KeyValue, id " << KeyValue::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_diagnostic_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"diagnostic_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((KeyValueNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case AddDiagnosticsRequest::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for AddDiagnosticsRequest, id " << AddDiagnosticsRequest::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_diagnostic_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"diagnostic_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((AddDiagnosticsRequestNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case AddDiagnosticsResponse::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for AddDiagnosticsResponse, id " << AddDiagnosticsResponse::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_diagnostic_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"diagnostic_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((AddDiagnosticsResponseNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case AddDiagnostics::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for AddDiagnostics, id " << AddDiagnostics::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_diagnostic_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"diagnostic_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((AddDiagnosticsNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case SelfTestRequest::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for SelfTestRequest, id " << SelfTestRequest::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_diagnostic_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"diagnostic_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((SelfTestRequestNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case SelfTestResponse::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for SelfTestResponse, id " << SelfTestResponse::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_diagnostic_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"diagnostic_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((SelfTestResponseNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case SelfTest::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for SelfTest, id " << SelfTest::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_diagnostic_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"diagnostic_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((SelfTestNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        }                   
        default:
        {

            retval = 0;
            break;
        }
    }

          //   printf("format done\n");
    return retval;
}


// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:48 -0500
//  From Template/Script: data_templates/ROSTemplate.cpp.rb
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "diagnostic_msgs_gencpp_ROS.h"
#include <common/Log.h>
#include <common/DataTypeInfo.h>

using namespace std;
using namespace diagnostic_msgs;

rframe::ROSMessageFactory * ROS_diagnostic_msgs_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        ROS_diagnostic_msgs_gencppfactory = new diagnostic_msgs_gencppROSMessageFactory();

        return ROS_diagnostic_msgs_gencppfactory;
    };
}

rframe::ROSMessageFactory * diagnostic_msgs::allocate_diagnostic_msgs_gencpp()
{
    ROS_diagnostic_msgs_gencppfactory = new diagnostic_msgs_gencppROSMessageFactory();
    return ROS_diagnostic_msgs_gencppfactory;
};

diagnostic_msgs_gencppROSMessageFactory::diagnostic_msgs_gencppROSMessageFactory()
{
    name("diagnostic_msgs_gencpp");
    // use constructor to register data types
    diagnostic_msgs::registerLibrary();
}

diagnostic_msgs_gencppROSMessageFactory::~diagnostic_msgs_gencppROSMessageFactory()
{
}

int diagnostic_msgs_gencppROSMessageFactory::dataType(ros::SerializedMessage & msg)
{
    return msg.message_type;
}

void diagnostic_msgs_gencppROSMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(DiagnosticArray::ID);
    info.name(DiagnosticArray::DATA_TYPE_FULL_NAME);
    info.hashKey(DiagnosticArray::DATA_VERSION);
    info.md5Key(DiagnosticArray::VERSION_MD5);
    info.xmlSource(DiagnosticArray::XML_SOURCE);
    info.flat(DiagnosticArray::dataTypeFlat());
    ids.push_back(info);

    info.id(DiagnosticStatus::ID);
    info.name(DiagnosticStatus::DATA_TYPE_FULL_NAME);
    info.hashKey(DiagnosticStatus::DATA_VERSION);
    info.md5Key(DiagnosticStatus::VERSION_MD5);
    info.xmlSource(DiagnosticStatus::XML_SOURCE);
    info.flat(DiagnosticStatus::dataTypeFlat());
    ids.push_back(info);

    info.id(KeyValue::ID);
    info.name(KeyValue::DATA_TYPE_FULL_NAME);
    info.hashKey(KeyValue::DATA_VERSION);
    info.md5Key(KeyValue::VERSION_MD5);
    info.xmlSource(KeyValue::XML_SOURCE);
    info.flat(KeyValue::dataTypeFlat());
    ids.push_back(info);

    info.id(AddDiagnosticsRequest::ID);
    info.name(AddDiagnosticsRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(AddDiagnosticsRequest::DATA_VERSION);
    info.md5Key(AddDiagnosticsRequest::VERSION_MD5);
    info.xmlSource(AddDiagnosticsRequest::XML_SOURCE);
    info.flat(AddDiagnosticsRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(AddDiagnosticsResponse::ID);
    info.name(AddDiagnosticsResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(AddDiagnosticsResponse::DATA_VERSION);
    info.md5Key(AddDiagnosticsResponse::VERSION_MD5);
    info.xmlSource(AddDiagnosticsResponse::XML_SOURCE);
    info.flat(AddDiagnosticsResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(AddDiagnostics::ID);
    info.name(AddDiagnostics::DATA_TYPE_FULL_NAME);
    info.hashKey(AddDiagnostics::DATA_VERSION);
    info.md5Key(AddDiagnostics::VERSION_MD5);
    info.xmlSource(AddDiagnostics::XML_SOURCE);
    info.flat(AddDiagnostics::dataTypeFlat());
    ids.push_back(info);

    info.id(SelfTestRequest::ID);
    info.name(SelfTestRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(SelfTestRequest::DATA_VERSION);
    info.md5Key(SelfTestRequest::VERSION_MD5);
    info.xmlSource(SelfTestRequest::XML_SOURCE);
    info.flat(SelfTestRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(SelfTestResponse::ID);
    info.name(SelfTestResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(SelfTestResponse::DATA_VERSION);
    info.md5Key(SelfTestResponse::VERSION_MD5);
    info.xmlSource(SelfTestResponse::XML_SOURCE);
    info.flat(SelfTestResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(SelfTest::ID);
    info.name(SelfTest::DATA_TYPE_FULL_NAME);
    info.hashKey(SelfTest::DATA_VERSION);
    info.md5Key(SelfTest::VERSION_MD5);
    info.xmlSource(SelfTest::XML_SOURCE);
    info.flat(SelfTest::dataTypeFlat());
    ids.push_back(info);

}

int diagnostic_msgs_gencppROSMessageFactory::typeName(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case DiagnosticArray::ID:
        {
            str = "diagnostic_msgs/DiagnosticArray";
            break;
        }
        case DiagnosticStatus::ID:
        {
            str = "diagnostic_msgs/DiagnosticStatus";
            break;
        }
        case KeyValue::ID:
        {
            str = "diagnostic_msgs/KeyValue";
            break;
        }
        case AddDiagnosticsRequest::ID:
        {
            str = "diagnostic_msgs/AddDiagnosticsRequest";
            break;
        }
        case AddDiagnosticsResponse::ID:
        {
            str = "diagnostic_msgs/AddDiagnosticsResponse";
            break;
        }
        case AddDiagnostics::ID:
        {
            str = "diagnostic_msgs/AddDiagnostics";
            break;
        }
        case SelfTestRequest::ID:
        {
            str = "diagnostic_msgs/SelfTestRequest";
            break;
        }
        case SelfTestResponse::ID:
        {
            str = "diagnostic_msgs/SelfTestResponse";
            break;
        }
        case SelfTest::ID:
        {
            str = "diagnostic_msgs/SelfTest";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int diagnostic_msgs_gencppROSMessageFactory::desc(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case DiagnosticArray::ID:
        {
            str = "# This message is used to send diagnostic information about the state of the robot\nHeader header #for timestamp\nDiagnosticStatus[] status # an array of components being reported on\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: diagnostic_msgs/DiagnosticStatus\n# This message holds the status of an individual component of the robot.\n# \n\n# Possible levels of operations\nbyte OK=0\nbyte WARN=1\nbyte ERROR=2\nbyte STALE=3\n\nbyte level # level of operation enumerated above \nstring name # a description of the test/component reporting\nstring message # a description of the status\nstring hardware_id # a hardware unique string\nKeyValue[] values # an array of values associated with the status\n\n\n================================================================================\nMSG: diagnostic_msgs/KeyValue\nstring key # what to label this value when viewing\nstring value # a value to track over time\n";
            break;
        }
        case DiagnosticStatus::ID:
        {
            str = "# This message holds the status of an individual component of the robot.\n# \n\n# Possible levels of operations\nbyte OK=0\nbyte WARN=1\nbyte ERROR=2\nbyte STALE=3\n\nbyte level # level of operation enumerated above \nstring name # a description of the test/component reporting\nstring message # a description of the status\nstring hardware_id # a hardware unique string\nKeyValue[] values # an array of values associated with the status\n\n\n================================================================================\nMSG: diagnostic_msgs/KeyValue\nstring key # what to label this value when viewing\nstring value # a value to track over time\n";
            break;
        }
        case KeyValue::ID:
        {
            str = "string key # what to label this value when viewing\nstring value # a value to track over time\n";
            break;
        }
        case AddDiagnosticsRequest::ID:
        {
            str = AddDiagnosticsRequest::XML_SOURCE;
            break;
        }
        case AddDiagnosticsResponse::ID:
        {
            str = AddDiagnosticsResponse::XML_SOURCE;
            break;
        }
        case AddDiagnostics::ID:
        {
            str = AddDiagnostics::XML_SOURCE;
            break;
        }
        case SelfTestRequest::ID:
        {
            str = SelfTestRequest::XML_SOURCE;
            break;
        }
        case SelfTestResponse::ID:
        {
            str = SelfTestResponse::XML_SOURCE;
            break;
        }
        case SelfTest::ID:
        {
            str = SelfTest::XML_SOURCE;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int diagnostic_msgs_gencppROSMessageFactory::md5String(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case DiagnosticArray::ID:
        {
            str = "60810da900de1dd6ddd437c3503511da";
            break;
        }
        case DiagnosticStatus::ID:
        {
            str = "d0ce08bc6e5ba34c7754f563a9cabaf1";
            break;
        }
        case KeyValue::ID:
        {
            str = "cf57fdc6617a881a88c16e768132149c";
            break;
        }
        case AddDiagnosticsRequest::ID:
        {
            str = "c26cf6e164288fbc6050d74f838bcdf0";
            break;
        }
        case AddDiagnosticsResponse::ID:
        {
            str = "937c9679a518e3a18d831e57125ea522";
            break;
        }
        case AddDiagnostics::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case SelfTestRequest::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case SelfTestResponse::ID:
        {
            str = "ac21b1bab7ab17546986536c22eb34e9";
            break;
        }
        case SelfTest::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int diagnostic_msgs_gencppROSMessageFactory::md5(unsigned long long & highOrder, unsigned long long & lowOrder, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case DiagnosticArray::ID:
        {   
		    highOrder = 0x60810da900de1dd6ULL;
            lowOrder = 0xddd437c3503511daULL;
            break;
        }
        case DiagnosticStatus::ID:
        {   
		    highOrder = 0xd0ce08bc6e5ba34cULL;
            lowOrder = 0x7754f563a9cabaf1ULL;
            break;
        }
        case KeyValue::ID:
        {   
		    highOrder = 0xcf57fdc6617a881aULL;
            lowOrder = 0x88c16e768132149cULL;
            break;
        }
        case AddDiagnosticsRequest::ID:
        {   
		    highOrder = 0xc26cf6e164288fbcULL;
            lowOrder = 0x6050d74f838bcdf0ULL;
            break;
        }
        case AddDiagnosticsResponse::ID:
        {   
		    highOrder = 0x937c9679a518e3a1ULL;
            lowOrder = 0x8d831e57125ea522ULL;
            break;
        }
        case AddDiagnostics::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case SelfTestRequest::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case SelfTestResponse::ID:
        {   
		    highOrder = 0xac21b1bab7ab1754ULL;
            lowOrder = 0x6986536c22eb34e9ULL;
            break;
        }
        case SelfTest::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int diagnostic_msgs_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<ros::SerializedMessage> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case DiagnosticArray::ID:
        case DiagnosticStatus::ID:
        case KeyValue::ID:
        case AddDiagnosticsRequest::ID:
        case AddDiagnosticsResponse::ID:
        case AddDiagnostics::ID:
        case SelfTestRequest::ID:
        case SelfTestResponse::ID:
        case SelfTest::ID:
        {
            break;
        } 
        default:
	    {
            retval = rframe::Error::PARAM_RANGE;
            break;
	    }
    }

    if (retval == rframe::Error::SUCCESS)
	{
        std::shared_ptr<ros::SerializedMessage> newmsg(new ros::SerializedMessage);

        if (newmsg.get() == NULL)
	    {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else
	    {
            newmsg->message_type = id;
            msg.swap(newmsg);
        }
    }

    return retval;
}

int diagnostic_msgs_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case DiagnosticArray::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<DiagnosticArray>(),std::bind(&diagnostic_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case DiagnosticStatus::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<DiagnosticStatus>(),std::bind(&diagnostic_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case KeyValue::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<KeyValue>(),std::bind(&diagnostic_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AddDiagnosticsRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AddDiagnosticsRequest>(),std::bind(&diagnostic_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AddDiagnosticsResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AddDiagnosticsResponse>(),std::bind(&diagnostic_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case AddDiagnostics::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<AddDiagnostics>(),std::bind(&diagnostic_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SelfTestRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SelfTestRequest>(),std::bind(&diagnostic_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SelfTestResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SelfTestResponse>(),std::bind(&diagnostic_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SelfTest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SelfTest>(),std::bind(&diagnostic_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            retval = rframe::Error::PARAM_RANGE;
        }
    }

    return retval;
}

int diagnostic_msgs_gencppROSMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
	{
        delete msg;
    }

    return retval;
}

int diagnostic_msgs_gencppROSMessageFactory::deallocateTransport(ros::SerializedMessage * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        delete msg;
    }

    return retval;
}

int diagnostic_msgs_gencppROSMessageFactory::toTransport(MessageBase & src, ros::SerializedMessage & dst)
{
    int retval = rframe::Error::SUCCESS;

    if (dst.message_type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.message_type)
        { 
            case DiagnosticArray::ID:
            {
                Message<DiagnosticArray > & tempSrc = static_cast<Message<DiagnosticArray>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: diagnostic_msgs_gencpp::DiagnosticArray buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case DiagnosticStatus::ID:
            {
                Message<DiagnosticStatus > & tempSrc = static_cast<Message<DiagnosticStatus>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: diagnostic_msgs_gencpp::DiagnosticStatus buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case KeyValue::ID:
            {
                Message<KeyValue > & tempSrc = static_cast<Message<KeyValue>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: diagnostic_msgs_gencpp::KeyValue buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case AddDiagnosticsRequest::ID:
            {
                Message<AddDiagnosticsRequest > & tempSrc = static_cast<Message<AddDiagnosticsRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: diagnostic_msgs_gencpp::AddDiagnosticsRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case AddDiagnosticsResponse::ID:
            {
                Message<AddDiagnosticsResponse > & tempSrc = static_cast<Message<AddDiagnosticsResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: diagnostic_msgs_gencpp::AddDiagnosticsResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case AddDiagnostics::ID:
            {
                Message<AddDiagnostics > & tempSrc = static_cast<Message<AddDiagnostics>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: diagnostic_msgs_gencpp::AddDiagnostics buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case SelfTestRequest::ID:
            {
                Message<SelfTestRequest > & tempSrc = static_cast<Message<SelfTestRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: diagnostic_msgs_gencpp::SelfTestRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case SelfTestResponse::ID:
            {
                Message<SelfTestResponse > & tempSrc = static_cast<Message<SelfTestResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: diagnostic_msgs_gencpp::SelfTestResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case SelfTest::ID:
            {
                Message<SelfTest > & tempSrc = static_cast<Message<SelfTest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: diagnostic_msgs_gencpp::SelfTest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int diagnostic_msgs_gencppROSMessageFactory::fromTransport(ros::SerializedMessage & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.message_type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.message_type)
        { 
            case DiagnosticArray::ID:
            {
                Message<DiagnosticArray > & tempDst = static_cast<Message<DiagnosticArray>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case DiagnosticStatus::ID:
            {
                Message<DiagnosticStatus > & tempDst = static_cast<Message<DiagnosticStatus>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case KeyValue::ID:
            {
                Message<KeyValue > & tempDst = static_cast<Message<KeyValue>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case AddDiagnosticsRequest::ID:
            {
                Message<AddDiagnosticsRequest > & tempDst = static_cast<Message<AddDiagnosticsRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case AddDiagnosticsResponse::ID:
            {
                Message<AddDiagnosticsResponse > & tempDst = static_cast<Message<AddDiagnosticsResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case AddDiagnostics::ID:
            {
                Message<AddDiagnostics > & tempDst = static_cast<Message<AddDiagnostics>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case SelfTestRequest::ID:
            {
                Message<SelfTestRequest > & tempDst = static_cast<Message<SelfTestRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case SelfTestResponse::ID:
            {
                Message<SelfTestResponse > & tempDst = static_cast<Message<SelfTestResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case SelfTest::ID:
            {
                Message<SelfTest > & tempDst = static_cast<Message<SelfTest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int diagnostic_msgs_gencppROSMessageFactory::updateHeader(rframe::MessageBase &msg, unsigned int seqNo)
{
    int retval = rframe::Error::SUCCESS;

    switch (msg.id())
    {   
        case DiagnosticArray::ID:
        {
            Message<DiagnosticArray > & tempMsg = static_cast<Message<DiagnosticArray>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        // DiagnosticStatus does not have a Header as its first member 
        // KeyValue does not have a Header as its first member 
        // AddDiagnosticsRequest does not have a Header as its first member 
        // AddDiagnosticsResponse does not have a Header as its first member 
        // AddDiagnostics does not have a Header as its first member 
        // SelfTestResponse does not have a Header as its first member 
        // SelfTest does not have a Header as its first member 
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:54 -0500
//  From Template/Script: data_templates/DataClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <math.h> // to allow use of common constants...
#include <common/Error.h>
#include "sensor_msgs/Range.h"

#include <common/JsonIo.h> // include here so container types are included by the class header 

using namespace std;

const unsigned char sensor_msgs::Range::ULTRASOUND = 0;
const unsigned char sensor_msgs::Range::INFRARED = 1;

const unsigned int sensor_msgs::Range::ID;
const unsigned int sensor_msgs::Range::DATA_VERSION;
const std::string sensor_msgs::Range::DATA_TYPE_NAME = "Range";
const std::string sensor_msgs::Range::DATA_TYPE_FULL_NAME = "sensor_msgs::Range";
const std::string sensor_msgs::Range::VERSION_MD5 = "a9c659b93e66b1f79a7866b79159199e";
/* xml source for this class */
const std::string sensor_msgs::Range::XML_SOURCE = "<class name=\"Range\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"c005c34273dc426c67a020a87bc24148\" rosDesc=\"# Single range reading from an active ranger that emits energy and reports\\n# one range reading that is valid along an arc at the distance measured. \\n# This message is  not appropriate for laser scanners. See the LaserScan\\n# message if you are working with a laser scanner.\\n\\n# This message also can represent a fixed-distance (binary) ranger.  This\\n# sensor will have min_range===max_range===distance of detection.\\n# These sensors follow REP 117 and will output -Inf if the object is detected\\n# and +Inf if the object is outside of the detection range.\\n\\nHeader header           # timestamp in the header is the time the ranger\\n                        # returned the distance reading\\n\\n# Radiation type enums\\n# If you want a value added to this list, send an email to the ros-users list\\nuint8 ULTRASOUND=0\\nuint8 INFRARED=1\\n\\nuint8 radiation_type    # the type of radiation used by the sensor\\n                        # (sound, IR, etc) [enum]\\n\\nfloat32 field_of_view   # the size of the arc that the distance reading is\\n                        # valid for [rad]\\n                        # the object causing the range reading may have\\n                        # been anywhere within -field_of_view/2 and\\n                        # field_of_view/2 at the measured range. \\n                        # 0 angle corresponds to the x-axis of the sensor.\\n\\nfloat32 min_range       # minimum range value [m]\\nfloat32 max_range       # maximum range value [m]\\n                        # Fixed distance rangers require min_range==max_range\\n\\nfloat32 range           # range data [m]\\n                        # (Note: values &lt; range_min or &gt; range_max\\n                        # should be discarded)\\n                        # Fixed distance rangers only output -Inf or +Inf.\\n                        # -Inf represents a detection within fixed distance.\\n                        # (Detection too close to the sensor to quantify)\\n                        # +Inf represents no detection within the fixed distance.\\n                        # (Object out of range)\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\" comment=\"Single range reading from an active ranger that emits energy and reports  one range reading that is valid along an arc at the distance measured.   This message is  not appropriate for laser scanners. See the LaserScan  message if you are working with a laser scanner.\" id=\"237354232\">\
  <field name=\"header\" type=\"std_msgs::Header\" sourceType=\"Header\" comment=\"timestamp in the header is the time the ranger  returned the distance reading  Radiation type enums  If you want a value added to this list, send an email to the ros-users list\"/>\
  <constant init=\"0\" name=\"ULTRASOUND\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"1\" name=\"INFRARED\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <field name=\"radiation_type\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"the type of radiation used by the sensor  (sound, IR, etc) [enum]\"/>\
  <field name=\"field_of_view\" type=\"float\" sourceType=\"float32\" comment=\"the size of the arc that the distance reading is  valid for [rad]  the object causing the range reading may have  been anywhere within -field_of_view/2 and  field_of_view/2 at the measured range.   0 angle corresponds to the x-axis of the sensor.\"/>\
  <field name=\"min_range\" type=\"float\" sourceType=\"float32\" comment=\"minimum range value [m]\"/>\
  <field name=\"max_range\" type=\"float\" sourceType=\"float32\" comment=\"maximum range value [m]  Fixed distance rangers require min_range==max_range\"/>\
  <field name=\"range\" type=\"float\" sourceType=\"float32\" comment=\"range data [m]  (Note: values &lt; range_min or &gt; range_max  should be discarded)  Fixed distance rangers only output -Inf or +Inf.  -Inf represents a detection within fixed distance.  (Detection too close to the sensor to quantify)  +Inf represents no detection within the fixed distance.  (Object out of range)\"/>\
</class>";

sensor_msgs::Range::Range() : header(), radiation_type(0), field_of_view(0), min_range(0), max_range(0), range(0)
{  
};

sensor_msgs::Range::Range(const sensor_msgs::Range & inobj) : header(inobj.header), radiation_type(inobj.radiation_type), field_of_view(inobj.field_of_view), min_range(inobj.min_range), max_range(inobj.max_range), range(inobj.range)
{
};

sensor_msgs::Range::~Range()
{
};

sensor_msgs::Range * sensor_msgs::Range::New()
{ 
    return new Range();
};

bool sensor_msgs::Range::dataTypeFlat() 
{  
    return std_msgs::Header::dataTypeFlat();

};

sensor_msgs::Range & sensor_msgs::Range::operator=(const sensor_msgs::Range & inobj)
{
    if (this != &inobj)
    {

        // if datatype is flat, optimize with memcpy (complier level optimiation)
              /*  if (dataTypeFlat() == true)
                  REMOVED invalid when assigning from a parent type as this is the pointer to the derived type, thus sensor_msgs::Range is copied to the wrong location

        {
            memcpy(this,&inobj,sizeof(sensor_msgs::Range));
        }
        else */ 
        {

            header = inobj.header;
            radiation_type = inobj.radiation_type;
            field_of_view = inobj.field_of_view;
            min_range = inobj.min_range;
            max_range = inobj.max_range;
            range = inobj.range;
        }
    }

    return *this;
}

bool sensor_msgs::Range::operator==(const sensor_msgs::Range & inobj) const
{
    bool ret = true;

    if (this != &inobj)
    { 
        ret = ret 
             && (header == inobj.header)
             && (radiation_type == inobj.radiation_type)
             && (field_of_view == inobj.field_of_view)
             && (min_range == inobj.min_range)
             && (max_range == inobj.max_range)
             && (range == inobj.range);
    }

    return ret;
}

bool sensor_msgs::Range::operator!=(const sensor_msgs::Range & inobj) const
{
    bool ret = false;

    if (this != &inobj)
    {
        ret = !operator==(inobj);
    }

    return ret;
}

bool sensor_msgs::Range::operator<(const sensor_msgs::Range & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {  
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (header < inobj.header) return true;
        if (inobj.header <  header) return false; 
        if (radiation_type < inobj.radiation_type) return true;
        if (inobj.radiation_type <  radiation_type) return false; 
        if (field_of_view < inobj.field_of_view) return true;
        if (inobj.field_of_view <  field_of_view) return false; 
        if (min_range < inobj.min_range) return true;
        if (inobj.min_range <  min_range) return false; 
        if (max_range < inobj.max_range) return true;
        if (inobj.max_range <  max_range) return false; 
        if (range < inobj.range) return true;
        if (inobj.range <  range) return false; ;
    }

    return ret;
}

bool sensor_msgs::Range::operator>(const sensor_msgs::Range & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (header > inobj.header) return true;
        if (inobj.header >  header) return false; 
        if (radiation_type > inobj.radiation_type) return true;
        if (inobj.radiation_type >  radiation_type) return false; 
        if (field_of_view > inobj.field_of_view) return true;
        if (inobj.field_of_view >  field_of_view) return false; 
        if (min_range > inobj.min_range) return true;
        if (inobj.min_range >  min_range) return false; 
        if (max_range > inobj.max_range) return true;
        if (inobj.max_range >  max_range) return false; 
        if (range > inobj.range) return true;
        if (inobj.range >  range) return false; ;
    }

    return ret;
}

template <> void rframe::json_io::encode(std::stringstream & sstr, const char * name, const sensor_msgs::Range & t, std::string & indent, bool lastItem)
{
    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectStart(sstr,name,indent);

    rframe::json_io::encode(sstr,"header",t.header,indent,false);
    rframe::json_io::encode(sstr,"radiation_type",t.radiation_type,indent,false);
    rframe::json_io::encode(sstr,"field_of_view",t.field_of_view,indent,false);
    rframe::json_io::encode(sstr,"min_range",t.min_range,indent,false);
    rframe::json_io::encode(sstr,"max_range",t.max_range,indent,false);
    rframe::json_io::encode(sstr,"range",t.range,indent,true);

    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectEnd(sstr,indent,lastItem);
}

std::string sensor_msgs::Range::toStr(bool pretty) const
{

    stringstream sstr;
    string indent = (pretty == true) ? "\n" : "";

    rframe::json_io::encodeObjectStartMain(sstr,indent);
    rframe::json_io::encode(sstr,"",*this,indent,true);
    rframe::json_io::encodeObjectEnd(sstr,indent,true); // false so as to  not add , at end of string

    return sstr.str();

};

std::basic_ostream<char>& operator<<(std::basic_ostream<char> &s, const sensor_msgs::Range & value)
{
    return s << value.toStr(false);
}


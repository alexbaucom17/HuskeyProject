// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:59 -0500
//  From Template/Script: data_templates/ROSTemplate.cpp.rb
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "trajectory_msgs_gencpp_ROS.h"
#include <common/Log.h>
#include <common/DataTypeInfo.h>

using namespace std;
using namespace trajectory_msgs;

rframe::ROSMessageFactory * ROS_trajectory_msgs_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        ROS_trajectory_msgs_gencppfactory = new trajectory_msgs_gencppROSMessageFactory();

        return ROS_trajectory_msgs_gencppfactory;
    };
}

rframe::ROSMessageFactory * trajectory_msgs::allocate_trajectory_msgs_gencpp()
{
    ROS_trajectory_msgs_gencppfactory = new trajectory_msgs_gencppROSMessageFactory();
    return ROS_trajectory_msgs_gencppfactory;
};

trajectory_msgs_gencppROSMessageFactory::trajectory_msgs_gencppROSMessageFactory()
{
    name("trajectory_msgs_gencpp");
    // use constructor to register data types
    trajectory_msgs::registerLibrary();
}

trajectory_msgs_gencppROSMessageFactory::~trajectory_msgs_gencppROSMessageFactory()
{
}

int trajectory_msgs_gencppROSMessageFactory::dataType(ros::SerializedMessage & msg)
{
    return msg.message_type;
}

void trajectory_msgs_gencppROSMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(JointTrajectory::ID);
    info.name(JointTrajectory::DATA_TYPE_FULL_NAME);
    info.hashKey(JointTrajectory::DATA_VERSION);
    info.md5Key(JointTrajectory::VERSION_MD5);
    info.xmlSource(JointTrajectory::XML_SOURCE);
    info.flat(JointTrajectory::dataTypeFlat());
    ids.push_back(info);

    info.id(JointTrajectoryPoint::ID);
    info.name(JointTrajectoryPoint::DATA_TYPE_FULL_NAME);
    info.hashKey(JointTrajectoryPoint::DATA_VERSION);
    info.md5Key(JointTrajectoryPoint::VERSION_MD5);
    info.xmlSource(JointTrajectoryPoint::XML_SOURCE);
    info.flat(JointTrajectoryPoint::dataTypeFlat());
    ids.push_back(info);

    info.id(MultiDOFJointTrajectory::ID);
    info.name(MultiDOFJointTrajectory::DATA_TYPE_FULL_NAME);
    info.hashKey(MultiDOFJointTrajectory::DATA_VERSION);
    info.md5Key(MultiDOFJointTrajectory::VERSION_MD5);
    info.xmlSource(MultiDOFJointTrajectory::XML_SOURCE);
    info.flat(MultiDOFJointTrajectory::dataTypeFlat());
    ids.push_back(info);

    info.id(MultiDOFJointTrajectoryPoint::ID);
    info.name(MultiDOFJointTrajectoryPoint::DATA_TYPE_FULL_NAME);
    info.hashKey(MultiDOFJointTrajectoryPoint::DATA_VERSION);
    info.md5Key(MultiDOFJointTrajectoryPoint::VERSION_MD5);
    info.xmlSource(MultiDOFJointTrajectoryPoint::XML_SOURCE);
    info.flat(MultiDOFJointTrajectoryPoint::dataTypeFlat());
    ids.push_back(info);

}

int trajectory_msgs_gencppROSMessageFactory::typeName(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case JointTrajectory::ID:
        {
            str = "trajectory_msgs/JointTrajectory";
            break;
        }
        case JointTrajectoryPoint::ID:
        {
            str = "trajectory_msgs/JointTrajectoryPoint";
            break;
        }
        case MultiDOFJointTrajectory::ID:
        {
            str = "trajectory_msgs/MultiDOFJointTrajectory";
            break;
        }
        case MultiDOFJointTrajectoryPoint::ID:
        {
            str = "trajectory_msgs/MultiDOFJointTrajectoryPoint";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int trajectory_msgs_gencppROSMessageFactory::desc(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case JointTrajectory::ID:
        {
            str = "Header header\nstring[] joint_names\nJointTrajectoryPoint[] points\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectoryPoint\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n";
            break;
        }
        case JointTrajectoryPoint::ID:
        {
            str = "# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n";
            break;
        }
        case MultiDOFJointTrajectory::ID:
        {
            str = "# The header is used to specify the coordinate frame and the reference time for the trajectory durations\nHeader header\n\n# A representation of a multi-dof joint trajectory (each point is a transformation)\n# Each point along the trajectory will include an array of positions/velocities/accelerations\n# that has the same length as the array of joint names, and has the same order of joints as \n# the joint names array.\n\nstring[] joint_names\nMultiDOFJointTrajectoryPoint[] points\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: trajectory_msgs/MultiDOFJointTrajectoryPoint\n# Each multi-dof joint can specify a transform (up to 6 DOF)\ngeometry_msgs/Transform[] transforms\n\n# There can be a velocity specified for the origin of the joint \ngeometry_msgs/Twist[] velocities\n\n# There can be an acceleration specified for the origin of the joint \ngeometry_msgs/Twist[] accelerations\n\nduration time_from_start\n\n================================================================================\nMSG: geometry_msgs/Transform\n# This represents the transform between two coordinate frames in free space.\n\nVector3 translation\nQuaternion rotation\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\nVector3  linear\nVector3  angular\n";
            break;
        }
        case MultiDOFJointTrajectoryPoint::ID:
        {
            str = "# Each multi-dof joint can specify a transform (up to 6 DOF)\ngeometry_msgs/Transform[] transforms\n\n# There can be a velocity specified for the origin of the joint \ngeometry_msgs/Twist[] velocities\n\n# There can be an acceleration specified for the origin of the joint \ngeometry_msgs/Twist[] accelerations\n\nduration time_from_start\n\n================================================================================\nMSG: geometry_msgs/Transform\n# This represents the transform between two coordinate frames in free space.\n\nVector3 translation\nQuaternion rotation\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\nVector3  linear\nVector3  angular\n";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int trajectory_msgs_gencppROSMessageFactory::md5String(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case JointTrajectory::ID:
        {
            str = "65b4f94a94d1ed67169da35a02f33d3f";
            break;
        }
        case JointTrajectoryPoint::ID:
        {
            str = "f3cd1e1c4d320c79d6985c904ae5dcd3";
            break;
        }
        case MultiDOFJointTrajectory::ID:
        {
            str = "ef145a45a5f47b77b7f5cdde4b16c942";
            break;
        }
        case MultiDOFJointTrajectoryPoint::ID:
        {
            str = "3ebe08d1abd5b65862d50e09430db776";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int trajectory_msgs_gencppROSMessageFactory::md5(unsigned long long & highOrder, unsigned long long & lowOrder, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case JointTrajectory::ID:
        {   
		    highOrder = 0x65b4f94a94d1ed67ULL;
            lowOrder = 0x169da35a02f33d3fULL;
            break;
        }
        case JointTrajectoryPoint::ID:
        {   
		    highOrder = 0xf3cd1e1c4d320c79ULL;
            lowOrder = 0xd6985c904ae5dcd3ULL;
            break;
        }
        case MultiDOFJointTrajectory::ID:
        {   
		    highOrder = 0xef145a45a5f47b77ULL;
            lowOrder = 0xb7f5cdde4b16c942ULL;
            break;
        }
        case MultiDOFJointTrajectoryPoint::ID:
        {   
		    highOrder = 0x3ebe08d1abd5b658ULL;
            lowOrder = 0x62d50e09430db776ULL;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int trajectory_msgs_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<ros::SerializedMessage> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case JointTrajectory::ID:
        case JointTrajectoryPoint::ID:
        case MultiDOFJointTrajectory::ID:
        case MultiDOFJointTrajectoryPoint::ID:
        {
            break;
        } 
        default:
	    {
            retval = rframe::Error::PARAM_RANGE;
            break;
	    }
    }

    if (retval == rframe::Error::SUCCESS)
	{
        std::shared_ptr<ros::SerializedMessage> newmsg(new ros::SerializedMessage);

        if (newmsg.get() == NULL)
	    {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else
	    {
            newmsg->message_type = id;
            msg.swap(newmsg);
        }
    }

    return retval;
}

int trajectory_msgs_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case JointTrajectory::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<JointTrajectory>(),std::bind(&trajectory_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case JointTrajectoryPoint::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<JointTrajectoryPoint>(),std::bind(&trajectory_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case MultiDOFJointTrajectory::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<MultiDOFJointTrajectory>(),std::bind(&trajectory_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case MultiDOFJointTrajectoryPoint::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<MultiDOFJointTrajectoryPoint>(),std::bind(&trajectory_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            retval = rframe::Error::PARAM_RANGE;
        }
    }

    return retval;
}

int trajectory_msgs_gencppROSMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
	{
        delete msg;
    }

    return retval;
}

int trajectory_msgs_gencppROSMessageFactory::deallocateTransport(ros::SerializedMessage * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        delete msg;
    }

    return retval;
}

int trajectory_msgs_gencppROSMessageFactory::toTransport(MessageBase & src, ros::SerializedMessage & dst)
{
    int retval = rframe::Error::SUCCESS;

    if (dst.message_type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.message_type)
        { 
            case JointTrajectory::ID:
            {
                Message<JointTrajectory > & tempSrc = static_cast<Message<JointTrajectory>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: trajectory_msgs_gencpp::JointTrajectory buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case JointTrajectoryPoint::ID:
            {
                Message<JointTrajectoryPoint > & tempSrc = static_cast<Message<JointTrajectoryPoint>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: trajectory_msgs_gencpp::JointTrajectoryPoint buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case MultiDOFJointTrajectory::ID:
            {
                Message<MultiDOFJointTrajectory > & tempSrc = static_cast<Message<MultiDOFJointTrajectory>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: trajectory_msgs_gencpp::MultiDOFJointTrajectory buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case MultiDOFJointTrajectoryPoint::ID:
            {
                Message<MultiDOFJointTrajectoryPoint > & tempSrc = static_cast<Message<MultiDOFJointTrajectoryPoint>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: trajectory_msgs_gencpp::MultiDOFJointTrajectoryPoint buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int trajectory_msgs_gencppROSMessageFactory::fromTransport(ros::SerializedMessage & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.message_type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.message_type)
        { 
            case JointTrajectory::ID:
            {
                Message<JointTrajectory > & tempDst = static_cast<Message<JointTrajectory>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case JointTrajectoryPoint::ID:
            {
                Message<JointTrajectoryPoint > & tempDst = static_cast<Message<JointTrajectoryPoint>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case MultiDOFJointTrajectory::ID:
            {
                Message<MultiDOFJointTrajectory > & tempDst = static_cast<Message<MultiDOFJointTrajectory>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case MultiDOFJointTrajectoryPoint::ID:
            {
                Message<MultiDOFJointTrajectoryPoint > & tempDst = static_cast<Message<MultiDOFJointTrajectoryPoint>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int trajectory_msgs_gencppROSMessageFactory::updateHeader(rframe::MessageBase &msg, unsigned int seqNo)
{
    int retval = rframe::Error::SUCCESS;

    switch (msg.id())
    {   
        case JointTrajectory::ID:
        {
            Message<JointTrajectory > & tempMsg = static_cast<Message<JointTrajectory>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        // JointTrajectoryPoint does not have a Header as its first member 
        case MultiDOFJointTrajectory::ID:
        {
            Message<MultiDOFJointTrajectory > & tempMsg = static_cast<Message<MultiDOFJointTrajectory>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        // MultiDOFJointTrajectoryPoint does not have a Header as its first member 
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

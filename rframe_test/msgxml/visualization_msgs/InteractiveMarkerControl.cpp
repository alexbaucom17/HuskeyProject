// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:45:01 -0500
//  From Template/Script: data_templates/DataClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <math.h> // to allow use of common constants...
#include <common/Error.h>
#include "visualization_msgs/InteractiveMarkerControl.h"

#include <common/JsonIo.h> // include here so container types are included by the class header 

using namespace std;

const unsigned char visualization_msgs::InteractiveMarkerControl::INHERIT = 0;
const unsigned char visualization_msgs::InteractiveMarkerControl::FIXED = 1;
const unsigned char visualization_msgs::InteractiveMarkerControl::VIEW_FACING = 2;
const unsigned char visualization_msgs::InteractiveMarkerControl::NONE = 0;
const unsigned char visualization_msgs::InteractiveMarkerControl::MENU = 1;
const unsigned char visualization_msgs::InteractiveMarkerControl::BUTTON = 2;
const unsigned char visualization_msgs::InteractiveMarkerControl::MOVE_AXIS = 3;
const unsigned char visualization_msgs::InteractiveMarkerControl::MOVE_PLANE = 4;
const unsigned char visualization_msgs::InteractiveMarkerControl::ROTATE_AXIS = 5;
const unsigned char visualization_msgs::InteractiveMarkerControl::MOVE_ROTATE = 6;
const unsigned char visualization_msgs::InteractiveMarkerControl::MOVE_3D = 7;
const unsigned char visualization_msgs::InteractiveMarkerControl::ROTATE_3D = 8;
const unsigned char visualization_msgs::InteractiveMarkerControl::MOVE_ROTATE_3D = 9;

const unsigned int visualization_msgs::InteractiveMarkerControl::ID;
const unsigned int visualization_msgs::InteractiveMarkerControl::DATA_VERSION;
const std::string visualization_msgs::InteractiveMarkerControl::DATA_TYPE_NAME = "InteractiveMarkerControl";
const std::string visualization_msgs::InteractiveMarkerControl::DATA_TYPE_FULL_NAME = "visualization_msgs::InteractiveMarkerControl";
const std::string visualization_msgs::InteractiveMarkerControl::VERSION_MD5 = "1d5b6ea72d0a7cb8a3f542b2dbfcb0b4";
/* xml source for this class */
const std::string visualization_msgs::InteractiveMarkerControl::XML_SOURCE = "<class name=\"InteractiveMarkerControl\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" rosMD5=\"b3c81e785788195d1840b86c28da1aac\" rosDesc=\"# Represents a control that is to be displayed together with an interactive marker\\n\\n# Identifying string for this control.\\n# You need to assign a unique value to this to receive feedback from the GUI\\n# on what actions the user performs on this control (e.g. a button click).\\nstring name\\n\\n\\n# Defines the local coordinate frame (relative to the pose of the parent\\n# interactive marker) in which is being rotated and translated.\\n# Default: Identity\\ngeometry_msgs/Quaternion orientation\\n\\n\\n# Orientation mode: controls how orientation changes.\\n# INHERIT: Follow orientation of interactive marker\\n# FIXED: Keep orientation fixed at initial state\\n# VIEW_FACING: Align y-z plane with screen (x: forward, y:left, z:up).\\nuint8 INHERIT = 0 \\nuint8 FIXED = 1\\nuint8 VIEW_FACING = 2\\n\\nuint8 orientation_mode\\n\\n# Interaction mode for this control\\n# \\n# NONE: This control is only meant for visualization; no context menu.\\n# MENU: Like NONE, but right-click menu is active.\\n# BUTTON: Element can be left-clicked.\\n# MOVE_AXIS: Translate along local x-axis.\\n# MOVE_PLANE: Translate in local y-z plane.\\n# ROTATE_AXIS: Rotate around local x-axis.\\n# MOVE_ROTATE: Combines MOVE_PLANE and ROTATE_AXIS.\\nuint8 NONE = 0 \\nuint8 MENU = 1\\nuint8 BUTTON = 2\\nuint8 MOVE_AXIS = 3 \\nuint8 MOVE_PLANE = 4\\nuint8 ROTATE_AXIS = 5\\nuint8 MOVE_ROTATE = 6\\n# \\&quot;3D\\&quot; interaction modes work with the mouse+SHIFT+CTRL or with 3D cursors.\\n# MOVE_3D: Translate freely in 3D space.\\n# ROTATE_3D: Rotate freely in 3D space about the origin of parent frame.\\n# MOVE_ROTATE_3D: Full 6-DOF freedom of translation and rotation about the cursor origin.\\nuint8 MOVE_3D = 7\\nuint8 ROTATE_3D = 8\\nuint8 MOVE_ROTATE_3D = 9\\n\\nuint8 interaction_mode\\n\\n\\n# If true, the contained markers will also be visible\\n# when the gui is not in interactive mode.\\nbool always_visible\\n\\n\\n# Markers to be displayed as custom visual representation.\\n# Leave this empty to use the default control handles.\\n#\\n# Note: \\n# - The markers can be defined in an arbitrary coordinate frame,\\n#   but will be transformed into the local frame of the interactive marker.\\n# - If the header of a marker is empty, its pose will be interpreted as \\n#   relative to the pose of the parent interactive marker.\\nMarker[] markers\\n\\n\\n# In VIEW_FACING mode, set this to true if you don't want the markers\\n# to be aligned with the camera view point. The markers will show up\\n# as in INHERIT mode.\\nbool independent_marker_orientation\\n\\n\\n# Short description (&lt; 40 characters) of what this control does,\\n# e.g. \\&quot;Move the robot\\&quot;. \\n# Default: A generic description based on the interaction mode\\nstring description\\n\\n================================================================================\\nMSG: geometry_msgs/Quaternion\\n# This represents an orientation in free space in quaternion form.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\nfloat64 w\\n\\n================================================================================\\nMSG: visualization_msgs/Marker\\n# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz\\n\\nuint8 ARROW=0\\nuint8 CUBE=1\\nuint8 SPHERE=2\\nuint8 CYLINDER=3\\nuint8 LINE_STRIP=4\\nuint8 LINE_LIST=5\\nuint8 CUBE_LIST=6\\nuint8 SPHERE_LIST=7\\nuint8 POINTS=8\\nuint8 TEXT_VIEW_FACING=9\\nuint8 MESH_RESOURCE=10\\nuint8 TRIANGLE_LIST=11\\n\\nuint8 ADD=0\\nuint8 MODIFY=0\\nuint8 DELETE=2\\nuint8 DELETEALL=3\\n\\nHeader header                        # header for time/frame information\\nstring ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object\\nint32 id                            # object ID useful in conjunction with the namespace for manipulating and deleting the object later\\nint32 type                          # Type of object\\nint32 action                         # 0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects\\ngeometry_msgs/Pose pose                 # Pose of the object\\ngeometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)\\nstd_msgs/ColorRGBA color             # Color [0.0-1.0]\\nduration lifetime                    # How long the object should last before being automatically deleted.  0 means forever\\nbool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep\\n\\n#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\\ngeometry_msgs/Point[] points\\n#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\\n#number of colors must either be 0 or equal to the number of points\\n#NOTE: alpha is not yet used\\nstd_msgs/ColorRGBA[] colors\\n\\n# NOTE: only used for text markers\\nstring text\\n\\n# NOTE: only used for MESH_RESOURCE markers\\nstring mesh_resource\\nbool mesh_use_embedded_materials\\n\\n================================================================================\\nMSG: std_msgs/Header\\n# Standard metadata for higher-level stamped data types.\\n# This is generally used to communicate timestamped data \\n# in a particular coordinate frame.\\n# \\n# sequence ID: consecutively increasing ID \\nuint32 seq\\n#Two-integer timestamp that is expressed as:\\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\\n# time-handling sugar is provided by the client library\\ntime stamp\\n#Frame this data is associated with\\n# 0: no frame\\n# 1: global frame\\nstring frame_id\\n\\n================================================================================\\nMSG: geometry_msgs/Pose\\n# A representation of pose in free space, composed of position and orientation. \\nPoint position\\nQuaternion orientation\\n\\n================================================================================\\nMSG: geometry_msgs/Point\\n# This contains the position of a point in free space\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n\\n================================================================================\\nMSG: geometry_msgs/Vector3\\n# This represents a vector in free space. \\n# It is only meant to represent a direction. Therefore, it does not\\n# make sense to apply a translation to it (e.g., when applying a \\n# generic rigid transformation to a Vector3, tf2 will only apply the\\n# rotation). If you want your data to be translatable too, use the\\n# geometry_msgs/Point message instead.\\n\\nfloat64 x\\nfloat64 y\\nfloat64 z\\n================================================================================\\nMSG: std_msgs/ColorRGBA\\nfloat32 r\\nfloat32 g\\nfloat32 b\\nfloat32 a\\n\" comment=\"Represents a control that is to be displayed together with an interactive marker\" id=\"2125420981\">\
  <field name=\"name\" type=\"string\" sourceType=\"string\" comment=\"Defines the local coordinate frame (relative to the pose of the parent  interactive marker) in which is being rotated and translated.  Default: Identity\"/>\
  <field name=\"orientation\" type=\"geometry_msgs::Quaternion\" sourceType=\"geometry_msgs::Quaternion\" comment=\"Orientation mode: controls how orientation changes.  INHERIT: Follow orientation of interactive marker  FIXED: Keep orientation fixed at initial state  VIEW_FACING: Align y-z plane with screen (x: forward, y:left, z:up).\"/>\
  <constant init=\"0\" name=\"INHERIT\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"1\" name=\"FIXED\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"2\" name=\"VIEW_FACING\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <field name=\"orientation_mode\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"Interaction mode for this control    NONE: This control is only meant for visualization; no context menu.  MENU: Like NONE, but right-click menu is active.  BUTTON: Element can be left-clicked.  MOVE_AXIS: Translate along local x-axis.  MOVE_PLANE: Translate in local y-z plane.  ROTATE_AXIS: Rotate around local x-axis.  MOVE_ROTATE: Combines MOVE_PLANE and ROTATE_AXIS.\"/>\
  <constant init=\"0\" name=\"NONE\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"1\" name=\"MENU\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"2\" name=\"BUTTON\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"3\" name=\"MOVE_AXIS\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"4\" name=\"MOVE_PLANE\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"5\" name=\"ROTATE_AXIS\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"6\" name=\"MOVE_ROTATE\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"&quot;3D&quot; interaction modes work with the mouse+SHIFT+CTRL or with 3D cursors.  MOVE_3D: Translate freely in 3D space.  ROTATE_3D: Rotate freely in 3D space about the origin of parent frame.  MOVE_ROTATE_3D: Full 6-DOF freedom of translation and rotation about the cursor origin.\"/>\
  <constant init=\"7\" name=\"MOVE_3D\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"8\" name=\"ROTATE_3D\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <constant init=\"9\" name=\"MOVE_ROTATE_3D\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <field name=\"interaction_mode\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"If true, the contained markers will also be visible  when the gui is not in interactive mode.\"/>\
  <field name=\"always_visible\" type=\"bool\" sourceType=\"bool\" comment=\"Markers to be displayed as custom visual representation.  Leave this empty to use the default control handles.   Note:   - The markers can be defined in an arbitrary coordinate frame,    but will be transformed into the local frame of the interactive marker.  - If the header of a marker is empty, its pose will be interpreted as     relative to the pose of the parent interactive marker.\"/>\
  <field name=\"markers\" type=\"vector(Marker)\" sourceType=\"Marker\" comment=\"In VIEW_FACING mode, set this to true if you don't want the markers  to be aligned with the camera view point. The markers will show up  as in INHERIT mode.\"/>\
  <field name=\"independent_marker_orientation\" type=\"bool\" sourceType=\"bool\" comment=\"Short description (&lt; 40 characters) of what this control does,  e.g. &quot;Move the robot&quot;.   Default: A generic description based on the interaction mode\"/>\
  <field name=\"description\" type=\"string\" sourceType=\"string\" comment=\"\"/>\
</class>";

visualization_msgs::InteractiveMarkerControl::InteractiveMarkerControl() : name(), orientation(), orientation_mode(0), interaction_mode(0), always_visible(0), markers(), independent_marker_orientation(0), description()
{  
};

visualization_msgs::InteractiveMarkerControl::InteractiveMarkerControl(const visualization_msgs::InteractiveMarkerControl & inobj) : name(inobj.name), orientation(inobj.orientation), orientation_mode(inobj.orientation_mode), interaction_mode(inobj.interaction_mode), always_visible(inobj.always_visible), markers(inobj.markers), independent_marker_orientation(inobj.independent_marker_orientation), description(inobj.description)
{
};

visualization_msgs::InteractiveMarkerControl::~InteractiveMarkerControl()
{
};

visualization_msgs::InteractiveMarkerControl * visualization_msgs::InteractiveMarkerControl::New()
{ 
    return new InteractiveMarkerControl();
};

bool visualization_msgs::InteractiveMarkerControl::dataTypeFlat() 
{   
    return false; 
};

visualization_msgs::InteractiveMarkerControl & visualization_msgs::InteractiveMarkerControl::operator=(const visualization_msgs::InteractiveMarkerControl & inobj)
{
    if (this != &inobj)
    {

        // if datatype is flat, optimize with memcpy (complier level optimiation)
              /*  if (dataTypeFlat() == true)
                  REMOVED invalid when assigning from a parent type as this is the pointer to the derived type, thus visualization_msgs::InteractiveMarkerControl is copied to the wrong location

        {
            memcpy(this,&inobj,sizeof(visualization_msgs::InteractiveMarkerControl));
        }
        else */ 
        {

            name = inobj.name;
            orientation = inobj.orientation;
            orientation_mode = inobj.orientation_mode;
            interaction_mode = inobj.interaction_mode;
            always_visible = inobj.always_visible;
            markers = inobj.markers;
            independent_marker_orientation = inobj.independent_marker_orientation;
            description = inobj.description;
        }
    }

    return *this;
}

bool visualization_msgs::InteractiveMarkerControl::operator==(const visualization_msgs::InteractiveMarkerControl & inobj) const
{
    bool ret = true;

    if (this != &inobj)
    { 
        ret = ret 
             && (name == inobj.name)
             && (orientation == inobj.orientation)
             && (orientation_mode == inobj.orientation_mode)
             && (interaction_mode == inobj.interaction_mode)
             && (always_visible == inobj.always_visible)
             && (markers == inobj.markers)
             && (independent_marker_orientation == inobj.independent_marker_orientation)
             && (description == inobj.description);
    }

    return ret;
}

bool visualization_msgs::InteractiveMarkerControl::operator!=(const visualization_msgs::InteractiveMarkerControl & inobj) const
{
    bool ret = false;

    if (this != &inobj)
    {
        ret = !operator==(inobj);
    }

    return ret;
}

bool visualization_msgs::InteractiveMarkerControl::operator<(const visualization_msgs::InteractiveMarkerControl & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {  
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (name < inobj.name) return true;
        if (inobj.name <  name) return false; 
        if (orientation < inobj.orientation) return true;
        if (inobj.orientation <  orientation) return false; 
        if (orientation_mode < inobj.orientation_mode) return true;
        if (inobj.orientation_mode <  orientation_mode) return false; 
        if (interaction_mode < inobj.interaction_mode) return true;
        if (inobj.interaction_mode <  interaction_mode) return false; 
        if (always_visible < inobj.always_visible) return true;
        if (inobj.always_visible <  always_visible) return false; 
        if (markers < inobj.markers) return true;
        if (inobj.markers <  markers) return false; 
        if (independent_marker_orientation < inobj.independent_marker_orientation) return true;
        if (inobj.independent_marker_orientation <  independent_marker_orientation) return false; 
        if (description < inobj.description) return true;
        if (inobj.description <  description) return false; ;
    }

    return ret;
}

bool visualization_msgs::InteractiveMarkerControl::operator>(const visualization_msgs::InteractiveMarkerControl & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (name > inobj.name) return true;
        if (inobj.name >  name) return false; 
        if (orientation > inobj.orientation) return true;
        if (inobj.orientation >  orientation) return false; 
        if (orientation_mode > inobj.orientation_mode) return true;
        if (inobj.orientation_mode >  orientation_mode) return false; 
        if (interaction_mode > inobj.interaction_mode) return true;
        if (inobj.interaction_mode >  interaction_mode) return false; 
        if (always_visible > inobj.always_visible) return true;
        if (inobj.always_visible >  always_visible) return false; 
        if (markers > inobj.markers) return true;
        if (inobj.markers >  markers) return false; 
        if (independent_marker_orientation > inobj.independent_marker_orientation) return true;
        if (inobj.independent_marker_orientation >  independent_marker_orientation) return false; 
        if (description > inobj.description) return true;
        if (inobj.description >  description) return false; ;
    }

    return ret;
}

template <> void rframe::json_io::encode(std::stringstream & sstr, const char * name, const visualization_msgs::InteractiveMarkerControl & t, std::string & indent, bool lastItem)
{
    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectStart(sstr,name,indent);

    rframe::json_io::encode(sstr,"name",t.name,indent,false);
    rframe::json_io::encode(sstr,"orientation",t.orientation,indent,false);
    rframe::json_io::encode(sstr,"orientation_mode",t.orientation_mode,indent,false);
    rframe::json_io::encode(sstr,"interaction_mode",t.interaction_mode,indent,false);
    rframe::json_io::encode(sstr,"always_visible",t.always_visible,indent,false);
    rframe::json_io::encode(sstr,"markers",t.markers,indent,false);
    rframe::json_io::encode(sstr,"independent_marker_orientation",t.independent_marker_orientation,indent,false);
    rframe::json_io::encode(sstr,"description",t.description,indent,true);

    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectEnd(sstr,indent,lastItem);
}

std::string visualization_msgs::InteractiveMarkerControl::toStr(bool pretty) const
{

    stringstream sstr;
    string indent = (pretty == true) ? "\n" : "";

    rframe::json_io::encodeObjectStartMain(sstr,indent);
    rframe::json_io::encode(sstr,"",*this,indent,true);
    rframe::json_io::encodeObjectEnd(sstr,indent,true); // false so as to  not add , at end of string

    return sstr.str();

};

std::basic_ostream<char>& operator<<(std::basic_ostream<char> &s, const visualization_msgs::InteractiveMarkerControl & value)
{
    return s << value.toStr(false);
}


// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:45:01 -0500
//  From Template/Script: data_templates/NMLHeaderTemplate.h
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#ifndef _CODEGEN_VISUALIZATION_MSGS_GENCPPNML_H_
#define _CODEGEN_VISUALIZATION_MSGS_GENCPPNML_H_

#include <messaging/nml/NMLMessageFactory.h>
//#include <DataTypeInfo.h>
#include <messaging/Message.h>

#include "visualization_msgs_gencpp_NMLSupport.h"

namespace rframe { class DataTypeInfo; };

#include "ImageMarker.h"
#include "InteractiveMarker.h"
#include "InteractiveMarkerControl.h"
#include "InteractiveMarkerFeedback.h"
#include "InteractiveMarkerInit.h"
#include "InteractiveMarkerPose.h"
#include "InteractiveMarkerUpdate.h"
#include "Marker.h"
#include "MarkerArray.h"
#include "MenuEntry.h"

namespace visualization_msgs {

    /** definition of message factory for visualization_msgs_gencpp */
    class visualization_msgs_gencppNMLMessageFactory : public NMLMessageFactory
    {
    public:
        /** constructor */
        visualization_msgs_gencppNMLMessageFactory();
        /** destructor */
        virtual ~visualization_msgs_gencppNMLMessageFactory();

        /** see  rframe::MessageFactoryInterface */
        virtual void dataTypes(std::vector<DataTypeInfo> & ids);
        /** see  rframe::MessageFactoryInterface */
        virtual int dataType(NMLmsg & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<NMLmsg> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateTransport(NMLmsg * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateMessage(MessageBase * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int toTransport( MessageBase & src, NMLmsg & dst);
        /** see  rframe::MessageFactoryInterface */
        virtual int fromTransport( NMLmsg & src, MessageBase & dst);

        /** \return poitner to nml format function */
        virtual NML_FORMAT_PTR FormatPointer();
        /** run constructor for class of type id in the provided buffer */
        virtual int constructBuffer(rframe::ID_TYPE id, void * buffer);
        /** run destructor for class of type id in the buffer */
        virtual int destructBuffer(rframe::ID_TYPE id, void * buffer);
    };

    /** factory allocation function for use when not dynamically loading the factory library  */
    NMLMessageFactory * allocate_visualization_msgs_gencpp();

    /** NML interface for ImageMarker 

    */
    class ImageMarkerNML : public NMLmsg
    {
    public:

        /** constructor */
        ImageMarkerNML();
        /** destructor */
        ~ImageMarkerNML();

        /** assignment operator */
        ImageMarkerNML & operator=(const ImageMarkerNML &inobj);
        /** assignment operator for base data class */
        ImageMarkerNML & operator=(const ImageMarker &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        ImageMarker nmlPayload;

        /** set payload */
        void payload(const ImageMarker &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<ImageMarker> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        ImageMarker * payload() { return & nmlPayload; };

    //     std::shared_ptr<ImageMarker> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for InteractiveMarker 

    */
    class InteractiveMarkerNML : public NMLmsg
    {
    public:

        /** constructor */
        InteractiveMarkerNML();
        /** destructor */
        ~InteractiveMarkerNML();

        /** assignment operator */
        InteractiveMarkerNML & operator=(const InteractiveMarkerNML &inobj);
        /** assignment operator for base data class */
        InteractiveMarkerNML & operator=(const InteractiveMarker &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        InteractiveMarker nmlPayload;

        /** set payload */
        void payload(const InteractiveMarker &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<InteractiveMarker> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        InteractiveMarker * payload() { return & nmlPayload; };

    //     std::shared_ptr<InteractiveMarker> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for InteractiveMarkerControl 

    */
    class InteractiveMarkerControlNML : public NMLmsg
    {
    public:

        /** constructor */
        InteractiveMarkerControlNML();
        /** destructor */
        ~InteractiveMarkerControlNML();

        /** assignment operator */
        InteractiveMarkerControlNML & operator=(const InteractiveMarkerControlNML &inobj);
        /** assignment operator for base data class */
        InteractiveMarkerControlNML & operator=(const InteractiveMarkerControl &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        InteractiveMarkerControl nmlPayload;

        /** set payload */
        void payload(const InteractiveMarkerControl &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<InteractiveMarkerControl> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        InteractiveMarkerControl * payload() { return & nmlPayload; };

    //     std::shared_ptr<InteractiveMarkerControl> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for InteractiveMarkerFeedback 

    */
    class InteractiveMarkerFeedbackNML : public NMLmsg
    {
    public:

        /** constructor */
        InteractiveMarkerFeedbackNML();
        /** destructor */
        ~InteractiveMarkerFeedbackNML();

        /** assignment operator */
        InteractiveMarkerFeedbackNML & operator=(const InteractiveMarkerFeedbackNML &inobj);
        /** assignment operator for base data class */
        InteractiveMarkerFeedbackNML & operator=(const InteractiveMarkerFeedback &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        InteractiveMarkerFeedback nmlPayload;

        /** set payload */
        void payload(const InteractiveMarkerFeedback &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<InteractiveMarkerFeedback> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        InteractiveMarkerFeedback * payload() { return & nmlPayload; };

    //     std::shared_ptr<InteractiveMarkerFeedback> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for InteractiveMarkerInit 

    */
    class InteractiveMarkerInitNML : public NMLmsg
    {
    public:

        /** constructor */
        InteractiveMarkerInitNML();
        /** destructor */
        ~InteractiveMarkerInitNML();

        /** assignment operator */
        InteractiveMarkerInitNML & operator=(const InteractiveMarkerInitNML &inobj);
        /** assignment operator for base data class */
        InteractiveMarkerInitNML & operator=(const InteractiveMarkerInit &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        InteractiveMarkerInit nmlPayload;

        /** set payload */
        void payload(const InteractiveMarkerInit &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<InteractiveMarkerInit> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        InteractiveMarkerInit * payload() { return & nmlPayload; };

    //     std::shared_ptr<InteractiveMarkerInit> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for InteractiveMarkerPose 

    */
    class InteractiveMarkerPoseNML : public NMLmsg
    {
    public:

        /** constructor */
        InteractiveMarkerPoseNML();
        /** destructor */
        ~InteractiveMarkerPoseNML();

        /** assignment operator */
        InteractiveMarkerPoseNML & operator=(const InteractiveMarkerPoseNML &inobj);
        /** assignment operator for base data class */
        InteractiveMarkerPoseNML & operator=(const InteractiveMarkerPose &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        InteractiveMarkerPose nmlPayload;

        /** set payload */
        void payload(const InteractiveMarkerPose &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<InteractiveMarkerPose> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        InteractiveMarkerPose * payload() { return & nmlPayload; };

    //     std::shared_ptr<InteractiveMarkerPose> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for InteractiveMarkerUpdate 

    */
    class InteractiveMarkerUpdateNML : public NMLmsg
    {
    public:

        /** constructor */
        InteractiveMarkerUpdateNML();
        /** destructor */
        ~InteractiveMarkerUpdateNML();

        /** assignment operator */
        InteractiveMarkerUpdateNML & operator=(const InteractiveMarkerUpdateNML &inobj);
        /** assignment operator for base data class */
        InteractiveMarkerUpdateNML & operator=(const InteractiveMarkerUpdate &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        InteractiveMarkerUpdate nmlPayload;

        /** set payload */
        void payload(const InteractiveMarkerUpdate &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<InteractiveMarkerUpdate> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        InteractiveMarkerUpdate * payload() { return & nmlPayload; };

    //     std::shared_ptr<InteractiveMarkerUpdate> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Marker 

    */
    class MarkerNML : public NMLmsg
    {
    public:

        /** constructor */
        MarkerNML();
        /** destructor */
        ~MarkerNML();

        /** assignment operator */
        MarkerNML & operator=(const MarkerNML &inobj);
        /** assignment operator for base data class */
        MarkerNML & operator=(const Marker &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Marker nmlPayload;

        /** set payload */
        void payload(const Marker &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Marker> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Marker * payload() { return & nmlPayload; };

    //     std::shared_ptr<Marker> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for MarkerArray 

    */
    class MarkerArrayNML : public NMLmsg
    {
    public:

        /** constructor */
        MarkerArrayNML();
        /** destructor */
        ~MarkerArrayNML();

        /** assignment operator */
        MarkerArrayNML & operator=(const MarkerArrayNML &inobj);
        /** assignment operator for base data class */
        MarkerArrayNML & operator=(const MarkerArray &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        MarkerArray nmlPayload;

        /** set payload */
        void payload(const MarkerArray &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<MarkerArray> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        MarkerArray * payload() { return & nmlPayload; };

    //     std::shared_ptr<MarkerArray> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for MenuEntry 

    */
    class MenuEntryNML : public NMLmsg
    {
    public:

        /** constructor */
        MenuEntryNML();
        /** destructor */
        ~MenuEntryNML();

        /** assignment operator */
        MenuEntryNML & operator=(const MenuEntryNML &inobj);
        /** assignment operator for base data class */
        MenuEntryNML & operator=(const MenuEntry &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        MenuEntry nmlPayload;

        /** set payload */
        void payload(const MenuEntry &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<MenuEntry> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        MenuEntry * payload() { return & nmlPayload; };

    //     std::shared_ptr<MenuEntry> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    // predeclaration of nmlupdate functions (necessary due to namespaces )

    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, visualization_msgs::ImageMarker & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, visualization_msgs::InteractiveMarker & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, visualization_msgs::InteractiveMarkerControl & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, visualization_msgs::InteractiveMarkerFeedback & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, visualization_msgs::InteractiveMarkerInit & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, visualization_msgs::InteractiveMarkerPose & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, visualization_msgs::InteractiveMarkerUpdate & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, visualization_msgs::Marker & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, visualization_msgs::MarkerArray & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, visualization_msgs::MenuEntry & inobj);

    /** nml format function */
    int visualization_msgs_gencpp_format(NMLTYPE type, void * buffer, CMS* cms);

}; // end namespace visualization_msgs

#endif // _VISUALIZATION_MSGS_GENCPPNML_H_

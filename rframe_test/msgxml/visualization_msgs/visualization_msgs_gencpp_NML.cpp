// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:45:01 -0500
//  From Template/Script: data_templates/NMLClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <stdio.h>
// main rcslib header
#include <nml.hh>
// cms updater header
#include <cms_up.hh>
#include <cms_pup.hh>

#include <common/Error.h>
#include <common/Log.h>
#include <common/Common.h>
#include <common/DataTypeInfo.h>

#include "visualization_msgs_gencpp_NML.h"
#include "visualization_msgs_gencpp_Library.h"
#include <messaging/nml/NMLSupport.h>
#include <interfaces/MessageFactoryInterface.h>

#include <ImageMarker.h>
#include <InteractiveMarker.h>
#include <InteractiveMarkerControl.h>
#include <InteractiveMarkerFeedback.h>
#include <InteractiveMarkerInit.h>
#include <InteractiveMarkerPose.h>
#include <InteractiveMarkerUpdate.h>
#include <Marker.h>
#include <MarkerArray.h>
#include <MenuEntry.h>

#include <boost/iostreams/stream_buffer.hpp>
#include <boost/iostreams/stream.hpp>

#include <boost/serialization/serialization.hpp>
#include <opensource/eos/archive/portable_iarchive.hpp>
#include <opensource/eos/archive/portable_oarchive.hpp>

using namespace std;
using namespace visualization_msgs;

rframe::NMLMessageFactory * NML_visualization_msgs_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        NML_visualization_msgs_gencppfactory = new visualization_msgs_gencppNMLMessageFactory();
        return NML_visualization_msgs_gencppfactory;
    };
}

rframe::NMLMessageFactory * visualization_msgs::allocate_visualization_msgs_gencpp()
{
    NML_visualization_msgs_gencppfactory = new visualization_msgs_gencppNMLMessageFactory();
    return NML_visualization_msgs_gencppfactory;
};

visualization_msgs_gencppNMLMessageFactory::visualization_msgs_gencppNMLMessageFactory()
{
    name("visualization_msgs_gencpp");
    // use constructor to register data types
    visualization_msgs::registerLibrary();
}

visualization_msgs_gencppNMLMessageFactory::~visualization_msgs_gencppNMLMessageFactory()
{
}

NML_FORMAT_PTR visualization_msgs_gencppNMLMessageFactory::FormatPointer()
{
    return visualization_msgs_gencpp_format;
}

int visualization_msgs_gencppNMLMessageFactory::dataType(NMLmsg & msg)
{
    return msg.type;
}

void visualization_msgs_gencppNMLMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(ImageMarker::ID);
    info.name(ImageMarker::DATA_TYPE_FULL_NAME);
    info.hashKey(ImageMarker::DATA_VERSION);
    info.md5Key(ImageMarker::VERSION_MD5);
    info.xmlSource(ImageMarker::XML_SOURCE);
    info.flat(ImageMarker::dataTypeFlat());
    ids.push_back(info);

    info.id(InteractiveMarker::ID);
    info.name(InteractiveMarker::DATA_TYPE_FULL_NAME);
    info.hashKey(InteractiveMarker::DATA_VERSION);
    info.md5Key(InteractiveMarker::VERSION_MD5);
    info.xmlSource(InteractiveMarker::XML_SOURCE);
    info.flat(InteractiveMarker::dataTypeFlat());
    ids.push_back(info);

    info.id(InteractiveMarkerControl::ID);
    info.name(InteractiveMarkerControl::DATA_TYPE_FULL_NAME);
    info.hashKey(InteractiveMarkerControl::DATA_VERSION);
    info.md5Key(InteractiveMarkerControl::VERSION_MD5);
    info.xmlSource(InteractiveMarkerControl::XML_SOURCE);
    info.flat(InteractiveMarkerControl::dataTypeFlat());
    ids.push_back(info);

    info.id(InteractiveMarkerFeedback::ID);
    info.name(InteractiveMarkerFeedback::DATA_TYPE_FULL_NAME);
    info.hashKey(InteractiveMarkerFeedback::DATA_VERSION);
    info.md5Key(InteractiveMarkerFeedback::VERSION_MD5);
    info.xmlSource(InteractiveMarkerFeedback::XML_SOURCE);
    info.flat(InteractiveMarkerFeedback::dataTypeFlat());
    ids.push_back(info);

    info.id(InteractiveMarkerInit::ID);
    info.name(InteractiveMarkerInit::DATA_TYPE_FULL_NAME);
    info.hashKey(InteractiveMarkerInit::DATA_VERSION);
    info.md5Key(InteractiveMarkerInit::VERSION_MD5);
    info.xmlSource(InteractiveMarkerInit::XML_SOURCE);
    info.flat(InteractiveMarkerInit::dataTypeFlat());
    ids.push_back(info);

    info.id(InteractiveMarkerPose::ID);
    info.name(InteractiveMarkerPose::DATA_TYPE_FULL_NAME);
    info.hashKey(InteractiveMarkerPose::DATA_VERSION);
    info.md5Key(InteractiveMarkerPose::VERSION_MD5);
    info.xmlSource(InteractiveMarkerPose::XML_SOURCE);
    info.flat(InteractiveMarkerPose::dataTypeFlat());
    ids.push_back(info);

    info.id(InteractiveMarkerUpdate::ID);
    info.name(InteractiveMarkerUpdate::DATA_TYPE_FULL_NAME);
    info.hashKey(InteractiveMarkerUpdate::DATA_VERSION);
    info.md5Key(InteractiveMarkerUpdate::VERSION_MD5);
    info.xmlSource(InteractiveMarkerUpdate::XML_SOURCE);
    info.flat(InteractiveMarkerUpdate::dataTypeFlat());
    ids.push_back(info);

    info.id(Marker::ID);
    info.name(Marker::DATA_TYPE_FULL_NAME);
    info.hashKey(Marker::DATA_VERSION);
    info.md5Key(Marker::VERSION_MD5);
    info.xmlSource(Marker::XML_SOURCE);
    info.flat(Marker::dataTypeFlat());
    ids.push_back(info);

    info.id(MarkerArray::ID);
    info.name(MarkerArray::DATA_TYPE_FULL_NAME);
    info.hashKey(MarkerArray::DATA_VERSION);
    info.md5Key(MarkerArray::VERSION_MD5);
    info.xmlSource(MarkerArray::XML_SOURCE);
    info.flat(MarkerArray::dataTypeFlat());
    ids.push_back(info);

    info.id(MenuEntry::ID);
    info.name(MenuEntry::DATA_TYPE_FULL_NAME);
    info.hashKey(MenuEntry::DATA_VERSION);
    info.md5Key(MenuEntry::VERSION_MD5);
    info.xmlSource(MenuEntry::XML_SOURCE);
    info.flat(MenuEntry::dataTypeFlat());
    ids.push_back(info);

}

int visualization_msgs_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<NMLmsg> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case ImageMarker::ID:
        {
            //ImageMarkerNML * newmsg = new ImageMarkerNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new ImageMarkerNML(),std::bind(&visualization_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case InteractiveMarker::ID:
        {
            //InteractiveMarkerNML * newmsg = new InteractiveMarkerNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new InteractiveMarkerNML(),std::bind(&visualization_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case InteractiveMarkerControl::ID:
        {
            //InteractiveMarkerControlNML * newmsg = new InteractiveMarkerControlNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new InteractiveMarkerControlNML(),std::bind(&visualization_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case InteractiveMarkerFeedback::ID:
        {
            //InteractiveMarkerFeedbackNML * newmsg = new InteractiveMarkerFeedbackNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new InteractiveMarkerFeedbackNML(),std::bind(&visualization_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case InteractiveMarkerInit::ID:
        {
            //InteractiveMarkerInitNML * newmsg = new InteractiveMarkerInitNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new InteractiveMarkerInitNML(),std::bind(&visualization_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case InteractiveMarkerPose::ID:
        {
            //InteractiveMarkerPoseNML * newmsg = new InteractiveMarkerPoseNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new InteractiveMarkerPoseNML(),std::bind(&visualization_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case InteractiveMarkerUpdate::ID:
        {
            //InteractiveMarkerUpdateNML * newmsg = new InteractiveMarkerUpdateNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new InteractiveMarkerUpdateNML(),std::bind(&visualization_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case Marker::ID:
        {
            //MarkerNML * newmsg = new MarkerNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new MarkerNML(),std::bind(&visualization_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case MarkerArray::ID:
        {
            //MarkerArrayNML * newmsg = new MarkerArrayNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new MarkerArrayNML(),std::bind(&visualization_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        case MenuEntry::ID:
        {
            //MenuEntryNML * newmsg = new MenuEntryNML();
            // allocate new data member, with link to appropriate destroy callback
            // what bind does is create a callback into this specific instance for the deallcoateTransport
            // member.
            std::shared_ptr<NMLmsg> newmsg(new MenuEntryNML(),std::bind(&visualization_msgs_gencppNMLMessageFactory::deallocateTransport,this,std::placeholders::_1));

            if (newmsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(newmsg);
                    /*                    *msg = static_cast<NMLmsg*>(newmsg);

                    if (*msg == NULL)
                    {
                        delete newmsg;
                        retval = rframe::Error::CAST;
                    }
                    */

            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int visualization_msgs_gencppNMLMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;
    bool found = true;

    switch (id)
    { 
        case ImageMarker::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<ImageMarker>(),std::bind(&visualization_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case InteractiveMarker::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<InteractiveMarker>(),std::bind(&visualization_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case InteractiveMarkerControl::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<InteractiveMarkerControl>(),std::bind(&visualization_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case InteractiveMarkerFeedback::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<InteractiveMarkerFeedback>(),std::bind(&visualization_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case InteractiveMarkerInit::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<InteractiveMarkerInit>(),std::bind(&visualization_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case InteractiveMarkerPose::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<InteractiveMarkerPose>(),std::bind(&visualization_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case InteractiveMarkerUpdate::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<InteractiveMarkerUpdate>(),std::bind(&visualization_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case Marker::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<Marker>(),std::bind(&visualization_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case MarkerArray::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<MarkerArray>(),std::bind(&visualization_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case MenuEntry::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<MenuEntry>(),std::bind(&visualization_msgs_gencppNMLMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            found = false;
        }
    }

    if (found == false)
    {
        retval = rframe::Error::PARAM_RANGE;
    }
    else if (msg.get() == NULL)
    {
        retval = rframe::Error::MEMORY_ALLOC;
    }
    else if (msg.get() != NULL)
    {
        retval = rframe::Error::SUCCESS;
    }

    return retval;
}

int visualization_msgs_gencppNMLMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    delete msg;

    return retval;
}

int visualization_msgs_gencppNMLMessageFactory::deallocateTransport(NMLmsg * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        switch (msg->type)
        { 
            case ImageMarker::ID:
            {
                ImageMarkerNML * tempmsg = static_cast<ImageMarkerNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case InteractiveMarker::ID:
            {
                InteractiveMarkerNML * tempmsg = static_cast<InteractiveMarkerNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case InteractiveMarkerControl::ID:
            {
                InteractiveMarkerControlNML * tempmsg = static_cast<InteractiveMarkerControlNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case InteractiveMarkerFeedback::ID:
            {
                InteractiveMarkerFeedbackNML * tempmsg = static_cast<InteractiveMarkerFeedbackNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case InteractiveMarkerInit::ID:
            {
                InteractiveMarkerInitNML * tempmsg = static_cast<InteractiveMarkerInitNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case InteractiveMarkerPose::ID:
            {
                InteractiveMarkerPoseNML * tempmsg = static_cast<InteractiveMarkerPoseNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case InteractiveMarkerUpdate::ID:
            {
                InteractiveMarkerUpdateNML * tempmsg = static_cast<InteractiveMarkerUpdateNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case Marker::ID:
            {
                MarkerNML * tempmsg = static_cast<MarkerNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case MarkerArray::ID:
            {
                MarkerArrayNML * tempmsg = static_cast<MarkerArrayNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            case MenuEntry::ID:
            {
                MenuEntryNML * tempmsg = static_cast<MenuEntryNML*>(msg);

                if (tempmsg != NULL)
                {
                    delete tempmsg;
                }
                break;
            } 
            default:
            {
                retval = Error::NOT_FOUND;
                break;
            }
        }
    }

    return retval;
}

int visualization_msgs_gencppNMLMessageFactory::toTransport(MessageBase & src, NMLmsg & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)dst.type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.type)
        { 
            case ImageMarker::ID:
            {
                ImageMarkerNML & tempDst = static_cast<ImageMarkerNML&>(dst);
                Message<ImageMarker > & tempSrc = static_cast<Message<ImageMarker>&>(src);

                if (tempSrc.version() != ImageMarker::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of ImageMarker: " << __FILE__ << " expected: " 
                             << ImageMarker::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of ImageMarker: " << __FILE__ << " expected: " 
                         << ImageMarker::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case InteractiveMarker::ID:
            {
                InteractiveMarkerNML & tempDst = static_cast<InteractiveMarkerNML&>(dst);
                Message<InteractiveMarker > & tempSrc = static_cast<Message<InteractiveMarker>&>(src);

                if (tempSrc.version() != InteractiveMarker::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of InteractiveMarker: " << __FILE__ << " expected: " 
                             << InteractiveMarker::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of InteractiveMarker: " << __FILE__ << " expected: " 
                         << InteractiveMarker::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case InteractiveMarkerControl::ID:
            {
                InteractiveMarkerControlNML & tempDst = static_cast<InteractiveMarkerControlNML&>(dst);
                Message<InteractiveMarkerControl > & tempSrc = static_cast<Message<InteractiveMarkerControl>&>(src);

                if (tempSrc.version() != InteractiveMarkerControl::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of InteractiveMarkerControl: " << __FILE__ << " expected: " 
                             << InteractiveMarkerControl::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of InteractiveMarkerControl: " << __FILE__ << " expected: " 
                         << InteractiveMarkerControl::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case InteractiveMarkerFeedback::ID:
            {
                InteractiveMarkerFeedbackNML & tempDst = static_cast<InteractiveMarkerFeedbackNML&>(dst);
                Message<InteractiveMarkerFeedback > & tempSrc = static_cast<Message<InteractiveMarkerFeedback>&>(src);

                if (tempSrc.version() != InteractiveMarkerFeedback::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of InteractiveMarkerFeedback: " << __FILE__ << " expected: " 
                             << InteractiveMarkerFeedback::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of InteractiveMarkerFeedback: " << __FILE__ << " expected: " 
                         << InteractiveMarkerFeedback::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case InteractiveMarkerInit::ID:
            {
                InteractiveMarkerInitNML & tempDst = static_cast<InteractiveMarkerInitNML&>(dst);
                Message<InteractiveMarkerInit > & tempSrc = static_cast<Message<InteractiveMarkerInit>&>(src);

                if (tempSrc.version() != InteractiveMarkerInit::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of InteractiveMarkerInit: " << __FILE__ << " expected: " 
                             << InteractiveMarkerInit::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of InteractiveMarkerInit: " << __FILE__ << " expected: " 
                         << InteractiveMarkerInit::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case InteractiveMarkerPose::ID:
            {
                InteractiveMarkerPoseNML & tempDst = static_cast<InteractiveMarkerPoseNML&>(dst);
                Message<InteractiveMarkerPose > & tempSrc = static_cast<Message<InteractiveMarkerPose>&>(src);

                if (tempSrc.version() != InteractiveMarkerPose::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of InteractiveMarkerPose: " << __FILE__ << " expected: " 
                             << InteractiveMarkerPose::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of InteractiveMarkerPose: " << __FILE__ << " expected: " 
                         << InteractiveMarkerPose::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case InteractiveMarkerUpdate::ID:
            {
                InteractiveMarkerUpdateNML & tempDst = static_cast<InteractiveMarkerUpdateNML&>(dst);
                Message<InteractiveMarkerUpdate > & tempSrc = static_cast<Message<InteractiveMarkerUpdate>&>(src);

                if (tempSrc.version() != InteractiveMarkerUpdate::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of InteractiveMarkerUpdate: " << __FILE__ << " expected: " 
                             << InteractiveMarkerUpdate::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of InteractiveMarkerUpdate: " << __FILE__ << " expected: " 
                         << InteractiveMarkerUpdate::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case Marker::ID:
            {
                MarkerNML & tempDst = static_cast<MarkerNML&>(dst);
                Message<Marker > & tempSrc = static_cast<Message<Marker>&>(src);

                if (tempSrc.version() != Marker::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of Marker: " << __FILE__ << " expected: " 
                             << Marker::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of Marker: " << __FILE__ << " expected: " 
                         << Marker::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case MarkerArray::ID:
            {
                MarkerArrayNML & tempDst = static_cast<MarkerArrayNML&>(dst);
                Message<MarkerArray > & tempSrc = static_cast<Message<MarkerArray>&>(src);

                if (tempSrc.version() != MarkerArray::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of MarkerArray: " << __FILE__ << " expected: " 
                             << MarkerArray::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of MarkerArray: " << __FILE__ << " expected: " 
                         << MarkerArray::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            case MenuEntry::ID:
            {
                MenuEntryNML & tempDst = static_cast<MenuEntryNML&>(dst);
                Message<MenuEntry > & tempSrc = static_cast<Message<MenuEntry>&>(src);

                if (tempSrc.version() != MenuEntry::DATA_VERSION)
                {
                    LOG_CRIT(__FUNCTION__ << " version mismatch on write of MenuEntry: " << __FILE__ << " expected: " 
                             << MenuEntry::DATA_VERSION << " got: " << tempSrc.version());
                    cout << __FUNCTION__ << " version mismatch on write of MenuEntry: " << __FILE__ << " expected: " 
                         << MenuEntry::DATA_VERSION << " got: " << tempSrc.version() << endl;
                    retval = rframe::Error::MSG_VERSION;
                }
                else
                {

                    // set version
                    tempDst.nmlVersion = tempSrc.version();
                    // set timestamp
                    tempDst.nmlTimestamp = tempSrc.timestamp();
                    // set module id
                    tempDst.nmlModuleId = tempSrc.moduleId();

                    tempDst.nmlPayload = tempSrc.payload();   
                }
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int visualization_msgs_gencppNMLMessageFactory::fromTransport(NMLmsg & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.type)
        { 
            case ImageMarker::ID:
            {
                ImageMarkerNML & tempSrc = static_cast<ImageMarkerNML&>(src);
                Message<ImageMarker > & tempDst = static_cast<Message<ImageMarker>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (ImageMarker::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case InteractiveMarker::ID:
            {
                InteractiveMarkerNML & tempSrc = static_cast<InteractiveMarkerNML&>(src);
                Message<InteractiveMarker > & tempDst = static_cast<Message<InteractiveMarker>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (InteractiveMarker::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case InteractiveMarkerControl::ID:
            {
                InteractiveMarkerControlNML & tempSrc = static_cast<InteractiveMarkerControlNML&>(src);
                Message<InteractiveMarkerControl > & tempDst = static_cast<Message<InteractiveMarkerControl>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (InteractiveMarkerControl::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case InteractiveMarkerFeedback::ID:
            {
                InteractiveMarkerFeedbackNML & tempSrc = static_cast<InteractiveMarkerFeedbackNML&>(src);
                Message<InteractiveMarkerFeedback > & tempDst = static_cast<Message<InteractiveMarkerFeedback>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (InteractiveMarkerFeedback::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case InteractiveMarkerInit::ID:
            {
                InteractiveMarkerInitNML & tempSrc = static_cast<InteractiveMarkerInitNML&>(src);
                Message<InteractiveMarkerInit > & tempDst = static_cast<Message<InteractiveMarkerInit>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (InteractiveMarkerInit::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case InteractiveMarkerPose::ID:
            {
                InteractiveMarkerPoseNML & tempSrc = static_cast<InteractiveMarkerPoseNML&>(src);
                Message<InteractiveMarkerPose > & tempDst = static_cast<Message<InteractiveMarkerPose>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (InteractiveMarkerPose::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case InteractiveMarkerUpdate::ID:
            {
                InteractiveMarkerUpdateNML & tempSrc = static_cast<InteractiveMarkerUpdateNML&>(src);
                Message<InteractiveMarkerUpdate > & tempDst = static_cast<Message<InteractiveMarkerUpdate>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (InteractiveMarkerUpdate::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case Marker::ID:
            {
                MarkerNML & tempSrc = static_cast<MarkerNML&>(src);
                Message<Marker > & tempDst = static_cast<Message<Marker>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (Marker::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case MarkerArray::ID:
            {
                MarkerArrayNML & tempSrc = static_cast<MarkerArrayNML&>(src);
                Message<MarkerArray > & tempDst = static_cast<Message<MarkerArray>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (MarkerArray::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            case MenuEntry::ID:
            {
                MenuEntryNML & tempSrc = static_cast<MenuEntryNML&>(src);
                Message<MenuEntry > & tempDst = static_cast<Message<MenuEntry>&>(dst);

                // check data version BEFORE tryinng to unpack
                if (MenuEntry::DATA_VERSION != tempSrc.nmlVersion)
                {
                    retval = rframe::Error::MSG_VERSION;
                    break; // skip unpacking of payload
                }

                tempDst.moduleId(tempSrc.nmlModuleId);
                tempDst.timestamp(tempSrc.nmlTimestamp);

                tempDst.payload(tempSrc.nmlPayload);
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int visualization_msgs_gencppNMLMessageFactory::constructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    switch (id)
    { 
        case ImageMarker::ID:
        {
            // only need to construct if data type is not flat
            if (ImageMarker::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing ImageMarker at %p\n",buffer);
                ImageMarkerNML * p = static_cast<ImageMarkerNML*>(buffer);
                // construct the type at pointer p
                new (p) ImageMarkerNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing ImageMarker at %p,, is flat\n",buffer);
            }
            break;
        } 
        case InteractiveMarker::ID:
        {
            // only need to construct if data type is not flat
            if (InteractiveMarker::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing InteractiveMarker at %p\n",buffer);
                InteractiveMarkerNML * p = static_cast<InteractiveMarkerNML*>(buffer);
                // construct the type at pointer p
                new (p) InteractiveMarkerNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing InteractiveMarker at %p,, is flat\n",buffer);
            }
            break;
        } 
        case InteractiveMarkerControl::ID:
        {
            // only need to construct if data type is not flat
            if (InteractiveMarkerControl::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing InteractiveMarkerControl at %p\n",buffer);
                InteractiveMarkerControlNML * p = static_cast<InteractiveMarkerControlNML*>(buffer);
                // construct the type at pointer p
                new (p) InteractiveMarkerControlNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing InteractiveMarkerControl at %p,, is flat\n",buffer);
            }
            break;
        } 
        case InteractiveMarkerFeedback::ID:
        {
            // only need to construct if data type is not flat
            if (InteractiveMarkerFeedback::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing InteractiveMarkerFeedback at %p\n",buffer);
                InteractiveMarkerFeedbackNML * p = static_cast<InteractiveMarkerFeedbackNML*>(buffer);
                // construct the type at pointer p
                new (p) InteractiveMarkerFeedbackNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing InteractiveMarkerFeedback at %p,, is flat\n",buffer);
            }
            break;
        } 
        case InteractiveMarkerInit::ID:
        {
            // only need to construct if data type is not flat
            if (InteractiveMarkerInit::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing InteractiveMarkerInit at %p\n",buffer);
                InteractiveMarkerInitNML * p = static_cast<InteractiveMarkerInitNML*>(buffer);
                // construct the type at pointer p
                new (p) InteractiveMarkerInitNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing InteractiveMarkerInit at %p,, is flat\n",buffer);
            }
            break;
        } 
        case InteractiveMarkerPose::ID:
        {
            // only need to construct if data type is not flat
            if (InteractiveMarkerPose::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing InteractiveMarkerPose at %p\n",buffer);
                InteractiveMarkerPoseNML * p = static_cast<InteractiveMarkerPoseNML*>(buffer);
                // construct the type at pointer p
                new (p) InteractiveMarkerPoseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing InteractiveMarkerPose at %p,, is flat\n",buffer);
            }
            break;
        } 
        case InteractiveMarkerUpdate::ID:
        {
            // only need to construct if data type is not flat
            if (InteractiveMarkerUpdate::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing InteractiveMarkerUpdate at %p\n",buffer);
                InteractiveMarkerUpdateNML * p = static_cast<InteractiveMarkerUpdateNML*>(buffer);
                // construct the type at pointer p
                new (p) InteractiveMarkerUpdateNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing InteractiveMarkerUpdate at %p,, is flat\n",buffer);
            }
            break;
        } 
        case Marker::ID:
        {
            // only need to construct if data type is not flat
            if (Marker::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing Marker at %p\n",buffer);
                MarkerNML * p = static_cast<MarkerNML*>(buffer);
                // construct the type at pointer p
                new (p) MarkerNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing Marker at %p,, is flat\n",buffer);
            }
            break;
        } 
        case MarkerArray::ID:
        {
            // only need to construct if data type is not flat
            if (MarkerArray::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing MarkerArray at %p\n",buffer);
                MarkerArrayNML * p = static_cast<MarkerArrayNML*>(buffer);
                // construct the type at pointer p
                new (p) MarkerArrayNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing MarkerArray at %p,, is flat\n",buffer);
            }
            break;
        } 
        case MenuEntry::ID:
        {
            // only need to construct if data type is not flat
            if (MenuEntry::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("constructing MenuEntry at %p\n",buffer);
                MenuEntryNML * p = static_cast<MenuEntryNML*>(buffer);
                // construct the type at pointer p
                new (p) MenuEntryNML();
            }
            else
            {
                FLOG_DEBUG3("skipping constructing MenuEntry at %p,, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

int visualization_msgs_gencppNMLMessageFactory::destructBuffer(rframe::ID_TYPE id, void * buffer)
{
    int retval = Error::SUCCESS;

    if (buffer == nullptr) return retval;

    switch (id)
    { 
        case ImageMarker::ID:
        {
            // only need to destruct if data type is not flat
            if (ImageMarker::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing ImageMarker at %p\n",buffer);
                ImageMarkerNML * p = static_cast<ImageMarkerNML*>(buffer);
                p->~ImageMarkerNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction ImageMarker at %p, is flat\n",buffer);
            }
            break;
        } 
        case InteractiveMarker::ID:
        {
            // only need to destruct if data type is not flat
            if (InteractiveMarker::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing InteractiveMarker at %p\n",buffer);
                InteractiveMarkerNML * p = static_cast<InteractiveMarkerNML*>(buffer);
                p->~InteractiveMarkerNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction InteractiveMarker at %p, is flat\n",buffer);
            }
            break;
        } 
        case InteractiveMarkerControl::ID:
        {
            // only need to destruct if data type is not flat
            if (InteractiveMarkerControl::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing InteractiveMarkerControl at %p\n",buffer);
                InteractiveMarkerControlNML * p = static_cast<InteractiveMarkerControlNML*>(buffer);
                p->~InteractiveMarkerControlNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction InteractiveMarkerControl at %p, is flat\n",buffer);
            }
            break;
        } 
        case InteractiveMarkerFeedback::ID:
        {
            // only need to destruct if data type is not flat
            if (InteractiveMarkerFeedback::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing InteractiveMarkerFeedback at %p\n",buffer);
                InteractiveMarkerFeedbackNML * p = static_cast<InteractiveMarkerFeedbackNML*>(buffer);
                p->~InteractiveMarkerFeedbackNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction InteractiveMarkerFeedback at %p, is flat\n",buffer);
            }
            break;
        } 
        case InteractiveMarkerInit::ID:
        {
            // only need to destruct if data type is not flat
            if (InteractiveMarkerInit::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing InteractiveMarkerInit at %p\n",buffer);
                InteractiveMarkerInitNML * p = static_cast<InteractiveMarkerInitNML*>(buffer);
                p->~InteractiveMarkerInitNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction InteractiveMarkerInit at %p, is flat\n",buffer);
            }
            break;
        } 
        case InteractiveMarkerPose::ID:
        {
            // only need to destruct if data type is not flat
            if (InteractiveMarkerPose::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing InteractiveMarkerPose at %p\n",buffer);
                InteractiveMarkerPoseNML * p = static_cast<InteractiveMarkerPoseNML*>(buffer);
                p->~InteractiveMarkerPoseNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction InteractiveMarkerPose at %p, is flat\n",buffer);
            }
            break;
        } 
        case InteractiveMarkerUpdate::ID:
        {
            // only need to destruct if data type is not flat
            if (InteractiveMarkerUpdate::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing InteractiveMarkerUpdate at %p\n",buffer);
                InteractiveMarkerUpdateNML * p = static_cast<InteractiveMarkerUpdateNML*>(buffer);
                p->~InteractiveMarkerUpdateNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction InteractiveMarkerUpdate at %p, is flat\n",buffer);
            }
            break;
        } 
        case Marker::ID:
        {
            // only need to destruct if data type is not flat
            if (Marker::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing Marker at %p\n",buffer);
                MarkerNML * p = static_cast<MarkerNML*>(buffer);
                p->~MarkerNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction Marker at %p, is flat\n",buffer);
            }
            break;
        } 
        case MarkerArray::ID:
        {
            // only need to destruct if data type is not flat
            if (MarkerArray::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing MarkerArray at %p\n",buffer);
                MarkerArrayNML * p = static_cast<MarkerArrayNML*>(buffer);
                p->~MarkerArrayNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction MarkerArray at %p, is flat\n",buffer);
            }
            break;
        } 
        case MenuEntry::ID:
        {
            // only need to destruct if data type is not flat
            if (MenuEntry::dataTypeFlat() == false)
            {
                FLOG_DEBUG3("destructing MenuEntry at %p\n",buffer);
                MenuEntryNML * p = static_cast<MenuEntryNML*>(buffer);
                p->~MenuEntryNML();
            }
            else
            {
                FLOG_DEBUG3("skipping destruction MenuEntry at %p, is flat\n",buffer);
            }
            break;
        } 
        default:
        {
            retval = Error::NOT_FOUND;
        }
    }

    return retval;
}

void visualization_msgs::nmlupdate(CMS * cms, ImageMarker & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate ImageMarker, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.header);
        nmlupdate(cms,inobj.ns);
        cms->update(inobj.id);
        cms->update(inobj.type);
        cms->update(inobj.action);
        nmlupdate(cms,inobj.position);
        cms->update(inobj.scale);
        nmlupdate(cms,inobj.outline_color);
        cms->update(inobj.filled);
        nmlupdate(cms,inobj.fill_color);
        nmlupdate(cms,inobj.lifetime);
        nmlupdate(cms,inobj.points);
        nmlupdate(cms,inobj.outline_colors);

    }  
 }

ImageMarkerNML::ImageMarkerNML() : NMLmsg((NMLTYPE)ImageMarker::ID,sizeof(ImageMarkerNML)), nmlVersion(ImageMarker::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new ImageMarker()*/)
{
};

ImageMarkerNML::~ImageMarkerNML()
{
};

ImageMarkerNML & ImageMarkerNML::operator=(const ImageMarkerNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

ImageMarkerNML & ImageMarkerNML::operator=(const ImageMarker & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(ImageMarker);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void ImageMarkerNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<ImageMarker&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: ImageMarkerNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<ImageMarker> temp(new ImageMarker());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: visualization_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (ImageMarker::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: ImageMarker Message version mismatch, expected " << ImageMarker::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: ImageMarker Message version mismatch, expected " << ImageMarker::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void visualization_msgs::nmlupdate(CMS * cms, InteractiveMarker & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate InteractiveMarker, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.header);
        nmlupdate(cms,inobj.pose);
        nmlupdate(cms,inobj.name);
        nmlupdate(cms,inobj.description);
        cms->update(inobj.scale);
        nmlupdate(cms,inobj.menu_entries);
        nmlupdate(cms,inobj.controls);

    }  
 }

InteractiveMarkerNML::InteractiveMarkerNML() : NMLmsg((NMLTYPE)InteractiveMarker::ID,sizeof(InteractiveMarkerNML)), nmlVersion(InteractiveMarker::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new InteractiveMarker()*/)
{
};

InteractiveMarkerNML::~InteractiveMarkerNML()
{
};

InteractiveMarkerNML & InteractiveMarkerNML::operator=(const InteractiveMarkerNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

InteractiveMarkerNML & InteractiveMarkerNML::operator=(const InteractiveMarker & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(InteractiveMarker);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void InteractiveMarkerNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<InteractiveMarker&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: InteractiveMarkerNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<InteractiveMarker> temp(new InteractiveMarker());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: visualization_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (InteractiveMarker::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: InteractiveMarker Message version mismatch, expected " << InteractiveMarker::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: InteractiveMarker Message version mismatch, expected " << InteractiveMarker::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void visualization_msgs::nmlupdate(CMS * cms, InteractiveMarkerControl & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate InteractiveMarkerControl, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.name);
        nmlupdate(cms,inobj.orientation);
        cms->update(inobj.orientation_mode);
        cms->update(inobj.interaction_mode);
        cms->update(inobj.always_visible);
        nmlupdate(cms,inobj.markers);
        cms->update(inobj.independent_marker_orientation);
        nmlupdate(cms,inobj.description);

    }  
 }

InteractiveMarkerControlNML::InteractiveMarkerControlNML() : NMLmsg((NMLTYPE)InteractiveMarkerControl::ID,sizeof(InteractiveMarkerControlNML)), nmlVersion(InteractiveMarkerControl::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new InteractiveMarkerControl()*/)
{
};

InteractiveMarkerControlNML::~InteractiveMarkerControlNML()
{
};

InteractiveMarkerControlNML & InteractiveMarkerControlNML::operator=(const InteractiveMarkerControlNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

InteractiveMarkerControlNML & InteractiveMarkerControlNML::operator=(const InteractiveMarkerControl & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(InteractiveMarkerControl);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void InteractiveMarkerControlNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<InteractiveMarkerControl&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: InteractiveMarkerControlNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<InteractiveMarkerControl> temp(new InteractiveMarkerControl());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: visualization_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (InteractiveMarkerControl::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: InteractiveMarkerControl Message version mismatch, expected " << InteractiveMarkerControl::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: InteractiveMarkerControl Message version mismatch, expected " << InteractiveMarkerControl::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void visualization_msgs::nmlupdate(CMS * cms, InteractiveMarkerFeedback & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate InteractiveMarkerFeedback, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.header);
        nmlupdate(cms,inobj.client_id);
        nmlupdate(cms,inobj.marker_name);
        nmlupdate(cms,inobj.control_name);
        cms->update(inobj.event_type);
        nmlupdate(cms,inobj.pose);
        cms->update(inobj.menu_entry_id);
        nmlupdate(cms,inobj.mouse_point);
        cms->update(inobj.mouse_point_valid);

    }  
 }

InteractiveMarkerFeedbackNML::InteractiveMarkerFeedbackNML() : NMLmsg((NMLTYPE)InteractiveMarkerFeedback::ID,sizeof(InteractiveMarkerFeedbackNML)), nmlVersion(InteractiveMarkerFeedback::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new InteractiveMarkerFeedback()*/)
{
};

InteractiveMarkerFeedbackNML::~InteractiveMarkerFeedbackNML()
{
};

InteractiveMarkerFeedbackNML & InteractiveMarkerFeedbackNML::operator=(const InteractiveMarkerFeedbackNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

InteractiveMarkerFeedbackNML & InteractiveMarkerFeedbackNML::operator=(const InteractiveMarkerFeedback & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(InteractiveMarkerFeedback);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void InteractiveMarkerFeedbackNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<InteractiveMarkerFeedback&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: InteractiveMarkerFeedbackNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<InteractiveMarkerFeedback> temp(new InteractiveMarkerFeedback());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: visualization_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (InteractiveMarkerFeedback::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: InteractiveMarkerFeedback Message version mismatch, expected " << InteractiveMarkerFeedback::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: InteractiveMarkerFeedback Message version mismatch, expected " << InteractiveMarkerFeedback::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void visualization_msgs::nmlupdate(CMS * cms, InteractiveMarkerInit & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate InteractiveMarkerInit, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.server_id);
        cms->update(inobj.seq_num);
        nmlupdate(cms,inobj.markers);

    }  
 }

InteractiveMarkerInitNML::InteractiveMarkerInitNML() : NMLmsg((NMLTYPE)InteractiveMarkerInit::ID,sizeof(InteractiveMarkerInitNML)), nmlVersion(InteractiveMarkerInit::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new InteractiveMarkerInit()*/)
{
};

InteractiveMarkerInitNML::~InteractiveMarkerInitNML()
{
};

InteractiveMarkerInitNML & InteractiveMarkerInitNML::operator=(const InteractiveMarkerInitNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

InteractiveMarkerInitNML & InteractiveMarkerInitNML::operator=(const InteractiveMarkerInit & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(InteractiveMarkerInit);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void InteractiveMarkerInitNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<InteractiveMarkerInit&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: InteractiveMarkerInitNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<InteractiveMarkerInit> temp(new InteractiveMarkerInit());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: visualization_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (InteractiveMarkerInit::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: InteractiveMarkerInit Message version mismatch, expected " << InteractiveMarkerInit::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: InteractiveMarkerInit Message version mismatch, expected " << InteractiveMarkerInit::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void visualization_msgs::nmlupdate(CMS * cms, InteractiveMarkerPose & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate InteractiveMarkerPose, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.header);
        nmlupdate(cms,inobj.pose);
        nmlupdate(cms,inobj.name);

    }  
 }

InteractiveMarkerPoseNML::InteractiveMarkerPoseNML() : NMLmsg((NMLTYPE)InteractiveMarkerPose::ID,sizeof(InteractiveMarkerPoseNML)), nmlVersion(InteractiveMarkerPose::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new InteractiveMarkerPose()*/)
{
};

InteractiveMarkerPoseNML::~InteractiveMarkerPoseNML()
{
};

InteractiveMarkerPoseNML & InteractiveMarkerPoseNML::operator=(const InteractiveMarkerPoseNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

InteractiveMarkerPoseNML & InteractiveMarkerPoseNML::operator=(const InteractiveMarkerPose & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(InteractiveMarkerPose);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void InteractiveMarkerPoseNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<InteractiveMarkerPose&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: InteractiveMarkerPoseNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<InteractiveMarkerPose> temp(new InteractiveMarkerPose());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: visualization_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (InteractiveMarkerPose::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: InteractiveMarkerPose Message version mismatch, expected " << InteractiveMarkerPose::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: InteractiveMarkerPose Message version mismatch, expected " << InteractiveMarkerPose::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void visualization_msgs::nmlupdate(CMS * cms, InteractiveMarkerUpdate & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate InteractiveMarkerUpdate, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.server_id);
        cms->update(inobj.seq_num);
        cms->update(inobj.type);
        nmlupdate(cms,inobj.markers);
        nmlupdate(cms,inobj.poses);
        nmlupdate(cms,inobj.erases);

    }  
 }

InteractiveMarkerUpdateNML::InteractiveMarkerUpdateNML() : NMLmsg((NMLTYPE)InteractiveMarkerUpdate::ID,sizeof(InteractiveMarkerUpdateNML)), nmlVersion(InteractiveMarkerUpdate::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new InteractiveMarkerUpdate()*/)
{
};

InteractiveMarkerUpdateNML::~InteractiveMarkerUpdateNML()
{
};

InteractiveMarkerUpdateNML & InteractiveMarkerUpdateNML::operator=(const InteractiveMarkerUpdateNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

InteractiveMarkerUpdateNML & InteractiveMarkerUpdateNML::operator=(const InteractiveMarkerUpdate & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(InteractiveMarkerUpdate);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void InteractiveMarkerUpdateNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<InteractiveMarkerUpdate&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: InteractiveMarkerUpdateNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<InteractiveMarkerUpdate> temp(new InteractiveMarkerUpdate());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: visualization_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (InteractiveMarkerUpdate::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: InteractiveMarkerUpdate Message version mismatch, expected " << InteractiveMarkerUpdate::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: InteractiveMarkerUpdate Message version mismatch, expected " << InteractiveMarkerUpdate::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void visualization_msgs::nmlupdate(CMS * cms, Marker & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate Marker, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.header);
        nmlupdate(cms,inobj.ns);
        cms->update(inobj.id);
        cms->update(inobj.type);
        cms->update(inobj.action);
        nmlupdate(cms,inobj.pose);
        nmlupdate(cms,inobj.scale);
        nmlupdate(cms,inobj.color);
        nmlupdate(cms,inobj.lifetime);
        cms->update(inobj.frame_locked);
        nmlupdate(cms,inobj.points);
        nmlupdate(cms,inobj.colors);
        nmlupdate(cms,inobj.text);
        nmlupdate(cms,inobj.mesh_resource);
        cms->update(inobj.mesh_use_embedded_materials);

    }  
 }

MarkerNML::MarkerNML() : NMLmsg((NMLTYPE)Marker::ID,sizeof(MarkerNML)), nmlVersion(Marker::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new Marker()*/)
{
};

MarkerNML::~MarkerNML()
{
};

MarkerNML & MarkerNML::operator=(const MarkerNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

MarkerNML & MarkerNML::operator=(const Marker & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(Marker);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void MarkerNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<Marker&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: MarkerNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<Marker> temp(new Marker());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: visualization_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (Marker::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: Marker Message version mismatch, expected " << Marker::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: Marker Message version mismatch, expected " << Marker::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void visualization_msgs::nmlupdate(CMS * cms, MarkerArray & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate MarkerArray, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        nmlupdate(cms,inobj.markers);

    }  
 }

MarkerArrayNML::MarkerArrayNML() : NMLmsg((NMLTYPE)MarkerArray::ID,sizeof(MarkerArrayNML)), nmlVersion(MarkerArray::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new MarkerArray()*/)
{
};

MarkerArrayNML::~MarkerArrayNML()
{
};

MarkerArrayNML & MarkerArrayNML::operator=(const MarkerArrayNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

MarkerArrayNML & MarkerArrayNML::operator=(const MarkerArray & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(MarkerArray);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void MarkerArrayNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<MarkerArray&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: MarkerArrayNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<MarkerArray> temp(new MarkerArray());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: visualization_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (MarkerArray::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: MarkerArray Message version mismatch, expected " << MarkerArray::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: MarkerArray Message version mismatch, expected " << MarkerArray::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

void visualization_msgs::nmlupdate(CMS * cms, MenuEntry & inobj)
{
    if (cms != NULL)
    {
        //        rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"nmlupdate MenuEntry, old style, cms mode is %d, neutral is %d",cms->mode,cms->neutral_encoding_method);

        cms->update(inobj.id);
        cms->update(inobj.parent_id);
        nmlupdate(cms,inobj.title);
        nmlupdate(cms,inobj.command);
        cms->update(inobj.command_type);

    }  
 }

MenuEntryNML::MenuEntryNML() : NMLmsg((NMLTYPE)MenuEntry::ID,sizeof(MenuEntryNML)), nmlVersion(MenuEntry::DATA_VERSION), nmlTimestamp(rframe::timestamp()), nmlModuleId(0), nmlPayload(/*new MenuEntry()*/)
{
};

MenuEntryNML::~MenuEntryNML()
{
};

MenuEntryNML & MenuEntryNML::operator=(const MenuEntryNML & inobj)
{
    if (this != &inobj)
    {
        type = inobj.type;
        size = inobj.size;
        nmlPayload = inobj.nmlPayload;

        nmlVersion = inobj.nmlVersion;
        nmlTimestamp = inobj.nmlTimestamp;
        nmlModuleId = inobj.nmlModuleId;

    }

    return *this;
}

MenuEntryNML & MenuEntryNML::operator=(const MenuEntry & inobj)
{
    if (&nmlPayload != &inobj)
    {
        nmlPayload = inobj;

        type = (NMLTYPE)(inobj.ID);
        size = sizeof(MenuEntry);

        nmlVersion = inobj.DATA_VERSION;
        // nmlTimestamp & module id  set in constructor

    }

    return *this;
}

void MenuEntryNML::update(CMS * cms)
{
#if 1  
    cms->update(nmlVersion);
    cms->update(nmlTimestamp);
    cms->update(nmlModuleId);
    nmlupdate(cms,static_cast<MenuEntry&>(nmlPayload));
#else   // use of boost serialization is deprecated

      cout << "ERROR ERROR ERRROR: MenuEntryNML Using deprecated boost serialization within nml update!" << endl;

#if 0
      left in in case we go back to a shared_ptr<T> for nml payload, need to allocate here if necessary.
      // check to make sure we have a place for the data
      if (nmlPayload.get() == NULL)
      {
          std::shared_ptr<MenuEntry> temp(new MenuEntry());
          nmlPayload.swap(temp);
      }
#endif

      //    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,DBG,"ERROR: visualization_msgs_gencpp: nml::update called for message %d, which should use boost serialization",(int)type);

    NMLUpdaterHelper updater(cms);

    int count = 0;
    // on encode this next line reserves space, on decode it extracts the data size
    updater.storeDataStart();
    cms->update(count);
    char * buf = updater.encodedData();
    unsigned int len = updater.spaceLeft();

    if (cms->mode == CMS_ENCODE)
    {

        boost::iostreams::basic_array_sink<char> helperSink(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_sink<char> > source(helperSink);

        // boost serialize
        {
            //boost::archive::binary_oarchive oa(source,boost::archive::no_header);
            eos::portable_oarchive oa(source); // portable archives require header, but its only a byte.
            oa << nmlVersion << nmlTimestamp << nmlModuleId << nmlPayload;
        }

        int wroteSize = boost::iostreams::seek(source,0,std::ios_base::cur);

        updater.updateEncoded(wroteSize);

        updater.storeCount(wroteSize);
    }
    else
    {
        boost::iostreams::basic_array_source<char> device(buf,len);
        boost::iostreams::stream<boost::iostreams::basic_array_source<char> > source(device);

        // boost serialize
        {
            //boost::archive::binary_iarchive ia(source,boost::archive::no_header);
            eos::portable_iarchive ia(source);
            ia >> nmlVersion;

            if (MenuEntry::DATA_VERSION != nmlVersion)
            {
                LOG_CRIT(__FUNCTION__ << "ERROR: MenuEntry Message version mismatch, expected " << MenuEntry::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranted!");
                cout << __FUNCTION__ << "ERROR: MenuEntry Message version mismatch, expected " << MenuEntry::DATA_VERSION << " but got " << nmlVersion << " stopping read, buffer state is not guaranteed!" << endl;

            }
            else
            {
                ia >> nmlTimestamp >> nmlModuleId >> nmlPayload;
            }
        }    

    }

#endif
}

int visualization_msgs::visualization_msgs_gencpp_format(NMLTYPE type, void * buffer, CMS* cms)
{
    int retval = 1;
    int retval2 = rframe::Error::SUCCESS;

          //printf("visualization_msgs_gencpp_format: buffer parameters: type: %d, %p, encode: %d\n",(int)type, buffer,cms->mode);

    switch (type)
    { 
        case 0:
        {
            // do nothing, 0 is passed in on buffer creation
            break;
        }
        case ImageMarker::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for ImageMarker, id " << ImageMarker::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_visualization_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"visualization_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((ImageMarkerNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case InteractiveMarker::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for InteractiveMarker, id " << InteractiveMarker::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_visualization_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"visualization_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((InteractiveMarkerNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case InteractiveMarkerControl::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for InteractiveMarkerControl, id " << InteractiveMarkerControl::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_visualization_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"visualization_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((InteractiveMarkerControlNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case InteractiveMarkerFeedback::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for InteractiveMarkerFeedback, id " << InteractiveMarkerFeedback::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_visualization_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"visualization_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((InteractiveMarkerFeedbackNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case InteractiveMarkerInit::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for InteractiveMarkerInit, id " << InteractiveMarkerInit::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_visualization_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"visualization_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((InteractiveMarkerInitNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case InteractiveMarkerPose::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for InteractiveMarkerPose, id " << InteractiveMarkerPose::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_visualization_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"visualization_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((InteractiveMarkerPoseNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case InteractiveMarkerUpdate::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for InteractiveMarkerUpdate, id " << InteractiveMarkerUpdate::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_visualization_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"visualization_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((InteractiveMarkerUpdateNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case Marker::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for Marker, id " << Marker::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_visualization_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"visualization_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((MarkerNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case MarkerArray::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for MarkerArray, id " << MarkerArray::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_visualization_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"visualization_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((MarkerArrayNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        } 
        case MenuEntry::ID:
        {
            int oldPointerCheckDisabled = cms->pointer_check_disabled;
            cms->pointer_check_disabled = 1;

            //  cout << "message is for MenuEntry, id " << MenuEntry::ID << endl;

            if (cms->mode == CMS_DECODE)
            {

                retval2 = NML_visualization_msgs_gencppfactory->constructBuffer(type,buffer);
                if (retval2 != rframe::Error::SUCCESS)
                {
                    rframe::Log::instance()->logFormatted(DEFAULT_LOG_MODULE_ID,CRIT,"visualization_msgs_gencpp_format: failed construction: id: %d, error: %d",(int)type,retval2);
                }
            }
            else
            {

            }

            ((MenuEntryNML*)buffer)->update(cms);

            cms->pointer_check_disabled = oldPointerCheckDisabled;

            break;
        }                   
        default:
        {

            retval = 0;
            break;
        }
    }

          //   printf("format done\n");
    return retval;
}


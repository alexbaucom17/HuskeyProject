// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:47 -0500
//  From Template/Script: data_templates/ROSTemplate.h.rb
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#ifndef _CODEGEN_CONTROL_MSGS_GENCPP_ROS_H_
#define _CODEGEN_CONTROL_MSGS_GENCPP_ROS_H_

#include <opensource/ros/serialization.h>
#include <opensource/ros/message_traits.h>
#include <opensource/ros/message_operations.h>

#include <messaging/ros/ROSMessageFactory.h>
#include <messaging/Message.h>

namespace rframe { class DataTypeInfo; };

#include "control_msgs_gencpp_Library.h"

#include "actionlib_msgs/actionlib_msgs_gencpp_ROS.h"
#include "geometry_msgs/geometry_msgs_gencpp_ROS.h"
#include "std_msgs/std_msgs_gencpp_ROS.h"
#include "std_srvs/std_srvs_gencpp_ROS.h"
#include "trajectory_msgs/trajectory_msgs_gencpp_ROS.h"

namespace control_msgs { 

    /** definition of message factory for control_msgs_gencpp */
    class control_msgs_gencppROSMessageFactory : public ROSMessageFactory
    {
    public:
        /** constructor */
        control_msgs_gencppROSMessageFactory();
        /** destructor */
        virtual ~control_msgs_gencppROSMessageFactory();

        /** see  rframe::MessageFactoryInterface */
        virtual void dataTypes(std::vector<DataTypeInfo> & ids);
        /** see  rframe::MessageFactoryInterface */
        virtual int dataType(ros::SerializedMessage & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<ros::SerializedMessage> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateTransport(ros::SerializedMessage * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateMessage(MessageBase * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int toTransport( MessageBase & src, ros::SerializedMessage & dst);
        /** see  rframe::MessageFactoryInterface */
        virtual int fromTransport( ros::SerializedMessage & src, MessageBase & dst);

		/** see rframe::ROSMessageFactory */
        virtual int typeName(std::string & str, rframe::ID_TYPE id);
		/** see rframe::ROSMessageFactory */
        virtual int desc(std::string & str, rframe::ID_TYPE id);
		/** see rframe::ROSMessageFactory */
        virtual int md5String(std::string & str, rframe::ID_TYPE id);
        /** see rframe::ROSMessageFactory */
        virtual int md5(unsigned long long & highOrder, unsigned long long & lowOrder, rframe::ID_TYPE id);
        /** see rframe::ROSMessageFactory */
		int updateHeader(rframe::MessageBase &msg, unsigned int seqNo);
    };

    /** factory allocation function for use when not dynamically loading the factory library  */
    ROSMessageFactory * allocate_control_msgs_gencpp();

}; // end namespace control_msgs

// declare ros serialization templates
namespace ros
{
  namespace serialization
  {  

      template <> struct Serializer<control_msgs::FollowJointTrajectoryAction>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::FollowJointTrajectoryAction & t)
          { 
              stream.next(t.action_goal); 
              stream.next(t.action_result); 
              stream.next(t.action_feedback); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::FollowJointTrajectoryAction & t)
          { 
              stream.next(t.action_goal); 
              stream.next(t.action_result); 
              stream.next(t.action_feedback); 
          };

          inline static uint32_t serializedLength(const control_msgs::FollowJointTrajectoryAction & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.action_goal); 
              size += serializationLength(t.action_result); 
              size += serializationLength(t.action_feedback); 
              return size;
          };
      }; // end struct Serializer<control_msgs::FollowJointTrajectoryAction>

      template <> struct Serializer<control_msgs::FollowJointTrajectoryActionFeedback>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::FollowJointTrajectoryActionFeedback & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.feedback); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::FollowJointTrajectoryActionFeedback & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.feedback); 
          };

          inline static uint32_t serializedLength(const control_msgs::FollowJointTrajectoryActionFeedback & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.status); 
              size += serializationLength(t.feedback); 
              return size;
          };
      }; // end struct Serializer<control_msgs::FollowJointTrajectoryActionFeedback>

      template <> struct Serializer<control_msgs::FollowJointTrajectoryActionGoal>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::FollowJointTrajectoryActionGoal & t)
          { 
              stream.next(t.header); 
              stream.next(t.goal_id); 
              stream.next(t.goal); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::FollowJointTrajectoryActionGoal & t)
          { 
              stream.next(t.header); 
              stream.next(t.goal_id); 
              stream.next(t.goal); 
          };

          inline static uint32_t serializedLength(const control_msgs::FollowJointTrajectoryActionGoal & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.goal_id); 
              size += serializationLength(t.goal); 
              return size;
          };
      }; // end struct Serializer<control_msgs::FollowJointTrajectoryActionGoal>

      template <> struct Serializer<control_msgs::FollowJointTrajectoryActionResult>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::FollowJointTrajectoryActionResult & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.result); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::FollowJointTrajectoryActionResult & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.result); 
          };

          inline static uint32_t serializedLength(const control_msgs::FollowJointTrajectoryActionResult & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.status); 
              size += serializationLength(t.result); 
              return size;
          };
      }; // end struct Serializer<control_msgs::FollowJointTrajectoryActionResult>

      template <> struct Serializer<control_msgs::FollowJointTrajectoryFeedback>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::FollowJointTrajectoryFeedback & t)
          { 
              stream.next(t.header); 
              stream.next(t.joint_names); 
              stream.next(t.desired); 
              stream.next(t.actual); 
              stream.next(t.error); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::FollowJointTrajectoryFeedback & t)
          { 
              stream.next(t.header); 
              stream.next(t.joint_names); 
              stream.next(t.desired); 
              stream.next(t.actual); 
              stream.next(t.error); 
          };

          inline static uint32_t serializedLength(const control_msgs::FollowJointTrajectoryFeedback & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.joint_names); 
              size += serializationLength(t.desired); 
              size += serializationLength(t.actual); 
              size += serializationLength(t.error); 
              return size;
          };
      }; // end struct Serializer<control_msgs::FollowJointTrajectoryFeedback>

      template <> struct Serializer<control_msgs::FollowJointTrajectoryGoal>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::FollowJointTrajectoryGoal & t)
          { 
              stream.next(t.trajectory); 
              stream.next(t.path_tolerance); 
              stream.next(t.goal_tolerance); 
              stream.next(t.goal_time_tolerance); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::FollowJointTrajectoryGoal & t)
          { 
              stream.next(t.trajectory); 
              stream.next(t.path_tolerance); 
              stream.next(t.goal_tolerance); 
              stream.next(t.goal_time_tolerance); 
          };

          inline static uint32_t serializedLength(const control_msgs::FollowJointTrajectoryGoal & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.trajectory); 
              size += serializationLength(t.path_tolerance); 
              size += serializationLength(t.goal_tolerance); 
              size += serializationLength(t.goal_time_tolerance); 
              return size;
          };
      }; // end struct Serializer<control_msgs::FollowJointTrajectoryGoal>

      template <> struct Serializer<control_msgs::FollowJointTrajectoryResult>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::FollowJointTrajectoryResult & t)
          { 
              stream.next(t.error_code); 
              stream.next(t.error_string); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::FollowJointTrajectoryResult & t)
          { 
              stream.next(t.error_code); 
              stream.next(t.error_string); 
          };

          inline static uint32_t serializedLength(const control_msgs::FollowJointTrajectoryResult & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.error_code); 
              size += serializationLength(t.error_string); 
              return size;
          };
      }; // end struct Serializer<control_msgs::FollowJointTrajectoryResult>

      template <> struct Serializer<control_msgs::GripperCommand>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::GripperCommand & t)
          { 
              stream.next(t.position); 
              stream.next(t.max_effort); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::GripperCommand & t)
          { 
              stream.next(t.position); 
              stream.next(t.max_effort); 
          };

          inline static uint32_t serializedLength(const control_msgs::GripperCommand & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.position); 
              size += serializationLength(t.max_effort); 
              return size;
          };
      }; // end struct Serializer<control_msgs::GripperCommand>

      template <> struct Serializer<control_msgs::GripperCommandAction>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::GripperCommandAction & t)
          { 
              stream.next(t.action_goal); 
              stream.next(t.action_result); 
              stream.next(t.action_feedback); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::GripperCommandAction & t)
          { 
              stream.next(t.action_goal); 
              stream.next(t.action_result); 
              stream.next(t.action_feedback); 
          };

          inline static uint32_t serializedLength(const control_msgs::GripperCommandAction & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.action_goal); 
              size += serializationLength(t.action_result); 
              size += serializationLength(t.action_feedback); 
              return size;
          };
      }; // end struct Serializer<control_msgs::GripperCommandAction>

      template <> struct Serializer<control_msgs::GripperCommandActionFeedback>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::GripperCommandActionFeedback & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.feedback); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::GripperCommandActionFeedback & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.feedback); 
          };

          inline static uint32_t serializedLength(const control_msgs::GripperCommandActionFeedback & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.status); 
              size += serializationLength(t.feedback); 
              return size;
          };
      }; // end struct Serializer<control_msgs::GripperCommandActionFeedback>

      template <> struct Serializer<control_msgs::GripperCommandActionGoal>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::GripperCommandActionGoal & t)
          { 
              stream.next(t.header); 
              stream.next(t.goal_id); 
              stream.next(t.goal); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::GripperCommandActionGoal & t)
          { 
              stream.next(t.header); 
              stream.next(t.goal_id); 
              stream.next(t.goal); 
          };

          inline static uint32_t serializedLength(const control_msgs::GripperCommandActionGoal & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.goal_id); 
              size += serializationLength(t.goal); 
              return size;
          };
      }; // end struct Serializer<control_msgs::GripperCommandActionGoal>

      template <> struct Serializer<control_msgs::GripperCommandActionResult>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::GripperCommandActionResult & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.result); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::GripperCommandActionResult & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.result); 
          };

          inline static uint32_t serializedLength(const control_msgs::GripperCommandActionResult & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.status); 
              size += serializationLength(t.result); 
              return size;
          };
      }; // end struct Serializer<control_msgs::GripperCommandActionResult>

      template <> struct Serializer<control_msgs::GripperCommandFeedback>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::GripperCommandFeedback & t)
          { 
              stream.next(t.position); 
              stream.next(t.effort); 
              stream.next(t.stalled); 
              stream.next(t.reached_goal); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::GripperCommandFeedback & t)
          { 
              stream.next(t.position); 
              stream.next(t.effort); 
              stream.next(t.stalled); 
              stream.next(t.reached_goal); 
          };

          inline static uint32_t serializedLength(const control_msgs::GripperCommandFeedback & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.position); 
              size += serializationLength(t.effort); 
              size += serializationLength(t.stalled); 
              size += serializationLength(t.reached_goal); 
              return size;
          };
      }; // end struct Serializer<control_msgs::GripperCommandFeedback>

      template <> struct Serializer<control_msgs::GripperCommandGoal>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::GripperCommandGoal & t)
          { 
              stream.next(t.command); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::GripperCommandGoal & t)
          { 
              stream.next(t.command); 
          };

          inline static uint32_t serializedLength(const control_msgs::GripperCommandGoal & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.command); 
              return size;
          };
      }; // end struct Serializer<control_msgs::GripperCommandGoal>

      template <> struct Serializer<control_msgs::GripperCommandResult>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::GripperCommandResult & t)
          { 
              stream.next(t.position); 
              stream.next(t.effort); 
              stream.next(t.stalled); 
              stream.next(t.reached_goal); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::GripperCommandResult & t)
          { 
              stream.next(t.position); 
              stream.next(t.effort); 
              stream.next(t.stalled); 
              stream.next(t.reached_goal); 
          };

          inline static uint32_t serializedLength(const control_msgs::GripperCommandResult & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.position); 
              size += serializationLength(t.effort); 
              size += serializationLength(t.stalled); 
              size += serializationLength(t.reached_goal); 
              return size;
          };
      }; // end struct Serializer<control_msgs::GripperCommandResult>

      template <> struct Serializer<control_msgs::JointControllerState>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::JointControllerState & t)
          { 
              stream.next(t.header); 
              stream.next(t.set_point); 
              stream.next(t.process_value); 
              stream.next(t.process_value_dot); 
              stream.next(t.error); 
              stream.next(t.time_step); 
              stream.next(t.command); 
              stream.next(t.p); 
              stream.next(t.i); 
              stream.next(t.d); 
              stream.next(t.i_clamp); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::JointControllerState & t)
          { 
              stream.next(t.header); 
              stream.next(t.set_point); 
              stream.next(t.process_value); 
              stream.next(t.process_value_dot); 
              stream.next(t.error); 
              stream.next(t.time_step); 
              stream.next(t.command); 
              stream.next(t.p); 
              stream.next(t.i); 
              stream.next(t.d); 
              stream.next(t.i_clamp); 
          };

          inline static uint32_t serializedLength(const control_msgs::JointControllerState & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.set_point); 
              size += serializationLength(t.process_value); 
              size += serializationLength(t.process_value_dot); 
              size += serializationLength(t.error); 
              size += serializationLength(t.time_step); 
              size += serializationLength(t.command); 
              size += serializationLength(t.p); 
              size += serializationLength(t.i); 
              size += serializationLength(t.d); 
              size += serializationLength(t.i_clamp); 
              return size;
          };
      }; // end struct Serializer<control_msgs::JointControllerState>

      template <> struct Serializer<control_msgs::JointTolerance>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::JointTolerance & t)
          { 
              stream.next(t.name); 
              stream.next(t.position); 
              stream.next(t.velocity); 
              stream.next(t.acceleration); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::JointTolerance & t)
          { 
              stream.next(t.name); 
              stream.next(t.position); 
              stream.next(t.velocity); 
              stream.next(t.acceleration); 
          };

          inline static uint32_t serializedLength(const control_msgs::JointTolerance & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.name); 
              size += serializationLength(t.position); 
              size += serializationLength(t.velocity); 
              size += serializationLength(t.acceleration); 
              return size;
          };
      }; // end struct Serializer<control_msgs::JointTolerance>

      template <> struct Serializer<control_msgs::JointTrajectoryAction>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::JointTrajectoryAction & t)
          { 
              stream.next(t.action_goal); 
              stream.next(t.action_result); 
              stream.next(t.action_feedback); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::JointTrajectoryAction & t)
          { 
              stream.next(t.action_goal); 
              stream.next(t.action_result); 
              stream.next(t.action_feedback); 
          };

          inline static uint32_t serializedLength(const control_msgs::JointTrajectoryAction & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.action_goal); 
              size += serializationLength(t.action_result); 
              size += serializationLength(t.action_feedback); 
              return size;
          };
      }; // end struct Serializer<control_msgs::JointTrajectoryAction>

      template <> struct Serializer<control_msgs::JointTrajectoryActionFeedback>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::JointTrajectoryActionFeedback & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.feedback); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::JointTrajectoryActionFeedback & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.feedback); 
          };

          inline static uint32_t serializedLength(const control_msgs::JointTrajectoryActionFeedback & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.status); 
              size += serializationLength(t.feedback); 
              return size;
          };
      }; // end struct Serializer<control_msgs::JointTrajectoryActionFeedback>

      template <> struct Serializer<control_msgs::JointTrajectoryActionGoal>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::JointTrajectoryActionGoal & t)
          { 
              stream.next(t.header); 
              stream.next(t.goal_id); 
              stream.next(t.goal); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::JointTrajectoryActionGoal & t)
          { 
              stream.next(t.header); 
              stream.next(t.goal_id); 
              stream.next(t.goal); 
          };

          inline static uint32_t serializedLength(const control_msgs::JointTrajectoryActionGoal & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.goal_id); 
              size += serializationLength(t.goal); 
              return size;
          };
      }; // end struct Serializer<control_msgs::JointTrajectoryActionGoal>

      template <> struct Serializer<control_msgs::JointTrajectoryActionResult>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::JointTrajectoryActionResult & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.result); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::JointTrajectoryActionResult & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.result); 
          };

          inline static uint32_t serializedLength(const control_msgs::JointTrajectoryActionResult & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.status); 
              size += serializationLength(t.result); 
              return size;
          };
      }; // end struct Serializer<control_msgs::JointTrajectoryActionResult>

      template <> struct Serializer<control_msgs::JointTrajectoryControllerState>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::JointTrajectoryControllerState & t)
          { 
              stream.next(t.header); 
              stream.next(t.joint_names); 
              stream.next(t.desired); 
              stream.next(t.actual); 
              stream.next(t.error); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::JointTrajectoryControllerState & t)
          { 
              stream.next(t.header); 
              stream.next(t.joint_names); 
              stream.next(t.desired); 
              stream.next(t.actual); 
              stream.next(t.error); 
          };

          inline static uint32_t serializedLength(const control_msgs::JointTrajectoryControllerState & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.joint_names); 
              size += serializationLength(t.desired); 
              size += serializationLength(t.actual); 
              size += serializationLength(t.error); 
              return size;
          };
      }; // end struct Serializer<control_msgs::JointTrajectoryControllerState>

      template <> struct Serializer<control_msgs::JointTrajectoryFeedback>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::JointTrajectoryFeedback & t)
          { 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::JointTrajectoryFeedback & t)
          { 
          };

          inline static uint32_t serializedLength(const control_msgs::JointTrajectoryFeedback & t)
          { 
              uint32_t size = 0;

              return size;
          };
      }; // end struct Serializer<control_msgs::JointTrajectoryFeedback>

      template <> struct Serializer<control_msgs::JointTrajectoryGoal>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::JointTrajectoryGoal & t)
          { 
              stream.next(t.trajectory); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::JointTrajectoryGoal & t)
          { 
              stream.next(t.trajectory); 
          };

          inline static uint32_t serializedLength(const control_msgs::JointTrajectoryGoal & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.trajectory); 
              return size;
          };
      }; // end struct Serializer<control_msgs::JointTrajectoryGoal>

      template <> struct Serializer<control_msgs::JointTrajectoryResult>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::JointTrajectoryResult & t)
          { 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::JointTrajectoryResult & t)
          { 
          };

          inline static uint32_t serializedLength(const control_msgs::JointTrajectoryResult & t)
          { 
              uint32_t size = 0;

              return size;
          };
      }; // end struct Serializer<control_msgs::JointTrajectoryResult>

      template <> struct Serializer<control_msgs::PointHeadAction>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::PointHeadAction & t)
          { 
              stream.next(t.action_goal); 
              stream.next(t.action_result); 
              stream.next(t.action_feedback); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::PointHeadAction & t)
          { 
              stream.next(t.action_goal); 
              stream.next(t.action_result); 
              stream.next(t.action_feedback); 
          };

          inline static uint32_t serializedLength(const control_msgs::PointHeadAction & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.action_goal); 
              size += serializationLength(t.action_result); 
              size += serializationLength(t.action_feedback); 
              return size;
          };
      }; // end struct Serializer<control_msgs::PointHeadAction>

      template <> struct Serializer<control_msgs::PointHeadActionFeedback>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::PointHeadActionFeedback & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.feedback); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::PointHeadActionFeedback & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.feedback); 
          };

          inline static uint32_t serializedLength(const control_msgs::PointHeadActionFeedback & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.status); 
              size += serializationLength(t.feedback); 
              return size;
          };
      }; // end struct Serializer<control_msgs::PointHeadActionFeedback>

      template <> struct Serializer<control_msgs::PointHeadActionGoal>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::PointHeadActionGoal & t)
          { 
              stream.next(t.header); 
              stream.next(t.goal_id); 
              stream.next(t.goal); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::PointHeadActionGoal & t)
          { 
              stream.next(t.header); 
              stream.next(t.goal_id); 
              stream.next(t.goal); 
          };

          inline static uint32_t serializedLength(const control_msgs::PointHeadActionGoal & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.goal_id); 
              size += serializationLength(t.goal); 
              return size;
          };
      }; // end struct Serializer<control_msgs::PointHeadActionGoal>

      template <> struct Serializer<control_msgs::PointHeadActionResult>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::PointHeadActionResult & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.result); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::PointHeadActionResult & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.result); 
          };

          inline static uint32_t serializedLength(const control_msgs::PointHeadActionResult & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.status); 
              size += serializationLength(t.result); 
              return size;
          };
      }; // end struct Serializer<control_msgs::PointHeadActionResult>

      template <> struct Serializer<control_msgs::PointHeadFeedback>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::PointHeadFeedback & t)
          { 
              stream.next(t.pointing_angle_error); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::PointHeadFeedback & t)
          { 
              stream.next(t.pointing_angle_error); 
          };

          inline static uint32_t serializedLength(const control_msgs::PointHeadFeedback & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.pointing_angle_error); 
              return size;
          };
      }; // end struct Serializer<control_msgs::PointHeadFeedback>

      template <> struct Serializer<control_msgs::PointHeadGoal>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::PointHeadGoal & t)
          { 
              stream.next(t.target); 
              stream.next(t.pointing_axis); 
              stream.next(t.pointing_frame); 
              stream.next(t.min_duration); 
              stream.next(t.max_velocity); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::PointHeadGoal & t)
          { 
              stream.next(t.target); 
              stream.next(t.pointing_axis); 
              stream.next(t.pointing_frame); 
              stream.next(t.min_duration); 
              stream.next(t.max_velocity); 
          };

          inline static uint32_t serializedLength(const control_msgs::PointHeadGoal & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.target); 
              size += serializationLength(t.pointing_axis); 
              size += serializationLength(t.pointing_frame); 
              size += serializationLength(t.min_duration); 
              size += serializationLength(t.max_velocity); 
              return size;
          };
      }; // end struct Serializer<control_msgs::PointHeadGoal>

      template <> struct Serializer<control_msgs::PointHeadResult>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::PointHeadResult & t)
          { 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::PointHeadResult & t)
          { 
          };

          inline static uint32_t serializedLength(const control_msgs::PointHeadResult & t)
          { 
              uint32_t size = 0;

              return size;
          };
      }; // end struct Serializer<control_msgs::PointHeadResult>

      template <> struct Serializer<control_msgs::SingleJointPositionAction>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::SingleJointPositionAction & t)
          { 
              stream.next(t.action_goal); 
              stream.next(t.action_result); 
              stream.next(t.action_feedback); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::SingleJointPositionAction & t)
          { 
              stream.next(t.action_goal); 
              stream.next(t.action_result); 
              stream.next(t.action_feedback); 
          };

          inline static uint32_t serializedLength(const control_msgs::SingleJointPositionAction & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.action_goal); 
              size += serializationLength(t.action_result); 
              size += serializationLength(t.action_feedback); 
              return size;
          };
      }; // end struct Serializer<control_msgs::SingleJointPositionAction>

      template <> struct Serializer<control_msgs::SingleJointPositionActionFeedback>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::SingleJointPositionActionFeedback & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.feedback); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::SingleJointPositionActionFeedback & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.feedback); 
          };

          inline static uint32_t serializedLength(const control_msgs::SingleJointPositionActionFeedback & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.status); 
              size += serializationLength(t.feedback); 
              return size;
          };
      }; // end struct Serializer<control_msgs::SingleJointPositionActionFeedback>

      template <> struct Serializer<control_msgs::SingleJointPositionActionGoal>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::SingleJointPositionActionGoal & t)
          { 
              stream.next(t.header); 
              stream.next(t.goal_id); 
              stream.next(t.goal); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::SingleJointPositionActionGoal & t)
          { 
              stream.next(t.header); 
              stream.next(t.goal_id); 
              stream.next(t.goal); 
          };

          inline static uint32_t serializedLength(const control_msgs::SingleJointPositionActionGoal & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.goal_id); 
              size += serializationLength(t.goal); 
              return size;
          };
      }; // end struct Serializer<control_msgs::SingleJointPositionActionGoal>

      template <> struct Serializer<control_msgs::SingleJointPositionActionResult>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::SingleJointPositionActionResult & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.result); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::SingleJointPositionActionResult & t)
          { 
              stream.next(t.header); 
              stream.next(t.status); 
              stream.next(t.result); 
          };

          inline static uint32_t serializedLength(const control_msgs::SingleJointPositionActionResult & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.status); 
              size += serializationLength(t.result); 
              return size;
          };
      }; // end struct Serializer<control_msgs::SingleJointPositionActionResult>

      template <> struct Serializer<control_msgs::SingleJointPositionFeedback>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::SingleJointPositionFeedback & t)
          { 
              stream.next(t.header); 
              stream.next(t.position); 
              stream.next(t.velocity); 
              stream.next(t.error); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::SingleJointPositionFeedback & t)
          { 
              stream.next(t.header); 
              stream.next(t.position); 
              stream.next(t.velocity); 
              stream.next(t.error); 
          };

          inline static uint32_t serializedLength(const control_msgs::SingleJointPositionFeedback & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.header); 
              size += serializationLength(t.position); 
              size += serializationLength(t.velocity); 
              size += serializationLength(t.error); 
              return size;
          };
      }; // end struct Serializer<control_msgs::SingleJointPositionFeedback>

      template <> struct Serializer<control_msgs::SingleJointPositionGoal>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::SingleJointPositionGoal & t)
          { 
              stream.next(t.position); 
              stream.next(t.min_duration); 
              stream.next(t.max_velocity); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::SingleJointPositionGoal & t)
          { 
              stream.next(t.position); 
              stream.next(t.min_duration); 
              stream.next(t.max_velocity); 
          };

          inline static uint32_t serializedLength(const control_msgs::SingleJointPositionGoal & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.position); 
              size += serializationLength(t.min_duration); 
              size += serializationLength(t.max_velocity); 
              return size;
          };
      }; // end struct Serializer<control_msgs::SingleJointPositionGoal>

      template <> struct Serializer<control_msgs::SingleJointPositionResult>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::SingleJointPositionResult & t)
          { 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::SingleJointPositionResult & t)
          { 
          };

          inline static uint32_t serializedLength(const control_msgs::SingleJointPositionResult & t)
          { 
              uint32_t size = 0;

              return size;
          };
      }; // end struct Serializer<control_msgs::SingleJointPositionResult>

      template <> struct Serializer<control_msgs::QueryCalibrationStateRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::QueryCalibrationStateRequest & t)
          { 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::QueryCalibrationStateRequest & t)
          { 
          };

          inline static uint32_t serializedLength(const control_msgs::QueryCalibrationStateRequest & t)
          { 
              uint32_t size = 0;

              return size;
          };
      }; // end struct Serializer<control_msgs::QueryCalibrationStateRequest>

      template <> struct Serializer<control_msgs::QueryCalibrationStateResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::QueryCalibrationStateResponse & t)
          { 
              stream.next(t.is_calibrated); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::QueryCalibrationStateResponse & t)
          { 
              stream.next(t.is_calibrated); 
          };

          inline static uint32_t serializedLength(const control_msgs::QueryCalibrationStateResponse & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.is_calibrated); 
              return size;
          };
      }; // end struct Serializer<control_msgs::QueryCalibrationStateResponse>

      template <> struct Serializer<control_msgs::QueryCalibrationState>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::QueryCalibrationState & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::QueryCalibrationState & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const control_msgs::QueryCalibrationState & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<control_msgs::QueryCalibrationState>

      template <> struct Serializer<control_msgs::QueryTrajectoryStateRequest>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::QueryTrajectoryStateRequest & t)
          { 
              stream.next(t.time); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::QueryTrajectoryStateRequest & t)
          { 
              stream.next(t.time); 
          };

          inline static uint32_t serializedLength(const control_msgs::QueryTrajectoryStateRequest & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.time); 
              return size;
          };
      }; // end struct Serializer<control_msgs::QueryTrajectoryStateRequest>

      template <> struct Serializer<control_msgs::QueryTrajectoryStateResponse>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::QueryTrajectoryStateResponse & t)
          { 
              stream.next(t.name); 
              stream.next(t.position); 
              stream.next(t.velocity); 
              stream.next(t.acceleration); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::QueryTrajectoryStateResponse & t)
          { 
              stream.next(t.name); 
              stream.next(t.position); 
              stream.next(t.velocity); 
              stream.next(t.acceleration); 
          };

          inline static uint32_t serializedLength(const control_msgs::QueryTrajectoryStateResponse & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.name); 
              size += serializationLength(t.position); 
              size += serializationLength(t.velocity); 
              size += serializationLength(t.acceleration); 
              return size;
          };
      }; // end struct Serializer<control_msgs::QueryTrajectoryStateResponse>

      template <> struct Serializer<control_msgs::QueryTrajectoryState>
      {
          template <typename Stream> inline static void write(Stream & stream, const control_msgs::QueryTrajectoryState & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          template <typename Stream> inline static void read(Stream & stream, control_msgs::QueryTrajectoryState & t)
          { 
              stream.next(t.request); 
              stream.next(t.response); 
          };

          inline static uint32_t serializedLength(const control_msgs::QueryTrajectoryState & t)
          { 
              uint32_t size = 0;

              size += serializationLength(t.request); 
              size += serializationLength(t.response); 
              return size;
          };
      }; // end struct Serializer<control_msgs::QueryTrajectoryState>

  }; // namespace serialization

  namespace message_traits
  {

      template <> struct MD5Sum<control_msgs::FollowJointTrajectoryAction>
      {

          static const char * value() 
          { 
              return "bc4f9b743838566551c0390c65f1a248"; 
          };

          static const uint64_t static_value1 = 0xbc4f9b7438385665ULL;
          static const uint64_t static_value2 = 0x51c0390c65f1a248ULL;
      }; // end struct MD5Sum<control_msgs::FollowJointTrajectoryAction>

      template <> struct DataType<control_msgs::FollowJointTrajectoryAction>
      {
          static const char * value() { return "control_msgs/FollowJointTrajectoryAction";};
      }; // end DataType

      template <> struct Definition<control_msgs::FollowJointTrajectoryAction>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nFollowJointTrajectoryActionGoal action_goal\nFollowJointTrajectoryActionResult action_result\nFollowJointTrajectoryActionFeedback action_feedback\n\n================================================================================\nMSG: control_msgs/FollowJointTrajectoryActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nFollowJointTrajectoryGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/FollowJointTrajectoryGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n# The joint trajectory to follow\ntrajectory_msgs/JointTrajectory trajectory\n\n# Tolerances for the trajectory.  If the measured joint values fall\n# outside the tolerances the trajectory goal is aborted.  Any\n# tolerances that are not specified (by being omitted or set to 0) are\n# set to the defaults for the action server (often taken from the\n# parameter server).\n\n# Tolerances applied to the joints as the trajectory is executed.  If\n# violated, the goal aborts with error_code set to\n# PATH_TOLERANCE_VIOLATED.\nJointTolerance[] path_tolerance\n\n# To report success, the joints must be within goal_tolerance of the\n# final trajectory value.  The goal must be achieved by time the\n# trajectory ends plus goal_time_tolerance.  (goal_time_tolerance\n# allows some leeway in time, so that the trajectory goal can still\n# succeed even if the joints reach the goal some time after the\n# precise end time of the trajectory).\n#\n# If the joints are not within goal_tolerance after \"trajectory finish\n# time\" + goal_time_tolerance, the goal aborts with error_code set to\n# GOAL_TOLERANCE_VIOLATED\nJointTolerance[] goal_tolerance\nduration goal_time_tolerance\n\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectory\nHeader header\nstring[] joint_names\nJointTrajectoryPoint[] points\n================================================================================\nMSG: trajectory_msgs/JointTrajectoryPoint\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n\n================================================================================\nMSG: control_msgs/JointTolerance\n# The tolerances specify the amount the position, velocity, and\n# accelerations can vary from the setpoints.  For example, in the case\n# of trajectory control, when the actual position varies beyond\n# (desired position + position tolerance), the trajectory goal may\n# abort.\n# \n# There are two special values for tolerances:\n#  * 0 - The tolerance is unspecified and will remain at whatever the default is\n#  * -1 - The tolerance is \"erased\".  If there was a default, the joint will be\n#         allowed to move without restriction.\n\nstring name\nfloat64 position  # in radians or meters (for a revolute or prismatic joint, respectively)\nfloat64 velocity  # in rad/sec or m/sec\nfloat64 acceleration  # in rad/sec^2 or m/sec^2\n\n================================================================================\nMSG: control_msgs/FollowJointTrajectoryActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nFollowJointTrajectoryResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: control_msgs/FollowJointTrajectoryResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 error_code\nint32 SUCCESSFUL = 0\nint32 INVALID_GOAL = -1\nint32 INVALID_JOINTS = -2\nint32 OLD_HEADER_TIMESTAMP = -3\nint32 PATH_TOLERANCE_VIOLATED = -4\nint32 GOAL_TOLERANCE_VIOLATED = -5\n\n# Human readable description of the error code. Contains complementary\n# information that is especially useful when execution fails, for instance:\n# - INVALID_GOAL: The reason for the invalid goal (e.g., the requested\n#   trajectory is in the past).\n# - INVALID_JOINTS: The mismatch between the expected controller joints\n#   and those provided in the goal.\n# - PATH_TOLERANCE_VIOLATED and GOAL_TOLERANCE_VIOLATED: Which joint\n#   violated which tolerance, and by how much.\nstring error_string\n\n\n================================================================================\nMSG: control_msgs/FollowJointTrajectoryActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nFollowJointTrajectoryFeedback feedback\n\n================================================================================\nMSG: control_msgs/FollowJointTrajectoryFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nHeader header\nstring[] joint_names\ntrajectory_msgs/JointTrajectoryPoint desired\ntrajectory_msgs/JointTrajectoryPoint actual\ntrajectory_msgs/JointTrajectoryPoint error\n\n";
          };
      };

      template <> struct MD5Sum<control_msgs::FollowJointTrajectoryActionFeedback>
      {

          static const char * value() 
          { 
              return "d8920dc4eae9fc107e00999cce4be641"; 
          };

          static const uint64_t static_value1 = 0xd8920dc4eae9fc10ULL;
          static const uint64_t static_value2 = 0x7e00999cce4be641ULL;
      }; // end struct MD5Sum<control_msgs::FollowJointTrajectoryActionFeedback>

      template <> struct DataType<control_msgs::FollowJointTrajectoryActionFeedback>
      {
          static const char * value() { return "control_msgs/FollowJointTrajectoryActionFeedback";};
      }; // end DataType

      template <> struct Definition<control_msgs::FollowJointTrajectoryActionFeedback>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nFollowJointTrajectoryFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/FollowJointTrajectoryFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nHeader header\nstring[] joint_names\ntrajectory_msgs/JointTrajectoryPoint desired\ntrajectory_msgs/JointTrajectoryPoint actual\ntrajectory_msgs/JointTrajectoryPoint error\n\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectoryPoint\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n";
          };
      };

      template <> struct MD5Sum<control_msgs::FollowJointTrajectoryActionGoal>
      {

          static const char * value() 
          { 
              return "cff5c1d533bf2f82dd0138d57f4304bb"; 
          };

          static const uint64_t static_value1 = 0xcff5c1d533bf2f82ULL;
          static const uint64_t static_value2 = 0xdd0138d57f4304bbULL;
      }; // end struct MD5Sum<control_msgs::FollowJointTrajectoryActionGoal>

      template <> struct DataType<control_msgs::FollowJointTrajectoryActionGoal>
      {
          static const char * value() { return "control_msgs/FollowJointTrajectoryActionGoal";};
      }; // end DataType

      template <> struct Definition<control_msgs::FollowJointTrajectoryActionGoal>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nFollowJointTrajectoryGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/FollowJointTrajectoryGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n# The joint trajectory to follow\ntrajectory_msgs/JointTrajectory trajectory\n\n# Tolerances for the trajectory.  If the measured joint values fall\n# outside the tolerances the trajectory goal is aborted.  Any\n# tolerances that are not specified (by being omitted or set to 0) are\n# set to the defaults for the action server (often taken from the\n# parameter server).\n\n# Tolerances applied to the joints as the trajectory is executed.  If\n# violated, the goal aborts with error_code set to\n# PATH_TOLERANCE_VIOLATED.\nJointTolerance[] path_tolerance\n\n# To report success, the joints must be within goal_tolerance of the\n# final trajectory value.  The goal must be achieved by time the\n# trajectory ends plus goal_time_tolerance.  (goal_time_tolerance\n# allows some leeway in time, so that the trajectory goal can still\n# succeed even if the joints reach the goal some time after the\n# precise end time of the trajectory).\n#\n# If the joints are not within goal_tolerance after \"trajectory finish\n# time\" + goal_time_tolerance, the goal aborts with error_code set to\n# GOAL_TOLERANCE_VIOLATED\nJointTolerance[] goal_tolerance\nduration goal_time_tolerance\n\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectory\nHeader header\nstring[] joint_names\nJointTrajectoryPoint[] points\n================================================================================\nMSG: trajectory_msgs/JointTrajectoryPoint\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n\n================================================================================\nMSG: control_msgs/JointTolerance\n# The tolerances specify the amount the position, velocity, and\n# accelerations can vary from the setpoints.  For example, in the case\n# of trajectory control, when the actual position varies beyond\n# (desired position + position tolerance), the trajectory goal may\n# abort.\n# \n# There are two special values for tolerances:\n#  * 0 - The tolerance is unspecified and will remain at whatever the default is\n#  * -1 - The tolerance is \"erased\".  If there was a default, the joint will be\n#         allowed to move without restriction.\n\nstring name\nfloat64 position  # in radians or meters (for a revolute or prismatic joint, respectively)\nfloat64 velocity  # in rad/sec or m/sec\nfloat64 acceleration  # in rad/sec^2 or m/sec^2\n";
          };
      };

      template <> struct MD5Sum<control_msgs::FollowJointTrajectoryActionResult>
      {

          static const char * value() 
          { 
              return "c4fb3b000dc9da4fd99699380efcc5d9"; 
          };

          static const uint64_t static_value1 = 0xc4fb3b000dc9da4fULL;
          static const uint64_t static_value2 = 0xd99699380efcc5d9ULL;
      }; // end struct MD5Sum<control_msgs::FollowJointTrajectoryActionResult>

      template <> struct DataType<control_msgs::FollowJointTrajectoryActionResult>
      {
          static const char * value() { return "control_msgs/FollowJointTrajectoryActionResult";};
      }; // end DataType

      template <> struct Definition<control_msgs::FollowJointTrajectoryActionResult>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nFollowJointTrajectoryResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/FollowJointTrajectoryResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 error_code\nint32 SUCCESSFUL = 0\nint32 INVALID_GOAL = -1\nint32 INVALID_JOINTS = -2\nint32 OLD_HEADER_TIMESTAMP = -3\nint32 PATH_TOLERANCE_VIOLATED = -4\nint32 GOAL_TOLERANCE_VIOLATED = -5\n\n# Human readable description of the error code. Contains complementary\n# information that is especially useful when execution fails, for instance:\n# - INVALID_GOAL: The reason for the invalid goal (e.g., the requested\n#   trajectory is in the past).\n# - INVALID_JOINTS: The mismatch between the expected controller joints\n#   and those provided in the goal.\n# - PATH_TOLERANCE_VIOLATED and GOAL_TOLERANCE_VIOLATED: Which joint\n#   violated which tolerance, and by how much.\nstring error_string\n\n";
          };
      };

      template <> struct MD5Sum<control_msgs::FollowJointTrajectoryFeedback>
      {

          static const char * value() 
          { 
              return "10817c60c2486ef6b33e97dcd87f4474"; 
          };

          static const uint64_t static_value1 = 0x10817c60c2486ef6ULL;
          static const uint64_t static_value2 = 0xb33e97dcd87f4474ULL;
      }; // end struct MD5Sum<control_msgs::FollowJointTrajectoryFeedback>

      template <> struct DataType<control_msgs::FollowJointTrajectoryFeedback>
      {
          static const char * value() { return "control_msgs/FollowJointTrajectoryFeedback";};
      }; // end DataType

      template <> struct Definition<control_msgs::FollowJointTrajectoryFeedback>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nHeader header\nstring[] joint_names\ntrajectory_msgs/JointTrajectoryPoint desired\ntrajectory_msgs/JointTrajectoryPoint actual\ntrajectory_msgs/JointTrajectoryPoint error\n\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectoryPoint\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n";
          };
      };

      template <> struct MD5Sum<control_msgs::FollowJointTrajectoryGoal>
      {

          static const char * value() 
          { 
              return "69636787b6ecbde4d61d711979bc7ecb"; 
          };

          static const uint64_t static_value1 = 0x69636787b6ecbde4ULL;
          static const uint64_t static_value2 = 0xd61d711979bc7ecbULL;
      }; // end struct MD5Sum<control_msgs::FollowJointTrajectoryGoal>

      template <> struct DataType<control_msgs::FollowJointTrajectoryGoal>
      {
          static const char * value() { return "control_msgs/FollowJointTrajectoryGoal";};
      }; // end DataType

      template <> struct Definition<control_msgs::FollowJointTrajectoryGoal>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n# The joint trajectory to follow\ntrajectory_msgs/JointTrajectory trajectory\n\n# Tolerances for the trajectory.  If the measured joint values fall\n# outside the tolerances the trajectory goal is aborted.  Any\n# tolerances that are not specified (by being omitted or set to 0) are\n# set to the defaults for the action server (often taken from the\n# parameter server).\n\n# Tolerances applied to the joints as the trajectory is executed.  If\n# violated, the goal aborts with error_code set to\n# PATH_TOLERANCE_VIOLATED.\nJointTolerance[] path_tolerance\n\n# To report success, the joints must be within goal_tolerance of the\n# final trajectory value.  The goal must be achieved by time the\n# trajectory ends plus goal_time_tolerance.  (goal_time_tolerance\n# allows some leeway in time, so that the trajectory goal can still\n# succeed even if the joints reach the goal some time after the\n# precise end time of the trajectory).\n#\n# If the joints are not within goal_tolerance after \"trajectory finish\n# time\" + goal_time_tolerance, the goal aborts with error_code set to\n# GOAL_TOLERANCE_VIOLATED\nJointTolerance[] goal_tolerance\nduration goal_time_tolerance\n\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectory\nHeader header\nstring[] joint_names\nJointTrajectoryPoint[] points\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectoryPoint\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n\n================================================================================\nMSG: control_msgs/JointTolerance\n# The tolerances specify the amount the position, velocity, and\n# accelerations can vary from the setpoints.  For example, in the case\n# of trajectory control, when the actual position varies beyond\n# (desired position + position tolerance), the trajectory goal may\n# abort.\n# \n# There are two special values for tolerances:\n#  * 0 - The tolerance is unspecified and will remain at whatever the default is\n#  * -1 - The tolerance is \"erased\".  If there was a default, the joint will be\n#         allowed to move without restriction.\n\nstring name\nfloat64 position  # in radians or meters (for a revolute or prismatic joint, respectively)\nfloat64 velocity  # in rad/sec or m/sec\nfloat64 acceleration  # in rad/sec^2 or m/sec^2\n";
          };
      };

      template <> struct MD5Sum<control_msgs::FollowJointTrajectoryResult>
      {

          static const char * value() 
          { 
              return "493383b18409bfb604b4e26c676401d2"; 
          };

          static const uint64_t static_value1 = 0x493383b18409bfb6ULL;
          static const uint64_t static_value2 = 0x04b4e26c676401d2ULL;
      }; // end struct MD5Sum<control_msgs::FollowJointTrajectoryResult>

      template <> struct DataType<control_msgs::FollowJointTrajectoryResult>
      {
          static const char * value() { return "control_msgs/FollowJointTrajectoryResult";};
      }; // end DataType

      template <> struct Definition<control_msgs::FollowJointTrajectoryResult>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nint32 error_code\nint32 SUCCESSFUL = 0\nint32 INVALID_GOAL = -1\nint32 INVALID_JOINTS = -2\nint32 OLD_HEADER_TIMESTAMP = -3\nint32 PATH_TOLERANCE_VIOLATED = -4\nint32 GOAL_TOLERANCE_VIOLATED = -5\n\n# Human readable description of the error code. Contains complementary\n# information that is especially useful when execution fails, for instance:\n# - INVALID_GOAL: The reason for the invalid goal (e.g., the requested\n#   trajectory is in the past).\n# - INVALID_JOINTS: The mismatch between the expected controller joints\n#   and those provided in the goal.\n# - PATH_TOLERANCE_VIOLATED and GOAL_TOLERANCE_VIOLATED: Which joint\n#   violated which tolerance, and by how much.\nstring error_string\n\n";
          };
      };

      template <> struct MD5Sum<control_msgs::GripperCommand>
      {

          static const char * value() 
          { 
              return "680acaff79486f017132a7f198d40f08"; 
          };

          static const uint64_t static_value1 = 0x680acaff79486f01ULL;
          static const uint64_t static_value2 = 0x7132a7f198d40f08ULL;
      }; // end struct MD5Sum<control_msgs::GripperCommand>

      template <> struct DataType<control_msgs::GripperCommand>
      {
          static const char * value() { return "control_msgs/GripperCommand";};
      }; // end DataType

      template <> struct Definition<control_msgs::GripperCommand>
      {
          static const char * value()
          { 
              return "float64 position\nfloat64 max_effort\n";
          };
      };

      template <> struct MD5Sum<control_msgs::GripperCommandAction>
      {

          static const char * value() 
          { 
              return "950b2a6ebe831f5d4f4ceaba3d8be01e"; 
          };

          static const uint64_t static_value1 = 0x950b2a6ebe831f5dULL;
          static const uint64_t static_value2 = 0x4f4ceaba3d8be01eULL;
      }; // end struct MD5Sum<control_msgs::GripperCommandAction>

      template <> struct DataType<control_msgs::GripperCommandAction>
      {
          static const char * value() { return "control_msgs/GripperCommandAction";};
      }; // end DataType

      template <> struct Definition<control_msgs::GripperCommandAction>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nGripperCommandActionGoal action_goal\nGripperCommandActionResult action_result\nGripperCommandActionFeedback action_feedback\n\n================================================================================\nMSG: control_msgs/GripperCommandActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nGripperCommandGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/GripperCommandGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nGripperCommand command\n\n================================================================================\nMSG: control_msgs/GripperCommand\nfloat64 position\nfloat64 max_effort\n\n================================================================================\nMSG: control_msgs/GripperCommandActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nGripperCommandResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: control_msgs/GripperCommandResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 position  # The current gripper gap size (in meters)\nfloat64 effort    # The current effort exerted (in Newtons)\nbool stalled      # True iff the gripper is exerting max effort and not moving\nbool reached_goal # True iff the gripper position has reached the commanded setpoint\n\n================================================================================\nMSG: control_msgs/GripperCommandActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nGripperCommandFeedback feedback\n\n================================================================================\nMSG: control_msgs/GripperCommandFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 position  # The current gripper gap size (in meters)\nfloat64 effort    # The current effort exerted (in Newtons)\nbool stalled      # True iff the gripper is exerting max effort and not moving\nbool reached_goal # True iff the gripper position has reached the commanded setpoint\n\n";
          };
      };

      template <> struct MD5Sum<control_msgs::GripperCommandActionFeedback>
      {

          static const char * value() 
          { 
              return "653dff30c045f5e6ff3feb3409f4558d"; 
          };

          static const uint64_t static_value1 = 0x653dff30c045f5e6ULL;
          static const uint64_t static_value2 = 0xff3feb3409f4558dULL;
      }; // end struct MD5Sum<control_msgs::GripperCommandActionFeedback>

      template <> struct DataType<control_msgs::GripperCommandActionFeedback>
      {
          static const char * value() { return "control_msgs/GripperCommandActionFeedback";};
      }; // end DataType

      template <> struct Definition<control_msgs::GripperCommandActionFeedback>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nGripperCommandFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/GripperCommandFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 position  # The current gripper gap size (in meters)\nfloat64 effort    # The current effort exerted (in Newtons)\nbool stalled      # True iff the gripper is exerting max effort and not moving\nbool reached_goal # True iff the gripper position has reached the commanded setpoint\n\n";
          };
      };

      template <> struct MD5Sum<control_msgs::GripperCommandActionGoal>
      {

          static const char * value() 
          { 
              return "aa581f648a35ed681db2ec0bf7a82bea"; 
          };

          static const uint64_t static_value1 = 0xaa581f648a35ed68ULL;
          static const uint64_t static_value2 = 0x1db2ec0bf7a82beaULL;
      }; // end struct MD5Sum<control_msgs::GripperCommandActionGoal>

      template <> struct DataType<control_msgs::GripperCommandActionGoal>
      {
          static const char * value() { return "control_msgs/GripperCommandActionGoal";};
      }; // end DataType

      template <> struct Definition<control_msgs::GripperCommandActionGoal>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nGripperCommandGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/GripperCommandGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nGripperCommand command\n\n================================================================================\nMSG: control_msgs/GripperCommand\nfloat64 position\nfloat64 max_effort\n";
          };
      };

      template <> struct MD5Sum<control_msgs::GripperCommandActionResult>
      {

          static const char * value() 
          { 
              return "143702cb2df0f163c5283cedc5efc6b6"; 
          };

          static const uint64_t static_value1 = 0x143702cb2df0f163ULL;
          static const uint64_t static_value2 = 0xc5283cedc5efc6b6ULL;
      }; // end struct MD5Sum<control_msgs::GripperCommandActionResult>

      template <> struct DataType<control_msgs::GripperCommandActionResult>
      {
          static const char * value() { return "control_msgs/GripperCommandActionResult";};
      }; // end DataType

      template <> struct Definition<control_msgs::GripperCommandActionResult>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nGripperCommandResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/GripperCommandResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 position  # The current gripper gap size (in meters)\nfloat64 effort    # The current effort exerted (in Newtons)\nbool stalled      # True iff the gripper is exerting max effort and not moving\nbool reached_goal # True iff the gripper position has reached the commanded setpoint\n";
          };
      };

      template <> struct MD5Sum<control_msgs::GripperCommandFeedback>
      {

          static const char * value() 
          { 
              return "e4cbff56d3562bcf113da5a5adeef91f"; 
          };

          static const uint64_t static_value1 = 0xe4cbff56d3562bcfULL;
          static const uint64_t static_value2 = 0x113da5a5adeef91fULL;
      }; // end struct MD5Sum<control_msgs::GripperCommandFeedback>

      template <> struct DataType<control_msgs::GripperCommandFeedback>
      {
          static const char * value() { return "control_msgs/GripperCommandFeedback";};
      }; // end DataType

      template <> struct Definition<control_msgs::GripperCommandFeedback>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 position  # The current gripper gap size (in meters)\nfloat64 effort    # The current effort exerted (in Newtons)\nbool stalled      # True iff the gripper is exerting max effort and not moving\nbool reached_goal # True iff the gripper position has reached the commanded setpoint\n\n";
          };
      };

      template <> struct MD5Sum<control_msgs::GripperCommandGoal>
      {

          static const char * value() 
          { 
              return "86fd82f4ddc48a4cb6856cfa69217e43"; 
          };

          static const uint64_t static_value1 = 0x86fd82f4ddc48a4cULL;
          static const uint64_t static_value2 = 0xb6856cfa69217e43ULL;
      }; // end struct MD5Sum<control_msgs::GripperCommandGoal>

      template <> struct DataType<control_msgs::GripperCommandGoal>
      {
          static const char * value() { return "control_msgs/GripperCommandGoal";};
      }; // end DataType

      template <> struct Definition<control_msgs::GripperCommandGoal>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nGripperCommand command\n\n================================================================================\nMSG: control_msgs/GripperCommand\nfloat64 position\nfloat64 max_effort\n";
          };
      };

      template <> struct MD5Sum<control_msgs::GripperCommandResult>
      {

          static const char * value() 
          { 
              return "e4cbff56d3562bcf113da5a5adeef91f"; 
          };

          static const uint64_t static_value1 = 0xe4cbff56d3562bcfULL;
          static const uint64_t static_value2 = 0x113da5a5adeef91fULL;
      }; // end struct MD5Sum<control_msgs::GripperCommandResult>

      template <> struct DataType<control_msgs::GripperCommandResult>
      {
          static const char * value() { return "control_msgs/GripperCommandResult";};
      }; // end DataType

      template <> struct Definition<control_msgs::GripperCommandResult>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 position  # The current gripper gap size (in meters)\nfloat64 effort    # The current effort exerted (in Newtons)\nbool stalled      # True iff the gripper is exerting max effort and not moving\nbool reached_goal # True iff the gripper position has reached the commanded setpoint\n";
          };
      };

      template <> struct MD5Sum<control_msgs::JointControllerState>
      {

          static const char * value() 
          { 
              return "c0d034a7bf20aeb1c37f3eccb7992b69"; 
          };

          static const uint64_t static_value1 = 0xc0d034a7bf20aeb1ULL;
          static const uint64_t static_value2 = 0xc37f3eccb7992b69ULL;
      }; // end struct MD5Sum<control_msgs::JointControllerState>

      template <> struct DataType<control_msgs::JointControllerState>
      {
          static const char * value() { return "control_msgs/JointControllerState";};
      }; // end DataType

      template <> struct Definition<control_msgs::JointControllerState>
      {
          static const char * value()
          { 
              return "Header header\nfloat64 set_point\nfloat64 process_value\nfloat64 process_value_dot\nfloat64 error\nfloat64 time_step\nfloat64 command\nfloat64 p\nfloat64 i\nfloat64 d\nfloat64 i_clamp\n\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n";
          };
      };

      template <> struct MD5Sum<control_msgs::JointTolerance>
      {

          static const char * value() 
          { 
              return "f544fe9c16cf04547e135dd6063ff5be"; 
          };

          static const uint64_t static_value1 = 0xf544fe9c16cf0454ULL;
          static const uint64_t static_value2 = 0x7e135dd6063ff5beULL;
      }; // end struct MD5Sum<control_msgs::JointTolerance>

      template <> struct DataType<control_msgs::JointTolerance>
      {
          static const char * value() { return "control_msgs/JointTolerance";};
      }; // end DataType

      template <> struct Definition<control_msgs::JointTolerance>
      {
          static const char * value()
          { 
              return "# The tolerances specify the amount the position, velocity, and\n# accelerations can vary from the setpoints.  For example, in the case\n# of trajectory control, when the actual position varies beyond\n# (desired position + position tolerance), the trajectory goal may\n# abort.\n# \n# There are two special values for tolerances:\n#  * 0 - The tolerance is unspecified and will remain at whatever the default is\n#  * -1 - The tolerance is \"erased\".  If there was a default, the joint will be\n#         allowed to move without restriction.\n\nstring name\nfloat64 position  # in radians or meters (for a revolute or prismatic joint, respectively)\nfloat64 velocity  # in rad/sec or m/sec\nfloat64 acceleration  # in rad/sec^2 or m/sec^2\n";
          };
      };

      template <> struct MD5Sum<control_msgs::JointTrajectoryAction>
      {

          static const char * value() 
          { 
              return "a04ba3ee8f6a2d0985a6aeaf23d9d7ad"; 
          };

          static const uint64_t static_value1 = 0xa04ba3ee8f6a2d09ULL;
          static const uint64_t static_value2 = 0x85a6aeaf23d9d7adULL;
      }; // end struct MD5Sum<control_msgs::JointTrajectoryAction>

      template <> struct DataType<control_msgs::JointTrajectoryAction>
      {
          static const char * value() { return "control_msgs/JointTrajectoryAction";};
      }; // end DataType

      template <> struct Definition<control_msgs::JointTrajectoryAction>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nJointTrajectoryActionGoal action_goal\nJointTrajectoryActionResult action_result\nJointTrajectoryActionFeedback action_feedback\n\n================================================================================\nMSG: control_msgs/JointTrajectoryActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nJointTrajectoryGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/JointTrajectoryGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ntrajectory_msgs/JointTrajectory trajectory\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectory\nHeader header\nstring[] joint_names\nJointTrajectoryPoint[] points\n================================================================================\nMSG: trajectory_msgs/JointTrajectoryPoint\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n\n================================================================================\nMSG: control_msgs/JointTrajectoryActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nJointTrajectoryResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: control_msgs/JointTrajectoryResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n================================================================================\nMSG: control_msgs/JointTrajectoryActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nJointTrajectoryFeedback feedback\n\n================================================================================\nMSG: control_msgs/JointTrajectoryFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n";
          };
      };

      template <> struct MD5Sum<control_msgs::JointTrajectoryActionFeedback>
      {

          static const char * value() 
          { 
              return "aae20e09065c3809e8a8e87c4c8953fd"; 
          };

          static const uint64_t static_value1 = 0xaae20e09065c3809ULL;
          static const uint64_t static_value2 = 0xe8a8e87c4c8953fdULL;
      }; // end struct MD5Sum<control_msgs::JointTrajectoryActionFeedback>

      template <> struct DataType<control_msgs::JointTrajectoryActionFeedback>
      {
          static const char * value() { return "control_msgs/JointTrajectoryActionFeedback";};
      }; // end DataType

      template <> struct Definition<control_msgs::JointTrajectoryActionFeedback>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nJointTrajectoryFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/JointTrajectoryFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n";
          };
      };

      template <> struct MD5Sum<control_msgs::JointTrajectoryActionGoal>
      {

          static const char * value() 
          { 
              return "a99e83ef6185f9fdd7693efe99623a86"; 
          };

          static const uint64_t static_value1 = 0xa99e83ef6185f9fdULL;
          static const uint64_t static_value2 = 0xd7693efe99623a86ULL;
      }; // end struct MD5Sum<control_msgs::JointTrajectoryActionGoal>

      template <> struct DataType<control_msgs::JointTrajectoryActionGoal>
      {
          static const char * value() { return "control_msgs/JointTrajectoryActionGoal";};
      }; // end DataType

      template <> struct Definition<control_msgs::JointTrajectoryActionGoal>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nJointTrajectoryGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/JointTrajectoryGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ntrajectory_msgs/JointTrajectory trajectory\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectory\nHeader header\nstring[] joint_names\nJointTrajectoryPoint[] points\n================================================================================\nMSG: trajectory_msgs/JointTrajectoryPoint\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n";
          };
      };

      template <> struct MD5Sum<control_msgs::JointTrajectoryActionResult>
      {

          static const char * value() 
          { 
              return "1eb06eeff08fa7ea874431638cb52332"; 
          };

          static const uint64_t static_value1 = 0x1eb06eeff08fa7eaULL;
          static const uint64_t static_value2 = 0x874431638cb52332ULL;
      }; // end struct MD5Sum<control_msgs::JointTrajectoryActionResult>

      template <> struct DataType<control_msgs::JointTrajectoryActionResult>
      {
          static const char * value() { return "control_msgs/JointTrajectoryActionResult";};
      }; // end DataType

      template <> struct Definition<control_msgs::JointTrajectoryActionResult>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nJointTrajectoryResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/JointTrajectoryResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n";
          };
      };

      template <> struct MD5Sum<control_msgs::JointTrajectoryControllerState>
      {

          static const char * value() 
          { 
              return "10817c60c2486ef6b33e97dcd87f4474"; 
          };

          static const uint64_t static_value1 = 0x10817c60c2486ef6ULL;
          static const uint64_t static_value2 = 0xb33e97dcd87f4474ULL;
      }; // end struct MD5Sum<control_msgs::JointTrajectoryControllerState>

      template <> struct DataType<control_msgs::JointTrajectoryControllerState>
      {
          static const char * value() { return "control_msgs/JointTrajectoryControllerState";};
      }; // end DataType

      template <> struct Definition<control_msgs::JointTrajectoryControllerState>
      {
          static const char * value()
          { 
              return "Header header\nstring[] joint_names\ntrajectory_msgs/JointTrajectoryPoint desired\ntrajectory_msgs/JointTrajectoryPoint actual\ntrajectory_msgs/JointTrajectoryPoint error  # Redundant, but useful\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectoryPoint\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n";
          };
      };

      template <> struct MD5Sum<control_msgs::JointTrajectoryFeedback>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<control_msgs::JointTrajectoryFeedback>

      template <> struct DataType<control_msgs::JointTrajectoryFeedback>
      {
          static const char * value() { return "control_msgs/JointTrajectoryFeedback";};
      }; // end DataType

      template <> struct Definition<control_msgs::JointTrajectoryFeedback>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n";
          };
      };

      template <> struct MD5Sum<control_msgs::JointTrajectoryGoal>
      {

          static const char * value() 
          { 
              return "2a0eff76c870e8595636c2a562ca298e"; 
          };

          static const uint64_t static_value1 = 0x2a0eff76c870e859ULL;
          static const uint64_t static_value2 = 0x5636c2a562ca298eULL;
      }; // end struct MD5Sum<control_msgs::JointTrajectoryGoal>

      template <> struct DataType<control_msgs::JointTrajectoryGoal>
      {
          static const char * value() { return "control_msgs/JointTrajectoryGoal";};
      }; // end DataType

      template <> struct Definition<control_msgs::JointTrajectoryGoal>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ntrajectory_msgs/JointTrajectory trajectory\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectory\nHeader header\nstring[] joint_names\nJointTrajectoryPoint[] points\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: trajectory_msgs/JointTrajectoryPoint\n# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg\n\nfloat64[] positions\nfloat64[] velocities\nfloat64[] accelerations\nfloat64[] effort\nduration time_from_start\n";
          };
      };

      template <> struct MD5Sum<control_msgs::JointTrajectoryResult>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<control_msgs::JointTrajectoryResult>

      template <> struct DataType<control_msgs::JointTrajectoryResult>
      {
          static const char * value() { return "control_msgs/JointTrajectoryResult";};
      }; // end DataType

      template <> struct Definition<control_msgs::JointTrajectoryResult>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n";
          };
      };

      template <> struct MD5Sum<control_msgs::PointHeadAction>
      {

          static const char * value() 
          { 
              return "7252920f1243de1b741f14f214125371"; 
          };

          static const uint64_t static_value1 = 0x7252920f1243de1bULL;
          static const uint64_t static_value2 = 0x741f14f214125371ULL;
      }; // end struct MD5Sum<control_msgs::PointHeadAction>

      template <> struct DataType<control_msgs::PointHeadAction>
      {
          static const char * value() { return "control_msgs/PointHeadAction";};
      }; // end DataType

      template <> struct Definition<control_msgs::PointHeadAction>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nPointHeadActionGoal action_goal\nPointHeadActionResult action_result\nPointHeadActionFeedback action_feedback\n\n================================================================================\nMSG: control_msgs/PointHeadActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nPointHeadGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/PointHeadGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ngeometry_msgs/PointStamped target\ngeometry_msgs/Vector3 pointing_axis\nstring pointing_frame\nduration min_duration\nfloat64 max_velocity\n\n================================================================================\nMSG: geometry_msgs/PointStamped\n# This represents a Point with reference coordinate frame and timestamp\nHeader header\nPoint point\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: control_msgs/PointHeadActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nPointHeadResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: control_msgs/PointHeadResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n================================================================================\nMSG: control_msgs/PointHeadActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nPointHeadFeedback feedback\n\n================================================================================\nMSG: control_msgs/PointHeadFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 pointing_angle_error\n\n";
          };
      };

      template <> struct MD5Sum<control_msgs::PointHeadActionFeedback>
      {

          static const char * value() 
          { 
              return "33c9244957176bbba97dd641119e8460"; 
          };

          static const uint64_t static_value1 = 0x33c9244957176bbbULL;
          static const uint64_t static_value2 = 0xa97dd641119e8460ULL;
      }; // end struct MD5Sum<control_msgs::PointHeadActionFeedback>

      template <> struct DataType<control_msgs::PointHeadActionFeedback>
      {
          static const char * value() { return "control_msgs/PointHeadActionFeedback";};
      }; // end DataType

      template <> struct Definition<control_msgs::PointHeadActionFeedback>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nPointHeadFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/PointHeadFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 pointing_angle_error\n\n";
          };
      };

      template <> struct MD5Sum<control_msgs::PointHeadActionGoal>
      {

          static const char * value() 
          { 
              return "b53a8323d0ba7b310ba17a2d3a82a6b8"; 
          };

          static const uint64_t static_value1 = 0xb53a8323d0ba7b31ULL;
          static const uint64_t static_value2 = 0x0ba17a2d3a82a6b8ULL;
      }; // end struct MD5Sum<control_msgs::PointHeadActionGoal>

      template <> struct DataType<control_msgs::PointHeadActionGoal>
      {
          static const char * value() { return "control_msgs/PointHeadActionGoal";};
      }; // end DataType

      template <> struct Definition<control_msgs::PointHeadActionGoal>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nPointHeadGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/PointHeadGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ngeometry_msgs/PointStamped target\ngeometry_msgs/Vector3 pointing_axis\nstring pointing_frame\nduration min_duration\nfloat64 max_velocity\n\n================================================================================\nMSG: geometry_msgs/PointStamped\n# This represents a Point with reference coordinate frame and timestamp\nHeader header\nPoint point\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\n";
          };
      };

      template <> struct MD5Sum<control_msgs::PointHeadActionResult>
      {

          static const char * value() 
          { 
              return "1eb06eeff08fa7ea874431638cb52332"; 
          };

          static const uint64_t static_value1 = 0x1eb06eeff08fa7eaULL;
          static const uint64_t static_value2 = 0x874431638cb52332ULL;
      }; // end struct MD5Sum<control_msgs::PointHeadActionResult>

      template <> struct DataType<control_msgs::PointHeadActionResult>
      {
          static const char * value() { return "control_msgs/PointHeadActionResult";};
      }; // end DataType

      template <> struct Definition<control_msgs::PointHeadActionResult>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nPointHeadResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/PointHeadResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n";
          };
      };

      template <> struct MD5Sum<control_msgs::PointHeadFeedback>
      {

          static const char * value() 
          { 
              return "cce80d27fd763682da8805a73316cab4"; 
          };

          static const uint64_t static_value1 = 0xcce80d27fd763682ULL;
          static const uint64_t static_value2 = 0xda8805a73316cab4ULL;
      }; // end struct MD5Sum<control_msgs::PointHeadFeedback>

      template <> struct DataType<control_msgs::PointHeadFeedback>
      {
          static const char * value() { return "control_msgs/PointHeadFeedback";};
      }; // end DataType

      template <> struct Definition<control_msgs::PointHeadFeedback>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 pointing_angle_error\n\n";
          };
      };

      template <> struct MD5Sum<control_msgs::PointHeadGoal>
      {

          static const char * value() 
          { 
              return "8b92b1cd5e06c8a94c917dc3209a4c1d"; 
          };

          static const uint64_t static_value1 = 0x8b92b1cd5e06c8a9ULL;
          static const uint64_t static_value2 = 0x4c917dc3209a4c1dULL;
      }; // end struct MD5Sum<control_msgs::PointHeadGoal>

      template <> struct DataType<control_msgs::PointHeadGoal>
      {
          static const char * value() { return "control_msgs/PointHeadGoal";};
      }; // end DataType

      template <> struct Definition<control_msgs::PointHeadGoal>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\ngeometry_msgs/PointStamped target\ngeometry_msgs/Vector3 pointing_axis\nstring pointing_frame\nduration min_duration\nfloat64 max_velocity\n\n================================================================================\nMSG: geometry_msgs/PointStamped\n# This represents a Point with reference coordinate frame and timestamp\nHeader header\nPoint point\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\n";
          };
      };

      template <> struct MD5Sum<control_msgs::PointHeadResult>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<control_msgs::PointHeadResult>

      template <> struct DataType<control_msgs::PointHeadResult>
      {
          static const char * value() { return "control_msgs/PointHeadResult";};
      }; // end DataType

      template <> struct Definition<control_msgs::PointHeadResult>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n";
          };
      };

      template <> struct MD5Sum<control_msgs::SingleJointPositionAction>
      {

          static const char * value() 
          { 
              return "c4a786b7d53e5d0983decf967a5a779e"; 
          };

          static const uint64_t static_value1 = 0xc4a786b7d53e5d09ULL;
          static const uint64_t static_value2 = 0x83decf967a5a779eULL;
      }; // end struct MD5Sum<control_msgs::SingleJointPositionAction>

      template <> struct DataType<control_msgs::SingleJointPositionAction>
      {
          static const char * value() { return "control_msgs/SingleJointPositionAction";};
      }; // end DataType

      template <> struct Definition<control_msgs::SingleJointPositionAction>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nSingleJointPositionActionGoal action_goal\nSingleJointPositionActionResult action_result\nSingleJointPositionActionFeedback action_feedback\n\n================================================================================\nMSG: control_msgs/SingleJointPositionActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nSingleJointPositionGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/SingleJointPositionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 position\nduration min_duration\nfloat64 max_velocity\n\n================================================================================\nMSG: control_msgs/SingleJointPositionActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nSingleJointPositionResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: control_msgs/SingleJointPositionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\n================================================================================\nMSG: control_msgs/SingleJointPositionActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nSingleJointPositionFeedback feedback\n\n================================================================================\nMSG: control_msgs/SingleJointPositionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nHeader header\nfloat64 position\nfloat64 velocity\nfloat64 error\n\n";
          };
      };

      template <> struct MD5Sum<control_msgs::SingleJointPositionActionFeedback>
      {

          static const char * value() 
          { 
              return "3503b7cf8972f90d245850a5d8796cfa"; 
          };

          static const uint64_t static_value1 = 0x3503b7cf8972f90dULL;
          static const uint64_t static_value2 = 0x245850a5d8796cfaULL;
      }; // end struct MD5Sum<control_msgs::SingleJointPositionActionFeedback>

      template <> struct DataType<control_msgs::SingleJointPositionActionFeedback>
      {
          static const char * value() { return "control_msgs/SingleJointPositionActionFeedback";};
      }; // end DataType

      template <> struct Definition<control_msgs::SingleJointPositionActionFeedback>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nSingleJointPositionFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/SingleJointPositionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nHeader header\nfloat64 position\nfloat64 velocity\nfloat64 error\n\n";
          };
      };

      template <> struct MD5Sum<control_msgs::SingleJointPositionActionGoal>
      {

          static const char * value() 
          { 
              return "4b0d3d091471663e17749c1d0db90f61"; 
          };

          static const uint64_t static_value1 = 0x4b0d3d091471663eULL;
          static const uint64_t static_value2 = 0x17749c1d0db90f61ULL;
      }; // end struct MD5Sum<control_msgs::SingleJointPositionActionGoal>

      template <> struct DataType<control_msgs::SingleJointPositionActionGoal>
      {
          static const char * value() { return "control_msgs/SingleJointPositionActionGoal";};
      }; // end DataType

      template <> struct Definition<control_msgs::SingleJointPositionActionGoal>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nSingleJointPositionGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/SingleJointPositionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 position\nduration min_duration\nfloat64 max_velocity\n";
          };
      };

      template <> struct MD5Sum<control_msgs::SingleJointPositionActionResult>
      {

          static const char * value() 
          { 
              return "1eb06eeff08fa7ea874431638cb52332"; 
          };

          static const uint64_t static_value1 = 0x1eb06eeff08fa7eaULL;
          static const uint64_t static_value2 = 0x874431638cb52332ULL;
      }; // end struct MD5Sum<control_msgs::SingleJointPositionActionResult>

      template <> struct DataType<control_msgs::SingleJointPositionActionResult>
      {
          static const char * value() { return "control_msgs/SingleJointPositionActionResult";};
      }; // end DataType

      template <> struct Definition<control_msgs::SingleJointPositionActionResult>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nSingleJointPositionResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: control_msgs/SingleJointPositionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n";
          };
      };

      template <> struct MD5Sum<control_msgs::SingleJointPositionFeedback>
      {

          static const char * value() 
          { 
              return "8cee65610a3d08e0a1bded82f146f1fd"; 
          };

          static const uint64_t static_value1 = 0x8cee65610a3d08e0ULL;
          static const uint64_t static_value2 = 0xa1bded82f146f1fdULL;
      }; // end struct MD5Sum<control_msgs::SingleJointPositionFeedback>

      template <> struct DataType<control_msgs::SingleJointPositionFeedback>
      {
          static const char * value() { return "control_msgs/SingleJointPositionFeedback";};
      }; // end DataType

      template <> struct Definition<control_msgs::SingleJointPositionFeedback>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nHeader header\nfloat64 position\nfloat64 velocity\nfloat64 error\n\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n";
          };
      };

      template <> struct MD5Sum<control_msgs::SingleJointPositionGoal>
      {

          static const char * value() 
          { 
              return "fbaaa562a23a013fd5053e5f72cbb35c"; 
          };

          static const uint64_t static_value1 = 0xfbaaa562a23a013fULL;
          static const uint64_t static_value2 = 0xd5053e5f72cbb35cULL;
      }; // end struct MD5Sum<control_msgs::SingleJointPositionGoal>

      template <> struct DataType<control_msgs::SingleJointPositionGoal>
      {
          static const char * value() { return "control_msgs/SingleJointPositionGoal";};
      }; // end DataType

      template <> struct Definition<control_msgs::SingleJointPositionGoal>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nfloat64 position\nduration min_duration\nfloat64 max_velocity\n";
          };
      };

      template <> struct MD5Sum<control_msgs::SingleJointPositionResult>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<control_msgs::SingleJointPositionResult>

      template <> struct DataType<control_msgs::SingleJointPositionResult>
      {
          static const char * value() { return "control_msgs/SingleJointPositionResult";};
      }; // end DataType

      template <> struct Definition<control_msgs::SingleJointPositionResult>
      {
          static const char * value()
          { 
              return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n";
          };
      };

      template <> struct MD5Sum<control_msgs::QueryCalibrationStateRequest>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<control_msgs::QueryCalibrationStateRequest>

      template <> struct DataType<control_msgs::QueryCalibrationStateRequest>
      {
          static const char * value() { return "control_msgs/QueryCalibrationStateRequest";};
      }; // end DataType

      template <> struct Definition<control_msgs::QueryCalibrationStateRequest>
      {
          static const char * value()
          { 
              return control_msgs::QueryCalibrationStateRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<control_msgs::QueryCalibrationStateResponse>
      {

          static const char * value() 
          { 
              return "28af3beedcb84986b8e470dc5470507d"; 
          };

          static const uint64_t static_value1 = 0x28af3beedcb84986ULL;
          static const uint64_t static_value2 = 0xb8e470dc5470507dULL;
      }; // end struct MD5Sum<control_msgs::QueryCalibrationStateResponse>

      template <> struct DataType<control_msgs::QueryCalibrationStateResponse>
      {
          static const char * value() { return "control_msgs/QueryCalibrationStateResponse";};
      }; // end DataType

      template <> struct Definition<control_msgs::QueryCalibrationStateResponse>
      {
          static const char * value()
          { 
              return control_msgs::QueryCalibrationStateResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<control_msgs::QueryCalibrationState>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<control_msgs::QueryCalibrationState>

      template <> struct DataType<control_msgs::QueryCalibrationState>
      {
          static const char * value() { return "control_msgs/QueryCalibrationState";};
      }; // end DataType

      template <> struct Definition<control_msgs::QueryCalibrationState>
      {
          static const char * value()
          { 
              return control_msgs::QueryCalibrationState::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<control_msgs::QueryTrajectoryStateRequest>
      {

          static const char * value() 
          { 
              return "556a4fb76023a469987922359d08a844"; 
          };

          static const uint64_t static_value1 = 0x556a4fb76023a469ULL;
          static const uint64_t static_value2 = 0x987922359d08a844ULL;
      }; // end struct MD5Sum<control_msgs::QueryTrajectoryStateRequest>

      template <> struct DataType<control_msgs::QueryTrajectoryStateRequest>
      {
          static const char * value() { return "control_msgs/QueryTrajectoryStateRequest";};
      }; // end DataType

      template <> struct Definition<control_msgs::QueryTrajectoryStateRequest>
      {
          static const char * value()
          { 
              return control_msgs::QueryTrajectoryStateRequest::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<control_msgs::QueryTrajectoryStateResponse>
      {

          static const char * value() 
          { 
              return "1f1a6554ad060f44d013e71868403c1a"; 
          };

          static const uint64_t static_value1 = 0x1f1a6554ad060f44ULL;
          static const uint64_t static_value2 = 0xd013e71868403c1aULL;
      }; // end struct MD5Sum<control_msgs::QueryTrajectoryStateResponse>

      template <> struct DataType<control_msgs::QueryTrajectoryStateResponse>
      {
          static const char * value() { return "control_msgs/QueryTrajectoryStateResponse";};
      }; // end DataType

      template <> struct Definition<control_msgs::QueryTrajectoryStateResponse>
      {
          static const char * value()
          { 
              return control_msgs::QueryTrajectoryStateResponse::XML_SOURCE.c_str();
          };
      };

      template <> struct MD5Sum<control_msgs::QueryTrajectoryState>
      {

          static const char * value() 
          { 
              return "d41d8cd98f00b204e9800998ecf8427e"; 
          };

          static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
          static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
      }; // end struct MD5Sum<control_msgs::QueryTrajectoryState>

      template <> struct DataType<control_msgs::QueryTrajectoryState>
      {
          static const char * value() { return "control_msgs/QueryTrajectoryState";};
      }; // end DataType

      template <> struct Definition<control_msgs::QueryTrajectoryState>
      {
          static const char * value()
          { 
              return control_msgs::QueryTrajectoryState::XML_SOURCE.c_str();
          };
      };

  }; // end namespace message_traits

}; // namespace ros

#endif // _CODEGEN_CONTROL_MSGS_GENCPP_ROS_H_


<!--
 
  AUTOGENERATED FILE:   do not edit

  Generated by:         yongbo on yongbo-XPS-15-9550, 2017-01-17 11:30:47 -0500
  From Template/Script: rosToXML.rb
 

-->
<classes library_name="gazebo_msgs_gencpp" namespace="gazebo_msgs" >

<class name="ContactState" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="48c0ffb054b8c444f870cecea1ee50d9" rosDesc="string info                                   # text info on this contact\nstring collision1_name                        # name of contact collision1\nstring collision2_name                        # name of contact collision2\ngeometry_msgs/Wrench[] wrenches               # list of forces/torques\ngeometry_msgs/Wrench total_wrench             # sum of forces/torques in every DOF\ngeometry_msgs/Vector3[] contact_positions     # list of contact position\ngeometry_msgs/Vector3[] contact_normals       # list of contact normals\nfloat64[] depths                              # list of penetration depths\n\n================================================================================\nMSG: geometry_msgs/Wrench\n# This represents force in free space, separated into\n# its linear and angular parts.\nVector3  force\nVector3  torque\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\n" comment="" >
  <field name="info" type="string"  sourceType="string" comment="text info on this contact" />
  <field name="collision1_name" type="string"  sourceType="string" comment="name of contact collision1" />
  <field name="collision2_name" type="string"  sourceType="string" comment="name of contact collision2" />
  <field name="wrenches" type="vector(geometry_msgs::Wrench)"  sourceType="geometry_msgs::Wrench" comment="list of forces/torques" />
  <field name="total_wrench" type="geometry_msgs::Wrench"  sourceType="geometry_msgs::Wrench" comment="sum of forces/torques in every DOF" />
  <field name="contact_positions" type="vector(geometry_msgs::Vector3)"  sourceType="geometry_msgs::Vector3" comment="list of contact position" />
  <field name="contact_normals" type="vector(geometry_msgs::Vector3)"  sourceType="geometry_msgs::Vector3" comment="list of contact normals" />
  <field name="depths" type="vector(double)"  sourceType="float64" comment="list of penetration depths" />
</class>

<class name="ContactsState" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="acbcb1601a8e525bf72509f18e6f668d" rosDesc="Header header                                   # stamp\ngazebo_msgs/ContactState[] states            # array of geom pairs in contact\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: gazebo_msgs/ContactState\nstring info                                   # text info on this contact\nstring collision1_name                        # name of contact collision1\nstring collision2_name                        # name of contact collision2\ngeometry_msgs/Wrench[] wrenches               # list of forces/torques\ngeometry_msgs/Wrench total_wrench             # sum of forces/torques in every DOF\ngeometry_msgs/Vector3[] contact_positions     # list of contact position\ngeometry_msgs/Vector3[] contact_normals       # list of contact normals\nfloat64[] depths                              # list of penetration depths\n\n================================================================================\nMSG: geometry_msgs/Wrench\n# This represents force in free space, separated into\n# its linear and angular parts.\nVector3  force\nVector3  torque\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\n" comment="" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="stamp" />
  <field name="states" type="vector(gazebo_msgs::ContactState)"  sourceType="gazebo_msgs::ContactState" comment="array of geom pairs in contact" />
</class>

<class name="LinkState" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="0818ebbf28ce3a08d48ab1eaa7309ebe" rosDesc="# @todo: FIXME: sets pose and twist of a link.  All children link poses/twists of the URDF tree are not updated accordingly, but should be.\nstring link_name            # link name, link_names are in gazebo scoped name notation, [model_name::body_name]\ngeometry_msgs/Pose pose     # desired pose in reference frame\ngeometry_msgs/Twist twist   # desired twist in reference frame\nstring reference_frame      # set pose/twist relative to the frame of this link/body\n                            # leave empty or \&quot;world\&quot; or \&quot;map\&quot; defaults to world-frame\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of postion and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\n" comment="@todo: FIXME: sets pose and twist of a link.  All children link poses/twists of the URDF tree are not updated accordingly, but should be." >
  <field name="link_name" type="string"  sourceType="string" comment="link name, link_names are in gazebo scoped name notation, [model_name::body_name]" />
  <field name="pose" type="geometry_msgs::Pose"  sourceType="geometry_msgs::Pose" comment="desired pose in reference frame" />
  <field name="twist" type="geometry_msgs::Twist"  sourceType="geometry_msgs::Twist" comment="desired twist in reference frame" />
  <field name="reference_frame" type="string"  sourceType="string" comment="set pose/twist relative to the frame of this link/body
 leave empty or &quot;world&quot; or &quot;map&quot; defaults to world-frame" />
</class>

<class name="LinkStates" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="48c080191eb15c41858319b4d8a609c2" rosDesc="# broadcast all link states in world frame\nstring[] name                 # link names\ngeometry_msgs/Pose[] pose     # desired pose in world frame\ngeometry_msgs/Twist[] twist   # desired twist in world frame\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of postion and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\n" comment="broadcast all link states in world frame" >
  <field name="name" type="vector(string)"  sourceType="string" comment="link names" />
  <field name="pose" type="vector(geometry_msgs::Pose)"  sourceType="geometry_msgs::Pose" comment="desired pose in world frame" />
  <field name="twist" type="vector(geometry_msgs::Twist)"  sourceType="geometry_msgs::Twist" comment="desired twist in world frame" />
</class>

<class name="ModelState" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="9330fd35f2fcd82d457e54bd54e10593" rosDesc="# Set Gazebo Model pose and twist\nstring model_name           # model to set state (pose and twist)\ngeometry_msgs/Pose pose     # desired pose in reference frame\ngeometry_msgs/Twist twist   # desired twist in reference frame\nstring reference_frame      # set pose/twist relative to the frame of this entity (Body/Model)\n                            # leave empty or \&quot;world\&quot; or \&quot;map\&quot; defaults to world-frame\n\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of postion and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\n" comment="Set Gazebo Model pose and twist" >
  <field name="model_name" type="string"  sourceType="string" comment="model to set state (pose and twist)" />
  <field name="pose" type="geometry_msgs::Pose"  sourceType="geometry_msgs::Pose" comment="desired pose in reference frame" />
  <field name="twist" type="geometry_msgs::Twist"  sourceType="geometry_msgs::Twist" comment="desired twist in reference frame" />
  <field name="reference_frame" type="string"  sourceType="string" comment="set pose/twist relative to the frame of this entity (Body/Model)
 leave empty or &quot;world&quot; or &quot;map&quot; defaults to world-frame" />
</class>

<class name="ModelStates" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="48c080191eb15c41858319b4d8a609c2" rosDesc="# broadcast all model states in world frame\nstring[] name                 # model names\ngeometry_msgs/Pose[] pose     # desired pose in world frame\ngeometry_msgs/Twist[] twist   # desired twist in world frame\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of postion and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\n" comment="broadcast all model states in world frame" >
  <field name="name" type="vector(string)"  sourceType="string" comment="model names" />
  <field name="pose" type="vector(geometry_msgs::Pose)"  sourceType="geometry_msgs::Pose" comment="desired pose in world frame" />
  <field name="twist" type="vector(geometry_msgs::Twist)"  sourceType="geometry_msgs::Twist" comment="desired twist in world frame" />
</class>

<class name="ODEJointProperties" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="1b744c32a920af979f53afe2f9c3511f" rosDesc="# access to low level joint properties, change these at your own risk\nfloat64[] damping             # joint damping\nfloat64[] hiStop              # joint limit\nfloat64[] loStop              # joint limit\nfloat64[] erp                 # set joint erp\nfloat64[] cfm                 # set joint cfm\nfloat64[] stop_erp            # set joint erp for joint limit \&quot;contact\&quot; joint\nfloat64[] stop_cfm            # set joint cfm for joint limit \&quot;contact\&quot; joint\nfloat64[] fudge_factor        # joint fudge_factor applied at limits, see ODE manual for info.\nfloat64[] fmax                # ode joint param fmax\nfloat64[] vel                 # ode joint param vel\n" comment="access to low level joint properties, change these at your own risk" >
  <field name="damping" type="vector(double)"  sourceType="float64" comment="joint damping" />
  <field name="hiStop" type="vector(double)"  sourceType="float64" comment="joint limit" />
  <field name="loStop" type="vector(double)"  sourceType="float64" comment="joint limit" />
  <field name="erp" type="vector(double)"  sourceType="float64" comment="set joint erp" />
  <field name="cfm" type="vector(double)"  sourceType="float64" comment="set joint cfm" />
  <field name="stop_erp" type="vector(double)"  sourceType="float64" comment="set joint erp for joint limit &quot;contact&quot; joint" />
  <field name="stop_cfm" type="vector(double)"  sourceType="float64" comment="set joint cfm for joint limit &quot;contact&quot; joint" />
  <field name="fudge_factor" type="vector(double)"  sourceType="float64" comment="joint fudge_factor applied at limits, see ODE manual for info." />
  <field name="fmax" type="vector(double)"  sourceType="float64" comment="ode joint param fmax" />
  <field name="vel" type="vector(double)"  sourceType="float64" comment="ode joint param vel" />
</class>

<class name="ODEPhysics" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="667d56ddbd547918c32d1934503dc335" rosDesc="bool auto_disable_bodies           # enable auto disabling of bodies, default false\nuint32 sor_pgs_precon_iters        # preconditioning inner iterations when uisng projected Gauss Seidel\nuint32 sor_pgs_iters               # inner iterations when uisng projected Gauss Seidel\nfloat64 sor_pgs_w                  # relaxation parameter when using projected Gauss Seidel, 1 = no relaxation\nfloat64 sor_pgs_rms_error_tol      # rms error tolerance before stopping inner iterations\nfloat64 contact_surface_layer      # contact \&quot;dead-band\&quot; width\nfloat64 contact_max_correcting_vel # contact maximum correction velocity\nfloat64 cfm                        # global constraint force mixing\nfloat64 erp                        # global error reduction parameter\nuint32 max_contacts                # maximum contact joints between two geoms\n" comment="" >
  <field name="auto_disable_bodies" type="bool"  sourceType="bool" comment="enable auto disabling of bodies, default false" />
  <field name="sor_pgs_precon_iters" type="unsigned int"  sourceType="uint32" comment="preconditioning inner iterations when uisng projected Gauss Seidel" />
  <field name="sor_pgs_iters" type="unsigned int"  sourceType="uint32" comment="inner iterations when uisng projected Gauss Seidel" />
  <field name="sor_pgs_w" type="double"  sourceType="float64" comment="relaxation parameter when using projected Gauss Seidel, 1 = no relaxation" />
  <field name="sor_pgs_rms_error_tol" type="double"  sourceType="float64" comment="rms error tolerance before stopping inner iterations" />
  <field name="contact_surface_layer" type="double"  sourceType="float64" comment="contact &quot;dead-band&quot; width" />
  <field name="contact_max_correcting_vel" type="double"  sourceType="float64" comment="contact maximum correction velocity" />
  <field name="cfm" type="double"  sourceType="float64" comment="global constraint force mixing" />
  <field name="erp" type="double"  sourceType="float64" comment="global error reduction parameter" />
  <field name="max_contacts" type="unsigned int"  sourceType="uint32" comment="maximum contact joints between two geoms" />
</class>

<class name="WorldState" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="de1a9de3ab7ba97ac0e9ec01a4eb481e" rosDesc="# This is a message that holds data necessary to reconstruct a snapshot of the world\n#\n# = Approach to Message Passing =\n# The state of the world is defined by either\n#   1. Inertial Model pose, twist\n#      * kinematic data - connectivity graph from Model to each Link\n#      * joint angles\n#      * joint velocities\n#      * Applied forces - Body wrench\n#        * relative transform from Body to each collision Geom\n# Or\n#   2. Inertial (absolute) Body pose, twist, wrench\n#      * relative transform from Body to each collision Geom - constant, so not sent over wire\n#      * back compute from canonical body info to get Model pose and twist.\n#\n# Chooing (2.) because it matches most physics engines out there\n#   and is simpler.\n#\n# = Future =\n# Consider impacts on using reduced coordinates / graph (parent/child links) approach\n#   constraint and physics solvers.\n#\n# = Application =\n# This message is used to do the following:\n#   * reconstruct the world and objects for sensor generation\n#   * stop / start simulation - need pose, twist, wrench of each body\n#   * collision detection - need pose of each collision geometry.  velocity/acceleration if \n#\n# = Assumptions =\n# Assuming that each (physics) processor node locally already has\n#   * collision information - Trimesh for Geoms, etc\n#   * relative transforms from Body to Geom - this is assumed to be fixed, do not send oved wire\n#   * inertial information - does not vary in time\n#   * visual information - does not vary in time\n#\n\nHeader header\n\nstring[] name\ngeometry_msgs/Pose[] pose\ngeometry_msgs/Twist[] twist\ngeometry_msgs/Wrench[] wrench\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of postion and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: geometry_msgs/Wrench\n# This represents force in free space, separated into\n# its linear and angular parts.\nVector3  force\nVector3  torque\n" comment="This is a message that holds data necessary to reconstruct a snapshot of the world

 = Approach to Message Passing =
 The state of the world is defined by either
   1. Inertial Model pose, twist
      * kinematic data - connectivity graph from Model to each Link
      * joint angles
      * joint velocities
      * Applied forces - Body wrench
        * relative transform from Body to each collision Geom
 Or
   2. Inertial (absolute) Body pose, twist, wrench
      * relative transform from Body to each collision Geom - constant, so not sent over wire
      * back compute from canonical body info to get Model pose and twist.

 Chooing (2.) because it matches most physics engines out there
   and is simpler.

 = Future =
 Consider impacts on using reduced coordinates / graph (parent/child links) approach
   constraint and physics solvers.

 = Application =
 This message is used to do the following:
   * reconstruct the world and objects for sensor generation
   * stop / start simulation - need pose, twist, wrench of each body
   * collision detection - need pose of each collision geometry.  velocity/acceleration if 

 = Assumptions =
 Assuming that each (physics) processor node locally already has
   * collision information - Trimesh for Geoms, etc
   * relative transforms from Body to Geom - this is assumed to be fixed, do not send oved wire
   * inertial information - does not vary in time
   * visual information - does not vary in time" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="name" type="vector(string)"  sourceType="string" comment="" />
  <field name="pose" type="vector(geometry_msgs::Pose)"  sourceType="geometry_msgs::Pose" comment="" />
  <field name="twist" type="vector(geometry_msgs::Twist)"  sourceType="geometry_msgs::Twist" comment="" />
  <field name="wrench" type="vector(geometry_msgs::Wrench)"  sourceType="geometry_msgs::Wrench" comment="" />
</class>

<class name="ApplyBodyWrenchRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="Apply Wrench to Gazebo Body.
 via the callback mechanism
 all Gazebo operations are made in world frame" >
  <field name="body_name" type="string"  sourceType="string" comment="Gazebo body to apply wrench (linear force and torque)
 wrench is applied in the gazebo world by default
 body names are prefixed by model name, e.g. pr2::base_link" />
  <field name="reference_frame" type="string"  sourceType="string" comment="wrench is defined in the reference frame of this entity
 use inertial frame if left empty
 frame names are bodies prefixed by model name, e.g. pr2::base_link" />
  <field name="reference_point" type="geometry_msgs::Point"  sourceType="geometry_msgs::Point" comment="wrench is defined at this location in the reference frame" />
  <field name="wrench" type="geometry_msgs::Wrench"  sourceType="geometry_msgs::Wrench" comment="wrench applied to the origin of the body" />
  <field name="start_time" type="std_msgs::RosTime"  sourceType="time" comment="(optional) wrench application start time (seconds)
 if start_time is not specified, or
 start_time &lt; current time, start as soon as possible" />
  <field name="duration" type="std_msgs::RosDuration"  sourceType="duration" comment="no comment provided" />
</class>

<class name="ApplyBodyWrenchResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="Apply Wrench to Gazebo Body.
 via the callback mechanism
 all Gazebo operations are made in world frame" >
  <field name="success" type="bool"  sourceType="bool" comment="return true if set wrench successful" />
  <field name="status_message" type="string"  sourceType="string" comment="comments if available" />
</class>

<class name="ApplyBodyWrench" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="Apply Wrench to Gazebo Body.
 via the callback mechanism
 all Gazebo operations are made in world frame" >
  <definition name="Request" type="ApplyBodyWrenchRequest" />
  <definition name="Response" type="ApplyBodyWrenchResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<class name="ApplyJointEffortRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="set urdf joint effort" >
  <field name="joint_name" type="string"  sourceType="string" comment="joint to apply wrench (linear force and torque)" />
  <field name="effort" type="double"  sourceType="float64" comment="effort to apply" />
  <field name="start_time" type="std_msgs::RosTime"  sourceType="time" comment="optional wrench application start time (seconds)
 if start_time &lt; current time, start as soon as possible" />
  <field name="duration" type="std_msgs::RosDuration"  sourceType="duration" comment="no comment provided" />
</class>

<class name="ApplyJointEffortResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="set urdf joint effort" >
  <field name="success" type="bool"  sourceType="bool" comment="return true if effort application is successful" />
  <field name="status_message" type="string"  sourceType="string" comment="comments if available" />
</class>

<class name="ApplyJointEffort" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="set urdf joint effort" >
  <definition name="Request" type="ApplyJointEffortRequest" />
  <definition name="Response" type="ApplyJointEffortResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<class name="BodyRequestRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="body_name" type="string"  sourceType="string" comment="no comment provided" />
</class>

<class name="BodyRequestResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
</class>

<class name="BodyRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <definition name="Request" type="BodyRequestRequest" />
  <definition name="Response" type="BodyRequestResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<class name="DeleteModelRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="model_name" type="string"  sourceType="string" comment="no comment provided" />
</class>

<class name="DeleteModelResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="success" type="bool"  sourceType="bool" comment="return true if deletion is successful" />
  <field name="status_message" type="string"  sourceType="string" comment="comments if available" />
</class>

<class name="DeleteModel" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <definition name="Request" type="DeleteModelRequest" />
  <definition name="Response" type="DeleteModelResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<class name="GetJointPropertiesRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="joint_name" type="string"  sourceType="string" comment="no comment provided" />
</class>

<class name="GetJointPropertiesResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="type" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="0" name="REVOLUTE" type="unsigned char"  sourceType="uint8" comment="single DOF" />
  <constant init="1" name="CONTINUOUS" type="unsigned char"  sourceType="uint8" comment="single DOF (revolute w/o joints)" />
  <constant init="2" name="PRISMATIC" type="unsigned char"  sourceType="uint8" comment="single DOF" />
  <constant init="3" name="FIXED" type="unsigned char"  sourceType="uint8" comment="0 DOF" />
  <constant init="4" name="BALL" type="unsigned char"  sourceType="uint8" comment="3 DOF" />
  <constant init="5" name="UNIVERSAL" type="unsigned char"  sourceType="uint8" comment="2 DOF
 dynamics properties" />
  <field name="damping" type="vector(double)"  sourceType="float64" comment="joint state" />
  <field name="position" type="vector(double)"  sourceType="float64" comment="" />
  <field name="rate" type="vector(double)"  sourceType="float64" comment="service return status" />
  <field name="success" type="bool"  sourceType="bool" comment="return true if get successful" />
  <field name="status_message" type="string"  sourceType="string" comment="comments if available" />
</class>

<class name="GetJointProperties" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <definition name="Request" type="GetJointPropertiesRequest" />
  <definition name="Response" type="GetJointPropertiesResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<class name="GetLinkPropertiesRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="link_name" type="string"  sourceType="string" comment="no comment provided" />
</class>

<class name="GetLinkPropertiesResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="com" type="geometry_msgs::Pose"  sourceType="geometry_msgs::Pose" comment="center of mass location in link frame
 and orientation of the moment of inertias
 relative to the link frame" />
  <field name="gravity_mode" type="bool"  sourceType="bool" comment="set gravity mode on/off" />
  <field name="mass" type="double"  sourceType="float64" comment="linear mass of link" />
  <field name="ixx" type="double"  sourceType="float64" comment="moment of inertia" />
  <field name="ixy" type="double"  sourceType="float64" comment="moment of inertia" />
  <field name="ixz" type="double"  sourceType="float64" comment="moment of inertia" />
  <field name="iyy" type="double"  sourceType="float64" comment="moment of inertia" />
  <field name="iyz" type="double"  sourceType="float64" comment="moment of inertia" />
  <field name="izz" type="double"  sourceType="float64" comment="moment of inertia" />
  <field name="success" type="bool"  sourceType="bool" comment="return true if get info is successful" />
  <field name="status_message" type="string"  sourceType="string" comment="comments if available" />
</class>

<class name="GetLinkProperties" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <definition name="Request" type="GetLinkPropertiesRequest" />
  <definition name="Response" type="GetLinkPropertiesResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<class name="GetLinkStateRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="link_name" type="string"  sourceType="string" comment="name of link
 link names are prefixed by model name, e.g. pr2::base_link" />
  <field name="reference_frame" type="string"  sourceType="string" comment="no comment provided" />
</class>

<class name="GetLinkStateResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="link_state" type="gazebo_msgs::LinkState"  sourceType="gazebo_msgs::LinkState" comment="" />
  <field name="success" type="bool"  sourceType="bool" comment="return true if get info is successful" />
  <field name="status_message" type="string"  sourceType="string" comment="comments if available" />
</class>

<class name="GetLinkState" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <definition name="Request" type="GetLinkStateRequest" />
  <definition name="Response" type="GetLinkStateResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<class name="GetModelPropertiesRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="model_name" type="string"  sourceType="string" comment="no comment provided" />
</class>

<class name="GetModelPropertiesResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="parent_model_name" type="string"  sourceType="string" comment="parent model" />
  <field name="canonical_body_name" type="string"  sourceType="string" comment="name of canonical body, body names are prefixed by model name, e.g. pr2::base_link" />
  <field name="body_names" type="vector(string)"  sourceType="string" comment="list of bodies, body names are prefixed by model name, e.g. pr2::base_link" />
  <field name="geom_names" type="vector(string)"  sourceType="string" comment="list of geoms" />
  <field name="joint_names" type="vector(string)"  sourceType="string" comment="list of joints attached to the model" />
  <field name="child_model_names" type="vector(string)"  sourceType="string" comment="list of child models" />
  <field name="is_static" type="bool"  sourceType="bool" comment="returns true if model is static" />
  <field name="success" type="bool"  sourceType="bool" comment="return true if get successful" />
  <field name="status_message" type="string"  sourceType="string" comment="comments if available" />
</class>

<class name="GetModelProperties" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <definition name="Request" type="GetModelPropertiesRequest" />
  <definition name="Response" type="GetModelPropertiesResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<class name="GetModelStateRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="model_name" type="string"  sourceType="string" comment="name of Gazebo Model" />
  <field name="relative_entity_name" type="string"  sourceType="string" comment="no comment provided" />
</class>

<class name="GetModelStateResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="Standard metadata for higher-level stamped data types.
 * header.seq holds the number of requests since the plugin started
 * header.stamp timestamp related to the pose
 * header.frame_id not used but currently filled with the relative_entity_name" />
  <field name="pose" type="geometry_msgs::Pose"  sourceType="geometry_msgs::Pose" comment="pose of model in relative entity frame" />
  <field name="twist" type="geometry_msgs::Twist"  sourceType="geometry_msgs::Twist" comment="twist of model in relative entity frame" />
  <field name="success" type="bool"  sourceType="bool" comment="return true if get successful" />
  <field name="status_message" type="string"  sourceType="string" comment="comments if available" />
</class>

<class name="GetModelState" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <definition name="Request" type="GetModelStateRequest" />
  <definition name="Response" type="GetModelStateResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<class name="GetPhysicsPropertiesRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="sets pose and twist of a link.  All children link poses/twists of the URDF tree will be updated accordingly" >
</class>

<class name="GetPhysicsPropertiesResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="sets pose and twist of a link.  All children link poses/twists of the URDF tree will be updated accordingly" >
  <field name="time_step" type="double"  sourceType="float64" comment="dt in seconds" />
  <field name="pause" type="bool"  sourceType="bool" comment="true if physics engine is paused" />
  <field name="max_update_rate" type="double"  sourceType="float64" comment="throttle maximum physics update rate" />
  <field name="gravity" type="geometry_msgs::Vector3"  sourceType="geometry_msgs::Vector3" comment="gravity vector (e.g. earth ~[0,0,-9.81])" />
  <field name="ode_config" type="gazebo_msgs::ODEPhysics"  sourceType="gazebo_msgs::ODEPhysics" comment="contains physics configurations pertaining to ODE" />
  <field name="success" type="bool"  sourceType="bool" comment="return true if set wrench successful" />
  <field name="status_message" type="string"  sourceType="string" comment="comments if available" />
</class>

<class name="GetPhysicsProperties" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="sets pose and twist of a link.  All children link poses/twists of the URDF tree will be updated accordingly" >
  <definition name="Request" type="GetPhysicsPropertiesRequest" />
  <definition name="Response" type="GetPhysicsPropertiesResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<class name="GetWorldPropertiesRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
</class>

<class name="GetWorldPropertiesResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="sim_time" type="double"  sourceType="float64" comment="current sim time" />
  <field name="model_names" type="vector(string)"  sourceType="string" comment="list of models in the world" />
  <field name="rendering_enabled" type="bool"  sourceType="bool" comment="if X is used" />
  <field name="success" type="bool"  sourceType="bool" comment="return true if get successful" />
  <field name="status_message" type="string"  sourceType="string" comment="comments if available" />
</class>

<class name="GetWorldProperties" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <definition name="Request" type="GetWorldPropertiesRequest" />
  <definition name="Response" type="GetWorldPropertiesResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<class name="JointRequestRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="joint_name" type="string"  sourceType="string" comment="no comment provided" />
</class>

<class name="JointRequestResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
</class>

<class name="JointRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <definition name="Request" type="JointRequestRequest" />
  <definition name="Response" type="JointRequestResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<class name="SetJointPropertiesRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="joint_name" type="string"  sourceType="string" comment="name of joint" />
  <field name="ode_joint_config" type="gazebo_msgs::ODEJointProperties"  sourceType="gazebo_msgs::ODEJointProperties" comment="no comment provided" />
</class>

<class name="SetJointPropertiesResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="success" type="bool"  sourceType="bool" comment="return true if get successful" />
  <field name="status_message" type="string"  sourceType="string" comment="comments if available" />
</class>

<class name="SetJointProperties" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <definition name="Request" type="SetJointPropertiesRequest" />
  <definition name="Response" type="SetJointPropertiesResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<class name="SetJointTrajectoryRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="model_name" type="string"  sourceType="string" comment="" />
  <field name="joint_trajectory" type="trajectory_msgs::JointTrajectory"  sourceType="trajectory_msgs::JointTrajectory" comment="" />
  <field name="model_pose" type="geometry_msgs::Pose"  sourceType="geometry_msgs::Pose" comment="" />
  <field name="set_model_pose" type="bool"  sourceType="bool" comment="" />
  <field name="disable_physics_updates" type="bool"  sourceType="bool" comment="no comment provided" />
</class>

<class name="SetJointTrajectoryResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="success" type="bool"  sourceType="bool" comment="return true if set wrench successful" />
  <field name="status_message" type="string"  sourceType="string" comment="comments if available" />
</class>

<class name="SetJointTrajectory" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <definition name="Request" type="SetJointTrajectoryRequest" />
  <definition name="Response" type="SetJointTrajectoryResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<class name="SetLinkPropertiesRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="link_name" type="string"  sourceType="string" comment="name of link
 link names are prefixed by model name, e.g. pr2::base_link" />
  <field name="com" type="geometry_msgs::Pose"  sourceType="geometry_msgs::Pose" comment="center of mass location in link frame
 and orientation of the moment of inertias
 relative to the link frame" />
  <field name="gravity_mode" type="bool"  sourceType="bool" comment="set gravity mode on/off" />
  <field name="mass" type="double"  sourceType="float64" comment="linear mass of link" />
  <field name="ixx" type="double"  sourceType="float64" comment="moment of inertia" />
  <field name="ixy" type="double"  sourceType="float64" comment="moment of inertia" />
  <field name="ixz" type="double"  sourceType="float64" comment="moment of inertia" />
  <field name="iyy" type="double"  sourceType="float64" comment="moment of inertia" />
  <field name="iyz" type="double"  sourceType="float64" comment="moment of inertia" />
  <field name="izz" type="double"  sourceType="float64" comment="no comment provided" />
</class>

<class name="SetLinkPropertiesResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="success" type="bool"  sourceType="bool" comment="return true if get info is successful" />
  <field name="status_message" type="string"  sourceType="string" comment="comments if available" />
</class>

<class name="SetLinkProperties" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <definition name="Request" type="SetLinkPropertiesRequest" />
  <definition name="Response" type="SetLinkPropertiesResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<class name="SetLinkStateRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="link_state" type="gazebo_msgs::LinkState"  sourceType="gazebo_msgs::LinkState" comment="no comment provided" />
</class>

<class name="SetLinkStateResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="success" type="bool"  sourceType="bool" comment="return true if set wrench successful" />
  <field name="status_message" type="string"  sourceType="string" comment="comments if available" />
</class>

<class name="SetLinkState" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <definition name="Request" type="SetLinkStateRequest" />
  <definition name="Response" type="SetLinkStateResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<class name="SetModelConfigurationRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="Set Gazebo Model pose and twist" >
  <field name="model_name" type="string"  sourceType="string" comment="model to set state (pose and twist)" />
  <field name="urdf_param_name" type="string"  sourceType="string" comment="parameter name that contains the urdf XML." />
  <field name="joint_names" type="vector(string)"  sourceType="string" comment="list of joints to set positions.  if joint is not listed here, preserve current position." />
  <field name="joint_positions" type="vector(double)"  sourceType="float64" comment="no comment provided" />
</class>

<class name="SetModelConfigurationResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="Set Gazebo Model pose and twist" >
  <field name="success" type="bool"  sourceType="bool" comment="return true if setting state successful" />
  <field name="status_message" type="string"  sourceType="string" comment="comments if available" />
</class>

<class name="SetModelConfiguration" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="Set Gazebo Model pose and twist" >
  <definition name="Request" type="SetModelConfigurationRequest" />
  <definition name="Response" type="SetModelConfigurationResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<class name="SetModelStateRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="model_state" type="gazebo_msgs::ModelState"  sourceType="gazebo_msgs::ModelState" comment="no comment provided" />
</class>

<class name="SetModelStateResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="success" type="bool"  sourceType="bool" comment="return true if setting state successful" />
  <field name="status_message" type="string"  sourceType="string" comment="comments if available" />
</class>

<class name="SetModelState" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <definition name="Request" type="SetModelStateRequest" />
  <definition name="Response" type="SetModelStateResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<class name="SetPhysicsPropertiesRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="sets pose and twist of a link.  All children link poses/twists of the URDF tree will be updated accordingly" >
  <field name="time_step" type="double"  sourceType="float64" comment="dt in seconds" />
  <field name="max_update_rate" type="double"  sourceType="float64" comment="throttle maximum physics update rate" />
  <field name="gravity" type="geometry_msgs::Vector3"  sourceType="geometry_msgs::Vector3" comment="gravity vector (e.g. earth ~[0,0,-9.81])" />
  <field name="ode_config" type="gazebo_msgs::ODEPhysics"  sourceType="gazebo_msgs::ODEPhysics" comment="no comment provided" />
</class>

<class name="SetPhysicsPropertiesResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="sets pose and twist of a link.  All children link poses/twists of the URDF tree will be updated accordingly" >
  <field name="success" type="bool"  sourceType="bool" comment="return true if set wrench successful" />
  <field name="status_message" type="string"  sourceType="string" comment="comments if available" />
</class>

<class name="SetPhysicsProperties" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="sets pose and twist of a link.  All children link poses/twists of the URDF tree will be updated accordingly" >
  <definition name="Request" type="SetPhysicsPropertiesRequest" />
  <definition name="Response" type="SetPhysicsPropertiesResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<class name="SpawnModelRequest" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="model_name" type="string"  sourceType="string" comment="name of the model to be spawn" />
  <field name="model_xml" type="string"  sourceType="string" comment="this should be an urdf or gazebo xml" />
  <field name="robot_namespace" type="string"  sourceType="string" comment="spawn robot and all ROS interfaces under this namespace" />
  <field name="initial_pose" type="geometry_msgs::Pose"  sourceType="geometry_msgs::Pose" comment="only applied to canonical body" />
  <field name="reference_frame" type="string"  sourceType="string" comment="no comment provided" />
</class>

<class name="SpawnModelResponse" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <field name="success" type="bool"  sourceType="bool" comment="return true if spawn successful" />
  <field name="status_message" type="string"  sourceType="string" comment="comments if available" />
</class>

<class name="SpawnModel" publicDataMembers="true" sourceIDL="ROS" ros="true" comment="" >
  <definition name="Request" type="SpawnModelRequest" />
  <definition name="Response" type="SpawnModelResponse" />
  <field name="request" type="Request" comment="request data type"/>
  <field name="response" type="Response" comment="response data type" />
</class>

<dependency name="geometry_msgs_gencpp"/>
<dependency name="std_msgs_gencpp"/>
<dependency name="std_srvs_gencpp"/>
<dependency name="trajectory_msgs_gencpp"/>

</classes>

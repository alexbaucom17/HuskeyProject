<!--
 
  AUTOGENERATED FILE:   do not edit

  Generated by:         alex on alex-laptop, 2016-11-23 13:42:38 -0500
  From Template/Script: rosToXML.rb
 

-->
<classes library_name="visualization_msgs_gencpp" namespace="visualization_msgs" >

<class name="ImageMarker" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="1de93c67ec8858b831025a08fbf1b35c" rosDesc="uint8 CIRCLE=0\nuint8 LINE_STRIP=1\nuint8 LINE_LIST=2\nuint8 POLYGON=3\nuint8 POINTS=4\n\nuint8 ADD=0\nuint8 REMOVE=1\n\nHeader header\nstring ns		# namespace, used with id to form a unique id\nint32 id          	# unique id within the namespace\nint32 type        	# CIRCLE/LINE_STRIP/etc.\nint32 action      	# ADD/REMOVE\ngeometry_msgs/Point position # 2D, in pixel-coords\nfloat32 scale	 	# the diameter for a circle, etc.\nstd_msgs/ColorRGBA outline_color\nuint8 filled		# whether to fill in the shape with color\nstd_msgs/ColorRGBA fill_color # color [0.0-1.0]\nduration lifetime       # How long the object should last before being automatically deleted.  0 means forever\n\n\ngeometry_msgs/Point[] points # used for LINE_STRIP/LINE_LIST/POINTS/etc., 2D in pixel coords\nstd_msgs/ColorRGBA[] outline_colors # a color for each line, point, etc.\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: std_msgs/ColorRGBA\nfloat32 r\nfloat32 g\nfloat32 b\nfloat32 a\n" comment="" >
  <constant init="0" name="CIRCLE" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="1" name="LINE_STRIP" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="2" name="LINE_LIST" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="3" name="POLYGON" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="4" name="POINTS" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="0" name="ADD" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="1" name="REMOVE" type="unsigned char"  sourceType="uint8" comment="" />
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="" />
  <field name="ns" type="string"  sourceType="string" comment="namespace, used with id to form a unique id" />
  <field name="id" type="int"  sourceType="int32" comment="unique id within the namespace" />
  <field name="type" type="int"  sourceType="int32" comment="CIRCLE/LINE_STRIP/etc." />
  <field name="action" type="int"  sourceType="int32" comment="ADD/REMOVE" />
  <field name="position" type="geometry_msgs::Point"  sourceType="geometry_msgs::Point" comment="2D, in pixel-coords" />
  <field name="scale" type="float"  sourceType="float32" comment="the diameter for a circle, etc." />
  <field name="outline_color" type="std_msgs::ColorRGBA"  sourceType="std_msgs::ColorRGBA" comment="" />
  <field name="filled" type="unsigned char"  sourceType="uint8" comment="whether to fill in the shape with color" />
  <field name="fill_color" type="std_msgs::ColorRGBA"  sourceType="std_msgs::ColorRGBA" comment="color [0.0-1.0]" />
  <field name="lifetime" type="std_msgs::RosDuration"  sourceType="duration" comment="How long the object should last before being automatically deleted.  0 means forever" />
  <field name="points" type="vector(geometry_msgs::Point)"  sourceType="geometry_msgs::Point" comment="used for LINE_STRIP/LINE_LIST/POINTS/etc., 2D in pixel coords" />
  <field name="outline_colors" type="vector(std_msgs::ColorRGBA)"  sourceType="std_msgs::ColorRGBA" comment="a color for each line, point, etc." />
</class>

<class name="InteractiveMarker" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="dd86d22909d5a3364b384492e35c10af" rosDesc="# Time/frame info.\n# If header.time is set to 0, the marker will be retransformed into\n# its frame on each timestep. You will receive the pose feedback\n# in the same frame.\n# Otherwise, you might receive feedback in a different frame.\n# For rviz, this will be the current &apos;fixed frame&apos; set by the user.\nHeader header\n\n# Initial pose. Also, defines the pivot point for rotations.\ngeometry_msgs/Pose pose\n\n# Identifying string. Must be globally unique in\n# the topic that this message is sent through.\nstring name\n\n# Short description (&lt; 40 characters).\nstring description\n\n# Scale to be used for default controls (default=1).\nfloat32 scale\n\n# All menu and submenu entries associated with this marker.\nMenuEntry[] menu_entries\n\n# List of controls displayed for this marker.\nInteractiveMarkerControl[] controls\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: visualization_msgs/MenuEntry\n# MenuEntry message.\n\n# Each InteractiveMarker message has an array of MenuEntry messages.\n# A collection of MenuEntries together describe a\n# menu/submenu/subsubmenu/etc tree, though they are stored in a flat\n# array.  The tree structure is represented by giving each menu entry\n# an ID number and a \&quot;parent_id\&quot; field.  Top-level entries are the\n# ones with parent_id = 0.  Menu entries are ordered within their\n# level the same way they are ordered in the containing array.  Parent\n# entries must appear before their children.\n\n# Example:\n# - id = 3\n#   parent_id = 0\n#   title = \&quot;fun\&quot;\n# - id = 2\n#   parent_id = 0\n#   title = \&quot;robot\&quot;\n# - id = 4\n#   parent_id = 2\n#   title = \&quot;pr2\&quot;\n# - id = 5\n#   parent_id = 2\n#   title = \&quot;turtle\&quot;\n#\n# Gives a menu tree like this:\n#  - fun\n#  - robot\n#    - pr2\n#    - turtle\n\n# ID is a number for each menu entry.  Must be unique within the\n# control, and should never be 0.\nuint32 id\n\n# ID of the parent of this menu entry, if it is a submenu.  If this\n# menu entry is a top-level entry, set parent_id to 0.\nuint32 parent_id\n\n# menu / entry title\nstring title\n\n# Arguments to command indicated by command_type (below)\nstring command\n\n# Command_type stores the type of response desired when this menu\n# entry is clicked.\n# FEEDBACK: send an InteractiveMarkerFeedback message with menu_entry_id set to this entry&apos;s id.\n# ROSRUN: execute \&quot;rosrun\&quot; with arguments given in the command field (above).\n# ROSLAUNCH: execute \&quot;roslaunch\&quot; with arguments given in the command field (above).\nuint8 FEEDBACK=0\nuint8 ROSRUN=1\nuint8 ROSLAUNCH=2\nuint8 command_type\n\n================================================================================\nMSG: visualization_msgs/InteractiveMarkerControl\n# Represents a control that is to be displayed together with an interactive marker\n\n# Identifying string for this control.\n# You need to assign a unique value to this to receive feedback from the GUI\n# on what actions the user performs on this control (e.g. a button click).\nstring name\n\n\n# Defines the local coordinate frame (relative to the pose of the parent\n# interactive marker) in which is being rotated and translated.\n# Default: Identity\ngeometry_msgs/Quaternion orientation\n\n\n# Orientation mode: controls how orientation changes.\n# INHERIT: Follow orientation of interactive marker\n# FIXED: Keep orientation fixed at initial state\n# VIEW_FACING: Align y-z plane with screen (x: forward, y:left, z:up).\nuint8 INHERIT = 0 \nuint8 FIXED = 1\nuint8 VIEW_FACING = 2\n\nuint8 orientation_mode\n\n# Interaction mode for this control\n# \n# NONE: This control is only meant for visualization; no context menu.\n# MENU: Like NONE, but right-click menu is active.\n# BUTTON: Element can be left-clicked.\n# MOVE_AXIS: Translate along local x-axis.\n# MOVE_PLANE: Translate in local y-z plane.\n# ROTATE_AXIS: Rotate around local x-axis.\n# MOVE_ROTATE: Combines MOVE_PLANE and ROTATE_AXIS.\nuint8 NONE = 0 \nuint8 MENU = 1\nuint8 BUTTON = 2\nuint8 MOVE_AXIS = 3 \nuint8 MOVE_PLANE = 4\nuint8 ROTATE_AXIS = 5\nuint8 MOVE_ROTATE = 6\n# \&quot;3D\&quot; interaction modes work with the mouse+SHIFT+CTRL or with 3D cursors.\n# MOVE_3D: Translate freely in 3D space.\n# ROTATE_3D: Rotate freely in 3D space about the origin of parent frame.\n# MOVE_ROTATE_3D: Full 6-DOF freedom of translation and rotation about the cursor origin.\nuint8 MOVE_3D = 7\nuint8 ROTATE_3D = 8\nuint8 MOVE_ROTATE_3D = 9\n\nuint8 interaction_mode\n\n\n# If true, the contained markers will also be visible\n# when the gui is not in interactive mode.\nbool always_visible\n\n\n# Markers to be displayed as custom visual representation.\n# Leave this empty to use the default control handles.\n#\n# Note: \n# - The markers can be defined in an arbitrary coordinate frame,\n#   but will be transformed into the local frame of the interactive marker.\n# - If the header of a marker is empty, its pose will be interpreted as \n#   relative to the pose of the parent interactive marker.\nMarker[] markers\n\n\n# In VIEW_FACING mode, set this to true if you don&apos;t want the markers\n# to be aligned with the camera view point. The markers will show up\n# as in INHERIT mode.\nbool independent_marker_orientation\n\n\n# Short description (&lt; 40 characters) of what this control does,\n# e.g. \&quot;Move the robot\&quot;. \n# Default: A generic description based on the interaction mode\nstring description\n\n================================================================================\nMSG: visualization_msgs/Marker\n# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz\n\nuint8 ARROW=0\nuint8 CUBE=1\nuint8 SPHERE=2\nuint8 CYLINDER=3\nuint8 LINE_STRIP=4\nuint8 LINE_LIST=5\nuint8 CUBE_LIST=6\nuint8 SPHERE_LIST=7\nuint8 POINTS=8\nuint8 TEXT_VIEW_FACING=9\nuint8 MESH_RESOURCE=10\nuint8 TRIANGLE_LIST=11\n\nuint8 ADD=0\nuint8 MODIFY=0\nuint8 DELETE=2\nuint8 DELETEALL=3\n\nHeader header                        # header for time/frame information\nstring ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object\nint32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later\nint32 type 		                       # Type of object\nint32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects\ngeometry_msgs/Pose pose                 # Pose of the object\ngeometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)\nstd_msgs/ColorRGBA color             # Color [0.0-1.0]\nduration lifetime                    # How long the object should last before being automatically deleted.  0 means forever\nbool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep\n\n#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\ngeometry_msgs/Point[] points\n#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n#number of colors must either be 0 or equal to the number of points\n#NOTE: alpha is not yet used\nstd_msgs/ColorRGBA[] colors\n\n# NOTE: only used for text markers\nstring text\n\n# NOTE: only used for MESH_RESOURCE markers\nstring mesh_resource\nbool mesh_use_embedded_materials\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: std_msgs/ColorRGBA\nfloat32 r\nfloat32 g\nfloat32 b\nfloat32 a\n" comment="Time/frame info.
 If header.time is set to 0, the marker will be retransformed into
 its frame on each timestep. You will receive the pose feedback
 in the same frame.
 Otherwise, you might receive feedback in a different frame.
 For rviz, this will be the current &apos;fixed frame&apos; set by the user." >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="Initial pose. Also, defines the pivot point for rotations." />
  <field name="pose" type="geometry_msgs::Pose"  sourceType="geometry_msgs::Pose" comment="Identifying string. Must be globally unique in
 the topic that this message is sent through." />
  <field name="name" type="string"  sourceType="string" comment="Short description (&lt; 40 characters)." />
  <field name="description" type="string"  sourceType="string" comment="Scale to be used for default controls (default=1)." />
  <field name="scale" type="float"  sourceType="float32" comment="All menu and submenu entries associated with this marker." />
  <field name="menu_entries" type="vector(MenuEntry)"  sourceType="MenuEntry" comment="List of controls displayed for this marker." />
  <field name="controls" type="vector(InteractiveMarkerControl)"  sourceType="InteractiveMarkerControl" comment="" />
</class>

<class name="InteractiveMarkerControl" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="b3c81e785788195d1840b86c28da1aac" rosDesc="# Represents a control that is to be displayed together with an interactive marker\n\n# Identifying string for this control.\n# You need to assign a unique value to this to receive feedback from the GUI\n# on what actions the user performs on this control (e.g. a button click).\nstring name\n\n\n# Defines the local coordinate frame (relative to the pose of the parent\n# interactive marker) in which is being rotated and translated.\n# Default: Identity\ngeometry_msgs/Quaternion orientation\n\n\n# Orientation mode: controls how orientation changes.\n# INHERIT: Follow orientation of interactive marker\n# FIXED: Keep orientation fixed at initial state\n# VIEW_FACING: Align y-z plane with screen (x: forward, y:left, z:up).\nuint8 INHERIT = 0 \nuint8 FIXED = 1\nuint8 VIEW_FACING = 2\n\nuint8 orientation_mode\n\n# Interaction mode for this control\n# \n# NONE: This control is only meant for visualization; no context menu.\n# MENU: Like NONE, but right-click menu is active.\n# BUTTON: Element can be left-clicked.\n# MOVE_AXIS: Translate along local x-axis.\n# MOVE_PLANE: Translate in local y-z plane.\n# ROTATE_AXIS: Rotate around local x-axis.\n# MOVE_ROTATE: Combines MOVE_PLANE and ROTATE_AXIS.\nuint8 NONE = 0 \nuint8 MENU = 1\nuint8 BUTTON = 2\nuint8 MOVE_AXIS = 3 \nuint8 MOVE_PLANE = 4\nuint8 ROTATE_AXIS = 5\nuint8 MOVE_ROTATE = 6\n# \&quot;3D\&quot; interaction modes work with the mouse+SHIFT+CTRL or with 3D cursors.\n# MOVE_3D: Translate freely in 3D space.\n# ROTATE_3D: Rotate freely in 3D space about the origin of parent frame.\n# MOVE_ROTATE_3D: Full 6-DOF freedom of translation and rotation about the cursor origin.\nuint8 MOVE_3D = 7\nuint8 ROTATE_3D = 8\nuint8 MOVE_ROTATE_3D = 9\n\nuint8 interaction_mode\n\n\n# If true, the contained markers will also be visible\n# when the gui is not in interactive mode.\nbool always_visible\n\n\n# Markers to be displayed as custom visual representation.\n# Leave this empty to use the default control handles.\n#\n# Note: \n# - The markers can be defined in an arbitrary coordinate frame,\n#   but will be transformed into the local frame of the interactive marker.\n# - If the header of a marker is empty, its pose will be interpreted as \n#   relative to the pose of the parent interactive marker.\nMarker[] markers\n\n\n# In VIEW_FACING mode, set this to true if you don&apos;t want the markers\n# to be aligned with the camera view point. The markers will show up\n# as in INHERIT mode.\nbool independent_marker_orientation\n\n\n# Short description (&lt; 40 characters) of what this control does,\n# e.g. \&quot;Move the robot\&quot;. \n# Default: A generic description based on the interaction mode\nstring description\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: visualization_msgs/Marker\n# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz\n\nuint8 ARROW=0\nuint8 CUBE=1\nuint8 SPHERE=2\nuint8 CYLINDER=3\nuint8 LINE_STRIP=4\nuint8 LINE_LIST=5\nuint8 CUBE_LIST=6\nuint8 SPHERE_LIST=7\nuint8 POINTS=8\nuint8 TEXT_VIEW_FACING=9\nuint8 MESH_RESOURCE=10\nuint8 TRIANGLE_LIST=11\n\nuint8 ADD=0\nuint8 MODIFY=0\nuint8 DELETE=2\nuint8 DELETEALL=3\n\nHeader header                        # header for time/frame information\nstring ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object\nint32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later\nint32 type 		                       # Type of object\nint32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects\ngeometry_msgs/Pose pose                 # Pose of the object\ngeometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)\nstd_msgs/ColorRGBA color             # Color [0.0-1.0]\nduration lifetime                    # How long the object should last before being automatically deleted.  0 means forever\nbool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep\n\n#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\ngeometry_msgs/Point[] points\n#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n#number of colors must either be 0 or equal to the number of points\n#NOTE: alpha is not yet used\nstd_msgs/ColorRGBA[] colors\n\n# NOTE: only used for text markers\nstring text\n\n# NOTE: only used for MESH_RESOURCE markers\nstring mesh_resource\nbool mesh_use_embedded_materials\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: std_msgs/ColorRGBA\nfloat32 r\nfloat32 g\nfloat32 b\nfloat32 a\n" comment="Represents a control that is to be displayed together with an interactive marker" >
  <field name="name" type="string"  sourceType="string" comment="Defines the local coordinate frame (relative to the pose of the parent
 interactive marker) in which is being rotated and translated.
 Default: Identity" />
  <field name="orientation" type="geometry_msgs::Quaternion"  sourceType="geometry_msgs::Quaternion" comment="Orientation mode: controls how orientation changes.
 INHERIT: Follow orientation of interactive marker
 FIXED: Keep orientation fixed at initial state
 VIEW_FACING: Align y-z plane with screen (x: forward, y:left, z:up)." />
  <constant init="0" name="INHERIT" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="1" name="FIXED" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="2" name="VIEW_FACING" type="unsigned char"  sourceType="uint8" comment="" />
  <field name="orientation_mode" type="unsigned char"  sourceType="uint8" comment="Interaction mode for this control
 
 NONE: This control is only meant for visualization; no context menu.
 MENU: Like NONE, but right-click menu is active.
 BUTTON: Element can be left-clicked.
 MOVE_AXIS: Translate along local x-axis.
 MOVE_PLANE: Translate in local y-z plane.
 ROTATE_AXIS: Rotate around local x-axis.
 MOVE_ROTATE: Combines MOVE_PLANE and ROTATE_AXIS." />
  <constant init="0" name="NONE" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="1" name="MENU" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="2" name="BUTTON" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="3" name="MOVE_AXIS" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="4" name="MOVE_PLANE" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="5" name="ROTATE_AXIS" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="6" name="MOVE_ROTATE" type="unsigned char"  sourceType="uint8" comment="&quot;3D&quot; interaction modes work with the mouse+SHIFT+CTRL or with 3D cursors.
 MOVE_3D: Translate freely in 3D space.
 ROTATE_3D: Rotate freely in 3D space about the origin of parent frame.
 MOVE_ROTATE_3D: Full 6-DOF freedom of translation and rotation about the cursor origin." />
  <constant init="7" name="MOVE_3D" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="8" name="ROTATE_3D" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="9" name="MOVE_ROTATE_3D" type="unsigned char"  sourceType="uint8" comment="" />
  <field name="interaction_mode" type="unsigned char"  sourceType="uint8" comment="If true, the contained markers will also be visible
 when the gui is not in interactive mode." />
  <field name="always_visible" type="bool"  sourceType="bool" comment="Markers to be displayed as custom visual representation.
 Leave this empty to use the default control handles.

 Note: 
 - The markers can be defined in an arbitrary coordinate frame,
   but will be transformed into the local frame of the interactive marker.
 - If the header of a marker is empty, its pose will be interpreted as 
   relative to the pose of the parent interactive marker." />
  <field name="markers" type="vector(Marker)"  sourceType="Marker" comment="In VIEW_FACING mode, set this to true if you don&apos;t want the markers
 to be aligned with the camera view point. The markers will show up
 as in INHERIT mode." />
  <field name="independent_marker_orientation" type="bool"  sourceType="bool" comment="Short description (&lt; 40 characters) of what this control does,
 e.g. &quot;Move the robot&quot;. 
 Default: A generic description based on the interaction mode" />
  <field name="description" type="string"  sourceType="string" comment="" />
</class>

<class name="InteractiveMarkerFeedback" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="ab0f1eee058667e28c19ff3ffc3f4b78" rosDesc="# Time/frame info.\nHeader header\n\n# Identifying string. Must be unique in the topic namespace.\nstring client_id\n\n# Feedback message sent back from the GUI, e.g.\n# when the status of an interactive marker was modified by the user.\n\n# Specifies which interactive marker and control this message refers to\nstring marker_name\nstring control_name\n\n# Type of the event\n# KEEP_ALIVE: sent while dragging to keep up control of the marker\n# MENU_SELECT: a menu entry has been selected\n# BUTTON_CLICK: a button control has been clicked\n# POSE_UPDATE: the pose has been changed using one of the controls\nuint8 KEEP_ALIVE = 0\nuint8 POSE_UPDATE = 1\nuint8 MENU_SELECT = 2\nuint8 BUTTON_CLICK = 3\n\nuint8 MOUSE_DOWN = 4\nuint8 MOUSE_UP = 5\n\nuint8 event_type\n\n# Current pose of the marker\n# Note: Has to be valid for all feedback types.\ngeometry_msgs/Pose pose\n\n# Contains the ID of the selected menu entry\n# Only valid for MENU_SELECT events.\nuint32 menu_entry_id\n\n# If event_type is BUTTON_CLICK, MOUSE_DOWN, or MOUSE_UP, mouse_point\n# may contain the 3 dimensional position of the event on the\n# control.  If it does, mouse_point_valid will be true.  mouse_point\n# will be relative to the frame listed in the header.\ngeometry_msgs/Point mouse_point\nbool mouse_point_valid\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n" comment="Time/frame info." >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="Identifying string. Must be unique in the topic namespace." />
  <field name="client_id" type="string"  sourceType="string" comment="Feedback message sent back from the GUI, e.g.
 when the status of an interactive marker was modified by the user.
 Specifies which interactive marker and control this message refers to" />
  <field name="marker_name" type="string"  sourceType="string" comment="" />
  <field name="control_name" type="string"  sourceType="string" comment="Type of the event
 KEEP_ALIVE: sent while dragging to keep up control of the marker
 MENU_SELECT: a menu entry has been selected
 BUTTON_CLICK: a button control has been clicked
 POSE_UPDATE: the pose has been changed using one of the controls" />
  <constant init="0" name="KEEP_ALIVE" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="1" name="POSE_UPDATE" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="2" name="MENU_SELECT" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="3" name="BUTTON_CLICK" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="4" name="MOUSE_DOWN" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="5" name="MOUSE_UP" type="unsigned char"  sourceType="uint8" comment="" />
  <field name="event_type" type="unsigned char"  sourceType="uint8" comment="Current pose of the marker
 Note: Has to be valid for all feedback types." />
  <field name="pose" type="geometry_msgs::Pose"  sourceType="geometry_msgs::Pose" comment="Contains the ID of the selected menu entry
 Only valid for MENU_SELECT events." />
  <field name="menu_entry_id" type="unsigned int"  sourceType="uint32" comment="If event_type is BUTTON_CLICK, MOUSE_DOWN, or MOUSE_UP, mouse_point
 may contain the 3 dimensional position of the event on the
 control.  If it does, mouse_point_valid will be true.  mouse_point
 will be relative to the frame listed in the header." />
  <field name="mouse_point" type="geometry_msgs::Point"  sourceType="geometry_msgs::Point" comment="" />
  <field name="mouse_point_valid" type="bool"  sourceType="bool" comment="" />
</class>

<class name="InteractiveMarkerInit" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="d5f2c5045a72456d228676ab91048734" rosDesc="# Identifying string. Must be unique in the topic namespace\n# that this server works on.\nstring server_id\n\n# Sequence number.\n# The client will use this to detect if it has missed a subsequent\n# update.  Every update message will have the same sequence number as\n# an init message.  Clients will likely want to unsubscribe from the\n# init topic after a successful initialization to avoid receiving\n# duplicate data.\nuint64 seq_num\n\n# All markers.\nInteractiveMarker[] markers\n\n================================================================================\nMSG: visualization_msgs/InteractiveMarker\n# Time/frame info.\n# If header.time is set to 0, the marker will be retransformed into\n# its frame on each timestep. You will receive the pose feedback\n# in the same frame.\n# Otherwise, you might receive feedback in a different frame.\n# For rviz, this will be the current &apos;fixed frame&apos; set by the user.\nHeader header\n\n# Initial pose. Also, defines the pivot point for rotations.\ngeometry_msgs/Pose pose\n\n# Identifying string. Must be globally unique in\n# the topic that this message is sent through.\nstring name\n\n# Short description (&lt; 40 characters).\nstring description\n\n# Scale to be used for default controls (default=1).\nfloat32 scale\n\n# All menu and submenu entries associated with this marker.\nMenuEntry[] menu_entries\n\n# List of controls displayed for this marker.\nInteractiveMarkerControl[] controls\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: visualization_msgs/MenuEntry\n# MenuEntry message.\n\n# Each InteractiveMarker message has an array of MenuEntry messages.\n# A collection of MenuEntries together describe a\n# menu/submenu/subsubmenu/etc tree, though they are stored in a flat\n# array.  The tree structure is represented by giving each menu entry\n# an ID number and a \&quot;parent_id\&quot; field.  Top-level entries are the\n# ones with parent_id = 0.  Menu entries are ordered within their\n# level the same way they are ordered in the containing array.  Parent\n# entries must appear before their children.\n\n# Example:\n# - id = 3\n#   parent_id = 0\n#   title = \&quot;fun\&quot;\n# - id = 2\n#   parent_id = 0\n#   title = \&quot;robot\&quot;\n# - id = 4\n#   parent_id = 2\n#   title = \&quot;pr2\&quot;\n# - id = 5\n#   parent_id = 2\n#   title = \&quot;turtle\&quot;\n#\n# Gives a menu tree like this:\n#  - fun\n#  - robot\n#    - pr2\n#    - turtle\n\n# ID is a number for each menu entry.  Must be unique within the\n# control, and should never be 0.\nuint32 id\n\n# ID of the parent of this menu entry, if it is a submenu.  If this\n# menu entry is a top-level entry, set parent_id to 0.\nuint32 parent_id\n\n# menu / entry title\nstring title\n\n# Arguments to command indicated by command_type (below)\nstring command\n\n# Command_type stores the type of response desired when this menu\n# entry is clicked.\n# FEEDBACK: send an InteractiveMarkerFeedback message with menu_entry_id set to this entry&apos;s id.\n# ROSRUN: execute \&quot;rosrun\&quot; with arguments given in the command field (above).\n# ROSLAUNCH: execute \&quot;roslaunch\&quot; with arguments given in the command field (above).\nuint8 FEEDBACK=0\nuint8 ROSRUN=1\nuint8 ROSLAUNCH=2\nuint8 command_type\n\n================================================================================\nMSG: visualization_msgs/InteractiveMarkerControl\n# Represents a control that is to be displayed together with an interactive marker\n\n# Identifying string for this control.\n# You need to assign a unique value to this to receive feedback from the GUI\n# on what actions the user performs on this control (e.g. a button click).\nstring name\n\n\n# Defines the local coordinate frame (relative to the pose of the parent\n# interactive marker) in which is being rotated and translated.\n# Default: Identity\ngeometry_msgs/Quaternion orientation\n\n\n# Orientation mode: controls how orientation changes.\n# INHERIT: Follow orientation of interactive marker\n# FIXED: Keep orientation fixed at initial state\n# VIEW_FACING: Align y-z plane with screen (x: forward, y:left, z:up).\nuint8 INHERIT = 0 \nuint8 FIXED = 1\nuint8 VIEW_FACING = 2\n\nuint8 orientation_mode\n\n# Interaction mode for this control\n# \n# NONE: This control is only meant for visualization; no context menu.\n# MENU: Like NONE, but right-click menu is active.\n# BUTTON: Element can be left-clicked.\n# MOVE_AXIS: Translate along local x-axis.\n# MOVE_PLANE: Translate in local y-z plane.\n# ROTATE_AXIS: Rotate around local x-axis.\n# MOVE_ROTATE: Combines MOVE_PLANE and ROTATE_AXIS.\nuint8 NONE = 0 \nuint8 MENU = 1\nuint8 BUTTON = 2\nuint8 MOVE_AXIS = 3 \nuint8 MOVE_PLANE = 4\nuint8 ROTATE_AXIS = 5\nuint8 MOVE_ROTATE = 6\n# \&quot;3D\&quot; interaction modes work with the mouse+SHIFT+CTRL or with 3D cursors.\n# MOVE_3D: Translate freely in 3D space.\n# ROTATE_3D: Rotate freely in 3D space about the origin of parent frame.\n# MOVE_ROTATE_3D: Full 6-DOF freedom of translation and rotation about the cursor origin.\nuint8 MOVE_3D = 7\nuint8 ROTATE_3D = 8\nuint8 MOVE_ROTATE_3D = 9\n\nuint8 interaction_mode\n\n\n# If true, the contained markers will also be visible\n# when the gui is not in interactive mode.\nbool always_visible\n\n\n# Markers to be displayed as custom visual representation.\n# Leave this empty to use the default control handles.\n#\n# Note: \n# - The markers can be defined in an arbitrary coordinate frame,\n#   but will be transformed into the local frame of the interactive marker.\n# - If the header of a marker is empty, its pose will be interpreted as \n#   relative to the pose of the parent interactive marker.\nMarker[] markers\n\n\n# In VIEW_FACING mode, set this to true if you don&apos;t want the markers\n# to be aligned with the camera view point. The markers will show up\n# as in INHERIT mode.\nbool independent_marker_orientation\n\n\n# Short description (&lt; 40 characters) of what this control does,\n# e.g. \&quot;Move the robot\&quot;. \n# Default: A generic description based on the interaction mode\nstring description\n\n================================================================================\nMSG: visualization_msgs/Marker\n# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz\n\nuint8 ARROW=0\nuint8 CUBE=1\nuint8 SPHERE=2\nuint8 CYLINDER=3\nuint8 LINE_STRIP=4\nuint8 LINE_LIST=5\nuint8 CUBE_LIST=6\nuint8 SPHERE_LIST=7\nuint8 POINTS=8\nuint8 TEXT_VIEW_FACING=9\nuint8 MESH_RESOURCE=10\nuint8 TRIANGLE_LIST=11\n\nuint8 ADD=0\nuint8 MODIFY=0\nuint8 DELETE=2\nuint8 DELETEALL=3\n\nHeader header                        # header for time/frame information\nstring ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object\nint32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later\nint32 type 		                       # Type of object\nint32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects\ngeometry_msgs/Pose pose                 # Pose of the object\ngeometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)\nstd_msgs/ColorRGBA color             # Color [0.0-1.0]\nduration lifetime                    # How long the object should last before being automatically deleted.  0 means forever\nbool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep\n\n#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\ngeometry_msgs/Point[] points\n#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n#number of colors must either be 0 or equal to the number of points\n#NOTE: alpha is not yet used\nstd_msgs/ColorRGBA[] colors\n\n# NOTE: only used for text markers\nstring text\n\n# NOTE: only used for MESH_RESOURCE markers\nstring mesh_resource\nbool mesh_use_embedded_materials\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: std_msgs/ColorRGBA\nfloat32 r\nfloat32 g\nfloat32 b\nfloat32 a\n" comment="Identifying string. Must be unique in the topic namespace
 that this server works on." >
  <field name="server_id" type="string"  sourceType="string" comment="Sequence number.
 The client will use this to detect if it has missed a subsequent
 update.  Every update message will have the same sequence number as
 an init message.  Clients will likely want to unsubscribe from the
 init topic after a successful initialization to avoid receiving
 duplicate data." />
  <field name="seq_num" type="unsigned long long int"  sourceType="uint64" comment="All markers." />
  <field name="markers" type="vector(InteractiveMarker)"  sourceType="InteractiveMarker" comment="" />
</class>

<class name="InteractiveMarkerPose" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="a6e6833209a196a38d798dadb02c81f8" rosDesc="# Time/frame info.\nHeader header\n\n# Initial pose. Also, defines the pivot point for rotations.\ngeometry_msgs/Pose pose\n\n# Identifying string. Must be globally unique in\n# the topic that this message is sent through.\nstring name\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n" comment="Time/frame info." >
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="Initial pose. Also, defines the pivot point for rotations." />
  <field name="pose" type="geometry_msgs::Pose"  sourceType="geometry_msgs::Pose" comment="Identifying string. Must be globally unique in
 the topic that this message is sent through." />
  <field name="name" type="string"  sourceType="string" comment="" />
</class>

<class name="InteractiveMarkerUpdate" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="710d308d0a9276d65945e92dd30b3946" rosDesc="# Identifying string. Must be unique in the topic namespace\n# that this server works on.\nstring server_id\n\n# Sequence number.\n# The client will use this to detect if it has missed an update.\nuint64 seq_num\n\n# Type holds the purpose of this message.  It must be one of UPDATE or KEEP_ALIVE.\n# UPDATE: Incremental update to previous state. \n#         The sequence number must be 1 higher than for\n#         the previous update.\n# KEEP_ALIVE: Indicates the that the server is still living.\n#             The sequence number does not increase.\n#             No payload data should be filled out (markers, poses, or erases).\nuint8 KEEP_ALIVE = 0\nuint8 UPDATE = 1\n\nuint8 type\n\n#Note: No guarantees on the order of processing.\n#      Contents must be kept consistent by sender.\n\n#Markers to be added or updated\nInteractiveMarker[] markers\n\n#Poses of markers that should be moved\nInteractiveMarkerPose[] poses\n\n#Names of markers to be erased\nstring[] erases\n\n================================================================================\nMSG: visualization_msgs/InteractiveMarker\n# Time/frame info.\n# If header.time is set to 0, the marker will be retransformed into\n# its frame on each timestep. You will receive the pose feedback\n# in the same frame.\n# Otherwise, you might receive feedback in a different frame.\n# For rviz, this will be the current &apos;fixed frame&apos; set by the user.\nHeader header\n\n# Initial pose. Also, defines the pivot point for rotations.\ngeometry_msgs/Pose pose\n\n# Identifying string. Must be globally unique in\n# the topic that this message is sent through.\nstring name\n\n# Short description (&lt; 40 characters).\nstring description\n\n# Scale to be used for default controls (default=1).\nfloat32 scale\n\n# All menu and submenu entries associated with this marker.\nMenuEntry[] menu_entries\n\n# List of controls displayed for this marker.\nInteractiveMarkerControl[] controls\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: visualization_msgs/MenuEntry\n# MenuEntry message.\n\n# Each InteractiveMarker message has an array of MenuEntry messages.\n# A collection of MenuEntries together describe a\n# menu/submenu/subsubmenu/etc tree, though they are stored in a flat\n# array.  The tree structure is represented by giving each menu entry\n# an ID number and a \&quot;parent_id\&quot; field.  Top-level entries are the\n# ones with parent_id = 0.  Menu entries are ordered within their\n# level the same way they are ordered in the containing array.  Parent\n# entries must appear before their children.\n\n# Example:\n# - id = 3\n#   parent_id = 0\n#   title = \&quot;fun\&quot;\n# - id = 2\n#   parent_id = 0\n#   title = \&quot;robot\&quot;\n# - id = 4\n#   parent_id = 2\n#   title = \&quot;pr2\&quot;\n# - id = 5\n#   parent_id = 2\n#   title = \&quot;turtle\&quot;\n#\n# Gives a menu tree like this:\n#  - fun\n#  - robot\n#    - pr2\n#    - turtle\n\n# ID is a number for each menu entry.  Must be unique within the\n# control, and should never be 0.\nuint32 id\n\n# ID of the parent of this menu entry, if it is a submenu.  If this\n# menu entry is a top-level entry, set parent_id to 0.\nuint32 parent_id\n\n# menu / entry title\nstring title\n\n# Arguments to command indicated by command_type (below)\nstring command\n\n# Command_type stores the type of response desired when this menu\n# entry is clicked.\n# FEEDBACK: send an InteractiveMarkerFeedback message with menu_entry_id set to this entry&apos;s id.\n# ROSRUN: execute \&quot;rosrun\&quot; with arguments given in the command field (above).\n# ROSLAUNCH: execute \&quot;roslaunch\&quot; with arguments given in the command field (above).\nuint8 FEEDBACK=0\nuint8 ROSRUN=1\nuint8 ROSLAUNCH=2\nuint8 command_type\n\n================================================================================\nMSG: visualization_msgs/InteractiveMarkerControl\n# Represents a control that is to be displayed together with an interactive marker\n\n# Identifying string for this control.\n# You need to assign a unique value to this to receive feedback from the GUI\n# on what actions the user performs on this control (e.g. a button click).\nstring name\n\n\n# Defines the local coordinate frame (relative to the pose of the parent\n# interactive marker) in which is being rotated and translated.\n# Default: Identity\ngeometry_msgs/Quaternion orientation\n\n\n# Orientation mode: controls how orientation changes.\n# INHERIT: Follow orientation of interactive marker\n# FIXED: Keep orientation fixed at initial state\n# VIEW_FACING: Align y-z plane with screen (x: forward, y:left, z:up).\nuint8 INHERIT = 0 \nuint8 FIXED = 1\nuint8 VIEW_FACING = 2\n\nuint8 orientation_mode\n\n# Interaction mode for this control\n# \n# NONE: This control is only meant for visualization; no context menu.\n# MENU: Like NONE, but right-click menu is active.\n# BUTTON: Element can be left-clicked.\n# MOVE_AXIS: Translate along local x-axis.\n# MOVE_PLANE: Translate in local y-z plane.\n# ROTATE_AXIS: Rotate around local x-axis.\n# MOVE_ROTATE: Combines MOVE_PLANE and ROTATE_AXIS.\nuint8 NONE = 0 \nuint8 MENU = 1\nuint8 BUTTON = 2\nuint8 MOVE_AXIS = 3 \nuint8 MOVE_PLANE = 4\nuint8 ROTATE_AXIS = 5\nuint8 MOVE_ROTATE = 6\n# \&quot;3D\&quot; interaction modes work with the mouse+SHIFT+CTRL or with 3D cursors.\n# MOVE_3D: Translate freely in 3D space.\n# ROTATE_3D: Rotate freely in 3D space about the origin of parent frame.\n# MOVE_ROTATE_3D: Full 6-DOF freedom of translation and rotation about the cursor origin.\nuint8 MOVE_3D = 7\nuint8 ROTATE_3D = 8\nuint8 MOVE_ROTATE_3D = 9\n\nuint8 interaction_mode\n\n\n# If true, the contained markers will also be visible\n# when the gui is not in interactive mode.\nbool always_visible\n\n\n# Markers to be displayed as custom visual representation.\n# Leave this empty to use the default control handles.\n#\n# Note: \n# - The markers can be defined in an arbitrary coordinate frame,\n#   but will be transformed into the local frame of the interactive marker.\n# - If the header of a marker is empty, its pose will be interpreted as \n#   relative to the pose of the parent interactive marker.\nMarker[] markers\n\n\n# In VIEW_FACING mode, set this to true if you don&apos;t want the markers\n# to be aligned with the camera view point. The markers will show up\n# as in INHERIT mode.\nbool independent_marker_orientation\n\n\n# Short description (&lt; 40 characters) of what this control does,\n# e.g. \&quot;Move the robot\&quot;. \n# Default: A generic description based on the interaction mode\nstring description\n\n================================================================================\nMSG: visualization_msgs/Marker\n# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz\n\nuint8 ARROW=0\nuint8 CUBE=1\nuint8 SPHERE=2\nuint8 CYLINDER=3\nuint8 LINE_STRIP=4\nuint8 LINE_LIST=5\nuint8 CUBE_LIST=6\nuint8 SPHERE_LIST=7\nuint8 POINTS=8\nuint8 TEXT_VIEW_FACING=9\nuint8 MESH_RESOURCE=10\nuint8 TRIANGLE_LIST=11\n\nuint8 ADD=0\nuint8 MODIFY=0\nuint8 DELETE=2\nuint8 DELETEALL=3\n\nHeader header                        # header for time/frame information\nstring ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object\nint32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later\nint32 type 		                       # Type of object\nint32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects\ngeometry_msgs/Pose pose                 # Pose of the object\ngeometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)\nstd_msgs/ColorRGBA color             # Color [0.0-1.0]\nduration lifetime                    # How long the object should last before being automatically deleted.  0 means forever\nbool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep\n\n#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\ngeometry_msgs/Point[] points\n#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n#number of colors must either be 0 or equal to the number of points\n#NOTE: alpha is not yet used\nstd_msgs/ColorRGBA[] colors\n\n# NOTE: only used for text markers\nstring text\n\n# NOTE: only used for MESH_RESOURCE markers\nstring mesh_resource\nbool mesh_use_embedded_materials\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: std_msgs/ColorRGBA\nfloat32 r\nfloat32 g\nfloat32 b\nfloat32 a\n\n================================================================================\nMSG: visualization_msgs/InteractiveMarkerPose\n# Time/frame info.\nHeader header\n\n# Initial pose. Also, defines the pivot point for rotations.\ngeometry_msgs/Pose pose\n\n# Identifying string. Must be globally unique in\n# the topic that this message is sent through.\nstring name\n" comment="Identifying string. Must be unique in the topic namespace
 that this server works on." >
  <field name="server_id" type="string"  sourceType="string" comment="Sequence number.
 The client will use this to detect if it has missed an update." />
  <field name="seq_num" type="unsigned long long int"  sourceType="uint64" comment="Type holds the purpose of this message.  It must be one of UPDATE or KEEP_ALIVE.
 UPDATE: Incremental update to previous state. 
         The sequence number must be 1 higher than for
         the previous update.
 KEEP_ALIVE: Indicates the that the server is still living.
             The sequence number does not increase.
             No payload data should be filled out (markers, poses, or erases)." />
  <constant init="0" name="KEEP_ALIVE" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="1" name="UPDATE" type="unsigned char"  sourceType="uint8" comment="" />
  <field name="type" type="unsigned char"  sourceType="uint8" comment="Note: No guarantees on the order of processing.
      Contents must be kept consistent by sender.
Markers to be added or updated" />
  <field name="markers" type="vector(InteractiveMarker)"  sourceType="InteractiveMarker" comment="Poses of markers that should be moved" />
  <field name="poses" type="vector(InteractiveMarkerPose)"  sourceType="InteractiveMarkerPose" comment="Names of markers to be erased" />
  <field name="erases" type="vector(string)"  sourceType="string" comment="" />
</class>

<class name="Marker" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="4048c9de2a16f4ae8e0538085ebf1b97" rosDesc="# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz\n\nuint8 ARROW=0\nuint8 CUBE=1\nuint8 SPHERE=2\nuint8 CYLINDER=3\nuint8 LINE_STRIP=4\nuint8 LINE_LIST=5\nuint8 CUBE_LIST=6\nuint8 SPHERE_LIST=7\nuint8 POINTS=8\nuint8 TEXT_VIEW_FACING=9\nuint8 MESH_RESOURCE=10\nuint8 TRIANGLE_LIST=11\n\nuint8 ADD=0\nuint8 MODIFY=0\nuint8 DELETE=2\nuint8 DELETEALL=3\n\nHeader header                        # header for time/frame information\nstring ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object\nint32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later\nint32 type 		                       # Type of object\nint32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects\ngeometry_msgs/Pose pose                 # Pose of the object\ngeometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)\nstd_msgs/ColorRGBA color             # Color [0.0-1.0]\nduration lifetime                    # How long the object should last before being automatically deleted.  0 means forever\nbool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep\n\n#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\ngeometry_msgs/Point[] points\n#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n#number of colors must either be 0 or equal to the number of points\n#NOTE: alpha is not yet used\nstd_msgs/ColorRGBA[] colors\n\n# NOTE: only used for text markers\nstring text\n\n# NOTE: only used for MESH_RESOURCE markers\nstring mesh_resource\nbool mesh_use_embedded_materials\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: std_msgs/ColorRGBA\nfloat32 r\nfloat32 g\nfloat32 b\nfloat32 a\n" comment="See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz" >
  <constant init="0" name="ARROW" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="1" name="CUBE" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="2" name="SPHERE" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="3" name="CYLINDER" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="4" name="LINE_STRIP" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="5" name="LINE_LIST" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="6" name="CUBE_LIST" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="7" name="SPHERE_LIST" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="8" name="POINTS" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="9" name="TEXT_VIEW_FACING" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="10" name="MESH_RESOURCE" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="11" name="TRIANGLE_LIST" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="0" name="ADD" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="0" name="MODIFY" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="2" name="DELETE" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="3" name="DELETEALL" type="unsigned char"  sourceType="uint8" comment="" />
  <field name="header" type="std_msgs::Header"  sourceType="Header" comment="header for time/frame information" />
  <field name="ns" type="string"  sourceType="string" comment="Namespace to place this object in... used in conjunction with id to create a unique name for the object" />
  <field name="id" type="int"  sourceType="int32" comment="object ID useful in conjunction with the namespace for manipulating and deleting the object later" />
  <field name="type" type="int"  sourceType="int32" comment="Type of object" />
  <field name="action" type="int"  sourceType="int32" comment="0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects" />
  <field name="pose" type="geometry_msgs::Pose"  sourceType="geometry_msgs::Pose" comment="Pose of the object" />
  <field name="scale" type="geometry_msgs::Vector3"  sourceType="geometry_msgs::Vector3" comment="Scale of the object 1,1,1 means default (usually 1 meter square)" />
  <field name="color" type="std_msgs::ColorRGBA"  sourceType="std_msgs::ColorRGBA" comment="Color [0.0-1.0]" />
  <field name="lifetime" type="std_msgs::RosDuration"  sourceType="duration" comment="How long the object should last before being automatically deleted.  0 means forever" />
  <field name="frame_locked" type="bool"  sourceType="bool" comment="If this marker should be frame-locked, i.e. retransformed into its frame every timestep
Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)" />
  <field name="points" type="vector(geometry_msgs::Point)"  sourceType="geometry_msgs::Point" comment="Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
number of colors must either be 0 or equal to the number of points
NOTE: alpha is not yet used" />
  <field name="colors" type="vector(std_msgs::ColorRGBA)"  sourceType="std_msgs::ColorRGBA" comment="NOTE: only used for text markers" />
  <field name="text" type="string"  sourceType="string" comment="NOTE: only used for MESH_RESOURCE markers" />
  <field name="mesh_resource" type="string"  sourceType="string" comment="" />
  <field name="mesh_use_embedded_materials" type="bool"  sourceType="bool" comment="" />
</class>

<class name="MarkerArray" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="d155b9ce5188fbaf89745847fd5882d7" rosDesc="Marker[] markers\n\n================================================================================\nMSG: visualization_msgs/Marker\n# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz\n\nuint8 ARROW=0\nuint8 CUBE=1\nuint8 SPHERE=2\nuint8 CYLINDER=3\nuint8 LINE_STRIP=4\nuint8 LINE_LIST=5\nuint8 CUBE_LIST=6\nuint8 SPHERE_LIST=7\nuint8 POINTS=8\nuint8 TEXT_VIEW_FACING=9\nuint8 MESH_RESOURCE=10\nuint8 TRIANGLE_LIST=11\n\nuint8 ADD=0\nuint8 MODIFY=0\nuint8 DELETE=2\nuint8 DELETEALL=3\n\nHeader header                        # header for time/frame information\nstring ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object\nint32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later\nint32 type 		                       # Type of object\nint32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects\ngeometry_msgs/Pose pose                 # Pose of the object\ngeometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)\nstd_msgs/ColorRGBA color             # Color [0.0-1.0]\nduration lifetime                    # How long the object should last before being automatically deleted.  0 means forever\nbool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep\n\n#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\ngeometry_msgs/Point[] points\n#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n#number of colors must either be 0 or equal to the number of points\n#NOTE: alpha is not yet used\nstd_msgs/ColorRGBA[] colors\n\n# NOTE: only used for text markers\nstring text\n\n# NOTE: only used for MESH_RESOURCE markers\nstring mesh_resource\nbool mesh_use_embedded_materials\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\nfloat64 z\n================================================================================\nMSG: std_msgs/ColorRGBA\nfloat32 r\nfloat32 g\nfloat32 b\nfloat32 a\n" comment="" >
  <field name="markers" type="vector(Marker)"  sourceType="Marker" comment="" />
</class>

<class name="MenuEntry" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="b90ec63024573de83b57aa93eb39be2d" rosDesc="# MenuEntry message.\n\n# Each InteractiveMarker message has an array of MenuEntry messages.\n# A collection of MenuEntries together describe a\n# menu/submenu/subsubmenu/etc tree, though they are stored in a flat\n# array.  The tree structure is represented by giving each menu entry\n# an ID number and a \&quot;parent_id\&quot; field.  Top-level entries are the\n# ones with parent_id = 0.  Menu entries are ordered within their\n# level the same way they are ordered in the containing array.  Parent\n# entries must appear before their children.\n\n# Example:\n# - id = 3\n#   parent_id = 0\n#   title = \&quot;fun\&quot;\n# - id = 2\n#   parent_id = 0\n#   title = \&quot;robot\&quot;\n# - id = 4\n#   parent_id = 2\n#   title = \&quot;pr2\&quot;\n# - id = 5\n#   parent_id = 2\n#   title = \&quot;turtle\&quot;\n#\n# Gives a menu tree like this:\n#  - fun\n#  - robot\n#    - pr2\n#    - turtle\n\n# ID is a number for each menu entry.  Must be unique within the\n# control, and should never be 0.\nuint32 id\n\n# ID of the parent of this menu entry, if it is a submenu.  If this\n# menu entry is a top-level entry, set parent_id to 0.\nuint32 parent_id\n\n# menu / entry title\nstring title\n\n# Arguments to command indicated by command_type (below)\nstring command\n\n# Command_type stores the type of response desired when this menu\n# entry is clicked.\n# FEEDBACK: send an InteractiveMarkerFeedback message with menu_entry_id set to this entry&apos;s id.\n# ROSRUN: execute \&quot;rosrun\&quot; with arguments given in the command field (above).\n# ROSLAUNCH: execute \&quot;roslaunch\&quot; with arguments given in the command field (above).\nuint8 FEEDBACK=0\nuint8 ROSRUN=1\nuint8 ROSLAUNCH=2\nuint8 command_type\n" comment="MenuEntry message." >
  <field name="id" type="unsigned int"  sourceType="uint32" comment="ID of the parent of this menu entry, if it is a submenu.  If this
 menu entry is a top-level entry, set parent_id to 0." />
  <field name="parent_id" type="unsigned int"  sourceType="uint32" comment="menu / entry title" />
  <field name="title" type="string"  sourceType="string" comment="Arguments to command indicated by command_type (below)" />
  <field name="command" type="string"  sourceType="string" comment="Command_type stores the type of response desired when this menu
 entry is clicked.
 FEEDBACK: send an InteractiveMarkerFeedback message with menu_entry_id set to this entry&apos;s id.
 ROSRUN: execute &quot;rosrun&quot; with arguments given in the command field (above).
 ROSLAUNCH: execute &quot;roslaunch&quot; with arguments given in the command field (above)." />
  <constant init="0" name="FEEDBACK" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="1" name="ROSRUN" type="unsigned char"  sourceType="uint8" comment="" />
  <constant init="2" name="ROSLAUNCH" type="unsigned char"  sourceType="uint8" comment="" />
  <field name="command_type" type="unsigned char"  sourceType="uint8" comment="" />
</class>

<dependency name="geometry_msgs_gencpp"/>
<dependency name="std_msgs_gencpp"/>
<dependency name="std_srvs_gencpp"/>

</classes>

<!--
 
  AUTOGENERATED FILE:   do not edit

  Generated by:         alex on alex-laptop, 2016-11-23 13:42:34 -0500
  From Template/Script: rosToXML.rb
 

-->
<classes library_name="std_msgs_gencpp" namespace="std_msgs" >
<!-- note: injecting the following classes for serialization support & test -->
<class name="RosTime" comment="core of ros time representation" publicDataMembers="true" generateNML="true" ros="true" rosDesc="rframe version of ros::Time" sourceIDL="ROS">
  <field name="sec" type="unsigned int" comment="seconds "/>
  <field name="nsec" type="unsigned int" comment="nano seconds"/>
</class>

<class name="RosDuration" comment="core of ros time representation" publicDataMembers="true" generateNML="true" ros="true" rosDesc="rframe version of ros::Duration" sourceIDL="ROS">
  <field name="sec" type="unsigned int" comment="seconds "/>
  <field name="nsec" type="unsigned int" comment="nano seconds"/>
</class>

<class name="HeaderTest" comment="testing of header serialization" publicDataMembers="true" ros="true" generateNML="new" rosDesc="header serialization test" sourceIDL="ROS">
  <field name="header" type="std_msgs::Header" comment="ros header"/>
  <field name="header2" type="std_msgs::Header" comment="ros header"/>
</class>
<!-- note: injection done -->

<class name="Bool" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="8b94c1b53db61fb6aed406028ad6332a" rosDesc="" comment="" >
  <field name="data" type="bool"  sourceType="bool" comment="" />
</class>

<class name="Byte" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="ad736a2e8818154c487bb80fe42ce43b" rosDesc="byte data\n" comment="" >
  <field name="data" type="char"  sourceType="byte" comment="" />
</class>

<class name="ByteMultiArray" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="70ea476cbcfd65ac2f68f3cda1e891fe" rosDesc="# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\nbyte[]            data          # array of data\n\n\n================================================================================\nMSG: std_msgs/MultiArrayLayout\n# The multiarray declares a generic multi-dimensional array of a\n# particular data type.  Dimensions are ordered from outer most\n# to inner most.\n\nMultiArrayDimension[] dim # Array of dimension properties\nuint32 data_offset        # padding elements at front of data\n\n# Accessors should ALWAYS be written in terms of dimension stride\n# and specified outer-most dimension first.\n# \n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n#\n# A standard, 3-channel 640x480 image with interleaved color channels\n# would be specified as:\n#\n# dim[0].label  = \&quot;height\&quot;\n# dim[0].size   = 480\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n# dim[1].label  = \&quot;width\&quot;\n# dim[1].size   = 640\n# dim[1].stride = 3*640 = 1920\n# dim[2].label  = \&quot;channel\&quot;\n# dim[2].size   = 3\n# dim[2].stride = 3\n#\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\n================================================================================\nMSG: std_msgs/MultiArrayDimension\nstring label   # label of given dimension\nuint32 size    # size of given dimension (in type units)\n" comment="Please look at the MultiArrayLayout message definition for
 documentation on all multiarrays." >
  <field name="layout" type="std_msgs::MultiArrayLayout"  sourceType="MultiArrayLayout" comment="specification of data layout" />
  <field name="data" type="vector(char)"  sourceType="byte" comment="array of data" />
</class>

<class name="Char" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="1bf77f25acecdedba0e224b162199717" rosDesc="" comment="" >
  <field name="data" type="unsigned char"  sourceType="char" comment="" />
</class>

<class name="ColorRGBA" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="a29a96539573343b1310c73607334b00" rosDesc="float32 r\nfloat32 g\nfloat32 b\nfloat32 a\n" comment="" >
  <field name="r" type="float"  sourceType="float32" comment="" />
  <field name="g" type="float"  sourceType="float32" comment="" />
  <field name="b" type="float"  sourceType="float32" comment="" />
  <field name="a" type="float"  sourceType="float32" comment="" />
</class>

<class name="Duration" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="3e286caf4241d664e55f3ad380e2ae46" rosDesc="duration data\n" comment="" >
  <field name="data" type="std_msgs::RosDuration"  sourceType="duration" comment="" />
</class>

<class name="Empty" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="d41d8cd98f00b204e9800998ecf8427e" rosDesc="" comment="" >
</class>

<class name="Float32" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="73fcbf46b49191e672908e50842a83d4" rosDesc="" comment="" >
  <field name="data" type="float"  sourceType="float32" comment="" />
</class>

<class name="Float32MultiArray" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="6a40e0ffa6a17a503ac3f8616991b1f6" rosDesc="# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\nfloat32[]         data          # array of data\n\n\n================================================================================\nMSG: std_msgs/MultiArrayLayout\n# The multiarray declares a generic multi-dimensional array of a\n# particular data type.  Dimensions are ordered from outer most\n# to inner most.\n\nMultiArrayDimension[] dim # Array of dimension properties\nuint32 data_offset        # padding elements at front of data\n\n# Accessors should ALWAYS be written in terms of dimension stride\n# and specified outer-most dimension first.\n# \n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n#\n# A standard, 3-channel 640x480 image with interleaved color channels\n# would be specified as:\n#\n# dim[0].label  = \&quot;height\&quot;\n# dim[0].size   = 480\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n# dim[1].label  = \&quot;width\&quot;\n# dim[1].size   = 640\n# dim[1].stride = 3*640 = 1920\n# dim[2].label  = \&quot;channel\&quot;\n# dim[2].size   = 3\n# dim[2].stride = 3\n#\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\n================================================================================\nMSG: std_msgs/MultiArrayDimension\nstring label   # label of given dimension\nuint32 size    # size of given dimension (in type units)\n" comment="Please look at the MultiArrayLayout message definition for
 documentation on all multiarrays." >
  <field name="layout" type="std_msgs::MultiArrayLayout"  sourceType="MultiArrayLayout" comment="specification of data layout" />
  <field name="data" type="vector(float)"  sourceType="float32" comment="array of data" />
</class>

<class name="Float64" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="fdb28210bfa9d7c91146260178d9a584" rosDesc="" comment="" >
  <field name="data" type="double"  sourceType="float64" comment="" />
</class>

<class name="Float64MultiArray" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="4b7d974086d4060e7db4613a7e6c3ba4" rosDesc="# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\nfloat64[]         data          # array of data\n\n\n================================================================================\nMSG: std_msgs/MultiArrayLayout\n# The multiarray declares a generic multi-dimensional array of a\n# particular data type.  Dimensions are ordered from outer most\n# to inner most.\n\nMultiArrayDimension[] dim # Array of dimension properties\nuint32 data_offset        # padding elements at front of data\n\n# Accessors should ALWAYS be written in terms of dimension stride\n# and specified outer-most dimension first.\n# \n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n#\n# A standard, 3-channel 640x480 image with interleaved color channels\n# would be specified as:\n#\n# dim[0].label  = \&quot;height\&quot;\n# dim[0].size   = 480\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n# dim[1].label  = \&quot;width\&quot;\n# dim[1].size   = 640\n# dim[1].stride = 3*640 = 1920\n# dim[2].label  = \&quot;channel\&quot;\n# dim[2].size   = 3\n# dim[2].stride = 3\n#\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\n================================================================================\nMSG: std_msgs/MultiArrayDimension\nstring label   # label of given dimension\nuint32 size    # size of given dimension (in type units)\n" comment="Please look at the MultiArrayLayout message definition for
 documentation on all multiarrays." >
  <field name="layout" type="std_msgs::MultiArrayLayout"  sourceType="MultiArrayLayout" comment="specification of data layout" />
  <field name="data" type="vector(double)"  sourceType="float64" comment="array of data" />
</class>

<class name="Header" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="2176decaecbce78abc3b96ef049fabed" rosDesc="# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n" comment="Standard metadata for higher-level stamped data types.
 This is generally used to communicate timestamped data 
 in a particular coordinate frame.
 
 sequence ID: consecutively increasing ID" >
  <field name="seq" type="unsigned int"  sourceType="uint32" comment="Two-integer timestamp that is expressed as:
 * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called &apos;secs&apos;)
 * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called &apos;nsecs&apos;)
 time-handling sugar is provided by the client library" />
  <field name="stamp" type="std_msgs::RosTime"  sourceType="time" comment="Frame this data is associated with
 0: no frame
 1: global frame" />
  <field name="frame_id" type="string"  sourceType="string" comment="" />
</class>

<class name="Int16" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="8524586e34fbd7cb1c08c5f5f1ca0e57" rosDesc="int16 data\n" comment="" >
  <field name="data" type="short int"  sourceType="int16" comment="" />
</class>

<class name="Int16MultiArray" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="d9338d7f523fcb692fae9d0a0e9f067c" rosDesc="# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\nint16[]           data          # array of data\n\n\n================================================================================\nMSG: std_msgs/MultiArrayLayout\n# The multiarray declares a generic multi-dimensional array of a\n# particular data type.  Dimensions are ordered from outer most\n# to inner most.\n\nMultiArrayDimension[] dim # Array of dimension properties\nuint32 data_offset        # padding elements at front of data\n\n# Accessors should ALWAYS be written in terms of dimension stride\n# and specified outer-most dimension first.\n# \n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n#\n# A standard, 3-channel 640x480 image with interleaved color channels\n# would be specified as:\n#\n# dim[0].label  = \&quot;height\&quot;\n# dim[0].size   = 480\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n# dim[1].label  = \&quot;width\&quot;\n# dim[1].size   = 640\n# dim[1].stride = 3*640 = 1920\n# dim[2].label  = \&quot;channel\&quot;\n# dim[2].size   = 3\n# dim[2].stride = 3\n#\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\n================================================================================\nMSG: std_msgs/MultiArrayDimension\nstring label   # label of given dimension\nuint32 size    # size of given dimension (in type units)\n" comment="Please look at the MultiArrayLayout message definition for
 documentation on all multiarrays." >
  <field name="layout" type="std_msgs::MultiArrayLayout"  sourceType="MultiArrayLayout" comment="specification of data layout" />
  <field name="data" type="vector(short int)"  sourceType="int16" comment="array of data" />
</class>

<class name="Int32" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="da5909fbe378aeaf85e547e830cc1bb7" rosDesc="" comment="" >
  <field name="data" type="int"  sourceType="int32" comment="" />
</class>

<class name="Int32MultiArray" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="1d99f79f8b325b44fee908053e9c945b" rosDesc="# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\nint32[]           data          # array of data\n\n\n================================================================================\nMSG: std_msgs/MultiArrayLayout\n# The multiarray declares a generic multi-dimensional array of a\n# particular data type.  Dimensions are ordered from outer most\n# to inner most.\n\nMultiArrayDimension[] dim # Array of dimension properties\nuint32 data_offset        # padding elements at front of data\n\n# Accessors should ALWAYS be written in terms of dimension stride\n# and specified outer-most dimension first.\n# \n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n#\n# A standard, 3-channel 640x480 image with interleaved color channels\n# would be specified as:\n#\n# dim[0].label  = \&quot;height\&quot;\n# dim[0].size   = 480\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n# dim[1].label  = \&quot;width\&quot;\n# dim[1].size   = 640\n# dim[1].stride = 3*640 = 1920\n# dim[2].label  = \&quot;channel\&quot;\n# dim[2].size   = 3\n# dim[2].stride = 3\n#\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\n================================================================================\nMSG: std_msgs/MultiArrayDimension\nstring label   # label of given dimension\nuint32 size    # size of given dimension (in type units)\n" comment="Please look at the MultiArrayLayout message definition for
 documentation on all multiarrays." >
  <field name="layout" type="std_msgs::MultiArrayLayout"  sourceType="MultiArrayLayout" comment="specification of data layout" />
  <field name="data" type="vector(int)"  sourceType="int32" comment="array of data" />
</class>

<class name="Int64" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="34add168574510e6e17f5d23ecc077ef" rosDesc="" comment="" >
  <field name="data" type="long long int"  sourceType="int64" comment="" />
</class>

<class name="Int64MultiArray" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="54865aa6c65be0448113a2afc6a49270" rosDesc="# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\nint64[]           data          # array of data\n\n\n================================================================================\nMSG: std_msgs/MultiArrayLayout\n# The multiarray declares a generic multi-dimensional array of a\n# particular data type.  Dimensions are ordered from outer most\n# to inner most.\n\nMultiArrayDimension[] dim # Array of dimension properties\nuint32 data_offset        # padding elements at front of data\n\n# Accessors should ALWAYS be written in terms of dimension stride\n# and specified outer-most dimension first.\n# \n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n#\n# A standard, 3-channel 640x480 image with interleaved color channels\n# would be specified as:\n#\n# dim[0].label  = \&quot;height\&quot;\n# dim[0].size   = 480\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n# dim[1].label  = \&quot;width\&quot;\n# dim[1].size   = 640\n# dim[1].stride = 3*640 = 1920\n# dim[2].label  = \&quot;channel\&quot;\n# dim[2].size   = 3\n# dim[2].stride = 3\n#\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\n================================================================================\nMSG: std_msgs/MultiArrayDimension\nstring label   # label of given dimension\nuint32 size    # size of given dimension (in type units)\n" comment="Please look at the MultiArrayLayout message definition for
 documentation on all multiarrays." >
  <field name="layout" type="std_msgs::MultiArrayLayout"  sourceType="MultiArrayLayout" comment="specification of data layout" />
  <field name="data" type="vector(long long int)"  sourceType="int64" comment="array of data" />
</class>

<class name="Int8" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="27ffa0c9c4b8fb8492252bcad9e5c57b" rosDesc="int8 data\n" comment="" >
  <field name="data" type="char"  sourceType="int8" comment="" />
</class>

<class name="Int8MultiArray" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="d7c1af35a1b4781bbe79e03dd94b7c13" rosDesc="# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\nint8[]            data          # array of data\n\n\n================================================================================\nMSG: std_msgs/MultiArrayLayout\n# The multiarray declares a generic multi-dimensional array of a\n# particular data type.  Dimensions are ordered from outer most\n# to inner most.\n\nMultiArrayDimension[] dim # Array of dimension properties\nuint32 data_offset        # padding elements at front of data\n\n# Accessors should ALWAYS be written in terms of dimension stride\n# and specified outer-most dimension first.\n# \n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n#\n# A standard, 3-channel 640x480 image with interleaved color channels\n# would be specified as:\n#\n# dim[0].label  = \&quot;height\&quot;\n# dim[0].size   = 480\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n# dim[1].label  = \&quot;width\&quot;\n# dim[1].size   = 640\n# dim[1].stride = 3*640 = 1920\n# dim[2].label  = \&quot;channel\&quot;\n# dim[2].size   = 3\n# dim[2].stride = 3\n#\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\n================================================================================\nMSG: std_msgs/MultiArrayDimension\nstring label   # label of given dimension\nuint32 size    # size of given dimension (in type units)\n" comment="Please look at the MultiArrayLayout message definition for
 documentation on all multiarrays." >
  <field name="layout" type="std_msgs::MultiArrayLayout"  sourceType="MultiArrayLayout" comment="specification of data layout" />
  <field name="data" type="vector(char)"  sourceType="int8" comment="array of data" />
</class>

<class name="MultiArrayDimension" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="4cd0c83a8683deae40ecdac60e53bfa8" rosDesc="string label   # label of given dimension\nuint32 size    # size of given dimension (in type units)\n" comment="" >
  <field name="label" type="string"  sourceType="string" comment="label of given dimension" />
  <field name="size" type="unsigned int"  sourceType="uint32" comment="size of given dimension (in type units)" />
  <field name="stride" type="unsigned int"  sourceType="uint32" comment="stride of given dimension" />
</class>

<class name="MultiArrayLayout" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="0fed2a11c13e11c5571b4e2a995a91a3" rosDesc="# The multiarray declares a generic multi-dimensional array of a\n# particular data type.  Dimensions are ordered from outer most\n# to inner most.\n\nMultiArrayDimension[] dim # Array of dimension properties\nuint32 data_offset        # padding elements at front of data\n\n# Accessors should ALWAYS be written in terms of dimension stride\n# and specified outer-most dimension first.\n# \n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n#\n# A standard, 3-channel 640x480 image with interleaved color channels\n# would be specified as:\n#\n# dim[0].label  = \&quot;height\&quot;\n# dim[0].size   = 480\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n# dim[1].label  = \&quot;width\&quot;\n# dim[1].size   = 640\n# dim[1].stride = 3*640 = 1920\n# dim[2].label  = \&quot;channel\&quot;\n# dim[2].size   = 3\n# dim[2].stride = 3\n#\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\n================================================================================\nMSG: std_msgs/MultiArrayDimension\nstring label   # label of given dimension\nuint32 size    # size of given dimension (in type units)\n" comment="The multiarray declares a generic multi-dimensional array of a
 particular data type.  Dimensions are ordered from outer most
 to inner most." >
  <field name="dim" type="vector(std_msgs::MultiArrayDimension)"  sourceType="MultiArrayDimension" comment="Array of dimension properties" />
  <field name="data_offset" type="unsigned int"  sourceType="uint32" comment="padding elements at front of data
 Accessors should ALWAYS be written in terms of dimension stride
 and specified outer-most dimension first.
 
 multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]

 A standard, 3-channel 640x480 image with interleaved color channels
 would be specified as:

 dim[0].label  = &quot;height&quot;
 dim[0].size   = 480
 dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
 dim[1].label  = &quot;width&quot;
 dim[1].size   = 640
 dim[1].stride = 3*640 = 1920
 dim[2].label  = &quot;channel&quot;
 dim[2].size   = 3
 dim[2].stride = 3

 multiarray(i,j,k) refers to the ith row, jth column, and kth channel." />
</class>

<class name="String" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="992ce8a1687cec8c8bd883ec73ca41d1" rosDesc="string data\n" comment="" >
  <field name="data" type="string"  sourceType="string" comment="" />
</class>

<class name="Time" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="cd7166c74c552c311fbcc2fe5a7bc289" rosDesc="time data\n" comment="" >
  <field name="data" type="std_msgs::RosTime"  sourceType="time" comment="" />
</class>

<class name="UInt16" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="1df79edf208b629fe6b81923a544552d" rosDesc="uint16 data\n" comment="" >
  <field name="data" type="unsigned short int"  sourceType="uint16" comment="" />
</class>

<class name="UInt16MultiArray" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="52f264f1c973c4b73790d384c6cb4484" rosDesc="# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\nuint16[]            data        # array of data\n\n\n================================================================================\nMSG: std_msgs/MultiArrayLayout\n# The multiarray declares a generic multi-dimensional array of a\n# particular data type.  Dimensions are ordered from outer most\n# to inner most.\n\nMultiArrayDimension[] dim # Array of dimension properties\nuint32 data_offset        # padding elements at front of data\n\n# Accessors should ALWAYS be written in terms of dimension stride\n# and specified outer-most dimension first.\n# \n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n#\n# A standard, 3-channel 640x480 image with interleaved color channels\n# would be specified as:\n#\n# dim[0].label  = \&quot;height\&quot;\n# dim[0].size   = 480\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n# dim[1].label  = \&quot;width\&quot;\n# dim[1].size   = 640\n# dim[1].stride = 3*640 = 1920\n# dim[2].label  = \&quot;channel\&quot;\n# dim[2].size   = 3\n# dim[2].stride = 3\n#\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\n================================================================================\nMSG: std_msgs/MultiArrayDimension\nstring label   # label of given dimension\nuint32 size    # size of given dimension (in type units)\n" comment="Please look at the MultiArrayLayout message definition for
 documentation on all multiarrays." >
  <field name="layout" type="std_msgs::MultiArrayLayout"  sourceType="MultiArrayLayout" comment="specification of data layout" />
  <field name="data" type="vector(unsigned short int)"  sourceType="uint16" comment="array of data" />
</class>

<class name="UInt32" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="304a39449588c7f8ce2df6e8001c5fce" rosDesc="" comment="" >
  <field name="data" type="unsigned int"  sourceType="uint32" comment="" />
</class>

<class name="UInt32MultiArray" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="4d6a180abc9be191b96a7eda6c8a233d" rosDesc="# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\nuint32[]          data          # array of data\n\n\n================================================================================\nMSG: std_msgs/MultiArrayLayout\n# The multiarray declares a generic multi-dimensional array of a\n# particular data type.  Dimensions are ordered from outer most\n# to inner most.\n\nMultiArrayDimension[] dim # Array of dimension properties\nuint32 data_offset        # padding elements at front of data\n\n# Accessors should ALWAYS be written in terms of dimension stride\n# and specified outer-most dimension first.\n# \n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n#\n# A standard, 3-channel 640x480 image with interleaved color channels\n# would be specified as:\n#\n# dim[0].label  = \&quot;height\&quot;\n# dim[0].size   = 480\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n# dim[1].label  = \&quot;width\&quot;\n# dim[1].size   = 640\n# dim[1].stride = 3*640 = 1920\n# dim[2].label  = \&quot;channel\&quot;\n# dim[2].size   = 3\n# dim[2].stride = 3\n#\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\n================================================================================\nMSG: std_msgs/MultiArrayDimension\nstring label   # label of given dimension\nuint32 size    # size of given dimension (in type units)\n" comment="Please look at the MultiArrayLayout message definition for
 documentation on all multiarrays." >
  <field name="layout" type="std_msgs::MultiArrayLayout"  sourceType="MultiArrayLayout" comment="specification of data layout" />
  <field name="data" type="vector(unsigned int)"  sourceType="uint32" comment="array of data" />
</class>

<class name="UInt64" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="1b2a79973e8bf53d7b53acb71299cb57" rosDesc="" comment="" >
  <field name="data" type="unsigned long long int"  sourceType="uint64" comment="" />
</class>

<class name="UInt64MultiArray" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="6088f127afb1d6c72927aa1247e945af" rosDesc="# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\nuint64[]          data          # array of data\n\n\n================================================================================\nMSG: std_msgs/MultiArrayLayout\n# The multiarray declares a generic multi-dimensional array of a\n# particular data type.  Dimensions are ordered from outer most\n# to inner most.\n\nMultiArrayDimension[] dim # Array of dimension properties\nuint32 data_offset        # padding elements at front of data\n\n# Accessors should ALWAYS be written in terms of dimension stride\n# and specified outer-most dimension first.\n# \n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n#\n# A standard, 3-channel 640x480 image with interleaved color channels\n# would be specified as:\n#\n# dim[0].label  = \&quot;height\&quot;\n# dim[0].size   = 480\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n# dim[1].label  = \&quot;width\&quot;\n# dim[1].size   = 640\n# dim[1].stride = 3*640 = 1920\n# dim[2].label  = \&quot;channel\&quot;\n# dim[2].size   = 3\n# dim[2].stride = 3\n#\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\n================================================================================\nMSG: std_msgs/MultiArrayDimension\nstring label   # label of given dimension\nuint32 size    # size of given dimension (in type units)\n" comment="Please look at the MultiArrayLayout message definition for
 documentation on all multiarrays." >
  <field name="layout" type="std_msgs::MultiArrayLayout"  sourceType="MultiArrayLayout" comment="specification of data layout" />
  <field name="data" type="vector(unsigned long long int)"  sourceType="uint64" comment="array of data" />
</class>

<class name="UInt8" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="7c8164229e7d2c17eb95e9231617fdee" rosDesc="uint8 data\n" comment="" >
  <field name="data" type="unsigned char"  sourceType="uint8" comment="" />
</class>

<class name="UInt8MultiArray" publicDataMembers="true" sourceIDL="ROS" ros="true" rosMD5="82373f1612381bb6ee473b5cd6f5d89c" rosDesc="# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\nuint8[]           data          # array of data\n\n\n================================================================================\nMSG: std_msgs/MultiArrayLayout\n# The multiarray declares a generic multi-dimensional array of a\n# particular data type.  Dimensions are ordered from outer most\n# to inner most.\n\nMultiArrayDimension[] dim # Array of dimension properties\nuint32 data_offset        # padding elements at front of data\n\n# Accessors should ALWAYS be written in terms of dimension stride\n# and specified outer-most dimension first.\n# \n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n#\n# A standard, 3-channel 640x480 image with interleaved color channels\n# would be specified as:\n#\n# dim[0].label  = \&quot;height\&quot;\n# dim[0].size   = 480\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n# dim[1].label  = \&quot;width\&quot;\n# dim[1].size   = 640\n# dim[1].stride = 3*640 = 1920\n# dim[2].label  = \&quot;channel\&quot;\n# dim[2].size   = 3\n# dim[2].stride = 3\n#\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\n================================================================================\nMSG: std_msgs/MultiArrayDimension\nstring label   # label of given dimension\nuint32 size    # size of given dimension (in type units)\n" comment="Please look at the MultiArrayLayout message definition for
 documentation on all multiarrays." >
  <field name="layout" type="std_msgs::MultiArrayLayout"  sourceType="MultiArrayLayout" comment="specification of data layout" />
  <field name="data" type="vector(unsigned char)"  sourceType="uint8" comment="array of data" />
</class>


</classes>

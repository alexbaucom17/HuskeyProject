// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:51 -0500
//  From Template/Script: data_templates/ROSTemplate.cpp.rb
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include "nav_msgs_gencpp_ROS.h"
#include <common/Log.h>
#include <common/DataTypeInfo.h>

using namespace std;
using namespace nav_msgs;

rframe::ROSMessageFactory * ROS_nav_msgs_gencppfactory = NULL;

extern "C"
{
    /** library access method */
    rframe::MessageFactoryBase * AllocateMessageFactory()
    {
        ROS_nav_msgs_gencppfactory = new nav_msgs_gencppROSMessageFactory();

        return ROS_nav_msgs_gencppfactory;
    };
}

rframe::ROSMessageFactory * nav_msgs::allocate_nav_msgs_gencpp()
{
    ROS_nav_msgs_gencppfactory = new nav_msgs_gencppROSMessageFactory();
    return ROS_nav_msgs_gencppfactory;
};

nav_msgs_gencppROSMessageFactory::nav_msgs_gencppROSMessageFactory()
{
    name("nav_msgs_gencpp");
    // use constructor to register data types
    nav_msgs::registerLibrary();
}

nav_msgs_gencppROSMessageFactory::~nav_msgs_gencppROSMessageFactory()
{
}

int nav_msgs_gencppROSMessageFactory::dataType(ros::SerializedMessage & msg)
{
    return msg.message_type;
}

void nav_msgs_gencppROSMessageFactory::dataTypes(vector<DataTypeInfo> & ids)
{
    DataTypeInfo info;

    ids.clear();

    info.id(GetMapAction::ID);
    info.name(GetMapAction::DATA_TYPE_FULL_NAME);
    info.hashKey(GetMapAction::DATA_VERSION);
    info.md5Key(GetMapAction::VERSION_MD5);
    info.xmlSource(GetMapAction::XML_SOURCE);
    info.flat(GetMapAction::dataTypeFlat());
    ids.push_back(info);

    info.id(GetMapActionFeedback::ID);
    info.name(GetMapActionFeedback::DATA_TYPE_FULL_NAME);
    info.hashKey(GetMapActionFeedback::DATA_VERSION);
    info.md5Key(GetMapActionFeedback::VERSION_MD5);
    info.xmlSource(GetMapActionFeedback::XML_SOURCE);
    info.flat(GetMapActionFeedback::dataTypeFlat());
    ids.push_back(info);

    info.id(GetMapActionGoal::ID);
    info.name(GetMapActionGoal::DATA_TYPE_FULL_NAME);
    info.hashKey(GetMapActionGoal::DATA_VERSION);
    info.md5Key(GetMapActionGoal::VERSION_MD5);
    info.xmlSource(GetMapActionGoal::XML_SOURCE);
    info.flat(GetMapActionGoal::dataTypeFlat());
    ids.push_back(info);

    info.id(GetMapActionResult::ID);
    info.name(GetMapActionResult::DATA_TYPE_FULL_NAME);
    info.hashKey(GetMapActionResult::DATA_VERSION);
    info.md5Key(GetMapActionResult::VERSION_MD5);
    info.xmlSource(GetMapActionResult::XML_SOURCE);
    info.flat(GetMapActionResult::dataTypeFlat());
    ids.push_back(info);

    info.id(GetMapFeedback::ID);
    info.name(GetMapFeedback::DATA_TYPE_FULL_NAME);
    info.hashKey(GetMapFeedback::DATA_VERSION);
    info.md5Key(GetMapFeedback::VERSION_MD5);
    info.xmlSource(GetMapFeedback::XML_SOURCE);
    info.flat(GetMapFeedback::dataTypeFlat());
    ids.push_back(info);

    info.id(GetMapGoal::ID);
    info.name(GetMapGoal::DATA_TYPE_FULL_NAME);
    info.hashKey(GetMapGoal::DATA_VERSION);
    info.md5Key(GetMapGoal::VERSION_MD5);
    info.xmlSource(GetMapGoal::XML_SOURCE);
    info.flat(GetMapGoal::dataTypeFlat());
    ids.push_back(info);

    info.id(GetMapResult::ID);
    info.name(GetMapResult::DATA_TYPE_FULL_NAME);
    info.hashKey(GetMapResult::DATA_VERSION);
    info.md5Key(GetMapResult::VERSION_MD5);
    info.xmlSource(GetMapResult::XML_SOURCE);
    info.flat(GetMapResult::dataTypeFlat());
    ids.push_back(info);

    info.id(GridCells::ID);
    info.name(GridCells::DATA_TYPE_FULL_NAME);
    info.hashKey(GridCells::DATA_VERSION);
    info.md5Key(GridCells::VERSION_MD5);
    info.xmlSource(GridCells::XML_SOURCE);
    info.flat(GridCells::dataTypeFlat());
    ids.push_back(info);

    info.id(MapMetaData::ID);
    info.name(MapMetaData::DATA_TYPE_FULL_NAME);
    info.hashKey(MapMetaData::DATA_VERSION);
    info.md5Key(MapMetaData::VERSION_MD5);
    info.xmlSource(MapMetaData::XML_SOURCE);
    info.flat(MapMetaData::dataTypeFlat());
    ids.push_back(info);

    info.id(OccupancyGrid::ID);
    info.name(OccupancyGrid::DATA_TYPE_FULL_NAME);
    info.hashKey(OccupancyGrid::DATA_VERSION);
    info.md5Key(OccupancyGrid::VERSION_MD5);
    info.xmlSource(OccupancyGrid::XML_SOURCE);
    info.flat(OccupancyGrid::dataTypeFlat());
    ids.push_back(info);

    info.id(Odometry::ID);
    info.name(Odometry::DATA_TYPE_FULL_NAME);
    info.hashKey(Odometry::DATA_VERSION);
    info.md5Key(Odometry::VERSION_MD5);
    info.xmlSource(Odometry::XML_SOURCE);
    info.flat(Odometry::dataTypeFlat());
    ids.push_back(info);

    info.id(Path::ID);
    info.name(Path::DATA_TYPE_FULL_NAME);
    info.hashKey(Path::DATA_VERSION);
    info.md5Key(Path::VERSION_MD5);
    info.xmlSource(Path::XML_SOURCE);
    info.flat(Path::dataTypeFlat());
    ids.push_back(info);

    info.id(GetMapRequest::ID);
    info.name(GetMapRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(GetMapRequest::DATA_VERSION);
    info.md5Key(GetMapRequest::VERSION_MD5);
    info.xmlSource(GetMapRequest::XML_SOURCE);
    info.flat(GetMapRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(GetMapResponse::ID);
    info.name(GetMapResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(GetMapResponse::DATA_VERSION);
    info.md5Key(GetMapResponse::VERSION_MD5);
    info.xmlSource(GetMapResponse::XML_SOURCE);
    info.flat(GetMapResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(GetMap::ID);
    info.name(GetMap::DATA_TYPE_FULL_NAME);
    info.hashKey(GetMap::DATA_VERSION);
    info.md5Key(GetMap::VERSION_MD5);
    info.xmlSource(GetMap::XML_SOURCE);
    info.flat(GetMap::dataTypeFlat());
    ids.push_back(info);

    info.id(GetPlanRequest::ID);
    info.name(GetPlanRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(GetPlanRequest::DATA_VERSION);
    info.md5Key(GetPlanRequest::VERSION_MD5);
    info.xmlSource(GetPlanRequest::XML_SOURCE);
    info.flat(GetPlanRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(GetPlanResponse::ID);
    info.name(GetPlanResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(GetPlanResponse::DATA_VERSION);
    info.md5Key(GetPlanResponse::VERSION_MD5);
    info.xmlSource(GetPlanResponse::XML_SOURCE);
    info.flat(GetPlanResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(GetPlan::ID);
    info.name(GetPlan::DATA_TYPE_FULL_NAME);
    info.hashKey(GetPlan::DATA_VERSION);
    info.md5Key(GetPlan::VERSION_MD5);
    info.xmlSource(GetPlan::XML_SOURCE);
    info.flat(GetPlan::dataTypeFlat());
    ids.push_back(info);

    info.id(SetMapRequest::ID);
    info.name(SetMapRequest::DATA_TYPE_FULL_NAME);
    info.hashKey(SetMapRequest::DATA_VERSION);
    info.md5Key(SetMapRequest::VERSION_MD5);
    info.xmlSource(SetMapRequest::XML_SOURCE);
    info.flat(SetMapRequest::dataTypeFlat());
    ids.push_back(info);

    info.id(SetMapResponse::ID);
    info.name(SetMapResponse::DATA_TYPE_FULL_NAME);
    info.hashKey(SetMapResponse::DATA_VERSION);
    info.md5Key(SetMapResponse::VERSION_MD5);
    info.xmlSource(SetMapResponse::XML_SOURCE);
    info.flat(SetMapResponse::dataTypeFlat());
    ids.push_back(info);

    info.id(SetMap::ID);
    info.name(SetMap::DATA_TYPE_FULL_NAME);
    info.hashKey(SetMap::DATA_VERSION);
    info.md5Key(SetMap::VERSION_MD5);
    info.xmlSource(SetMap::XML_SOURCE);
    info.flat(SetMap::dataTypeFlat());
    ids.push_back(info);

}

int nav_msgs_gencppROSMessageFactory::typeName(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case GetMapAction::ID:
        {
            str = "nav_msgs/GetMapAction";
            break;
        }
        case GetMapActionFeedback::ID:
        {
            str = "nav_msgs/GetMapActionFeedback";
            break;
        }
        case GetMapActionGoal::ID:
        {
            str = "nav_msgs/GetMapActionGoal";
            break;
        }
        case GetMapActionResult::ID:
        {
            str = "nav_msgs/GetMapActionResult";
            break;
        }
        case GetMapFeedback::ID:
        {
            str = "nav_msgs/GetMapFeedback";
            break;
        }
        case GetMapGoal::ID:
        {
            str = "nav_msgs/GetMapGoal";
            break;
        }
        case GetMapResult::ID:
        {
            str = "nav_msgs/GetMapResult";
            break;
        }
        case GridCells::ID:
        {
            str = "nav_msgs/GridCells";
            break;
        }
        case MapMetaData::ID:
        {
            str = "nav_msgs/MapMetaData";
            break;
        }
        case OccupancyGrid::ID:
        {
            str = "nav_msgs/OccupancyGrid";
            break;
        }
        case Odometry::ID:
        {
            str = "nav_msgs/Odometry";
            break;
        }
        case Path::ID:
        {
            str = "nav_msgs/Path";
            break;
        }
        case GetMapRequest::ID:
        {
            str = "nav_msgs/GetMapRequest";
            break;
        }
        case GetMapResponse::ID:
        {
            str = "nav_msgs/GetMapResponse";
            break;
        }
        case GetMap::ID:
        {
            str = "nav_msgs/GetMap";
            break;
        }
        case GetPlanRequest::ID:
        {
            str = "nav_msgs/GetPlanRequest";
            break;
        }
        case GetPlanResponse::ID:
        {
            str = "nav_msgs/GetPlanResponse";
            break;
        }
        case GetPlan::ID:
        {
            str = "nav_msgs/GetPlan";
            break;
        }
        case SetMapRequest::ID:
        {
            str = "nav_msgs/SetMapRequest";
            break;
        }
        case SetMapResponse::ID:
        {
            str = "nav_msgs/SetMapResponse";
            break;
        }
        case SetMap::ID:
        {
            str = "nav_msgs/SetMap";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int nav_msgs_gencppROSMessageFactory::desc(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case GetMapAction::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nGetMapActionGoal action_goal\nGetMapActionResult action_result\nGetMapActionFeedback action_feedback\n\n================================================================================\nMSG: nav_msgs/GetMapActionGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nGetMapGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: nav_msgs/GetMapGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n# Get the map as a nav_msgs/OccupancyGrid\n\n================================================================================\nMSG: nav_msgs/GetMapActionResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nGetMapResult result\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: nav_msgs/GetMapResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nnav_msgs/OccupancyGrid map\n\n================================================================================\nMSG: nav_msgs/OccupancyGrid\n# This represents a 2-D grid map, in which each cell represents the probability of\n# occupancy.\n\nHeader header \n\n#MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0).  Occupancy\n# probabilities are in the range [0,100].  Unknown is -1.\nint8[] data\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characterists of the OccupancyGrid\n\n# The time at which the map was loaded\ntime map_load_time\n# The map resolution [m/cell]\nfloat32 resolution\n# Map width [cells]\nuint32 width\n# Map height [cells]\nuint32 height\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# cell (0,0) in the map.\ngeometry_msgs/Pose origin\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: nav_msgs/GetMapActionFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nGetMapFeedback feedback\n\n================================================================================\nMSG: nav_msgs/GetMapFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n# no feedback\n";
            break;
        }
        case GetMapActionFeedback::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nGetMapFeedback feedback\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: nav_msgs/GetMapFeedback\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n# no feedback\n";
            break;
        }
        case GetMapActionGoal::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalID goal_id\nGetMapGoal goal\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: nav_msgs/GetMapGoal\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n# Get the map as a nav_msgs/OccupancyGrid\n";
            break;
        }
        case GetMapActionResult::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\nHeader header\nactionlib_msgs/GoalStatus status\nGetMapResult result\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: actionlib_msgs/GoalStatus\nGoalID goal_id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State)\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State)\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State)\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n                            #    but the action server has not yet confirmed that the goal is canceled\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State)\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n                            #    sent over the wire by an action server\n\n#Allow for the user to associate a string with GoalStatus for debugging\nstring text\n\n\n================================================================================\nMSG: actionlib_msgs/GoalID\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\ntime stamp\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id\n\n\n================================================================================\nMSG: nav_msgs/GetMapResult\n# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nnav_msgs/OccupancyGrid map\n\n================================================================================\nMSG: nav_msgs/OccupancyGrid\n# This represents a 2-D grid map, in which each cell represents the probability of\n# occupancy.\n\nHeader header \n\n#MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0).  Occupancy\n# probabilities are in the range [0,100].  Unknown is -1.\nint8[] data\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characterists of the OccupancyGrid\n\n# The time at which the map was loaded\ntime map_load_time\n# The map resolution [m/cell]\nfloat32 resolution\n# Map width [cells]\nuint32 width\n# Map height [cells]\nuint32 height\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# cell (0,0) in the map.\ngeometry_msgs/Pose origin\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n";
            break;
        }
        case GetMapFeedback::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n# no feedback\n";
            break;
        }
        case GetMapGoal::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n# Get the map as a nav_msgs/OccupancyGrid\n";
            break;
        }
        case GetMapResult::ID:
        {
            str = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\nnav_msgs/OccupancyGrid map\n\n================================================================================\nMSG: nav_msgs/OccupancyGrid\n# This represents a 2-D grid map, in which each cell represents the probability of\n# occupancy.\n\nHeader header \n\n#MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0).  Occupancy\n# probabilities are in the range [0,100].  Unknown is -1.\nint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characterists of the OccupancyGrid\n\n# The time at which the map was loaded\ntime map_load_time\n# The map resolution [m/cell]\nfloat32 resolution\n# Map width [cells]\nuint32 width\n# Map height [cells]\nuint32 height\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# cell (0,0) in the map.\ngeometry_msgs/Pose origin\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n";
            break;
        }
        case GridCells::ID:
        {
            str = "#an array of cells in a 2D grid\nHeader header\nfloat32 cell_width\nfloat32 cell_height\ngeometry_msgs/Point[] cells\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n";
            break;
        }
        case MapMetaData::ID:
        {
            str = "# This hold basic information about the characterists of the OccupancyGrid\n\n# The time at which the map was loaded\ntime map_load_time\n# The map resolution [m/cell]\nfloat32 resolution\n# Map width [cells]\nuint32 width\n# Map height [cells]\nuint32 height\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# cell (0,0) in the map.\ngeometry_msgs/Pose origin\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n";
            break;
        }
        case OccupancyGrid::ID:
        {
            str = "# This represents a 2-D grid map, in which each cell represents the probability of\n# occupancy.\n\nHeader header \n\n#MetaData for the map\nMapMetaData info\n\n# The map data, in row-major order, starting with (0,0).  Occupancy\n# probabilities are in the range [0,100].  Unknown is -1.\nint8[] data\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: nav_msgs/MapMetaData\n# This hold basic information about the characterists of the OccupancyGrid\n\n# The time at which the map was loaded\ntime map_load_time\n# The map resolution [m/cell]\nfloat32 resolution\n# Map width [cells]\nuint32 width\n# Map height [cells]\nuint32 height\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# cell (0,0) in the map.\ngeometry_msgs/Pose origin\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n";
            break;
        }
        case Odometry::ID:
        {
            str = "# This represents an estimate of a position and velocity in free space.  \n# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n# The twist in this message should be specified in the coordinate frame given by the child_frame_id\nHeader header\nstring child_frame_id\ngeometry_msgs/PoseWithCovariance pose\ngeometry_msgs/TwistWithCovariance twist\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/PoseWithCovariance\n# This represents a pose in free space with uncertainty.\n\nPose pose\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n\n================================================================================\nMSG: geometry_msgs/TwistWithCovariance\n# This expresses velocity in free space with uncertainty.\n\nTwist twist\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance\n\n================================================================================\nMSG: geometry_msgs/Twist\n# This expresses velocity in free space broken into its linear and angular parts.\nVector3  linear\nVector3  angular\n\n================================================================================\nMSG: geometry_msgs/Vector3\n# This represents a vector in free space. \n# It is only meant to represent a direction. Therefore, it does not\n# make sense to apply a translation to it (e.g., when applying a \n# generic rigid transformation to a Vector3, tf2 will only apply the\n# rotation). If you want your data to be translatable too, use the\n# geometry_msgs/Point message instead.\n\nfloat64 x\nfloat64 y\n";
            break;
        }
        case Path::ID:
        {
            str = "#An array of poses that represents a Path for a robot to follow\nHeader header\ngeometry_msgs/PoseStamped[] poses\n\n================================================================================\nMSG: std_msgs/Header\n# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data \n# in a particular coordinate frame.\n# \n# sequence ID: consecutively increasing ID \nuint32 seq\n#Two-integer timestamp that is expressed as:\n# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n# time-handling sugar is provided by the client library\ntime stamp\n#Frame this data is associated with\n# 0: no frame\n# 1: global frame\nstring frame_id\n\n================================================================================\nMSG: geometry_msgs/PoseStamped\n# A Pose with reference coordinate frame and timestamp\nHeader header\nPose pose\n\n================================================================================\nMSG: geometry_msgs/Pose\n# A representation of pose in free space, composed of position and orientation. \nPoint position\nQuaternion orientation\n\n================================================================================\nMSG: geometry_msgs/Point\n# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z\n\n================================================================================\nMSG: geometry_msgs/Quaternion\n# This represents an orientation in free space in quaternion form.\n\nfloat64 x\nfloat64 y\nfloat64 z\nfloat64 w\n";
            break;
        }
        case GetMapRequest::ID:
        {
            str = GetMapRequest::XML_SOURCE;
            break;
        }
        case GetMapResponse::ID:
        {
            str = GetMapResponse::XML_SOURCE;
            break;
        }
        case GetMap::ID:
        {
            str = GetMap::XML_SOURCE;
            break;
        }
        case GetPlanRequest::ID:
        {
            str = GetPlanRequest::XML_SOURCE;
            break;
        }
        case GetPlanResponse::ID:
        {
            str = GetPlanResponse::XML_SOURCE;
            break;
        }
        case GetPlan::ID:
        {
            str = GetPlan::XML_SOURCE;
            break;
        }
        case SetMapRequest::ID:
        {
            str = SetMapRequest::XML_SOURCE;
            break;
        }
        case SetMapResponse::ID:
        {
            str = SetMapResponse::XML_SOURCE;
            break;
        }
        case SetMap::ID:
        {
            str = SetMap::XML_SOURCE;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int nav_msgs_gencppROSMessageFactory::md5String(std::string & str, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case GetMapAction::ID:
        {
            str = "e611ad23fbf237c031b7536416dc7cd7";
            break;
        }
        case GetMapActionFeedback::ID:
        {
            str = "aae20e09065c3809e8a8e87c4c8953fd";
            break;
        }
        case GetMapActionGoal::ID:
        {
            str = "4b30be6cd12b9e72826df56b481f40e0";
            break;
        }
        case GetMapActionResult::ID:
        {
            str = "ac66e5b9a79bb4bbd33dab245236c892";
            break;
        }
        case GetMapFeedback::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case GetMapGoal::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case GetMapResult::ID:
        {
            str = "6cdd0a18e0aff5b0a3ca2326a89b54ff";
            break;
        }
        case GridCells::ID:
        {
            str = "b9e4f5df6d28e272ebde00a3994830f5";
            break;
        }
        case MapMetaData::ID:
        {
            str = "10cfc8a2818024d3248802c00c95f11b";
            break;
        }
        case OccupancyGrid::ID:
        {
            str = "3381f2d731d4076ec5c71b0759edbe4e";
            break;
        }
        case Odometry::ID:
        {
            str = "cd5e73d190d741a2f92e81eda573aca7";
            break;
        }
        case Path::ID:
        {
            str = "6227e2b7e9cce15051f669a5e197bbf7";
            break;
        }
        case GetMapRequest::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case GetMapResponse::ID:
        {
            str = "6cdd0a18e0aff5b0a3ca2326a89b54ff";
            break;
        }
        case GetMap::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case GetPlanRequest::ID:
        {
            str = "e25a43e0752bcca599a8c2eef8282df8";
            break;
        }
        case GetPlanResponse::ID:
        {
            str = "0002bc113c0259d71f6cf8cbc9430e18";
            break;
        }
        case GetPlan::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        case SetMapRequest::ID:
        {
            str = "91149a20d7be299b87c340df8cc94fd4";
            break;
        }
        case SetMapResponse::ID:
        {
            str = "358e233cde0c8a8bcfea4ce193f8fc15";
            break;
        }
        case SetMap::ID:
        {
            str = "d41d8cd98f00b204e9800998ecf8427e";
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int nav_msgs_gencppROSMessageFactory::md5(unsigned long long & highOrder, unsigned long long & lowOrder, rframe::ID_TYPE id)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    {   
        case GetMapAction::ID:
        {   
		    highOrder = 0xe611ad23fbf237c0ULL;
            lowOrder = 0x31b7536416dc7cd7ULL;
            break;
        }
        case GetMapActionFeedback::ID:
        {   
		    highOrder = 0xaae20e09065c3809ULL;
            lowOrder = 0xe8a8e87c4c8953fdULL;
            break;
        }
        case GetMapActionGoal::ID:
        {   
		    highOrder = 0x4b30be6cd12b9e72ULL;
            lowOrder = 0x826df56b481f40e0ULL;
            break;
        }
        case GetMapActionResult::ID:
        {   
		    highOrder = 0xac66e5b9a79bb4bbULL;
            lowOrder = 0xd33dab245236c892ULL;
            break;
        }
        case GetMapFeedback::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case GetMapGoal::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case GetMapResult::ID:
        {   
		    highOrder = 0x6cdd0a18e0aff5b0ULL;
            lowOrder = 0xa3ca2326a89b54ffULL;
            break;
        }
        case GridCells::ID:
        {   
		    highOrder = 0xb9e4f5df6d28e272ULL;
            lowOrder = 0xebde00a3994830f5ULL;
            break;
        }
        case MapMetaData::ID:
        {   
		    highOrder = 0x10cfc8a2818024d3ULL;
            lowOrder = 0x248802c00c95f11bULL;
            break;
        }
        case OccupancyGrid::ID:
        {   
		    highOrder = 0x3381f2d731d4076eULL;
            lowOrder = 0xc5c71b0759edbe4eULL;
            break;
        }
        case Odometry::ID:
        {   
		    highOrder = 0xcd5e73d190d741a2ULL;
            lowOrder = 0xf92e81eda573aca7ULL;
            break;
        }
        case Path::ID:
        {   
		    highOrder = 0x6227e2b7e9cce150ULL;
            lowOrder = 0x51f669a5e197bbf7ULL;
            break;
        }
        case GetMapRequest::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case GetMapResponse::ID:
        {   
		    highOrder = 0x6cdd0a18e0aff5b0ULL;
            lowOrder = 0xa3ca2326a89b54ffULL;
            break;
        }
        case GetMap::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case GetPlanRequest::ID:
        {   
		    highOrder = 0xe25a43e0752bcca5ULL;
            lowOrder = 0x99a8c2eef8282df8ULL;
            break;
        }
        case GetPlanResponse::ID:
        {   
		    highOrder = 0x0002bc113c0259d7ULL;
            lowOrder = 0x1f6cf8cbc9430e18ULL;
            break;
        }
        case GetPlan::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        case SetMapRequest::ID:
        {   
		    highOrder = 0x91149a20d7be299bULL;
            lowOrder = 0x87c340df8cc94fd4ULL;
            break;
        }
        case SetMapResponse::ID:
        {   
		    highOrder = 0x358e233cde0c8a8bULL;
            lowOrder = 0xcfea4ce193f8fc15ULL;
            break;
        }
        case SetMap::ID:
        {   
		    highOrder = 0xd41d8cd98f00b204ULL;
            lowOrder = 0xe9800998ecf8427eULL;
            break;
        }
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

int nav_msgs_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<ros::SerializedMessage> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case GetMapAction::ID:
        case GetMapActionFeedback::ID:
        case GetMapActionGoal::ID:
        case GetMapActionResult::ID:
        case GetMapFeedback::ID:
        case GetMapGoal::ID:
        case GetMapResult::ID:
        case GridCells::ID:
        case MapMetaData::ID:
        case OccupancyGrid::ID:
        case Odometry::ID:
        case Path::ID:
        case GetMapRequest::ID:
        case GetMapResponse::ID:
        case GetMap::ID:
        case GetPlanRequest::ID:
        case GetPlanResponse::ID:
        case GetPlan::ID:
        case SetMapRequest::ID:
        case SetMapResponse::ID:
        case SetMap::ID:
        {
            break;
        } 
        default:
	    {
            retval = rframe::Error::PARAM_RANGE;
            break;
	    }
    }

    if (retval == rframe::Error::SUCCESS)
	{
        std::shared_ptr<ros::SerializedMessage> newmsg(new ros::SerializedMessage);

        if (newmsg.get() == NULL)
	    {
            retval = rframe::Error::MEMORY_ALLOC;
        }
        else
	    {
            newmsg->message_type = id;
            msg.swap(newmsg);
        }
    }

    return retval;
}

int nav_msgs_gencppROSMessageFactory::allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg)
{
    int retval = rframe::Error::SUCCESS;

    switch (id)
    { 
        case GetMapAction::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetMapAction>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetMapActionFeedback::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetMapActionFeedback>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetMapActionGoal::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetMapActionGoal>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetMapActionResult::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetMapActionResult>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetMapFeedback::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetMapFeedback>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetMapGoal::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetMapGoal>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetMapResult::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetMapResult>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GridCells::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GridCells>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case MapMetaData::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<MapMetaData>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case OccupancyGrid::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<OccupancyGrid>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case Odometry::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<Odometry>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case Path::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<Path>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetMapRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetMapRequest>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetMapResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetMapResponse>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetMap::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetMap>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetPlanRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetPlanRequest>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetPlanResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetPlanResponse>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case GetPlan::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<GetPlan>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetMapRequest::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetMapRequest>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetMapResponse::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetMapResponse>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        case SetMap::ID:
        {
            std::shared_ptr<MessageBase> tempMsg(new Message<SetMap>(),std::bind(&nav_msgs_gencppROSMessageFactory::deallocateMessage,this,std::placeholders::_1));

            if (tempMsg.get() == NULL)
            {
                retval = rframe::Error::MEMORY_ALLOC;
            }
            else
            {
                msg.swap(tempMsg);
            }
            break;
        } 
        default:
        {
            retval = rframe::Error::PARAM_RANGE;
        }
    }

    return retval;
}

int nav_msgs_gencppROSMessageFactory::deallocateMessage(MessageBase * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
	{
        delete msg;
    }

    return retval;
}

int nav_msgs_gencppROSMessageFactory::deallocateTransport(ros::SerializedMessage * msg)
{
    int retval = Error::SUCCESS;

    if (msg != NULL)
    {
        delete msg;
    }

    return retval;
}

int nav_msgs_gencppROSMessageFactory::toTransport(MessageBase & src, ros::SerializedMessage & dst)
{
    int retval = rframe::Error::SUCCESS;

    if (dst.message_type != src.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (dst.message_type)
        { 
            case GetMapAction::ID:
            {
                Message<GetMapAction > & tempSrc = static_cast<Message<GetMapAction>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::GetMapAction buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetMapActionFeedback::ID:
            {
                Message<GetMapActionFeedback > & tempSrc = static_cast<Message<GetMapActionFeedback>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::GetMapActionFeedback buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetMapActionGoal::ID:
            {
                Message<GetMapActionGoal > & tempSrc = static_cast<Message<GetMapActionGoal>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::GetMapActionGoal buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetMapActionResult::ID:
            {
                Message<GetMapActionResult > & tempSrc = static_cast<Message<GetMapActionResult>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::GetMapActionResult buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetMapFeedback::ID:
            {
                Message<GetMapFeedback > & tempSrc = static_cast<Message<GetMapFeedback>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::GetMapFeedback buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetMapGoal::ID:
            {
                Message<GetMapGoal > & tempSrc = static_cast<Message<GetMapGoal>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::GetMapGoal buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetMapResult::ID:
            {
                Message<GetMapResult > & tempSrc = static_cast<Message<GetMapResult>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::GetMapResult buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GridCells::ID:
            {
                Message<GridCells > & tempSrc = static_cast<Message<GridCells>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::GridCells buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case MapMetaData::ID:
            {
                Message<MapMetaData > & tempSrc = static_cast<Message<MapMetaData>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::MapMetaData buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case OccupancyGrid::ID:
            {
                Message<OccupancyGrid > & tempSrc = static_cast<Message<OccupancyGrid>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::OccupancyGrid buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case Odometry::ID:
            {
                Message<Odometry > & tempSrc = static_cast<Message<Odometry>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::Odometry buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case Path::ID:
            {
                Message<Path > & tempSrc = static_cast<Message<Path>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::Path buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetMapRequest::ID:
            {
                Message<GetMapRequest > & tempSrc = static_cast<Message<GetMapRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::GetMapRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetMapResponse::ID:
            {
                Message<GetMapResponse > & tempSrc = static_cast<Message<GetMapResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::GetMapResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetMap::ID:
            {
                Message<GetMap > & tempSrc = static_cast<Message<GetMap>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::GetMap buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetPlanRequest::ID:
            {
                Message<GetPlanRequest > & tempSrc = static_cast<Message<GetPlanRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::GetPlanRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetPlanResponse::ID:
            {
                Message<GetPlanResponse > & tempSrc = static_cast<Message<GetPlanResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::GetPlanResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case GetPlan::ID:
            {
                Message<GetPlan > & tempSrc = static_cast<Message<GetPlan>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::GetPlan buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case SetMapRequest::ID:
            {
                Message<SetMapRequest > & tempSrc = static_cast<Message<SetMapRequest>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::SetMapRequest buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case SetMapResponse::ID:
            {
                Message<SetMapResponse > & tempSrc = static_cast<Message<SetMapResponse>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::SetMapResponse buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            case SetMap::ID:
            {
                Message<SetMap > & tempSrc = static_cast<Message<SetMap>&>(src);
                unsigned int bufSize = ros::serialization::serializationLength(tempSrc.payload());

			    if (bufSize >= dst.buffer_max_size)
				{
                     retval = rframe::Error::BUFFER_OVERRUN;
					 LOG_CRIT("ROS::toTransport: nav_msgs_gencpp::SetMap buffer overrun " << bufSize << " vs " << dst.buffer_max_size);
				}

                // deprecated, now uses pre allocated buffers
                dst.num_bytes = bufSize+sizeof(uint32_t);

                // create stream to hold serialized data + its length
                ros::serialization::OStream stream(dst.buf.get(),dst.num_bytes);
                // encode buffer length
				ros::serialization::serialize(stream,(uint32_t)bufSize);
                // encode payload
			    dst.message_start = stream.getData();
                ros::serialization::serialize(stream,tempSrc.payload());
                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
                break;
            }
        }
    }

    return retval;
}

int nav_msgs_gencppROSMessageFactory::fromTransport(ros::SerializedMessage & src, MessageBase & dst)
{
    int retval = rframe::Error::SUCCESS;

    if ((unsigned int)src.message_type != dst.id())
    {
        retval = rframe::Error::PARAM;
    }
    else
    {
        switch (src.message_type)
        { 
            case GetMapAction::ID:
            {
                Message<GetMapAction > & tempDst = static_cast<Message<GetMapAction>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetMapActionFeedback::ID:
            {
                Message<GetMapActionFeedback > & tempDst = static_cast<Message<GetMapActionFeedback>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case GetMapActionGoal::ID:
            {
                Message<GetMapActionGoal > & tempDst = static_cast<Message<GetMapActionGoal>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case GetMapActionResult::ID:
            {
                Message<GetMapActionResult > & tempDst = static_cast<Message<GetMapActionResult>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case GetMapFeedback::ID:
            {
                Message<GetMapFeedback > & tempDst = static_cast<Message<GetMapFeedback>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetMapGoal::ID:
            {
                Message<GetMapGoal > & tempDst = static_cast<Message<GetMapGoal>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetMapResult::ID:
            {
                Message<GetMapResult > & tempDst = static_cast<Message<GetMapResult>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GridCells::ID:
            {
                Message<GridCells > & tempDst = static_cast<Message<GridCells>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case MapMetaData::ID:
            {
                Message<MapMetaData > & tempDst = static_cast<Message<MapMetaData>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case OccupancyGrid::ID:
            {
                Message<OccupancyGrid > & tempDst = static_cast<Message<OccupancyGrid>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case Odometry::ID:
            {
                Message<Odometry > & tempDst = static_cast<Message<Odometry>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case Path::ID:
            {
                Message<Path > & tempDst = static_cast<Message<Path>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                rframe::Time t(tempDst.payload().header.stamp.sec,tempDst.payload().header.stamp.nsec);
                tempDst.timestamp(t.toTimestamp());

                break;
            } 
            case GetMapRequest::ID:
            {
                Message<GetMapRequest > & tempDst = static_cast<Message<GetMapRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetMapResponse::ID:
            {
                Message<GetMapResponse > & tempDst = static_cast<Message<GetMapResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetMap::ID:
            {
                Message<GetMap > & tempDst = static_cast<Message<GetMap>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetPlanRequest::ID:
            {
                Message<GetPlanRequest > & tempDst = static_cast<Message<GetPlanRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetPlanResponse::ID:
            {
                Message<GetPlanResponse > & tempDst = static_cast<Message<GetPlanResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case GetPlan::ID:
            {
                Message<GetPlan > & tempDst = static_cast<Message<GetPlan>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case SetMapRequest::ID:
            {
                Message<SetMapRequest > & tempDst = static_cast<Message<SetMapRequest>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case SetMapResponse::ID:
            {
                Message<SetMapResponse > & tempDst = static_cast<Message<SetMapResponse>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            case SetMap::ID:
            {
                Message<SetMap > & tempDst = static_cast<Message<SetMap>&>(dst);

                ros::serialization::IStream stream(src.buf.get()+sizeof(int32_t),src.num_bytes-sizeof(int32_t));
                ros::serialization::deserialize(stream,tempDst.payload());

                break;
            } 
            default:
            {
                retval = rframe::Error::PARAM;
            }
        }
    }

    return retval;
}

int nav_msgs_gencppROSMessageFactory::updateHeader(rframe::MessageBase &msg, unsigned int seqNo)
{
    int retval = rframe::Error::SUCCESS;

    switch (msg.id())
    {   
        // GetMapAction does not have a Header as its first member 
        case GetMapActionFeedback::ID:
        {
            Message<GetMapActionFeedback > & tempMsg = static_cast<Message<GetMapActionFeedback>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        case GetMapActionGoal::ID:
        {
            Message<GetMapActionGoal > & tempMsg = static_cast<Message<GetMapActionGoal>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        case GetMapActionResult::ID:
        {
            Message<GetMapActionResult > & tempMsg = static_cast<Message<GetMapActionResult>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        // GetMapResult does not have a Header as its first member 
        case GridCells::ID:
        {
            Message<GridCells > & tempMsg = static_cast<Message<GridCells>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        // MapMetaData does not have a Header as its first member 
        case OccupancyGrid::ID:
        {
            Message<OccupancyGrid > & tempMsg = static_cast<Message<OccupancyGrid>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        case Odometry::ID:
        {
            Message<Odometry > & tempMsg = static_cast<Message<Odometry>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        case Path::ID:
        {
            Message<Path > & tempMsg = static_cast<Message<Path>&>(msg);
            rframe::Time t(rframe::Time::now());
            tempMsg.payload().header.seq = seqNo;
            tempMsg.payload().header.stamp.sec = t.sec();
            tempMsg.payload().header.stamp.nsec = t.nsec();
            break;
        } 
        // GetMapResponse does not have a Header as its first member 
        // GetMap does not have a Header as its first member 
        // GetPlanRequest does not have a Header as its first member 
        // GetPlanResponse does not have a Header as its first member 
        // GetPlan does not have a Header as its first member 
        // SetMapRequest does not have a Header as its first member 
        // SetMapResponse does not have a Header as its first member 
        // SetMap does not have a Header as its first member 
        default:
        {
            retval = rframe::Error::NOT_FOUND;
            break;
        }
    }

    return retval;
}

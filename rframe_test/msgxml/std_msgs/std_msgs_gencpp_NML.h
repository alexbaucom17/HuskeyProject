// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:56 -0500
//  From Template/Script: data_templates/NMLHeaderTemplate.h
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#ifndef _CODEGEN_STD_MSGS_GENCPPNML_H_
#define _CODEGEN_STD_MSGS_GENCPPNML_H_

#include <messaging/nml/NMLMessageFactory.h>
//#include <DataTypeInfo.h>
#include <messaging/Message.h>

#include "std_msgs_gencpp_NMLSupport.h"

namespace rframe { class DataTypeInfo; };

#include "RosTime.h"
#include "RosDuration.h"
#include "HeaderTest.h"
#include "Bool.h"
#include "Byte.h"
#include "ByteMultiArray.h"
#include "Char.h"
#include "ColorRGBA.h"
#include "Duration.h"
#include "Empty.h"
#include "Float32.h"
#include "Float32MultiArray.h"
#include "Float64.h"
#include "Float64MultiArray.h"
#include "Header.h"
#include "Int16.h"
#include "Int16MultiArray.h"
#include "Int32.h"
#include "Int32MultiArray.h"
#include "Int64.h"
#include "Int64MultiArray.h"
#include "Int8.h"
#include "Int8MultiArray.h"
#include "MultiArrayDimension.h"
#include "MultiArrayLayout.h"
#include "String.h"
#include "Time.h"
#include "UInt16.h"
#include "UInt16MultiArray.h"
#include "UInt32.h"
#include "UInt32MultiArray.h"
#include "UInt64.h"
#include "UInt64MultiArray.h"
#include "UInt8.h"
#include "UInt8MultiArray.h"

namespace std_msgs {

    /** definition of message factory for std_msgs_gencpp */
    class std_msgs_gencppNMLMessageFactory : public NMLMessageFactory
    {
    public:
        /** constructor */
        std_msgs_gencppNMLMessageFactory();
        /** destructor */
        virtual ~std_msgs_gencppNMLMessageFactory();

        /** see  rframe::MessageFactoryInterface */
        virtual void dataTypes(std::vector<DataTypeInfo> & ids);
        /** see  rframe::MessageFactoryInterface */
        virtual int dataType(NMLmsg & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<NMLmsg> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateTransport(NMLmsg * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateMessage(MessageBase * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int toTransport( MessageBase & src, NMLmsg & dst);
        /** see  rframe::MessageFactoryInterface */
        virtual int fromTransport( NMLmsg & src, MessageBase & dst);

        /** \return poitner to nml format function */
        virtual NML_FORMAT_PTR FormatPointer();
        /** run constructor for class of type id in the provided buffer */
        virtual int constructBuffer(rframe::ID_TYPE id, void * buffer);
        /** run destructor for class of type id in the buffer */
        virtual int destructBuffer(rframe::ID_TYPE id, void * buffer);
    };

    /** factory allocation function for use when not dynamically loading the factory library  */
    NMLMessageFactory * allocate_std_msgs_gencpp();

    /** NML interface for RosTime 

    */
    class RosTimeNML : public NMLmsg
    {
    public:

        /** constructor */
        RosTimeNML();
        /** destructor */
        ~RosTimeNML();

        /** assignment operator */
        RosTimeNML & operator=(const RosTimeNML &inobj);
        /** assignment operator for base data class */
        RosTimeNML & operator=(const RosTime &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        RosTime nmlPayload;

        /** set payload */
        void payload(const RosTime &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<RosTime> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        RosTime * payload() { return & nmlPayload; };

    //     std::shared_ptr<RosTime> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for RosDuration 

    */
    class RosDurationNML : public NMLmsg
    {
    public:

        /** constructor */
        RosDurationNML();
        /** destructor */
        ~RosDurationNML();

        /** assignment operator */
        RosDurationNML & operator=(const RosDurationNML &inobj);
        /** assignment operator for base data class */
        RosDurationNML & operator=(const RosDuration &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        RosDuration nmlPayload;

        /** set payload */
        void payload(const RosDuration &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<RosDuration> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        RosDuration * payload() { return & nmlPayload; };

    //     std::shared_ptr<RosDuration> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for HeaderTest 

    */
    class HeaderTestNML : public NMLmsg
    {
    public:

        /** constructor */
        HeaderTestNML();
        /** destructor */
        ~HeaderTestNML();

        /** assignment operator */
        HeaderTestNML & operator=(const HeaderTestNML &inobj);
        /** assignment operator for base data class */
        HeaderTestNML & operator=(const HeaderTest &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        HeaderTest nmlPayload;

        /** set payload */
        void payload(const HeaderTest &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<HeaderTest> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        HeaderTest * payload() { return & nmlPayload; };

    //     std::shared_ptr<HeaderTest> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Bool 

    */
    class BoolNML : public NMLmsg
    {
    public:

        /** constructor */
        BoolNML();
        /** destructor */
        ~BoolNML();

        /** assignment operator */
        BoolNML & operator=(const BoolNML &inobj);
        /** assignment operator for base data class */
        BoolNML & operator=(const Bool &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Bool nmlPayload;

        /** set payload */
        void payload(const Bool &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Bool> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Bool * payload() { return & nmlPayload; };

    //     std::shared_ptr<Bool> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Byte 

    */
    class ByteNML : public NMLmsg
    {
    public:

        /** constructor */
        ByteNML();
        /** destructor */
        ~ByteNML();

        /** assignment operator */
        ByteNML & operator=(const ByteNML &inobj);
        /** assignment operator for base data class */
        ByteNML & operator=(const Byte &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Byte nmlPayload;

        /** set payload */
        void payload(const Byte &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Byte> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Byte * payload() { return & nmlPayload; };

    //     std::shared_ptr<Byte> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for ByteMultiArray 

    */
    class ByteMultiArrayNML : public NMLmsg
    {
    public:

        /** constructor */
        ByteMultiArrayNML();
        /** destructor */
        ~ByteMultiArrayNML();

        /** assignment operator */
        ByteMultiArrayNML & operator=(const ByteMultiArrayNML &inobj);
        /** assignment operator for base data class */
        ByteMultiArrayNML & operator=(const ByteMultiArray &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        ByteMultiArray nmlPayload;

        /** set payload */
        void payload(const ByteMultiArray &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<ByteMultiArray> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        ByteMultiArray * payload() { return & nmlPayload; };

    //     std::shared_ptr<ByteMultiArray> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Char 

    */
    class CharNML : public NMLmsg
    {
    public:

        /** constructor */
        CharNML();
        /** destructor */
        ~CharNML();

        /** assignment operator */
        CharNML & operator=(const CharNML &inobj);
        /** assignment operator for base data class */
        CharNML & operator=(const Char &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Char nmlPayload;

        /** set payload */
        void payload(const Char &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Char> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Char * payload() { return & nmlPayload; };

    //     std::shared_ptr<Char> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for ColorRGBA 

    */
    class ColorRGBANML : public NMLmsg
    {
    public:

        /** constructor */
        ColorRGBANML();
        /** destructor */
        ~ColorRGBANML();

        /** assignment operator */
        ColorRGBANML & operator=(const ColorRGBANML &inobj);
        /** assignment operator for base data class */
        ColorRGBANML & operator=(const ColorRGBA &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        ColorRGBA nmlPayload;

        /** set payload */
        void payload(const ColorRGBA &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<ColorRGBA> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        ColorRGBA * payload() { return & nmlPayload; };

    //     std::shared_ptr<ColorRGBA> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Duration 

    */
    class DurationNML : public NMLmsg
    {
    public:

        /** constructor */
        DurationNML();
        /** destructor */
        ~DurationNML();

        /** assignment operator */
        DurationNML & operator=(const DurationNML &inobj);
        /** assignment operator for base data class */
        DurationNML & operator=(const Duration &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Duration nmlPayload;

        /** set payload */
        void payload(const Duration &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Duration> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Duration * payload() { return & nmlPayload; };

    //     std::shared_ptr<Duration> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Empty 

    */
    class EmptyNML : public NMLmsg
    {
    public:

        /** constructor */
        EmptyNML();
        /** destructor */
        ~EmptyNML();

        /** assignment operator */
        EmptyNML & operator=(const EmptyNML &inobj);
        /** assignment operator for base data class */
        EmptyNML & operator=(const Empty &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Empty nmlPayload;

        /** set payload */
        void payload(const Empty &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Empty> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Empty * payload() { return & nmlPayload; };

    //     std::shared_ptr<Empty> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Float32 

    */
    class Float32NML : public NMLmsg
    {
    public:

        /** constructor */
        Float32NML();
        /** destructor */
        ~Float32NML();

        /** assignment operator */
        Float32NML & operator=(const Float32NML &inobj);
        /** assignment operator for base data class */
        Float32NML & operator=(const Float32 &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Float32 nmlPayload;

        /** set payload */
        void payload(const Float32 &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Float32> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Float32 * payload() { return & nmlPayload; };

    //     std::shared_ptr<Float32> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Float32MultiArray 

    */
    class Float32MultiArrayNML : public NMLmsg
    {
    public:

        /** constructor */
        Float32MultiArrayNML();
        /** destructor */
        ~Float32MultiArrayNML();

        /** assignment operator */
        Float32MultiArrayNML & operator=(const Float32MultiArrayNML &inobj);
        /** assignment operator for base data class */
        Float32MultiArrayNML & operator=(const Float32MultiArray &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Float32MultiArray nmlPayload;

        /** set payload */
        void payload(const Float32MultiArray &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Float32MultiArray> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Float32MultiArray * payload() { return & nmlPayload; };

    //     std::shared_ptr<Float32MultiArray> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Float64 

    */
    class Float64NML : public NMLmsg
    {
    public:

        /** constructor */
        Float64NML();
        /** destructor */
        ~Float64NML();

        /** assignment operator */
        Float64NML & operator=(const Float64NML &inobj);
        /** assignment operator for base data class */
        Float64NML & operator=(const Float64 &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Float64 nmlPayload;

        /** set payload */
        void payload(const Float64 &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Float64> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Float64 * payload() { return & nmlPayload; };

    //     std::shared_ptr<Float64> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Float64MultiArray 

    */
    class Float64MultiArrayNML : public NMLmsg
    {
    public:

        /** constructor */
        Float64MultiArrayNML();
        /** destructor */
        ~Float64MultiArrayNML();

        /** assignment operator */
        Float64MultiArrayNML & operator=(const Float64MultiArrayNML &inobj);
        /** assignment operator for base data class */
        Float64MultiArrayNML & operator=(const Float64MultiArray &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Float64MultiArray nmlPayload;

        /** set payload */
        void payload(const Float64MultiArray &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Float64MultiArray> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Float64MultiArray * payload() { return & nmlPayload; };

    //     std::shared_ptr<Float64MultiArray> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Header 

    */
    class HeaderNML : public NMLmsg
    {
    public:

        /** constructor */
        HeaderNML();
        /** destructor */
        ~HeaderNML();

        /** assignment operator */
        HeaderNML & operator=(const HeaderNML &inobj);
        /** assignment operator for base data class */
        HeaderNML & operator=(const Header &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Header nmlPayload;

        /** set payload */
        void payload(const Header &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Header> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Header * payload() { return & nmlPayload; };

    //     std::shared_ptr<Header> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Int16 

    */
    class Int16NML : public NMLmsg
    {
    public:

        /** constructor */
        Int16NML();
        /** destructor */
        ~Int16NML();

        /** assignment operator */
        Int16NML & operator=(const Int16NML &inobj);
        /** assignment operator for base data class */
        Int16NML & operator=(const Int16 &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Int16 nmlPayload;

        /** set payload */
        void payload(const Int16 &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Int16> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Int16 * payload() { return & nmlPayload; };

    //     std::shared_ptr<Int16> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Int16MultiArray 

    */
    class Int16MultiArrayNML : public NMLmsg
    {
    public:

        /** constructor */
        Int16MultiArrayNML();
        /** destructor */
        ~Int16MultiArrayNML();

        /** assignment operator */
        Int16MultiArrayNML & operator=(const Int16MultiArrayNML &inobj);
        /** assignment operator for base data class */
        Int16MultiArrayNML & operator=(const Int16MultiArray &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Int16MultiArray nmlPayload;

        /** set payload */
        void payload(const Int16MultiArray &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Int16MultiArray> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Int16MultiArray * payload() { return & nmlPayload; };

    //     std::shared_ptr<Int16MultiArray> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Int32 

    */
    class Int32NML : public NMLmsg
    {
    public:

        /** constructor */
        Int32NML();
        /** destructor */
        ~Int32NML();

        /** assignment operator */
        Int32NML & operator=(const Int32NML &inobj);
        /** assignment operator for base data class */
        Int32NML & operator=(const Int32 &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Int32 nmlPayload;

        /** set payload */
        void payload(const Int32 &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Int32> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Int32 * payload() { return & nmlPayload; };

    //     std::shared_ptr<Int32> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Int32MultiArray 

    */
    class Int32MultiArrayNML : public NMLmsg
    {
    public:

        /** constructor */
        Int32MultiArrayNML();
        /** destructor */
        ~Int32MultiArrayNML();

        /** assignment operator */
        Int32MultiArrayNML & operator=(const Int32MultiArrayNML &inobj);
        /** assignment operator for base data class */
        Int32MultiArrayNML & operator=(const Int32MultiArray &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Int32MultiArray nmlPayload;

        /** set payload */
        void payload(const Int32MultiArray &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Int32MultiArray> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Int32MultiArray * payload() { return & nmlPayload; };

    //     std::shared_ptr<Int32MultiArray> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Int64 

    */
    class Int64NML : public NMLmsg
    {
    public:

        /** constructor */
        Int64NML();
        /** destructor */
        ~Int64NML();

        /** assignment operator */
        Int64NML & operator=(const Int64NML &inobj);
        /** assignment operator for base data class */
        Int64NML & operator=(const Int64 &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Int64 nmlPayload;

        /** set payload */
        void payload(const Int64 &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Int64> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Int64 * payload() { return & nmlPayload; };

    //     std::shared_ptr<Int64> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Int64MultiArray 

    */
    class Int64MultiArrayNML : public NMLmsg
    {
    public:

        /** constructor */
        Int64MultiArrayNML();
        /** destructor */
        ~Int64MultiArrayNML();

        /** assignment operator */
        Int64MultiArrayNML & operator=(const Int64MultiArrayNML &inobj);
        /** assignment operator for base data class */
        Int64MultiArrayNML & operator=(const Int64MultiArray &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Int64MultiArray nmlPayload;

        /** set payload */
        void payload(const Int64MultiArray &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Int64MultiArray> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Int64MultiArray * payload() { return & nmlPayload; };

    //     std::shared_ptr<Int64MultiArray> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Int8 

    */
    class Int8NML : public NMLmsg
    {
    public:

        /** constructor */
        Int8NML();
        /** destructor */
        ~Int8NML();

        /** assignment operator */
        Int8NML & operator=(const Int8NML &inobj);
        /** assignment operator for base data class */
        Int8NML & operator=(const Int8 &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Int8 nmlPayload;

        /** set payload */
        void payload(const Int8 &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Int8> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Int8 * payload() { return & nmlPayload; };

    //     std::shared_ptr<Int8> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Int8MultiArray 

    */
    class Int8MultiArrayNML : public NMLmsg
    {
    public:

        /** constructor */
        Int8MultiArrayNML();
        /** destructor */
        ~Int8MultiArrayNML();

        /** assignment operator */
        Int8MultiArrayNML & operator=(const Int8MultiArrayNML &inobj);
        /** assignment operator for base data class */
        Int8MultiArrayNML & operator=(const Int8MultiArray &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Int8MultiArray nmlPayload;

        /** set payload */
        void payload(const Int8MultiArray &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Int8MultiArray> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Int8MultiArray * payload() { return & nmlPayload; };

    //     std::shared_ptr<Int8MultiArray> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for MultiArrayDimension 

    */
    class MultiArrayDimensionNML : public NMLmsg
    {
    public:

        /** constructor */
        MultiArrayDimensionNML();
        /** destructor */
        ~MultiArrayDimensionNML();

        /** assignment operator */
        MultiArrayDimensionNML & operator=(const MultiArrayDimensionNML &inobj);
        /** assignment operator for base data class */
        MultiArrayDimensionNML & operator=(const MultiArrayDimension &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        MultiArrayDimension nmlPayload;

        /** set payload */
        void payload(const MultiArrayDimension &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<MultiArrayDimension> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        MultiArrayDimension * payload() { return & nmlPayload; };

    //     std::shared_ptr<MultiArrayDimension> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for MultiArrayLayout 

    */
    class MultiArrayLayoutNML : public NMLmsg
    {
    public:

        /** constructor */
        MultiArrayLayoutNML();
        /** destructor */
        ~MultiArrayLayoutNML();

        /** assignment operator */
        MultiArrayLayoutNML & operator=(const MultiArrayLayoutNML &inobj);
        /** assignment operator for base data class */
        MultiArrayLayoutNML & operator=(const MultiArrayLayout &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        MultiArrayLayout nmlPayload;

        /** set payload */
        void payload(const MultiArrayLayout &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<MultiArrayLayout> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        MultiArrayLayout * payload() { return & nmlPayload; };

    //     std::shared_ptr<MultiArrayLayout> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for String 

    */
    class StringNML : public NMLmsg
    {
    public:

        /** constructor */
        StringNML();
        /** destructor */
        ~StringNML();

        /** assignment operator */
        StringNML & operator=(const StringNML &inobj);
        /** assignment operator for base data class */
        StringNML & operator=(const String &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        String nmlPayload;

        /** set payload */
        void payload(const String &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<String> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        String * payload() { return & nmlPayload; };

    //     std::shared_ptr<String> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Time 

    */
    class TimeNML : public NMLmsg
    {
    public:

        /** constructor */
        TimeNML();
        /** destructor */
        ~TimeNML();

        /** assignment operator */
        TimeNML & operator=(const TimeNML &inobj);
        /** assignment operator for base data class */
        TimeNML & operator=(const Time &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Time nmlPayload;

        /** set payload */
        void payload(const Time &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Time> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Time * payload() { return & nmlPayload; };

    //     std::shared_ptr<Time> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for UInt16 

    */
    class UInt16NML : public NMLmsg
    {
    public:

        /** constructor */
        UInt16NML();
        /** destructor */
        ~UInt16NML();

        /** assignment operator */
        UInt16NML & operator=(const UInt16NML &inobj);
        /** assignment operator for base data class */
        UInt16NML & operator=(const UInt16 &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        UInt16 nmlPayload;

        /** set payload */
        void payload(const UInt16 &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<UInt16> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        UInt16 * payload() { return & nmlPayload; };

    //     std::shared_ptr<UInt16> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for UInt16MultiArray 

    */
    class UInt16MultiArrayNML : public NMLmsg
    {
    public:

        /** constructor */
        UInt16MultiArrayNML();
        /** destructor */
        ~UInt16MultiArrayNML();

        /** assignment operator */
        UInt16MultiArrayNML & operator=(const UInt16MultiArrayNML &inobj);
        /** assignment operator for base data class */
        UInt16MultiArrayNML & operator=(const UInt16MultiArray &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        UInt16MultiArray nmlPayload;

        /** set payload */
        void payload(const UInt16MultiArray &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<UInt16MultiArray> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        UInt16MultiArray * payload() { return & nmlPayload; };

    //     std::shared_ptr<UInt16MultiArray> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for UInt32 

    */
    class UInt32NML : public NMLmsg
    {
    public:

        /** constructor */
        UInt32NML();
        /** destructor */
        ~UInt32NML();

        /** assignment operator */
        UInt32NML & operator=(const UInt32NML &inobj);
        /** assignment operator for base data class */
        UInt32NML & operator=(const UInt32 &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        UInt32 nmlPayload;

        /** set payload */
        void payload(const UInt32 &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<UInt32> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        UInt32 * payload() { return & nmlPayload; };

    //     std::shared_ptr<UInt32> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for UInt32MultiArray 

    */
    class UInt32MultiArrayNML : public NMLmsg
    {
    public:

        /** constructor */
        UInt32MultiArrayNML();
        /** destructor */
        ~UInt32MultiArrayNML();

        /** assignment operator */
        UInt32MultiArrayNML & operator=(const UInt32MultiArrayNML &inobj);
        /** assignment operator for base data class */
        UInt32MultiArrayNML & operator=(const UInt32MultiArray &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        UInt32MultiArray nmlPayload;

        /** set payload */
        void payload(const UInt32MultiArray &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<UInt32MultiArray> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        UInt32MultiArray * payload() { return & nmlPayload; };

    //     std::shared_ptr<UInt32MultiArray> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for UInt64 

    */
    class UInt64NML : public NMLmsg
    {
    public:

        /** constructor */
        UInt64NML();
        /** destructor */
        ~UInt64NML();

        /** assignment operator */
        UInt64NML & operator=(const UInt64NML &inobj);
        /** assignment operator for base data class */
        UInt64NML & operator=(const UInt64 &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        UInt64 nmlPayload;

        /** set payload */
        void payload(const UInt64 &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<UInt64> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        UInt64 * payload() { return & nmlPayload; };

    //     std::shared_ptr<UInt64> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for UInt64MultiArray 

    */
    class UInt64MultiArrayNML : public NMLmsg
    {
    public:

        /** constructor */
        UInt64MultiArrayNML();
        /** destructor */
        ~UInt64MultiArrayNML();

        /** assignment operator */
        UInt64MultiArrayNML & operator=(const UInt64MultiArrayNML &inobj);
        /** assignment operator for base data class */
        UInt64MultiArrayNML & operator=(const UInt64MultiArray &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        UInt64MultiArray nmlPayload;

        /** set payload */
        void payload(const UInt64MultiArray &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<UInt64MultiArray> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        UInt64MultiArray * payload() { return & nmlPayload; };

    //     std::shared_ptr<UInt64MultiArray> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for UInt8 

    */
    class UInt8NML : public NMLmsg
    {
    public:

        /** constructor */
        UInt8NML();
        /** destructor */
        ~UInt8NML();

        /** assignment operator */
        UInt8NML & operator=(const UInt8NML &inobj);
        /** assignment operator for base data class */
        UInt8NML & operator=(const UInt8 &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        UInt8 nmlPayload;

        /** set payload */
        void payload(const UInt8 &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<UInt8> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        UInt8 * payload() { return & nmlPayload; };

    //     std::shared_ptr<UInt8> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for UInt8MultiArray 

    */
    class UInt8MultiArrayNML : public NMLmsg
    {
    public:

        /** constructor */
        UInt8MultiArrayNML();
        /** destructor */
        ~UInt8MultiArrayNML();

        /** assignment operator */
        UInt8MultiArrayNML & operator=(const UInt8MultiArrayNML &inobj);
        /** assignment operator for base data class */
        UInt8MultiArrayNML & operator=(const UInt8MultiArray &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        UInt8MultiArray nmlPayload;

        /** set payload */
        void payload(const UInt8MultiArray &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<UInt8MultiArray> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        UInt8MultiArray * payload() { return & nmlPayload; };

    //     std::shared_ptr<UInt8MultiArray> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    // predeclaration of nmlupdate functions (necessary due to namespaces )

    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::RosTime & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::RosDuration & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::HeaderTest & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::Bool & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::Byte & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::ByteMultiArray & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::Char & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::ColorRGBA & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::Duration & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::Empty & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::Float32 & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::Float32MultiArray & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::Float64 & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::Float64MultiArray & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::Header & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::Int16 & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::Int16MultiArray & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::Int32 & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::Int32MultiArray & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::Int64 & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::Int64MultiArray & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::Int8 & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::Int8MultiArray & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::MultiArrayDimension & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::MultiArrayLayout & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::String & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::Time & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::UInt16 & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::UInt16MultiArray & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::UInt32 & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::UInt32MultiArray & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::UInt64 & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::UInt64MultiArray & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::UInt8 & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, std_msgs::UInt8MultiArray & inobj);

    /** nml format function */
    int std_msgs_gencpp_format(NMLTYPE type, void * buffer, CMS* cms);

}; // end namespace std_msgs

#endif // _STD_MSGS_GENCPPNML_H_

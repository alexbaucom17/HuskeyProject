// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:48 -0500
//  From Template/Script: data_templates/NMLHeaderTemplate.h
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#ifndef _CODEGEN_DYNAMIC_RECONFIGURE_GENCPPNML_H_
#define _CODEGEN_DYNAMIC_RECONFIGURE_GENCPPNML_H_

#include <messaging/nml/NMLMessageFactory.h>
//#include <DataTypeInfo.h>
#include <messaging/Message.h>

#include "dynamic_reconfigure_gencpp_NMLSupport.h"

namespace rframe { class DataTypeInfo; };

#include "BoolParameter.h"
#include "Config.h"
#include "ConfigDescription.h"
#include "DoubleParameter.h"
#include "Group.h"
#include "GroupState.h"
#include "IntParameter.h"
#include "ParamDescription.h"
#include "SensorLevels.h"
#include "StrParameter.h"
#include "ReconfigureRequest.h"
#include "ReconfigureResponse.h"
#include "Reconfigure.h"

namespace dynamic_reconfigure {

    /** definition of message factory for dynamic_reconfigure_gencpp */
    class dynamic_reconfigure_gencppNMLMessageFactory : public NMLMessageFactory
    {
    public:
        /** constructor */
        dynamic_reconfigure_gencppNMLMessageFactory();
        /** destructor */
        virtual ~dynamic_reconfigure_gencppNMLMessageFactory();

        /** see  rframe::MessageFactoryInterface */
        virtual void dataTypes(std::vector<DataTypeInfo> & ids);
        /** see  rframe::MessageFactoryInterface */
        virtual int dataType(NMLmsg & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<NMLmsg> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateTransport(NMLmsg * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateMessage(MessageBase * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int toTransport( MessageBase & src, NMLmsg & dst);
        /** see  rframe::MessageFactoryInterface */
        virtual int fromTransport( NMLmsg & src, MessageBase & dst);

        /** \return poitner to nml format function */
        virtual NML_FORMAT_PTR FormatPointer();
        /** run constructor for class of type id in the provided buffer */
        virtual int constructBuffer(rframe::ID_TYPE id, void * buffer);
        /** run destructor for class of type id in the buffer */
        virtual int destructBuffer(rframe::ID_TYPE id, void * buffer);
    };

    /** factory allocation function for use when not dynamically loading the factory library  */
    NMLMessageFactory * allocate_dynamic_reconfigure_gencpp();

    /** NML interface for BoolParameter 

    */
    class BoolParameterNML : public NMLmsg
    {
    public:

        /** constructor */
        BoolParameterNML();
        /** destructor */
        ~BoolParameterNML();

        /** assignment operator */
        BoolParameterNML & operator=(const BoolParameterNML &inobj);
        /** assignment operator for base data class */
        BoolParameterNML & operator=(const BoolParameter &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        BoolParameter nmlPayload;

        /** set payload */
        void payload(const BoolParameter &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<BoolParameter> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        BoolParameter * payload() { return & nmlPayload; };

    //     std::shared_ptr<BoolParameter> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Config 

    */
    class ConfigNML : public NMLmsg
    {
    public:

        /** constructor */
        ConfigNML();
        /** destructor */
        ~ConfigNML();

        /** assignment operator */
        ConfigNML & operator=(const ConfigNML &inobj);
        /** assignment operator for base data class */
        ConfigNML & operator=(const Config &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Config nmlPayload;

        /** set payload */
        void payload(const Config &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Config> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Config * payload() { return & nmlPayload; };

    //     std::shared_ptr<Config> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for ConfigDescription 

    */
    class ConfigDescriptionNML : public NMLmsg
    {
    public:

        /** constructor */
        ConfigDescriptionNML();
        /** destructor */
        ~ConfigDescriptionNML();

        /** assignment operator */
        ConfigDescriptionNML & operator=(const ConfigDescriptionNML &inobj);
        /** assignment operator for base data class */
        ConfigDescriptionNML & operator=(const ConfigDescription &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        ConfigDescription nmlPayload;

        /** set payload */
        void payload(const ConfigDescription &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<ConfigDescription> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        ConfigDescription * payload() { return & nmlPayload; };

    //     std::shared_ptr<ConfigDescription> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for DoubleParameter 

    */
    class DoubleParameterNML : public NMLmsg
    {
    public:

        /** constructor */
        DoubleParameterNML();
        /** destructor */
        ~DoubleParameterNML();

        /** assignment operator */
        DoubleParameterNML & operator=(const DoubleParameterNML &inobj);
        /** assignment operator for base data class */
        DoubleParameterNML & operator=(const DoubleParameter &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        DoubleParameter nmlPayload;

        /** set payload */
        void payload(const DoubleParameter &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<DoubleParameter> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        DoubleParameter * payload() { return & nmlPayload; };

    //     std::shared_ptr<DoubleParameter> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Group 

    */
    class GroupNML : public NMLmsg
    {
    public:

        /** constructor */
        GroupNML();
        /** destructor */
        ~GroupNML();

        /** assignment operator */
        GroupNML & operator=(const GroupNML &inobj);
        /** assignment operator for base data class */
        GroupNML & operator=(const Group &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Group nmlPayload;

        /** set payload */
        void payload(const Group &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Group> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Group * payload() { return & nmlPayload; };

    //     std::shared_ptr<Group> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GroupState 

    */
    class GroupStateNML : public NMLmsg
    {
    public:

        /** constructor */
        GroupStateNML();
        /** destructor */
        ~GroupStateNML();

        /** assignment operator */
        GroupStateNML & operator=(const GroupStateNML &inobj);
        /** assignment operator for base data class */
        GroupStateNML & operator=(const GroupState &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GroupState nmlPayload;

        /** set payload */
        void payload(const GroupState &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GroupState> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GroupState * payload() { return & nmlPayload; };

    //     std::shared_ptr<GroupState> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for IntParameter 

    */
    class IntParameterNML : public NMLmsg
    {
    public:

        /** constructor */
        IntParameterNML();
        /** destructor */
        ~IntParameterNML();

        /** assignment operator */
        IntParameterNML & operator=(const IntParameterNML &inobj);
        /** assignment operator for base data class */
        IntParameterNML & operator=(const IntParameter &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        IntParameter nmlPayload;

        /** set payload */
        void payload(const IntParameter &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<IntParameter> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        IntParameter * payload() { return & nmlPayload; };

    //     std::shared_ptr<IntParameter> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for ParamDescription 

    */
    class ParamDescriptionNML : public NMLmsg
    {
    public:

        /** constructor */
        ParamDescriptionNML();
        /** destructor */
        ~ParamDescriptionNML();

        /** assignment operator */
        ParamDescriptionNML & operator=(const ParamDescriptionNML &inobj);
        /** assignment operator for base data class */
        ParamDescriptionNML & operator=(const ParamDescription &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        ParamDescription nmlPayload;

        /** set payload */
        void payload(const ParamDescription &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<ParamDescription> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        ParamDescription * payload() { return & nmlPayload; };

    //     std::shared_ptr<ParamDescription> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for SensorLevels 

    */
    class SensorLevelsNML : public NMLmsg
    {
    public:

        /** constructor */
        SensorLevelsNML();
        /** destructor */
        ~SensorLevelsNML();

        /** assignment operator */
        SensorLevelsNML & operator=(const SensorLevelsNML &inobj);
        /** assignment operator for base data class */
        SensorLevelsNML & operator=(const SensorLevels &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        SensorLevels nmlPayload;

        /** set payload */
        void payload(const SensorLevels &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<SensorLevels> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        SensorLevels * payload() { return & nmlPayload; };

    //     std::shared_ptr<SensorLevels> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for StrParameter 

    */
    class StrParameterNML : public NMLmsg
    {
    public:

        /** constructor */
        StrParameterNML();
        /** destructor */
        ~StrParameterNML();

        /** assignment operator */
        StrParameterNML & operator=(const StrParameterNML &inobj);
        /** assignment operator for base data class */
        StrParameterNML & operator=(const StrParameter &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        StrParameter nmlPayload;

        /** set payload */
        void payload(const StrParameter &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<StrParameter> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        StrParameter * payload() { return & nmlPayload; };

    //     std::shared_ptr<StrParameter> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for ReconfigureRequest 

    */
    class ReconfigureRequestNML : public NMLmsg
    {
    public:

        /** constructor */
        ReconfigureRequestNML();
        /** destructor */
        ~ReconfigureRequestNML();

        /** assignment operator */
        ReconfigureRequestNML & operator=(const ReconfigureRequestNML &inobj);
        /** assignment operator for base data class */
        ReconfigureRequestNML & operator=(const ReconfigureRequest &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        ReconfigureRequest nmlPayload;

        /** set payload */
        void payload(const ReconfigureRequest &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<ReconfigureRequest> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        ReconfigureRequest * payload() { return & nmlPayload; };

    //     std::shared_ptr<ReconfigureRequest> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for ReconfigureResponse 

    */
    class ReconfigureResponseNML : public NMLmsg
    {
    public:

        /** constructor */
        ReconfigureResponseNML();
        /** destructor */
        ~ReconfigureResponseNML();

        /** assignment operator */
        ReconfigureResponseNML & operator=(const ReconfigureResponseNML &inobj);
        /** assignment operator for base data class */
        ReconfigureResponseNML & operator=(const ReconfigureResponse &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        ReconfigureResponse nmlPayload;

        /** set payload */
        void payload(const ReconfigureResponse &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<ReconfigureResponse> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        ReconfigureResponse * payload() { return & nmlPayload; };

    //     std::shared_ptr<ReconfigureResponse> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Reconfigure 

    */
    class ReconfigureNML : public NMLmsg
    {
    public:

        /** constructor */
        ReconfigureNML();
        /** destructor */
        ~ReconfigureNML();

        /** assignment operator */
        ReconfigureNML & operator=(const ReconfigureNML &inobj);
        /** assignment operator for base data class */
        ReconfigureNML & operator=(const Reconfigure &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Reconfigure nmlPayload;

        /** set payload */
        void payload(const Reconfigure &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Reconfigure> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Reconfigure * payload() { return & nmlPayload; };

    //     std::shared_ptr<Reconfigure> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    // predeclaration of nmlupdate functions (necessary due to namespaces )

    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, dynamic_reconfigure::BoolParameter & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, dynamic_reconfigure::Config & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, dynamic_reconfigure::ConfigDescription & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, dynamic_reconfigure::DoubleParameter & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, dynamic_reconfigure::Group & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, dynamic_reconfigure::GroupState & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, dynamic_reconfigure::IntParameter & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, dynamic_reconfigure::ParamDescription & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, dynamic_reconfigure::SensorLevels & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, dynamic_reconfigure::StrParameter & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, dynamic_reconfigure::ReconfigureRequest & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, dynamic_reconfigure::ReconfigureResponse & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, dynamic_reconfigure::Reconfigure & inobj);

    /** nml format function */
    int dynamic_reconfigure_gencpp_format(NMLTYPE type, void * buffer, CMS* cms);

}; // end namespace dynamic_reconfigure

#endif // _DYNAMIC_RECONFIGURE_GENCPPNML_H_

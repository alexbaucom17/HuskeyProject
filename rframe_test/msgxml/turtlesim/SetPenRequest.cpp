// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:45:00 -0500
//  From Template/Script: data_templates/DataClassTemplate.cpp
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#include <math.h> // to allow use of common constants...
#include <common/Error.h>
#include "turtlesim/SetPenRequest.h"

#include <common/JsonIo.h> // include here so container types are included by the class header 

using namespace std;

const unsigned int turtlesim::SetPenRequest::ID;
const unsigned int turtlesim::SetPenRequest::DATA_VERSION;
const std::string turtlesim::SetPenRequest::DATA_TYPE_NAME = "SetPenRequest";
const std::string turtlesim::SetPenRequest::DATA_TYPE_FULL_NAME = "turtlesim::SetPenRequest";
const std::string turtlesim::SetPenRequest::VERSION_MD5 = "eed541a50021398d12c91891a6ea1a8b";
/* xml source for this class */
const std::string turtlesim::SetPenRequest::XML_SOURCE = "<class name=\"SetPenRequest\" publicDataMembers=\"true\" sourceIDL=\"ROS\" ros=\"true\" comment=\"\" id=\"1480782627\">\
  <field name=\"r\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <field name=\"g\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <field name=\"b\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <field name=\"width\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"\"/>\
  <field name=\"off\" type=\"unsigned char\" sourceType=\"uint8\" comment=\"no comment provided\"/>\
</class>";

turtlesim::SetPenRequest::SetPenRequest() : r(0), g(0), b(0), width(0), off(0)
{  
};

turtlesim::SetPenRequest::SetPenRequest(const turtlesim::SetPenRequest & inobj) : r(inobj.r), g(inobj.g), b(inobj.b), width(inobj.width), off(inobj.off)
{
};

turtlesim::SetPenRequest::~SetPenRequest()
{
};

turtlesim::SetPenRequest * turtlesim::SetPenRequest::New()
{ 
    return new SetPenRequest();
};

bool turtlesim::SetPenRequest::dataTypeFlat() 
{  
    return true;
};

turtlesim::SetPenRequest & turtlesim::SetPenRequest::operator=(const turtlesim::SetPenRequest & inobj)
{
    if (this != &inobj)
    {

        // if datatype is flat, optimize with memcpy (complier level optimiation)
              /*  if (dataTypeFlat() == true)
                  REMOVED invalid when assigning from a parent type as this is the pointer to the derived type, thus turtlesim::SetPenRequest is copied to the wrong location

        {
            memcpy(this,&inobj,sizeof(turtlesim::SetPenRequest));
        }
        else */ 
        {

            r = inobj.r;
            g = inobj.g;
            b = inobj.b;
            width = inobj.width;
            off = inobj.off;
        }
    }

    return *this;
}

bool turtlesim::SetPenRequest::operator==(const turtlesim::SetPenRequest & inobj) const
{
    bool ret = true;

    if (this != &inobj)
    { 
        ret = ret 
             && (r == inobj.r)
             && (g == inobj.g)
             && (b == inobj.b)
             && (width == inobj.width)
             && (off == inobj.off);
    }

    return ret;
}

bool turtlesim::SetPenRequest::operator!=(const turtlesim::SetPenRequest & inobj) const
{
    bool ret = false;

    if (this != &inobj)
    {
        ret = !operator==(inobj);
    }

    return ret;
}

bool turtlesim::SetPenRequest::operator<(const turtlesim::SetPenRequest & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {  
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (r < inobj.r) return true;
        if (inobj.r <  r) return false; 
        if (g < inobj.g) return true;
        if (inobj.g <  g) return false; 
        if (b < inobj.b) return true;
        if (inobj.b <  b) return false; 
        if (width < inobj.width) return true;
        if (inobj.width <  width) return false; 
        if (off < inobj.off) return true;
        if (inobj.off <  off) return false; ;
    }

    return ret;
}

bool turtlesim::SetPenRequest::operator>(const turtlesim::SetPenRequest & inobj) const
{
    bool ret = false;

    if (this == &inobj)
    {
        ret = false;
    }
    else
    {
        // comparison algorithm based on std::lexicographical_compare algorithm

        if (r > inobj.r) return true;
        if (inobj.r >  r) return false; 
        if (g > inobj.g) return true;
        if (inobj.g >  g) return false; 
        if (b > inobj.b) return true;
        if (inobj.b >  b) return false; 
        if (width > inobj.width) return true;
        if (inobj.width >  width) return false; 
        if (off > inobj.off) return true;
        if (inobj.off >  off) return false; ;
    }

    return ret;
}

template <> void rframe::json_io::encode(std::stringstream & sstr, const char * name, const turtlesim::SetPenRequest & t, std::string & indent, bool lastItem)
{
    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectStart(sstr,name,indent);

    rframe::json_io::encode(sstr,"r",t.r,indent,false);
    rframe::json_io::encode(sstr,"g",t.g,indent,false);
    rframe::json_io::encode(sstr,"b",t.b,indent,false);
    rframe::json_io::encode(sstr,"width",t.width,indent,false);
    rframe::json_io::encode(sstr,"off",t.off,indent,true);

    if ((name) && (*name != '\0')) rframe::json_io::encodeObjectEnd(sstr,indent,lastItem);
}

std::string turtlesim::SetPenRequest::toStr(bool pretty) const
{

    stringstream sstr;
    string indent = (pretty == true) ? "\n" : "";

    rframe::json_io::encodeObjectStartMain(sstr,indent);
    rframe::json_io::encode(sstr,"",*this,indent,true);
    rframe::json_io::encodeObjectEnd(sstr,indent,true); // false so as to  not add , at end of string

    return sstr.str();

};

std::basic_ostream<char>& operator<<(std::basic_ostream<char> &s, const turtlesim::SetPenRequest & value)
{
    return s << value.toStr(false);
}


// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:45:00 -0500
//  From Template/Script: data_templates/NMLHeaderTemplate.h
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#ifndef _CODEGEN_TURTLESIM_GENCPPNML_H_
#define _CODEGEN_TURTLESIM_GENCPPNML_H_

#include <messaging/nml/NMLMessageFactory.h>
//#include <DataTypeInfo.h>
#include <messaging/Message.h>

#include "turtlesim_gencpp_NMLSupport.h"

namespace rframe { class DataTypeInfo; };

#include "Color.h"
#include "Pose.h"
#include "KillRequest.h"
#include "KillResponse.h"
#include "Kill.h"
#include "SetPenRequest.h"
#include "SetPenResponse.h"
#include "SetPen.h"
#include "SpawnRequest.h"
#include "SpawnResponse.h"
#include "Spawn.h"
#include "TeleportAbsoluteRequest.h"
#include "TeleportAbsoluteResponse.h"
#include "TeleportAbsolute.h"
#include "TeleportRelativeRequest.h"
#include "TeleportRelativeResponse.h"
#include "TeleportRelative.h"

namespace turtlesim {

    /** definition of message factory for turtlesim_gencpp */
    class turtlesim_gencppNMLMessageFactory : public NMLMessageFactory
    {
    public:
        /** constructor */
        turtlesim_gencppNMLMessageFactory();
        /** destructor */
        virtual ~turtlesim_gencppNMLMessageFactory();

        /** see  rframe::MessageFactoryInterface */
        virtual void dataTypes(std::vector<DataTypeInfo> & ids);
        /** see  rframe::MessageFactoryInterface */
        virtual int dataType(NMLmsg & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<NMLmsg> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateTransport(NMLmsg * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateMessage(MessageBase * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int toTransport( MessageBase & src, NMLmsg & dst);
        /** see  rframe::MessageFactoryInterface */
        virtual int fromTransport( NMLmsg & src, MessageBase & dst);

        /** \return poitner to nml format function */
        virtual NML_FORMAT_PTR FormatPointer();
        /** run constructor for class of type id in the provided buffer */
        virtual int constructBuffer(rframe::ID_TYPE id, void * buffer);
        /** run destructor for class of type id in the buffer */
        virtual int destructBuffer(rframe::ID_TYPE id, void * buffer);
    };

    /** factory allocation function for use when not dynamically loading the factory library  */
    NMLMessageFactory * allocate_turtlesim_gencpp();

    /** NML interface for Color 

    */
    class ColorNML : public NMLmsg
    {
    public:

        /** constructor */
        ColorNML();
        /** destructor */
        ~ColorNML();

        /** assignment operator */
        ColorNML & operator=(const ColorNML &inobj);
        /** assignment operator for base data class */
        ColorNML & operator=(const Color &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Color nmlPayload;

        /** set payload */
        void payload(const Color &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Color> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Color * payload() { return & nmlPayload; };

    //     std::shared_ptr<Color> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Pose 

    */
    class PoseNML : public NMLmsg
    {
    public:

        /** constructor */
        PoseNML();
        /** destructor */
        ~PoseNML();

        /** assignment operator */
        PoseNML & operator=(const PoseNML &inobj);
        /** assignment operator for base data class */
        PoseNML & operator=(const Pose &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Pose nmlPayload;

        /** set payload */
        void payload(const Pose &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Pose> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Pose * payload() { return & nmlPayload; };

    //     std::shared_ptr<Pose> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for KillRequest 

    */
    class KillRequestNML : public NMLmsg
    {
    public:

        /** constructor */
        KillRequestNML();
        /** destructor */
        ~KillRequestNML();

        /** assignment operator */
        KillRequestNML & operator=(const KillRequestNML &inobj);
        /** assignment operator for base data class */
        KillRequestNML & operator=(const KillRequest &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        KillRequest nmlPayload;

        /** set payload */
        void payload(const KillRequest &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<KillRequest> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        KillRequest * payload() { return & nmlPayload; };

    //     std::shared_ptr<KillRequest> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for KillResponse 

    */
    class KillResponseNML : public NMLmsg
    {
    public:

        /** constructor */
        KillResponseNML();
        /** destructor */
        ~KillResponseNML();

        /** assignment operator */
        KillResponseNML & operator=(const KillResponseNML &inobj);
        /** assignment operator for base data class */
        KillResponseNML & operator=(const KillResponse &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        KillResponse nmlPayload;

        /** set payload */
        void payload(const KillResponse &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<KillResponse> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        KillResponse * payload() { return & nmlPayload; };

    //     std::shared_ptr<KillResponse> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Kill 

    */
    class KillNML : public NMLmsg
    {
    public:

        /** constructor */
        KillNML();
        /** destructor */
        ~KillNML();

        /** assignment operator */
        KillNML & operator=(const KillNML &inobj);
        /** assignment operator for base data class */
        KillNML & operator=(const Kill &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Kill nmlPayload;

        /** set payload */
        void payload(const Kill &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Kill> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Kill * payload() { return & nmlPayload; };

    //     std::shared_ptr<Kill> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for SetPenRequest 

    */
    class SetPenRequestNML : public NMLmsg
    {
    public:

        /** constructor */
        SetPenRequestNML();
        /** destructor */
        ~SetPenRequestNML();

        /** assignment operator */
        SetPenRequestNML & operator=(const SetPenRequestNML &inobj);
        /** assignment operator for base data class */
        SetPenRequestNML & operator=(const SetPenRequest &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        SetPenRequest nmlPayload;

        /** set payload */
        void payload(const SetPenRequest &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<SetPenRequest> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        SetPenRequest * payload() { return & nmlPayload; };

    //     std::shared_ptr<SetPenRequest> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for SetPenResponse 

    */
    class SetPenResponseNML : public NMLmsg
    {
    public:

        /** constructor */
        SetPenResponseNML();
        /** destructor */
        ~SetPenResponseNML();

        /** assignment operator */
        SetPenResponseNML & operator=(const SetPenResponseNML &inobj);
        /** assignment operator for base data class */
        SetPenResponseNML & operator=(const SetPenResponse &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        SetPenResponse nmlPayload;

        /** set payload */
        void payload(const SetPenResponse &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<SetPenResponse> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        SetPenResponse * payload() { return & nmlPayload; };

    //     std::shared_ptr<SetPenResponse> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for SetPen 

    */
    class SetPenNML : public NMLmsg
    {
    public:

        /** constructor */
        SetPenNML();
        /** destructor */
        ~SetPenNML();

        /** assignment operator */
        SetPenNML & operator=(const SetPenNML &inobj);
        /** assignment operator for base data class */
        SetPenNML & operator=(const SetPen &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        SetPen nmlPayload;

        /** set payload */
        void payload(const SetPen &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<SetPen> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        SetPen * payload() { return & nmlPayload; };

    //     std::shared_ptr<SetPen> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for SpawnRequest 

    */
    class SpawnRequestNML : public NMLmsg
    {
    public:

        /** constructor */
        SpawnRequestNML();
        /** destructor */
        ~SpawnRequestNML();

        /** assignment operator */
        SpawnRequestNML & operator=(const SpawnRequestNML &inobj);
        /** assignment operator for base data class */
        SpawnRequestNML & operator=(const SpawnRequest &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        SpawnRequest nmlPayload;

        /** set payload */
        void payload(const SpawnRequest &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<SpawnRequest> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        SpawnRequest * payload() { return & nmlPayload; };

    //     std::shared_ptr<SpawnRequest> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for SpawnResponse 

    */
    class SpawnResponseNML : public NMLmsg
    {
    public:

        /** constructor */
        SpawnResponseNML();
        /** destructor */
        ~SpawnResponseNML();

        /** assignment operator */
        SpawnResponseNML & operator=(const SpawnResponseNML &inobj);
        /** assignment operator for base data class */
        SpawnResponseNML & operator=(const SpawnResponse &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        SpawnResponse nmlPayload;

        /** set payload */
        void payload(const SpawnResponse &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<SpawnResponse> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        SpawnResponse * payload() { return & nmlPayload; };

    //     std::shared_ptr<SpawnResponse> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for Spawn 

    */
    class SpawnNML : public NMLmsg
    {
    public:

        /** constructor */
        SpawnNML();
        /** destructor */
        ~SpawnNML();

        /** assignment operator */
        SpawnNML & operator=(const SpawnNML &inobj);
        /** assignment operator for base data class */
        SpawnNML & operator=(const Spawn &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        Spawn nmlPayload;

        /** set payload */
        void payload(const Spawn &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<Spawn> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        Spawn * payload() { return & nmlPayload; };

    //     std::shared_ptr<Spawn> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for TeleportAbsoluteRequest 

    */
    class TeleportAbsoluteRequestNML : public NMLmsg
    {
    public:

        /** constructor */
        TeleportAbsoluteRequestNML();
        /** destructor */
        ~TeleportAbsoluteRequestNML();

        /** assignment operator */
        TeleportAbsoluteRequestNML & operator=(const TeleportAbsoluteRequestNML &inobj);
        /** assignment operator for base data class */
        TeleportAbsoluteRequestNML & operator=(const TeleportAbsoluteRequest &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        TeleportAbsoluteRequest nmlPayload;

        /** set payload */
        void payload(const TeleportAbsoluteRequest &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<TeleportAbsoluteRequest> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        TeleportAbsoluteRequest * payload() { return & nmlPayload; };

    //     std::shared_ptr<TeleportAbsoluteRequest> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for TeleportAbsoluteResponse 

    */
    class TeleportAbsoluteResponseNML : public NMLmsg
    {
    public:

        /** constructor */
        TeleportAbsoluteResponseNML();
        /** destructor */
        ~TeleportAbsoluteResponseNML();

        /** assignment operator */
        TeleportAbsoluteResponseNML & operator=(const TeleportAbsoluteResponseNML &inobj);
        /** assignment operator for base data class */
        TeleportAbsoluteResponseNML & operator=(const TeleportAbsoluteResponse &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        TeleportAbsoluteResponse nmlPayload;

        /** set payload */
        void payload(const TeleportAbsoluteResponse &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<TeleportAbsoluteResponse> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        TeleportAbsoluteResponse * payload() { return & nmlPayload; };

    //     std::shared_ptr<TeleportAbsoluteResponse> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for TeleportAbsolute 

    */
    class TeleportAbsoluteNML : public NMLmsg
    {
    public:

        /** constructor */
        TeleportAbsoluteNML();
        /** destructor */
        ~TeleportAbsoluteNML();

        /** assignment operator */
        TeleportAbsoluteNML & operator=(const TeleportAbsoluteNML &inobj);
        /** assignment operator for base data class */
        TeleportAbsoluteNML & operator=(const TeleportAbsolute &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        TeleportAbsolute nmlPayload;

        /** set payload */
        void payload(const TeleportAbsolute &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<TeleportAbsolute> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        TeleportAbsolute * payload() { return & nmlPayload; };

    //     std::shared_ptr<TeleportAbsolute> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for TeleportRelativeRequest 

    */
    class TeleportRelativeRequestNML : public NMLmsg
    {
    public:

        /** constructor */
        TeleportRelativeRequestNML();
        /** destructor */
        ~TeleportRelativeRequestNML();

        /** assignment operator */
        TeleportRelativeRequestNML & operator=(const TeleportRelativeRequestNML &inobj);
        /** assignment operator for base data class */
        TeleportRelativeRequestNML & operator=(const TeleportRelativeRequest &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        TeleportRelativeRequest nmlPayload;

        /** set payload */
        void payload(const TeleportRelativeRequest &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<TeleportRelativeRequest> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        TeleportRelativeRequest * payload() { return & nmlPayload; };

    //     std::shared_ptr<TeleportRelativeRequest> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for TeleportRelativeResponse 

    */
    class TeleportRelativeResponseNML : public NMLmsg
    {
    public:

        /** constructor */
        TeleportRelativeResponseNML();
        /** destructor */
        ~TeleportRelativeResponseNML();

        /** assignment operator */
        TeleportRelativeResponseNML & operator=(const TeleportRelativeResponseNML &inobj);
        /** assignment operator for base data class */
        TeleportRelativeResponseNML & operator=(const TeleportRelativeResponse &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        TeleportRelativeResponse nmlPayload;

        /** set payload */
        void payload(const TeleportRelativeResponse &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<TeleportRelativeResponse> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        TeleportRelativeResponse * payload() { return & nmlPayload; };

    //     std::shared_ptr<TeleportRelativeResponse> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for TeleportRelative 

    */
    class TeleportRelativeNML : public NMLmsg
    {
    public:

        /** constructor */
        TeleportRelativeNML();
        /** destructor */
        ~TeleportRelativeNML();

        /** assignment operator */
        TeleportRelativeNML & operator=(const TeleportRelativeNML &inobj);
        /** assignment operator for base data class */
        TeleportRelativeNML & operator=(const TeleportRelative &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        TeleportRelative nmlPayload;

        /** set payload */
        void payload(const TeleportRelative &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<TeleportRelative> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        TeleportRelative * payload() { return & nmlPayload; };

    //     std::shared_ptr<TeleportRelative> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    // predeclaration of nmlupdate functions (necessary due to namespaces )

    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, turtlesim::Color & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, turtlesim::Pose & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, turtlesim::KillRequest & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, turtlesim::KillResponse & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, turtlesim::Kill & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, turtlesim::SetPenRequest & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, turtlesim::SetPenResponse & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, turtlesim::SetPen & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, turtlesim::SpawnRequest & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, turtlesim::SpawnResponse & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, turtlesim::Spawn & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, turtlesim::TeleportAbsoluteRequest & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, turtlesim::TeleportAbsoluteResponse & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, turtlesim::TeleportAbsolute & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, turtlesim::TeleportRelativeRequest & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, turtlesim::TeleportRelativeResponse & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, turtlesim::TeleportRelative & inobj);

    /** nml format function */
    int turtlesim_gencpp_format(NMLTYPE type, void * buffer, CMS* cms);

}; // end namespace turtlesim

#endif // _TURTLESIM_GENCPPNML_H_

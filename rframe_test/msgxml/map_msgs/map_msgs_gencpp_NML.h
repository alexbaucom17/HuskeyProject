// 
//  AUTOGENERATED FILE:   do not edit
//
//  Generated by:         alex on alex-laptop, 2016-11-23 12:44:50 -0500
//  From Template/Script: data_templates/NMLHeaderTemplate.h
 
/*
  CTA RIGHTS

  This document contains information proprietary to General Dynamics
  Robotic Systems and is not to be reproduced, transmitted, transferred,
  or otherwise used without the express written consent of General
  Dynamics Robotic Systems except as described below.

  GOVERNMENT PURPOSE RIGHTS

  Contract No.:        W911NF-10-2-0016, Articles of Collaboration,
                       Article 5, Intellectual Property
  Contractor Name:     General Dynamics Robotic Systems, Inc. (GDRS)
  Contractor Address:  1231 Tech Court, Westminster, MD  21157

  Expiration Date - None

  Technical data and computer software first created by Member(s) in
  performance of the Agreement will be disclosed to the Government.
  General Dynamics Robotic Systems retains the entire right, title, and
  interest throughout the world to each subject invention subject to the
  provisions of this clause and 37 CFR Part 401, 32 CFR 32.36, and
  34 CFR 34.25. The Government shall have the right to obtain, reproduce,
  publish or otherwise use the work for Government purposes.

  NON-EXCLUSIVE LICENSE TO CONSORTIUM PARTICIPANTS
  Consortium Members and subawardees are defined as 'Participants'
  Under Article 5.3, Participants are granted a nonexclusive, royalty-
  free, non-sublicenseable, non-assignable, license to Consortium
  Intellectual Property for the limited purpose of performing tasks under
  The Cooperative Agreement, for Government purposes only, and to make and
  have the same made solely for such use.

*/

#ifndef _CODEGEN_MAP_MSGS_GENCPPNML_H_
#define _CODEGEN_MAP_MSGS_GENCPPNML_H_

#include <messaging/nml/NMLMessageFactory.h>
//#include <DataTypeInfo.h>
#include <messaging/Message.h>

#include "map_msgs_gencpp_NMLSupport.h"

namespace rframe { class DataTypeInfo; };

#include "OccupancyGridUpdate.h"
#include "PointCloud2Update.h"
#include "ProjectedMap.h"
#include "ProjectedMapInfo.h"
#include "GetMapROIRequest.h"
#include "GetMapROIResponse.h"
#include "GetMapROI.h"
#include "GetPointMapRequest.h"
#include "GetPointMapResponse.h"
#include "GetPointMap.h"
#include "GetPointMapROIRequest.h"
#include "GetPointMapROIResponse.h"
#include "GetPointMapROI.h"
#include "ProjectedMapsInfo.h"
#include "SaveMap.h"
#include "SetMapProjectionsRequest.h"
#include "SetMapProjectionsResponse.h"
#include "SetMapProjections.h"

namespace map_msgs {

    /** definition of message factory for map_msgs_gencpp */
    class map_msgs_gencppNMLMessageFactory : public NMLMessageFactory
    {
    public:
        /** constructor */
        map_msgs_gencppNMLMessageFactory();
        /** destructor */
        virtual ~map_msgs_gencppNMLMessageFactory();

        /** see  rframe::MessageFactoryInterface */
        virtual void dataTypes(std::vector<DataTypeInfo> & ids);
        /** see  rframe::MessageFactoryInterface */
        virtual int dataType(NMLmsg & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<NMLmsg> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateTransport(NMLmsg * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int allocate(rframe::ID_TYPE id, std::shared_ptr<MessageBase> & msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int deallocateMessage(MessageBase * msg);
        /** see  rframe::MessageFactoryInterface */
        virtual int toTransport( MessageBase & src, NMLmsg & dst);
        /** see  rframe::MessageFactoryInterface */
        virtual int fromTransport( NMLmsg & src, MessageBase & dst);

        /** \return poitner to nml format function */
        virtual NML_FORMAT_PTR FormatPointer();
        /** run constructor for class of type id in the provided buffer */
        virtual int constructBuffer(rframe::ID_TYPE id, void * buffer);
        /** run destructor for class of type id in the buffer */
        virtual int destructBuffer(rframe::ID_TYPE id, void * buffer);
    };

    /** factory allocation function for use when not dynamically loading the factory library  */
    NMLMessageFactory * allocate_map_msgs_gencpp();

    /** NML interface for OccupancyGridUpdate 

    */
    class OccupancyGridUpdateNML : public NMLmsg
    {
    public:

        /** constructor */
        OccupancyGridUpdateNML();
        /** destructor */
        ~OccupancyGridUpdateNML();

        /** assignment operator */
        OccupancyGridUpdateNML & operator=(const OccupancyGridUpdateNML &inobj);
        /** assignment operator for base data class */
        OccupancyGridUpdateNML & operator=(const OccupancyGridUpdate &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        OccupancyGridUpdate nmlPayload;

        /** set payload */
        void payload(const OccupancyGridUpdate &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<OccupancyGridUpdate> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        OccupancyGridUpdate * payload() { return & nmlPayload; };

    //     std::shared_ptr<OccupancyGridUpdate> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for PointCloud2Update 

    */
    class PointCloud2UpdateNML : public NMLmsg
    {
    public:

        /** constructor */
        PointCloud2UpdateNML();
        /** destructor */
        ~PointCloud2UpdateNML();

        /** assignment operator */
        PointCloud2UpdateNML & operator=(const PointCloud2UpdateNML &inobj);
        /** assignment operator for base data class */
        PointCloud2UpdateNML & operator=(const PointCloud2Update &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        PointCloud2Update nmlPayload;

        /** set payload */
        void payload(const PointCloud2Update &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<PointCloud2Update> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        PointCloud2Update * payload() { return & nmlPayload; };

    //     std::shared_ptr<PointCloud2Update> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for ProjectedMap 

    */
    class ProjectedMapNML : public NMLmsg
    {
    public:

        /** constructor */
        ProjectedMapNML();
        /** destructor */
        ~ProjectedMapNML();

        /** assignment operator */
        ProjectedMapNML & operator=(const ProjectedMapNML &inobj);
        /** assignment operator for base data class */
        ProjectedMapNML & operator=(const ProjectedMap &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        ProjectedMap nmlPayload;

        /** set payload */
        void payload(const ProjectedMap &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<ProjectedMap> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        ProjectedMap * payload() { return & nmlPayload; };

    //     std::shared_ptr<ProjectedMap> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for ProjectedMapInfo 

    */
    class ProjectedMapInfoNML : public NMLmsg
    {
    public:

        /** constructor */
        ProjectedMapInfoNML();
        /** destructor */
        ~ProjectedMapInfoNML();

        /** assignment operator */
        ProjectedMapInfoNML & operator=(const ProjectedMapInfoNML &inobj);
        /** assignment operator for base data class */
        ProjectedMapInfoNML & operator=(const ProjectedMapInfo &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        ProjectedMapInfo nmlPayload;

        /** set payload */
        void payload(const ProjectedMapInfo &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<ProjectedMapInfo> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        ProjectedMapInfo * payload() { return & nmlPayload; };

    //     std::shared_ptr<ProjectedMapInfo> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetMapROIRequest 

    */
    class GetMapROIRequestNML : public NMLmsg
    {
    public:

        /** constructor */
        GetMapROIRequestNML();
        /** destructor */
        ~GetMapROIRequestNML();

        /** assignment operator */
        GetMapROIRequestNML & operator=(const GetMapROIRequestNML &inobj);
        /** assignment operator for base data class */
        GetMapROIRequestNML & operator=(const GetMapROIRequest &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetMapROIRequest nmlPayload;

        /** set payload */
        void payload(const GetMapROIRequest &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetMapROIRequest> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetMapROIRequest * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetMapROIRequest> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetMapROIResponse 

    */
    class GetMapROIResponseNML : public NMLmsg
    {
    public:

        /** constructor */
        GetMapROIResponseNML();
        /** destructor */
        ~GetMapROIResponseNML();

        /** assignment operator */
        GetMapROIResponseNML & operator=(const GetMapROIResponseNML &inobj);
        /** assignment operator for base data class */
        GetMapROIResponseNML & operator=(const GetMapROIResponse &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetMapROIResponse nmlPayload;

        /** set payload */
        void payload(const GetMapROIResponse &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetMapROIResponse> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetMapROIResponse * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetMapROIResponse> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetMapROI 

    */
    class GetMapROINML : public NMLmsg
    {
    public:

        /** constructor */
        GetMapROINML();
        /** destructor */
        ~GetMapROINML();

        /** assignment operator */
        GetMapROINML & operator=(const GetMapROINML &inobj);
        /** assignment operator for base data class */
        GetMapROINML & operator=(const GetMapROI &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetMapROI nmlPayload;

        /** set payload */
        void payload(const GetMapROI &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetMapROI> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetMapROI * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetMapROI> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetPointMapRequest 

    */
    class GetPointMapRequestNML : public NMLmsg
    {
    public:

        /** constructor */
        GetPointMapRequestNML();
        /** destructor */
        ~GetPointMapRequestNML();

        /** assignment operator */
        GetPointMapRequestNML & operator=(const GetPointMapRequestNML &inobj);
        /** assignment operator for base data class */
        GetPointMapRequestNML & operator=(const GetPointMapRequest &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetPointMapRequest nmlPayload;

        /** set payload */
        void payload(const GetPointMapRequest &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetPointMapRequest> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetPointMapRequest * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetPointMapRequest> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetPointMapResponse 

    */
    class GetPointMapResponseNML : public NMLmsg
    {
    public:

        /** constructor */
        GetPointMapResponseNML();
        /** destructor */
        ~GetPointMapResponseNML();

        /** assignment operator */
        GetPointMapResponseNML & operator=(const GetPointMapResponseNML &inobj);
        /** assignment operator for base data class */
        GetPointMapResponseNML & operator=(const GetPointMapResponse &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetPointMapResponse nmlPayload;

        /** set payload */
        void payload(const GetPointMapResponse &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetPointMapResponse> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetPointMapResponse * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetPointMapResponse> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetPointMap 

    */
    class GetPointMapNML : public NMLmsg
    {
    public:

        /** constructor */
        GetPointMapNML();
        /** destructor */
        ~GetPointMapNML();

        /** assignment operator */
        GetPointMapNML & operator=(const GetPointMapNML &inobj);
        /** assignment operator for base data class */
        GetPointMapNML & operator=(const GetPointMap &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetPointMap nmlPayload;

        /** set payload */
        void payload(const GetPointMap &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetPointMap> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetPointMap * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetPointMap> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetPointMapROIRequest 

    */
    class GetPointMapROIRequestNML : public NMLmsg
    {
    public:

        /** constructor */
        GetPointMapROIRequestNML();
        /** destructor */
        ~GetPointMapROIRequestNML();

        /** assignment operator */
        GetPointMapROIRequestNML & operator=(const GetPointMapROIRequestNML &inobj);
        /** assignment operator for base data class */
        GetPointMapROIRequestNML & operator=(const GetPointMapROIRequest &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetPointMapROIRequest nmlPayload;

        /** set payload */
        void payload(const GetPointMapROIRequest &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetPointMapROIRequest> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetPointMapROIRequest * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetPointMapROIRequest> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetPointMapROIResponse 

    */
    class GetPointMapROIResponseNML : public NMLmsg
    {
    public:

        /** constructor */
        GetPointMapROIResponseNML();
        /** destructor */
        ~GetPointMapROIResponseNML();

        /** assignment operator */
        GetPointMapROIResponseNML & operator=(const GetPointMapROIResponseNML &inobj);
        /** assignment operator for base data class */
        GetPointMapROIResponseNML & operator=(const GetPointMapROIResponse &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetPointMapROIResponse nmlPayload;

        /** set payload */
        void payload(const GetPointMapROIResponse &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetPointMapROIResponse> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetPointMapROIResponse * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetPointMapROIResponse> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for GetPointMapROI 

    */
    class GetPointMapROINML : public NMLmsg
    {
    public:

        /** constructor */
        GetPointMapROINML();
        /** destructor */
        ~GetPointMapROINML();

        /** assignment operator */
        GetPointMapROINML & operator=(const GetPointMapROINML &inobj);
        /** assignment operator for base data class */
        GetPointMapROINML & operator=(const GetPointMapROI &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        GetPointMapROI nmlPayload;

        /** set payload */
        void payload(const GetPointMapROI &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<GetPointMapROI> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        GetPointMapROI * payload() { return & nmlPayload; };

    //     std::shared_ptr<GetPointMapROI> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for ProjectedMapsInfo 

    */
    class ProjectedMapsInfoNML : public NMLmsg
    {
    public:

        /** constructor */
        ProjectedMapsInfoNML();
        /** destructor */
        ~ProjectedMapsInfoNML();

        /** assignment operator */
        ProjectedMapsInfoNML & operator=(const ProjectedMapsInfoNML &inobj);
        /** assignment operator for base data class */
        ProjectedMapsInfoNML & operator=(const ProjectedMapsInfo &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        ProjectedMapsInfo nmlPayload;

        /** set payload */
        void payload(const ProjectedMapsInfo &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<ProjectedMapsInfo> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        ProjectedMapsInfo * payload() { return & nmlPayload; };

    //     std::shared_ptr<ProjectedMapsInfo> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for SaveMap 

    */
    class SaveMapNML : public NMLmsg
    {
    public:

        /** constructor */
        SaveMapNML();
        /** destructor */
        ~SaveMapNML();

        /** assignment operator */
        SaveMapNML & operator=(const SaveMapNML &inobj);
        /** assignment operator for base data class */
        SaveMapNML & operator=(const SaveMap &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        SaveMap nmlPayload;

        /** set payload */
        void payload(const SaveMap &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<SaveMap> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        SaveMap * payload() { return & nmlPayload; };

    //     std::shared_ptr<SaveMap> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for SetMapProjectionsRequest 

    */
    class SetMapProjectionsRequestNML : public NMLmsg
    {
    public:

        /** constructor */
        SetMapProjectionsRequestNML();
        /** destructor */
        ~SetMapProjectionsRequestNML();

        /** assignment operator */
        SetMapProjectionsRequestNML & operator=(const SetMapProjectionsRequestNML &inobj);
        /** assignment operator for base data class */
        SetMapProjectionsRequestNML & operator=(const SetMapProjectionsRequest &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        SetMapProjectionsRequest nmlPayload;

        /** set payload */
        void payload(const SetMapProjectionsRequest &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<SetMapProjectionsRequest> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        SetMapProjectionsRequest * payload() { return & nmlPayload; };

    //     std::shared_ptr<SetMapProjectionsRequest> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for SetMapProjectionsResponse 

    */
    class SetMapProjectionsResponseNML : public NMLmsg
    {
    public:

        /** constructor */
        SetMapProjectionsResponseNML();
        /** destructor */
        ~SetMapProjectionsResponseNML();

        /** assignment operator */
        SetMapProjectionsResponseNML & operator=(const SetMapProjectionsResponseNML &inobj);
        /** assignment operator for base data class */
        SetMapProjectionsResponseNML & operator=(const SetMapProjectionsResponse &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        SetMapProjectionsResponse nmlPayload;

        /** set payload */
        void payload(const SetMapProjectionsResponse &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<SetMapProjectionsResponse> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        SetMapProjectionsResponse * payload() { return & nmlPayload; };

    //     std::shared_ptr<SetMapProjectionsResponse> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    /** NML interface for SetMapProjections 

    */
    class SetMapProjectionsNML : public NMLmsg
    {
    public:

        /** constructor */
        SetMapProjectionsNML();
        /** destructor */
        ~SetMapProjectionsNML();

        /** assignment operator */
        SetMapProjectionsNML & operator=(const SetMapProjectionsNML &inobj);
        /** assignment operator for base data class */
        SetMapProjectionsNML & operator=(const SetMapProjections &inobj);

        /** static flag, if true boost serialization should be used to serialize this message */
        static const bool useBoost = true;

        /** nml serialization access */
        void update( CMS*);

        /** message version, used to verify message versions match on read */
        unsigned int nmlVersion;
        /** timestamp of message creation */
        double nmlTimestamp;
        /** id of module which sent the message */
        rframe::ID_TYPE nmlModuleId;

        /** nml payload */
        SetMapProjections nmlPayload;

        /** set payload */
        void payload(const SetMapProjections &data) 
        {
            nmlPayload = data;
        };

        /** set payload from shared_ptr */
        void payload(std::shared_ptr<SetMapProjections> & data)
        {
            nmlPayload = *data.get();
        };

        /** \return pointer to nml payload */
        SetMapProjections * payload() { return & nmlPayload; };

    //     std::shared_ptr<SetMapProjections> nmlPayload; reminder that nmlPayload used to be a pointer
    // but the only way this could work well is if we knew to instantiate it due to dataTypeFlat()
    // which we cannot know until compile/run time...
    };

    // predeclaration of nmlupdate functions (necessary due to namespaces )

    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, map_msgs::OccupancyGridUpdate & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, map_msgs::PointCloud2Update & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, map_msgs::ProjectedMap & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, map_msgs::ProjectedMapInfo & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, map_msgs::GetMapROIRequest & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, map_msgs::GetMapROIResponse & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, map_msgs::GetMapROI & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, map_msgs::GetPointMapRequest & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, map_msgs::GetPointMapResponse & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, map_msgs::GetPointMap & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, map_msgs::GetPointMapROIRequest & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, map_msgs::GetPointMapROIResponse & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, map_msgs::GetPointMapROI & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, map_msgs::ProjectedMapsInfo & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, map_msgs::SaveMap & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, map_msgs::SetMapProjectionsRequest & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, map_msgs::SetMapProjectionsResponse & inobj);
    /** serialize a message to/from a buffer 
     \param cms buffer data structure to be serailized to/from
     \param inobj object to be serialized*/
    void nmlupdate(CMS *cms, map_msgs::SetMapProjections & inobj);

    /** nml format function */
    int map_msgs_gencpp_format(NMLTYPE type, void * buffer, CMS* cms);

}; // end namespace map_msgs

#endif // _MAP_MSGS_GENCPPNML_H_
